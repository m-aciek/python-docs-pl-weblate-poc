# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-09 22:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr ""

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See "
":ref:`implementations` for further resources."
msgstr ""

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr ""

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../../using/cmdline.rst:29
msgid "The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr ""

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for"
" commands and executes them until an EOF (an end-of-file character, you "
"can produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on "
"Windows) is read."
msgstr ""

#: ../../using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, "
"it reads and executes a script from that file."
msgstr ""

#: ../../using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""

#: ../../using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) "
"given as *command*.  Here *command* may contain multiple statements "
"separated by newlines. Leading whitespace is significant in Python "
"statements!"
msgstr ""

#: ../../using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""

#: ../../using/cmdline.rst:55
msgid "In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../../using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` --"
" note that the first element, subscript zero (``sys.argv[0]``), is a "
"string reflecting the program's source."
msgstr ""

#: ../../using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as "
"in normal module code."
msgstr ""

#: ../../using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-c\"`` and the current directory will be added to the start of "
":data:`sys.path` (allowing modules in that directory to be imported as "
"top level modules)."
msgstr ""

#: ../../using/cmdline.rst:73
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_command`` with "
"argument ``command``."
msgstr ""

#: ../../using/cmdline.rst:77
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:80
msgid ""
"Since the argument is a *module* name, you must not give a file extension"
" (``.py``).  The module name should be a valid absolute Python module "
"name, but the implementation may not always enforce this (e.g. it may "
"allow you to use a name that includes a hyphen)."
msgstr ""

#: ../../using/cmdline.rst:85
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will"
" execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are"
" passed to the interpreter as the script argument."
msgstr ""

#: ../../using/cmdline.rst:94
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can"
" still be used for precompiled modules, even if the original source file "
"is not available."
msgstr ""

#: ../../using/cmdline.rst:99
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"the full path to the module file (while the module file is being located,"
" the first element will be set to ``\"-m\"``). As with the :option:`-c` "
"option, the current directory will be added to the start of "
":data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:104
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where"
" :data:`sys.path` contains neither the current directory nor the user's "
"site-packages directory. All :envvar:`PYTHON*` environment variables are "
"ignored, too."
msgstr ""

#: ../../using/cmdline.rst:109
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../../using/cmdline.rst:116
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_module`` with "
"argument ``module-name``."
msgstr ""

#: ../../using/cmdline.rst:119
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../../using/cmdline.rst:119 ../../using/cmdline.rst:171
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../../using/cmdline.rst:121
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../../using/cmdline.rst:123
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../../using/cmdline.rst:126
msgid "namespace packages are also supported"
msgstr ""

#: ../../using/cmdline.rst:133
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input"
" is a terminal, :option:`-i` is implied."
msgstr ""

#: ../../using/cmdline.rst:136
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-\"`` and the current directory will be added to the start of "
":data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:140
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""

#: ../../using/cmdline.rst:146
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem"
" path (absolute or relative) referring to either a Python file, a "
"directory containing a ``__main__.py`` file, or a zipfile containing a "
"``__main__.py`` file."
msgstr ""

#: ../../using/cmdline.rst:151
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"the script name as given on the command line."
msgstr ""

#: ../../using/cmdline.rst:154
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the "
"file is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:158
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in "
"that location is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:162
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where"
" :data:`sys.path` contains neither the script's directory nor the user's "
"site-packages directory. All :envvar:`PYTHON*` environment variables are "
"ignored, too."
msgstr ""

#: ../../using/cmdline.rst:168
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_file`` with "
"argument ``filename``."
msgstr ""

#: ../../using/cmdline.rst:170
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../../using/cmdline.rst:174
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]``"
" is an empty string (``\"\"``) and the current directory will be added to"
" the start of :data:`sys.path`.  Also, tab-completion and history editing"
" is automatically enabled, if available on your platform (see :ref"
":`rlcompleter-config`)."
msgstr ""

#: ../../using/cmdline.rst:180
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../../using/cmdline.rst:182
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../../using/cmdline.rst:187
msgid "Generic options"
msgstr ""

#: ../../using/cmdline.rst:193
msgid "Print a short description of all command line options."
msgstr ""

#: ../../using/cmdline.rst:199
msgid "Print the Python version number and exit.  Example output could be:"
msgstr ""

#: ../../using/cmdline.rst:205
msgid "When given twice, print more information about the build, like:"
msgstr ""

#: ../../using/cmdline.rst:212
msgid "The ``-VV`` option."
msgstr ""

#: ../../using/cmdline.rst:218
msgid "Miscellaneous options"
msgstr ""

#: ../../using/cmdline.rst:222
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with "
":class:`str` or :class:`bytes` with :class:`int`.  Issue an error when "
"the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:226
msgid "Affects comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../../using/cmdline.rst:231
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of "
"source modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../../using/cmdline.rst:237
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files. See :ref"
":`pyc-invalidation`. When set to ``default``, checked and unchecked hash-"
"based bytecode cache files are validated according to their default "
"semantics. When set to ``always``, all hash-based ``.pyc`` files, whether"
" checked or unchecked, are validated against their corresponding source "
"file. When set to ``never``, hash-based ``.pyc`` files are not validated "
"against their corresponding source files."
msgstr ""

#: ../../using/cmdline.rst:245
msgid ""
"The semantics of timestamp-based ``.pyc`` files are unaffected by this "
"option."
msgstr ""

#: ../../using/cmdline.rst:251
msgid ""
"Turn on parser debugging output (for expert only, depending on "
"compilation options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""

#: ../../using/cmdline.rst:257
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. "
":envvar:`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:263
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, "
"even when :data:`sys.stdin` does not appear to be a terminal.  The "
":envvar:`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../../using/cmdline.rst:268
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../../using/cmdline.rst:274
msgid ""
"Run Python in isolated mode. This also implies -E and -s. In isolated "
"mode :data:`sys.path` contains neither the script's directory nor the "
"user's site-packages directory. All :envvar:`PYTHON*` environment "
"variables are ignored, too. Further restrictions may be imposed to "
"prevent the user from injecting malicious code."
msgstr ""

#: ../../using/cmdline.rst:285
msgid ""
"Remove assert statements and any code conditional on the value of "
":const:`__debug__`.  Augment the filename for compiled (:term:`bytecode`)"
" files by adding ``.opt-1`` before the ``.pyc`` extension (see "
":pep:`488`).  See also :envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:290 ../../using/cmdline.rst:300
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr ""

#: ../../using/cmdline.rst:296
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the "
"``.pyc`` extension (see :pep:`488`)."
msgstr ""

#: ../../using/cmdline.rst:306
msgid "Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../../using/cmdline.rst:313
msgid ""
"Turn on hash randomization. This option only has an effect if the "
":envvar:`PYTHONHASHSEED` environment variable is set to ``0``, since hash"
" randomization is enabled by default."
msgstr ""

#: ../../using/cmdline.rst:317
msgid ""
"On previous versions of Python, this option turns on hash randomization, "
"so that the :meth:`__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:323
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully-chosen inputs that exploit the worst case "
"performance of a dict construction, O(n^2) complexity.  See "
"http://www.ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:328
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash "
"seed secret."
msgstr ""

#: ../../using/cmdline.rst:331
msgid "The option is no longer ignored."
msgstr ""

#: ../../using/cmdline.rst:339
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to "
":data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:344 ../../using/cmdline.rst:675
#: ../../using/cmdline.rst:687
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../../using/cmdline.rst:349
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call "
":func:`site.main` if you want them to be triggered)."
msgstr ""

#: ../../using/cmdline.rst:357
msgid ""
"Force the stdout and stderr streams to be unbuffered.  This option has no"
" effect on the stdin stream."
msgstr ""

#: ../../using/cmdline.rst:360
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ""

#: ../../using/cmdline.rst:362
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr ""

#: ../../using/cmdline.rst:368
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice "
"(:option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../../using/cmdline.rst:378
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the "
"following form:"
msgstr ""

#: ../../using/cmdline.rst:386
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr ""

#: ../../using/cmdline.rst:389
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more "
"than one option, the action for the last matching option is performed.  "
"Invalid :option:`-W` options are ignored (though, a warning message is "
"printed about invalid options when the first warning is issued)."
msgstr ""

#: ../../using/cmdline.rst:394
msgid ""
"Warnings can also be controlled using the :envvar:`PYTHONWARNINGS` "
"environment variable and from within a Python program using the "
":mod:`warnings` module."
msgstr ""

#: ../../using/cmdline.rst:398 ../../using/cmdline.rst:703
msgid ""
"The simplest settings apply a particular action unconditionally to all "
"warnings emitted by a process (even those that are otherwise ignored by "
"default)::"
msgstr ""

#: ../../using/cmdline.rst:409
msgid ""
"The action names can be abbreviated as desired (e.g. ``-Wi``, ``-Wd``, "
"``-Wa``, ``-We``) and the interpreter will resolve them to the "
"appropriate action name."
msgstr ""

#: ../../using/cmdline.rst:413 ../../using/cmdline.rst:714
msgid ""
"See :ref:`warning-filter` and :ref:`describing-warning-filters` for more "
"details."
msgstr ""

#: ../../using/cmdline.rst:419
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of "
"``#!cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../../using/cmdline.rst:425
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""

#: ../../using/cmdline.rst:428
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr ""

#: ../../using/cmdline.rst:429
msgid ""
"``-X showrefcount`` to output the total reference count and number of "
"used memory blocks when the program finishes or after each statement in "
"the interactive interpreter. This only works on debug builds."
msgstr ""

#: ../../using/cmdline.rst:432
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the "
":mod:`tracemalloc` module. By default, only the most recent frame is "
"stored in a traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start "
"tracing with a traceback limit of *NFRAME* frames. See the "
":func:`tracemalloc.start` for more information."
msgstr ""

#: ../../using/cmdline.rst:437
msgid ""
"``-X showalloccount`` to output the total count of allocated objects for "
"each type when the program finishes. This only works when Python was "
"built with ``COUNT_ALLOCS`` defined."
msgstr ""

#: ../../using/cmdline.rst:440
msgid ""
"``-X importtime`` to show how long each import takes. It shows module "
"name, cumulative time (including nested imports) and self time (excluding"
" nested imports).  Note that its output may be broken in multi-threaded "
"application.  Typical usage is ``python3 -X importtime -c 'import "
"asyncio'``.  See also :envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""

#: ../../using/cmdline.rst:445
msgid ""
"``-X dev``: enable CPython's \"development mode\", introducing additional"
" runtime checks which are too expensive to be enabled by default. It "
"should not be more verbose than the default if the code is correct: new "
"warnings are only emitted when an issue is detected. Effect of the "
"developer mode:"
msgstr ""

#: ../../using/cmdline.rst:450
msgid "Add ``default`` warning filter, as :option:`-W` ``default``."
msgstr ""

#: ../../using/cmdline.rst:451
msgid ""
"Install debug hooks on memory allocators: see the "
":c:func:`PyMem_SetupDebugHooks` C function."
msgstr ""

#: ../../using/cmdline.rst:453
msgid ""
"Enable the :mod:`faulthandler` module to dump the Python traceback on a "
"crash."
msgstr ""

#: ../../using/cmdline.rst:455
msgid "Enable :ref:`asyncio debug mode <asyncio-debug-mode>`."
msgstr ""

#: ../../using/cmdline.rst:456
msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :attr:`sys.flags` to "
"``True``."
msgstr ""

#: ../../using/cmdline.rst:458
msgid ":class:`io.IOBase` destructor logs ``close()`` exceptions."
msgstr ""

#: ../../using/cmdline.rst:460
msgid ""
"``-X utf8`` enables UTF-8 mode for operating system interfaces, "
"overriding the default locale-aware mode. ``-X utf8=0`` explicitly "
"disables UTF-8 mode (even when it would otherwise activate "
"automatically). See :envvar:`PYTHONUTF8` for more details."
msgstr ""

#: ../../using/cmdline.rst:464
msgid ""
"``-X pycache_prefix=PATH`` enables writing ``.pyc`` files to a parallel "
"tree rooted at the given directory instead of to the code tree. See also "
":envvar:`PYTHONPYCACHEPREFIX`."
msgstr ""

#: ../../using/cmdline.rst:468
msgid ""
"It also allows passing arbitrary values and retrieving them through the "
":data:`sys._xoptions` dictionary."
msgstr ""

#: ../../using/cmdline.rst:471
msgid "The :option:`-X` option was added."
msgstr ""

#: ../../using/cmdline.rst:474
msgid "The ``-X faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:477
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr ""

#: ../../using/cmdline.rst:480
msgid "The ``-X showalloccount`` option."
msgstr ""

#: ../../using/cmdline.rst:483
msgid "The ``-X importtime``, ``-X dev`` and ``-X utf8`` options."
msgstr ""

#: ../../using/cmdline.rst:486
msgid ""
"The ``-X pycache_prefix`` option. The ``-X dev`` option now logs "
"``close()`` exceptions in :class:`io.IOBase` destructor."
msgstr ""

#: ../../using/cmdline.rst:492
msgid "Options you shouldn't use"
msgstr ""

#: ../../using/cmdline.rst:496
msgid "Reserved for use by Jython_."
msgstr ""

#: ../../using/cmdline.rst:504
msgid "Environment variables"
msgstr ""

#: ../../using/cmdline.rst:506
msgid ""
"These environment variables influence Python's behavior, they are "
"processed before the command-line switches other than -E or -I.  It is "
"customary that command-line switches override environmental variables "
"where there is a conflict."
msgstr ""

#: ../../using/cmdline.rst:513
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and "
":file:`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and "
":file:`{exec_prefix}` are installation-dependent directories, both "
"defaulting to :file:`/usr/local`."
msgstr ""

#: ../../using/cmdline.rst:519
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value "
"replaces both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify "
"different values for these, set :envvar:`PYTHONHOME` to "
":file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../../using/cmdline.rst:526
msgid ""
"Augment the default search path for module files.  The format is the same"
" as the shell's :envvar:`PATH`: one or more directory pathnames separated"
" by :data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). "
"Non-existent directories are silently ignored."
msgstr ""

#: ../../using/cmdline.rst:531
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` "
"entries may refer to zipfiles containing pure Python modules (in either "
"source or compiled form). Extension modules cannot be imported from "
"zipfiles."
msgstr ""

#: ../../using/cmdline.rst:535
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` "
"above).  It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../../using/cmdline.rst:539
msgid ""
"An additional directory will be inserted in the search path in front of "
":envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program"
" as the variable :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:547
msgid ""
"If this is the name of a readable file, the Python commands in that file "
"are executed before the first prompt is displayed in interactive mode.  "
"The file is executed in the same namespace where interactive commands are"
" executed so that objects defined or imported in it can be used without "
"qualification in the interactive session.  You can also change the "
"prompts :data:`sys.ps1` and :data:`sys.ps2` and the hook "
":data:`sys.__interactivehook__` in this file."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with "
"argument ``filename``."
msgstr ""

#: ../../using/cmdline.rst:556
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with "
"the filename as the argument when called on startup."
msgstr ""

#: ../../using/cmdline.rst:562
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-O` option.  If set to an integer, it is equivalent to "
"specifying :option:`-O` multiple times."
msgstr ""

#: ../../using/cmdline.rst:569
msgid ""
"If this is set, it names a callable using dotted-path notation.  The "
"module containing the callable will be imported and then the callable "
"will be run by the default implementation of :func:`sys.breakpointhook` "
"which itself is called by built-in :func:`breakpoint`.  If not set, or "
"set to the empty string, it is equivalent to the value \"pdb.set_trace\"."
"  Setting this to the string \"0\" causes the default implementation of "
":func:`sys.breakpointhook` to do nothing but return immediately."
msgstr ""

#: ../../using/cmdline.rst:581
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-d` option.  If set to an integer, it is equivalent to "
"specifying :option:`-d` multiple times."
msgstr ""

#: ../../using/cmdline.rst:588
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-i` option."
msgstr ""

#: ../../using/cmdline.rst:591
msgid ""
"This variable can also be modified by Python code using "
":data:`os.environ` to force inspect mode on program termination."
msgstr ""

#: ../../using/cmdline.rst:597
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-u` option."
msgstr ""

#: ../../using/cmdline.rst:603
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-v` option.  If set to an integer, it is equivalent to "
"specifying :option:`-v` multiple times."
msgstr ""

#: ../../using/cmdline.rst:610
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  "
"This only works on Windows and OS X."
msgstr ""

#: ../../using/cmdline.rst:616
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""

#: ../../using/cmdline.rst:623
msgid ""
"If this is set, Python will write ``.pyc`` files in a mirror directory "
"tree at this path, instead of in ``__pycache__`` directories within the "
"source tree. This is equivalent to specifying the :option:`-X` "
"``pycache_prefix=PATH`` option."
msgstr ""

#: ../../using/cmdline.rst:633
msgid ""
"If this variable is not set or set to ``random``, a random value is used "
"to seed the hashes of str and bytes objects."
msgstr ""

#: ../../using/cmdline.rst:636
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../../using/cmdline.rst:640
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the"
" interpreter itself, or to allow a cluster of python processes to share "
"hash values."
msgstr ""

#: ../../using/cmdline.rst:644
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../../using/cmdline.rst:652
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax "
"``encodingname:errorhandler``.  Both the ``encodingname`` and the "
"``:errorhandler`` parts are optional and have the same meaning as in "
":func:`str.encode`."
msgstr ""

#: ../../using/cmdline.rst:657
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will "
"always be ``'backslashreplace'``."
msgstr ""

#: ../../using/cmdline.rst:660
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../../using/cmdline.rst:663
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams "
"are not affected."
msgstr ""

#: ../../using/cmdline.rst:670
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:680
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used "
"to compute the path of the :data:`user site-packages directory "
"<site.USER_SITE>` and :ref:`Distutils installation paths <inst-alt-"
"install-user>` for ``python setup.py install --user``."
msgstr ""

#: ../../using/cmdline.rst:692
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac "
"OS X."
msgstr ""

#: ../../using/cmdline.rst:698
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma "
"separated string, it is equivalent to specifying :option:`-W` multiple "
"times, with filters later in the list taking precedence over those "
"earlier in the list."
msgstr ""

#: ../../using/cmdline.rst:720
msgid ""
"If this environment variable is set to a non-empty string, "
":func:`faulthandler.enable` is called at startup: install a handler for "
":const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and "
":const:`SIGILL` signals to dump the Python traceback.  This is equivalent"
" to :option:`-X` ``faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:731
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value "
"of the variable is the maximum number of frames stored in a traceback of "
"a trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent"
" frame. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../../using/cmdline.rst:742
msgid ""
"If this environment variable is set to a non-empty string, Python will "
"show how long each import takes.  This is exactly equivalent to setting "
"``-X importtime`` on the command line."
msgstr ""

#: ../../using/cmdline.rst:751
msgid ""
"If this environment variable is set to a non-empty string, enable the "
":ref:`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../../using/cmdline.rst:759
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:761
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../../using/cmdline.rst:763
msgid ""
"``default``: use the :ref:`default memory allocators <default-memory-"
"allocators>`."
msgstr ""

#: ../../using/cmdline.rst:765
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:data:`PYMEM_DOMAIN_RAW`, :c:data:`PYMEM_DOMAIN_MEM`, "
":c:data:`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:768
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for "
":c:data:`PYMEM_DOMAIN_MEM` and :c:data:`PYMEM_DOMAIN_OBJ` domains and use"
" the :c:func:`malloc` function for the :c:data:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:772
msgid "Install debug hooks:"
msgstr ""

#: ../../using/cmdline.rst:774
msgid ""
"``debug``: install debug hooks on top of the :ref:`default memory "
"allocators <default-memory-allocators>`."
msgstr ""

#: ../../using/cmdline.rst:776
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:777
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:779
msgid ""
"See the :ref:`default memory allocators <default-memory-allocators>` and "
"the :c:func:`PyMem_SetupDebugHooks` function (install debug hooks on "
"Python memory allocators)."
msgstr ""

#: ../../using/cmdline.rst:783
msgid "Added the ``\"default\"`` allocator."
msgstr ""

#: ../../using/cmdline.rst:791
msgid ""
"If set to a non-empty string, Python will print statistics of the "
":ref:`pymalloc memory allocator <pymalloc>` every time a new pymalloc "
"object arena is created, and on shutdown."
msgstr ""

#: ../../using/cmdline.rst:795
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment "
"variable is used to force the :c:func:`malloc` allocator of the C "
"library, or if Python is configured without ``pymalloc`` support."
msgstr ""

#: ../../using/cmdline.rst:799
msgid ""
"This variable can now also be used on Python compiled in release mode. It"
" now has no effect if set to an empty string."
msgstr ""

#: ../../using/cmdline.rst:806
msgid ""
"If set to a non-empty string, the default filesystem encoding and errors "
"mode will revert to their pre-3.6 values of 'mbcs' and 'replace', "
"respectively. Otherwise, the new defaults 'utf-8' and 'surrogatepass' are"
" used."
msgstr ""

#: ../../using/cmdline.rst:810
msgid ""
"This may also be enabled at runtime with "
":func:`sys._enablelegacywindowsfsencoding()`."
msgstr ""

#: ../../using/cmdline.rst:814 ../../using/cmdline.rst:828
msgid ":ref:`Availability <availability>`: Windows."
msgstr ""

#: ../../using/cmdline.rst:815
msgid "See :pep:`529` for more details."
msgstr ""

#: ../../using/cmdline.rst:820
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to "
"the active console code page, rather than using utf-8."
msgstr ""

#: ../../using/cmdline.rst:824
msgid ""
"This variable is ignored if the standard streams are redirected (to files"
" or pipes) rather than referring to console buffers."
msgstr ""

#: ../../using/cmdline.rst:834
msgid ""
"If set to the value ``0``, causes the main Python command line "
"application to skip coercing the legacy ASCII-based C and POSIX locales "
"to a more capable UTF-8 based alternative."
msgstr ""

#: ../../using/cmdline.rst:838
msgid ""
"If this variable is *not* set (or is set to a value other than ``0``), "
"the ``LC_ALL`` locale override environment variable is also not set, and "
"the current locale reported for the ``LC_CTYPE`` category is either the "
"default ``C`` locale, or else the explicitly ASCII-based ``POSIX`` "
"locale, then the Python CLI will attempt to configure the following "
"locales for the ``LC_CTYPE`` category in the order listed before loading "
"the interpreter runtime:"
msgstr ""

#: ../../using/cmdline.rst:846
msgid "``C.UTF-8``"
msgstr ""

#: ../../using/cmdline.rst:847
msgid "``C.utf8``"
msgstr ""

#: ../../using/cmdline.rst:848
msgid "``UTF-8``"
msgstr ""

#: ../../using/cmdline.rst:850
msgid ""
"If setting one of these locale categories succeeds, then the ``LC_CTYPE``"
" environment variable will also be set accordingly in the current process"
" environment before the Python runtime is initialized. This ensures that "
"in addition to being seen by both the interpreter itself and other "
"locale-aware components running in the same process (such as the GNU "
"``readline`` library), the updated setting is also seen in subprocesses "
"(regardless of whether or not those processes are running a Python "
"interpreter), as well as in operations that query the environment rather "
"than the current C locale (such as Python's own "
":func:`locale.getdefaultlocale`)."
msgstr ""

#: ../../using/cmdline.rst:860
msgid ""
"Configuring one of these locales (either explicitly or via the above "
"implicit locale coercion) automatically enables the ``surrogateescape`` "
":ref:`error handler <error-handlers>` for :data:`sys.stdin` and "
":data:`sys.stdout` (:data:`sys.stderr` continues to use "
"``backslashreplace`` as it does in any other locale). This stream "
"handling behavior can be overridden using :envvar:`PYTHONIOENCODING` as "
"usual."
msgstr ""

#: ../../using/cmdline.rst:867
msgid ""
"For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause "
"Python to emit warning messages on ``stderr`` if either the locale "
"coercion activates, or else if a locale that *would* have triggered "
"coercion is still active when the Python runtime is initialized."
msgstr ""

#: ../../using/cmdline.rst:872
msgid ""
"Also note that even when locale coercion is disabled, or when it fails to"
" find a suitable target locale, :envvar:`PYTHONUTF8` will still activate "
"by default in legacy ASCII-based locales. Both features must be disabled "
"in order to force the interpreter to use ``ASCII`` instead of ``UTF-8`` "
"for system interfaces."
msgstr ""

#: ../../using/cmdline.rst:879
msgid ":ref:`Availability <availability>`: \\*nix."
msgstr ""

#: ../../using/cmdline.rst:880
msgid "See :pep:`538` for more details."
msgstr ""

#: ../../using/cmdline.rst:886
msgid ""
"If this environment variable is set to a non-empty string, enable the "
"CPython \"development mode\". See the :option:`-X` ``dev`` option."
msgstr ""

#: ../../using/cmdline.rst:893
msgid ""
"If set to ``1``, enables the interpreter's UTF-8 mode, where ``UTF-8`` is"
" used as the text encoding for system interfaces, regardless of the "
"current locale setting."
msgstr ""

#: ../../using/cmdline.rst:897
msgid "This means that:"
msgstr ""

#: ../../using/cmdline.rst:899
msgid ""
":func:`sys.getfilesystemencoding()` returns ``'UTF-8'`` (the locale "
"encoding is ignored)."
msgstr ""

#: ../../using/cmdline.rst:901
msgid ""
":func:`locale.getpreferredencoding()` returns ``'UTF-8'`` (the locale "
"encoding is ignored, and the function's ``do_setlocale`` parameter has no"
" effect)."
msgstr ""

#: ../../using/cmdline.rst:904
msgid ""
":data:`sys.stdin`, :data:`sys.stdout`, and :data:`sys.stderr` all use "
"UTF-8 as their text encoding, with the ``surrogateescape`` :ref:`error "
"handler <error-handlers>` being enabled for :data:`sys.stdin` and "
":data:`sys.stdout` (:data:`sys.stderr` continues to use "
"``backslashreplace`` as it does in the default locale-aware mode)"
msgstr ""

#: ../../using/cmdline.rst:910
msgid ""
"As a consequence of the changes in those lower level APIs, other higher "
"level APIs also exhibit different default behaviours:"
msgstr ""

#: ../../using/cmdline.rst:913
msgid ""
"Command line arguments, environment variables and filenames are decoded "
"to text using the UTF-8 encoding."
msgstr ""

#: ../../using/cmdline.rst:915
msgid ":func:`os.fsdecode()` and :func:`os.fsencode()` use the UTF-8 encoding."
msgstr ""

#: ../../using/cmdline.rst:916
msgid ""
":func:`open()`, :func:`io.open()`, and :func:`codecs.open()` use the "
"UTF-8 encoding by default. However, they still use the strict error "
"handler by default so that attempting to open a binary file in text mode "
"is likely to raise an exception rather than producing nonsense data."
msgstr ""

#: ../../using/cmdline.rst:921
msgid ""
"Note that the standard stream settings in UTF-8 mode can be overridden by"
" :envvar:`PYTHONIOENCODING` (just as they can be in the default locale-"
"aware mode)."
msgstr ""

#: ../../using/cmdline.rst:925
msgid "If set to ``0``, the interpreter runs in its default locale-aware mode."
msgstr ""

#: ../../using/cmdline.rst:927
msgid ""
"Setting any other non-empty string causes an error during interpreter "
"initialisation."
msgstr ""

#: ../../using/cmdline.rst:930
msgid ""
"If this environment variable is not set at all, then the interpreter "
"defaults to using the current locale settings, *unless* the current "
"locale is identified as a legacy ASCII-based locale (as described for "
":envvar:`PYTHONCOERCECLOCALE`), and locale coercion is either disabled or"
" fails. In such legacy locales, the interpreter will default to enabling "
"UTF-8 mode unless explicitly instructed not to do so."
msgstr ""

#: ../../using/cmdline.rst:937
msgid "Also available as the :option:`-X` ``utf8`` option."
msgstr ""

#: ../../using/cmdline.rst:939
msgid "See :pep:`540` for more details."
msgstr ""

#: ../../using/cmdline.rst:944
msgid "Debug-mode variables"
msgstr ""

#: ../../using/cmdline.rst:946
msgid "Setting these variables only has an effect in a debug build of Python."
msgstr ""

#: ../../using/cmdline.rst:950
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../../using/cmdline.rst:952
msgid "Need Python configured with the ``--with-pydebug`` build option."
msgstr ""

#: ../../using/cmdline.rst:957
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#: ../../using/cmdline.rst:960
msgid "Need Python configured with the ``--with-trace-refs`` build option."
msgstr ""

#: ../../using/editors.rst:7
msgid "Editors and IDEs"
msgstr ""

#: ../../using/editors.rst:9
msgid ""
"There are a number of IDEs that support Python programming language. Many"
" editors and IDEs provide syntax highlighting, debugging tools, and "
":pep:`8` checks."
msgstr ""

#: ../../using/editors.rst:12
msgid ""
"Please go to `Python Editors "
"<https://wiki.python.org/moin/PythonEditors>`_ and `Integrated "
"Development Environments "
"<https://wiki.python.org/moin/IntegratedDevelopmentEnvironments>`_ for a "
"comprehensive list."
msgstr ""

#: ../../using/index.rst:5
msgid "Python Setup and Usage"
msgstr ""

#: ../../using/index.rst:8
msgid ""
"This part of the documentation is devoted to general information on the "
"setup of the Python environment on different platforms, the invocation of"
" the interpreter and things that make working with Python easier."
msgstr ""

#: ../../using/mac.rst:6
msgid "Using Python on a Macintosh"
msgstr ""

#: ../../using/mac.rst
msgid "Author"
msgstr ""

#: ../../using/mac.rst:8
msgid "Bob Savage <bobsavage@mac.com>"
msgstr ""

#: ../../using/mac.rst:11
msgid ""
"Python on a Macintosh running Mac OS X is in principle very similar to "
"Python on any other Unix platform, but there are a number of additional "
"features such as the IDE and the Package Manager that are worth pointing "
"out."
msgstr ""

#: ../../using/mac.rst:18
msgid "Getting and Installing MacPython"
msgstr ""

#: ../../using/mac.rst:20
msgid ""
"Mac OS X 10.8 comes with Python 2.7 pre-installed by Apple.  If you wish,"
" you are invited to install the most recent version of Python 3 from the "
"Python website (https://www.python.org).  A current \"universal binary\" "
"build of Python, which runs natively on the Mac's new Intel and legacy "
"PPC CPU's, is available there."
msgstr ""

#: ../../using/mac.rst:26
msgid "What you get after installing is a number of things:"
msgstr ""

#: ../../using/mac.rst:28
msgid ""
"A :file:`Python 3.8` folder in your :file:`Applications` folder. In here "
"you find IDLE, the development environment that is a standard part of "
"official Python distributions; and PythonLauncher, which handles double-"
"clicking Python scripts from the Finder."
msgstr ""

#: ../../using/mac.rst:33
msgid ""
"A framework :file:`/Library/Frameworks/Python.framework`, which includes "
"the Python executable and libraries. The installer adds this location to "
"your shell path. To uninstall MacPython, you can simply remove these "
"three things. A symlink to the Python executable is placed in "
"/usr/local/bin/."
msgstr ""

#: ../../using/mac.rst:38
msgid ""
"The Apple-provided build of Python is installed in "
":file:`/System/Library/Frameworks/Python.framework` and "
":file:`/usr/bin/python`, respectively. You should never modify or delete "
"these, as they are Apple-controlled and are used by Apple- or third-party"
" software.  Remember that if you choose to install a newer Python version"
" from python.org, you will have two different but functional Python "
"installations on your computer, so it will be important that your paths "
"and usages are consistent with what you want to do."
msgstr ""

#: ../../using/mac.rst:46
msgid ""
"IDLE includes a help menu that allows you to access Python documentation."
" If you are completely new to Python you should start reading the "
"tutorial introduction in that document."
msgstr ""

#: ../../using/mac.rst:50
msgid ""
"If you are familiar with Python on other Unix platforms you should read "
"the section on running Python scripts from the Unix shell."
msgstr ""

#: ../../using/mac.rst:55
msgid "How to run a Python script"
msgstr ""

#: ../../using/mac.rst:57
msgid ""
"Your best way to get started with Python on Mac OS X is through the IDLE "
"integrated development environment, see section :ref:`ide` and use the "
"Help menu when the IDE is running."
msgstr ""

#: ../../using/mac.rst:61
msgid ""
"If you want to run Python scripts from the Terminal window command line "
"or from the Finder you first need an editor to create your script. Mac OS"
" X comes with a number of standard Unix command line editors, "
":program:`vim` and :program:`emacs` among them. If you want a more Mac-"
"like editor, :program:`BBEdit` or :program:`TextWrangler` from Bare Bones"
" Software (see http://www.barebones.com/products/bbedit/index.html) are "
"good choices, as is :program:`TextMate` (see https://macromates.com/). "
"Other editors include :program:`Gvim` (http://macvim-"
"dev.github.io/macvim/) and :program:`Aquamacs` (http://aquamacs.org/)."
msgstr ""

#: ../../using/mac.rst:71
msgid ""
"To run your script from the Terminal window you must make sure that "
":file:`/usr/local/bin` is in your shell search path."
msgstr ""

#: ../../using/mac.rst:74
msgid "To run your script from the Finder you have two options:"
msgstr ""

#: ../../using/mac.rst:76
msgid "Drag it to :program:`PythonLauncher`"
msgstr ""

#: ../../using/mac.rst:78
msgid ""
"Select :program:`PythonLauncher` as the default application to open your "
"script (or any .py script) through the finder Info window and double-"
"click it. :program:`PythonLauncher` has various preferences to control "
"how your script is launched. Option-dragging allows you to change these "
"for one invocation, or use its Preferences menu to change things "
"globally."
msgstr ""

#: ../../using/mac.rst:88
msgid "Running scripts with a GUI"
msgstr ""

#: ../../using/mac.rst:90
msgid ""
"With older versions of Python, there is one Mac OS X quirk that you need "
"to be aware of: programs that talk to the Aqua window manager (in other "
"words, anything that has a GUI) need to be run in a special way. Use "
":program:`pythonw` instead of :program:`python` to start such scripts."
msgstr ""

#: ../../using/mac.rst:95
msgid ""
"With Python 3.8, you can use either :program:`python` or "
":program:`pythonw`."
msgstr ""

#: ../../using/mac.rst:99
msgid "Configuration"
msgstr ""

#: ../../using/mac.rst:101
msgid ""
"Python on OS X honors all standard Unix environment variables such as "
":envvar:`PYTHONPATH`, but setting these variables for programs started "
"from the Finder is non-standard as the Finder does not read your "
":file:`.profile` or :file:`.cshrc` at startup. You need to create a file "
":file:`~/.MacOSX/environment.plist`. See Apple's Technical Document "
"QA1067 for details."
msgstr ""

#: ../../using/mac.rst:108
msgid ""
"For more information on installation Python packages in MacPython, see "
"section :ref:`mac-package-manager`."
msgstr ""

#: ../../using/mac.rst:115
msgid "The IDE"
msgstr ""

#: ../../using/mac.rst:117
msgid ""
"MacPython ships with the standard IDLE development environment. A good "
"introduction to using IDLE can be found at "
"http://www.hashcollision.org/hkn/python/idle_intro/index.html."
msgstr ""

#: ../../using/mac.rst:125
msgid "Installing Additional Python Packages"
msgstr ""

#: ../../using/mac.rst:127
msgid "There are several methods to install additional Python packages:"
msgstr ""

#: ../../using/mac.rst:129
msgid ""
"Packages can be installed via the standard Python distutils mode "
"(``python setup.py install``)."
msgstr ""

#: ../../using/mac.rst:132
msgid ""
"Many packages can also be installed via the :program:`setuptools` "
"extension or :program:`pip` wrapper, see https://pip.pypa.io/."
msgstr ""

#: ../../using/mac.rst:137
msgid "GUI Programming on the Mac"
msgstr ""

#: ../../using/mac.rst:139
msgid ""
"There are several options for building GUI applications on the Mac with "
"Python."
msgstr ""

#: ../../using/mac.rst:141
msgid ""
"*PyObjC* is a Python binding to Apple's Objective-C/Cocoa framework, "
"which is the foundation of most modern Mac development. Information on "
"PyObjC is available from https://pypi.org/project/pyobjc/."
msgstr ""

#: ../../using/mac.rst:145
msgid ""
"The standard Python GUI toolkit is :mod:`tkinter`, based on the cross-"
"platform Tk toolkit (https://www.tcl.tk). An Aqua-native version of Tk is"
" bundled with OS X by Apple, and the latest version can be downloaded and"
" installed from https://www.activestate.com; it can also be built from "
"source."
msgstr ""

#: ../../using/mac.rst:150
msgid ""
"*wxPython* is another popular cross-platform GUI toolkit that runs "
"natively on Mac OS X. Packages and documentation are available from "
"https://www.wxpython.org."
msgstr ""

#: ../../using/mac.rst:153
msgid ""
"*PyQt* is another popular cross-platform GUI toolkit that runs natively "
"on Mac OS X. More information can be found at "
"https://riverbankcomputing.com/software/pyqt/intro."
msgstr ""

#: ../../using/mac.rst:159
msgid "Distributing Python Applications on the Mac"
msgstr ""

#: ../../using/mac.rst:161
msgid ""
"The standard tool for deploying standalone Python applications on the Mac"
" is :program:`py2app`. More information on installing and using py2app "
"can be found at http://undefined.org/python/#py2app."
msgstr ""

#: ../../using/mac.rst:167
msgid "Other Resources"
msgstr ""

#: ../../using/mac.rst:169
msgid ""
"The MacPython mailing list is an excellent support resource for Python "
"users and developers on the Mac:"
msgstr ""

#: ../../using/mac.rst:172
msgid "https://www.python.org/community/sigs/current/pythonmac-sig/"
msgstr ""

#: ../../using/mac.rst:174
msgid "Another useful resource is the MacPython wiki:"
msgstr ""

#: ../../using/mac.rst:176
msgid "https://wiki.python.org/moin/MacPython"
msgstr ""

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr ""

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr ""

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr ""

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available "
"as a package on all others.  However there are certain features you might"
" want to use that are not available on your distro's package.  You can "
"easily compile the latest version of Python from source."
msgstr ""

#: ../../using/unix.rst:23
msgid ""
"In the event that Python doesn't come preinstalled and isn't in the "
"repositories as well, you can easily make packages for your own distro.  "
"Have a look at the following links:"
msgstr ""

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr ""

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr ""

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr ""

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr ""

#: ../../using/unix.rst:33
msgid ""
"https://docs-old.fedoraproject.org/en-"
"US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-creating-rpms.html"
msgstr ""

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr ""

#: ../../using/unix.rst:35
msgid "http://www.slackbook.org/html/package-management-making-packages.html"
msgstr ""

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr ""

#: ../../using/unix.rst:40
msgid "On FreeBSD and OpenBSD"
msgstr ""

#: ../../using/unix.rst:42
msgid "FreeBSD users, to add the package use::"
msgstr ""

#: ../../using/unix.rst:46
msgid "OpenBSD users, to add the package use::"
msgstr ""

#: ../../using/unix.rst:52
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr ""

#: ../../using/unix.rst:58
msgid "On OpenSolaris"
msgstr ""

#: ../../using/unix.rst:60
msgid ""
"You can get Python from `OpenCSW <https://www.opencsw.org/>`_.  Various "
"versions of Python are available and can be installed with e.g. ``pkgutil"
" -i python27``."
msgstr ""

#: ../../using/unix.rst:67
msgid "Building Python"
msgstr ""

#: ../../using/unix.rst:69
msgid ""
"If you want to compile CPython yourself, first thing you should do is get"
" the `source <https://www.python.org/downloads/source/>`_. You can "
"download either the latest release's source or just grab a fresh `clone "
"<https://devguide.python.org/setup/#getting-the-source-code>`_.  (If you "
"want to contribute patches, you will need a clone.)"
msgstr ""

#: ../../using/unix.rst:75
msgid "The build process consists of the usual commands::"
msgstr ""

#: ../../using/unix.rst:81
msgid ""
"Configuration options and caveats for specific Unix platforms are "
"extensively documented in the :source:`README.rst` file in the root of "
"the Python source tree."
msgstr ""

#: ../../using/unix.rst:87
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""

#: ../../using/unix.rst:93
msgid "Python-related paths and files"
msgstr ""

#: ../../using/unix.rst:95
msgid ""
"These are subject to difference depending on local installation "
"conventions; :envvar:`prefix` (``${prefix}``) and :envvar:`exec_prefix` "
"(``${exec_prefix}``) are installation-dependent and should be interpreted"
" as for GNU software; they may be the same."
msgstr ""

#: ../../using/unix.rst:100
msgid "For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr ""

#: ../../using/unix.rst:103
msgid "File/directory"
msgstr ""

#: ../../using/unix.rst:103
msgid "Meaning"
msgstr ""

#: ../../using/unix.rst:105
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ""

#: ../../using/unix.rst:105
msgid "Recommended location of the interpreter."
msgstr ""

#: ../../using/unix.rst:107
msgid ""
":file:`{prefix}/lib/python{version}`, "
":file:`{exec_prefix}/lib/python{version}`"
msgstr ""

#: ../../using/unix.rst:107
msgid "Recommended locations of the directories containing the standard modules."
msgstr ""

#: ../../using/unix.rst:110
msgid ""
":file:`{prefix}/include/python{version}`, "
":file:`{exec_prefix}/include/python{version}`"
msgstr ""

#: ../../using/unix.rst:110
msgid ""
"Recommended locations of the directories containing the include files "
"needed for developing Python extensions and embedding the interpreter."
msgstr ""

#: ../../using/unix.rst:118
msgid "Miscellaneous"
msgstr ""

#: ../../using/unix.rst:120
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, "
"e.g. with"
msgstr ""

#: ../../using/unix.rst:127
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good "
"choice is usually ::"
msgstr ""

#: ../../using/unix.rst:132
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""

#: ../../using/unix.rst:136
msgid ""
"To use shell commands in your Python scripts, look at the "
":mod:`subprocess` module."
msgstr ""

#: ../../using/windows.rst:7
msgid "Using Python on Windows"
msgstr ""

#: ../../using/windows.rst:12
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../../using/windows.rst:15
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. To make Python available, the CPython "
"team has compiled Windows installers (MSI packages) with every `release "
"<https://www.python.org/download/releases/>`_ for many years. These "
"installers are primarily intended to add a per-user installation of "
"Python, with the core interpreter and library being used by a single "
"user. The installer is also able to install for all users of a single "
"machine, and a separate ZIP file is available for application-local "
"distributions."
msgstr ""

#: ../../using/windows.rst:24
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows "
"platform while Microsoft considers the platform under extended support. "
"This means that Python |version| supports Windows Vista and newer. If you"
" require Windows XP support then please install Python 3.4."
msgstr ""

#: ../../using/windows.rst:29
msgid ""
"There are a number of different installers available for Windows, each "
"with certain benefits and downsides."
msgstr ""

#: ../../using/windows.rst:32
msgid ""
":ref:`windows-full` contains all components and is the best option for "
"developers using Python for any kind of project."
msgstr ""

#: ../../using/windows.rst:35
msgid ""
":ref:`windows-store` is a simple installation of Python that is suitable "
"for running scripts and packages, and using IDLE or other development "
"environments. It requires Windows 10, but can be safely installed without"
" corrupting other programs. It also provides many convenient commands for"
" launching Python and its tools."
msgstr ""

#: ../../using/windows.rst:41
msgid ""
":ref:`windows-nuget` are lightweight installations intended for "
"continuous integration systems. It can be used to build Python packages "
"or run scripts, but is not updateable and has no user interface tools."
msgstr ""

#: ../../using/windows.rst:45
msgid ""
":ref:`windows-embeddable` is a minimal package of Python suitable for "
"embedding into a larger application."
msgstr ""

#: ../../using/windows.rst:52
msgid "The full installer"
msgstr ""

#: ../../using/windows.rst:55
msgid "Installation steps"
msgstr ""

#: ../../using/windows.rst:57
msgid ""
"Four Python |version| installers are available for download - two each "
"for the 32-bit and 64-bit versions of the interpreter. The *web "
"installer* is a small initial download, and it will automatically "
"download the required components as necessary. The *offline installer* "
"includes the components necessary for a default installation and only "
"requires an internet connection for optional features. See :ref:`install-"
"layout-option` for other ways to avoid downloading during installation."
msgstr ""

#: ../../using/windows.rst:65
msgid "After starting the installer, one of two options may be selected:"
msgstr ""

#: ../../using/windows.rst:69
msgid "If you select \"Install Now\":"
msgstr ""

#: ../../using/windows.rst:71
msgid ""
"You will *not* need to be an administrator (unless a system update for "
"the C Runtime Library is required or you install the :ref:`launcher` for "
"all users)"
msgstr ""

#: ../../using/windows.rst:74
msgid "Python will be installed into your user directory"
msgstr ""

#: ../../using/windows.rst:75
msgid ""
"The :ref:`launcher` will be installed according to the option at the "
"bottom of the first page"
msgstr ""

#: ../../using/windows.rst:77
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr ""

#: ../../using/windows.rst:78
msgid "If selected, the install directory will be added to your :envvar:`PATH`"
msgstr ""

#: ../../using/windows.rst:79
msgid "Shortcuts will only be visible for the current user"
msgstr ""

#: ../../using/windows.rst:81
msgid ""
"Selecting \"Customize installation\" will allow you to select the "
"features to install, the installation location and other options or post-"
"install actions. To install debugging symbols or binaries, you will need "
"to use this option."
msgstr ""

#: ../../using/windows.rst:85
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr ""

#: ../../using/windows.rst:88
msgid "You may be required to provide administrative credentials or approval"
msgstr ""

#: ../../using/windows.rst:89
msgid "Python will be installed into the Program Files directory"
msgstr ""

#: ../../using/windows.rst:90
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ""

#: ../../using/windows.rst:91
msgid "Optional features may be selected during installation"
msgstr ""

#: ../../using/windows.rst:92
msgid "The standard library can be pre-compiled to bytecode"
msgstr ""

#: ../../using/windows.rst:93
msgid ""
"If selected, the install directory will be added to the system "
":envvar:`PATH`"
msgstr ""

#: ../../using/windows.rst:94
msgid "Shortcuts are available for all users"
msgstr ""

#: ../../using/windows.rst:99
msgid "Removing the MAX_PATH Limitation"
msgstr ""

#: ../../using/windows.rst:101
msgid ""
"Windows historically has limited path lengths to 260 characters. This "
"meant that paths longer than this would not resolve and errors would "
"result."
msgstr ""

#: ../../using/windows.rst:104
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate"
" the \"Enable Win32 long paths\" group policy, or set "
"``LongPathsEnabled`` to ``1`` in the registry key "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``."
msgstr ""

#: ../../using/windows.rst:110
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most "
"other path functionality to accept and return paths longer than 260 "
"characters."
msgstr ""

#: ../../using/windows.rst:113
msgid "After changing the above option, no further configuration is required."
msgstr ""

#: ../../using/windows.rst:117
msgid "Support for long paths was enabled in Python."
msgstr ""

#: ../../using/windows.rst:122
msgid "Installing Without UI"
msgstr ""

#: ../../using/windows.rst:124
msgid ""
"All of the options available in the installer UI can also be specified "
"from the command line, allowing scripted installers to replicate an "
"installation on many machines without user interaction.  These options "
"may also be set without suppressing the UI in order to change some of the"
" defaults."
msgstr ""

#: ../../using/windows.rst:129
msgid ""
"To completely hide the installer UI and install Python silently, pass the"
" ``/quiet`` option. To skip past the user interaction but still display "
"progress and errors, pass the ``/passive`` option. The ``/uninstall`` "
"option may be passed to immediately begin removing Python - no prompt "
"will be displayed."
msgstr ""

#: ../../using/windows.rst:135
msgid ""
"All other options are passed as ``name=value``, where the value is "
"usually ``0`` to disable a feature, ``1`` to enable a feature, or a path."
" The full list of available options is shown below."
msgstr ""

#: ../../using/windows.rst:140
msgid "Name"
msgstr ""

#: ../../using/windows.rst:140
msgid "Description"
msgstr ""

#: ../../using/windows.rst:140
msgid "Default"
msgstr ""

#: ../../using/windows.rst:142
msgid "InstallAllUsers"
msgstr ""

#: ../../using/windows.rst:142
msgid "Perform a system-wide installation."
msgstr ""

#: ../../using/windows.rst:142 ../../using/windows.rst:165
#: ../../using/windows.rst:168 ../../using/windows.rst:177
#: ../../using/windows.rst:195 ../../using/windows.rst:203
#: ../../using/windows.rst:206
msgid "0"
msgstr ""

#: ../../using/windows.rst:144
msgid "TargetDir"
msgstr ""

#: ../../using/windows.rst:144
msgid "The installation directory"
msgstr ""

#: ../../using/windows.rst:144
msgid "Selected based on InstallAllUsers"
msgstr ""

#: ../../using/windows.rst:147
msgid "DefaultAllUsersTargetDir"
msgstr ""

#: ../../using/windows.rst:147
msgid "The default installation directory for all-user installs"
msgstr ""

#: ../../using/windows.rst:147
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"
msgstr ""

#: ../../using/windows.rst:152
msgid "DefaultJustForMeTargetDir"
msgstr ""

#: ../../using/windows.rst:152
msgid "The default install directory for just-for-me installs"
msgstr ""

#: ../../using/windows.rst:152
#, python-format
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-32` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-64`"
msgstr ""

#: ../../using/windows.rst:159
msgid "DefaultCustomTargetDir"
msgstr ""

#: ../../using/windows.rst:159
msgid "The default custom install directory displayed in the UI"
msgstr ""

#: ../../using/windows.rst:159 ../../using/windows.rst:208
msgid "(empty)"
msgstr ""

#: ../../using/windows.rst:162
msgid "AssociateFiles"
msgstr ""

#: ../../using/windows.rst:162
msgid "Create file associations if the launcher is also installed."
msgstr ""

#: ../../using/windows.rst:162 ../../using/windows.rst:172
#: ../../using/windows.rst:175 ../../using/windows.rst:179
#: ../../using/windows.rst:182 ../../using/windows.rst:185
#: ../../using/windows.rst:187 ../../using/windows.rst:190
#: ../../using/windows.rst:193 ../../using/windows.rst:197
#: ../../using/windows.rst:199 ../../using/windows.rst:201
msgid "1"
msgstr ""

#: ../../using/windows.rst:165
msgid "CompileAll"
msgstr ""

#: ../../using/windows.rst:165
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr ""

#: ../../using/windows.rst:168
msgid "PrependPath"
msgstr ""

#: ../../using/windows.rst:168
msgid ""
"Add install and Scripts directories to :envvar:`PATH` and ``.PY`` to "
":envvar:`PATHEXT`"
msgstr ""

#: ../../using/windows.rst:172
msgid "Shortcuts"
msgstr ""

#: ../../using/windows.rst:172
msgid "Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr ""

#: ../../using/windows.rst:175
msgid "Include_doc"
msgstr ""

#: ../../using/windows.rst:175
msgid "Install Python manual"
msgstr ""

#: ../../using/windows.rst:177
msgid "Include_debug"
msgstr ""

#: ../../using/windows.rst:177
msgid "Install debug binaries"
msgstr ""

#: ../../using/windows.rst:179
msgid "Include_dev"
msgstr ""

#: ../../using/windows.rst:179
msgid "Install developer headers and libraries"
msgstr ""

#: ../../using/windows.rst:182
msgid "Include_exe"
msgstr ""

#: ../../using/windows.rst:182
msgid "Install :file:`python.exe` and related files"
msgstr ""

#: ../../using/windows.rst:185
msgid "Include_launcher"
msgstr ""

#: ../../using/windows.rst:185
msgid "Install :ref:`launcher`."
msgstr ""

#: ../../using/windows.rst:187
msgid "InstallLauncherAllUsers"
msgstr ""

#: ../../using/windows.rst:187
msgid "Installs :ref:`launcher` for all users."
msgstr ""

#: ../../using/windows.rst:190
msgid "Include_lib"
msgstr ""

#: ../../using/windows.rst:190
msgid "Install standard library and extension modules"
msgstr ""

#: ../../using/windows.rst:193
msgid "Include_pip"
msgstr ""

#: ../../using/windows.rst:193
msgid "Install bundled pip and setuptools"
msgstr ""

#: ../../using/windows.rst:195
msgid "Include_symbols"
msgstr ""

#: ../../using/windows.rst:195
msgid "Install debugging symbols (`*`.pdb)"
msgstr ""

#: ../../using/windows.rst:197
msgid "Include_tcltk"
msgstr ""

#: ../../using/windows.rst:197
msgid "Install Tcl/Tk support and IDLE"
msgstr ""

#: ../../using/windows.rst:199
msgid "Include_test"
msgstr ""

#: ../../using/windows.rst:199
msgid "Install standard library test suite"
msgstr ""

#: ../../using/windows.rst:201
msgid "Include_tools"
msgstr ""

#: ../../using/windows.rst:201
msgid "Install utility scripts"
msgstr ""

#: ../../using/windows.rst:203
msgid "LauncherOnly"
msgstr ""

#: ../../using/windows.rst:203
msgid "Only installs the launcher. This will override most other options."
msgstr ""

#: ../../using/windows.rst:206
msgid "SimpleInstall"
msgstr ""

#: ../../using/windows.rst:206
msgid "Disable most install UI"
msgstr ""

#: ../../using/windows.rst:208
msgid "SimpleInstallDescription"
msgstr ""

#: ../../using/windows.rst:208
msgid "A custom message to display when the simplified install UI is used."
msgstr ""

#: ../../using/windows.rst:212
msgid ""
"For example, to silently install a default, system-wide Python "
"installation, you could use the following command (from an elevated "
"command prompt)::"
msgstr ""

#: ../../using/windows.rst:217
msgid ""
"To allow users to easily install a personal copy of Python without the "
"test suite, you could provide a shortcut with the following command. This"
" will display a simplified initial page and disallow customization::"
msgstr ""

#: ../../using/windows.rst:224
msgid ""
"(Note that omitting the launcher also omits file associations, and is "
"only recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr ""

#: ../../using/windows.rst:228
msgid ""
"The options listed above can also be provided in a file named "
"``unattend.xml`` alongside the executable. This file specifies a list of "
"options and values. When a value is provided as an attribute, it will be "
"converted to a number if possible. Values provided as element text are "
"always left as strings. This example file sets the same options as the "
"previous example:"
msgstr ""

#: ../../using/windows.rst:247
msgid "Installing Without Downloading"
msgstr ""

#: ../../using/windows.rst:249
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  "
"To avoid this need, all possible components may be downloaded on-demand "
"to create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download "
"may be bigger than required, but where a large number of installations "
"are going to be performed it is very useful to have a locally cached "
"copy."
msgstr ""

#: ../../using/windows.rst:257
msgid ""
"Execute the following command from Command Prompt to download all "
"possible required files.  Remember to substitute ``python-3.8.0.exe`` for"
" the actual name of your installer, and to create layouts in their own "
"directories to avoid collisions between files with the same name."
msgstr ""

#: ../../using/windows.rst:266
msgid "You may also specify the ``/quiet`` option to hide the progress display."
msgstr ""

#: ../../using/windows.rst:269
msgid "Modifying an install"
msgstr ""

#: ../../using/windows.rst:271
msgid ""
"Once Python has been installed, you can add or remove features through "
"the Programs and Features tool that is part of Windows. Select the Python"
" entry and choose \"Uninstall/Change\" to open the installer in "
"maintenance mode."
msgstr ""

#: ../../using/windows.rst:275
msgid ""
"\"Modify\" allows you to add or remove features by modifying the "
"checkboxes - unchanged checkboxes will not install or remove anything. "
"Some options cannot be changed in this mode, such as the install "
"directory; to modify these, you will need to remove and then reinstall "
"Python completely."
msgstr ""

#: ../../using/windows.rst:280
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr ""

#: ../../using/windows.rst:283
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the "
":ref:`launcher`, which has its own entry in Programs and Features."
msgstr ""

#: ../../using/windows.rst:290
msgid "The Microsoft Store package"
msgstr ""

#: ../../using/windows.rst:294
msgid ""
"The Microsoft Store package is an easily installable Python interpreter "
"that is intended mainly for interactive use, for example, by students."
msgstr ""

#: ../../using/windows.rst:297
msgid ""
"To install the package, ensure you have the latest Windows 10 updates and"
" search the Microsoft Store app for \"Python |version|\". Ensure that the"
" app you select is published by the Python Software Foundation, and "
"install it."
msgstr ""

#: ../../using/windows.rst:302
msgid ""
"Python will always be available for free on the Microsoft Store. If you "
"are asked to pay for it, you have not selected the correct package."
msgstr ""

#: ../../using/windows.rst:305
msgid ""
"After installation, Python may be launched by finding it in Start. "
"Alternatively, it will be available from any Command Prompt or PowerShell"
" session by typing ``python``. Further, pip and IDLE may be used by "
"typing ``pip`` or ``idle``. IDLE can also be found in Start."
msgstr ""

#: ../../using/windows.rst:310
msgid ""
"All three commands are also available with version number suffixes, for "
"example, as ``python3.exe`` and ``python3.x.exe`` as well as "
"``python.exe`` (where ``3.x`` is the specific version you want to launch,"
" such as |version|). Open \"Manage App Execution Aliases\" through Start "
"to select which version of Python is associated with each command. It is "
"recommended to make sure that ``pip`` and ``idle`` are consistent with "
"whichever version of ``python`` is selected."
msgstr ""

#: ../../using/windows.rst:318
msgid ""
"Virtual environments can be created with ``python -m venv`` and activated"
" and used as normal."
msgstr ""

#: ../../using/windows.rst:321
msgid ""
"If you have installed another version of Python and added it to your "
"``PATH`` variable, it will be available as ``python.exe`` rather than the"
" one from the Microsoft Store. To access the new installation, use "
"``python3.exe`` or ``python3.x.exe``."
msgstr ""

#: ../../using/windows.rst:326
msgid ""
"The ``py.exe`` launcher will detect this Python installation, but will "
"prefer installations from the traditional installer."
msgstr ""

#: ../../using/windows.rst:329
msgid ""
"To remove Python, open Settings and use Apps and Features, or else find "
"Python in Start and right-click to select Uninstall. Uninstalling will "
"remove all packages you installed directly into this Python installation,"
" but will not remove any virtual environments"
msgstr ""

#: ../../using/windows.rst:335
msgid "Known Issues"
msgstr ""

#: ../../using/windows.rst:337
msgid ""
"Because of restrictions on Microsoft Store apps, Python scripts may not "
"have full write access to shared locations such as ``TEMP`` and the "
"registry. Instead, it will write to a private copy. If your scripts must "
"modify the shared locations, you will need to install the full installer."
msgstr ""

#: ../../using/windows.rst:342
msgid ""
"For more detail on the technical basis for these limitations, please "
"consult Microsoft's documentation on packaged full-trust apps, currently "
"available at `docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-"
"uwp-behind-the-scenes <https://docs.microsoft.com/en-"
"us/windows/msix/desktop/desktop-to-uwp-behind-the-scenes>`_"
msgstr ""

#: ../../using/windows.rst:351
msgid "The nuget.org packages"
msgstr ""

#: ../../using/windows.rst:355
msgid ""
"The nuget.org package is a reduced size Python environment intended for "
"use on continuous integration and build systems that do not have a "
"system-wide install of Python. While nuget is \"the package manager for "
".NET\", it also works perfectly fine for packages containing build-time "
"tools."
msgstr ""

#: ../../using/windows.rst:360
msgid ""
"Visit `nuget.org <https://www.nuget.org/>`_ for the most up-to-date "
"information on using nuget. What follows is a summary that is sufficient "
"for Python developers."
msgstr ""

#: ../../using/windows.rst:364
msgid ""
"The ``nuget.exe`` command line tool may be downloaded directly from "
"``https://aka.ms/nugetclidl``, for example, using curl or PowerShell. "
"With the tool, the latest version of Python for 64-bit or 32-bit machines"
" is installed using::"
msgstr ""

#: ../../using/windows.rst:372
msgid ""
"To select a particular version, add a ``-Version 3.x.y``. The output "
"directory may be changed from ``.``, and the package will be installed "
"into a subdirectory. By default, the subdirectory is named the same as "
"the package, and without the ``-ExcludeVersion`` option this name will "
"include the specific version installed. Inside the subdirectory is a "
"``tools`` directory that contains the Python installation::"
msgstr ""

#: ../../using/windows.rst:387
msgid ""
"In general, nuget packages are not upgradeable, and newer versions should"
" be installed side-by-side and referenced using the full path. "
"Alternatively, delete the package directory manually and install it "
"again. Many CI systems will do this automatically if they do not preserve"
" files between builds."
msgstr ""

#: ../../using/windows.rst:392
msgid ""
"Alongside the ``tools`` directory is a ``build\\native`` directory. This "
"contains a MSBuild properties file ``python.props`` that can be used in a"
" C++ project to reference the Python install. Including the settings will"
" automatically use the headers and import libraries in your build."
msgstr ""

#: ../../using/windows.rst:397
msgid ""
"The package information pages on nuget.org are "
"`www.nuget.org/packages/python <https://www.nuget.org/packages/python>`_ "
"for the 64-bit version and `www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ for the 32-bit version."
msgstr ""

#: ../../using/windows.rst:406
msgid "The embeddable package"
msgstr ""

#: ../../using/windows.rst:410
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr ""

#: ../../using/windows.rst:414
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from"
" the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as "
"pre-compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python37.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. "
"Tcl/tk (including all dependants, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""

#: ../../using/windows.rst:423
msgid ""
"The embedded distribution does not include the `Microsoft C Runtime "
"<https://www.microsoft.com/en-us/download/details.aspx?id=48145>`_ and it"
" is the responsibility of the application installer to provide this. The "
"runtime may have already been installed on a user's system previously or "
"automatically via Windows Update, and can be detected by finding "
"``ucrtbase.dll`` in the system directory."
msgstr ""

#: ../../using/windows.rst:432
msgid ""
"When running on Windows 7, Python 3.8 requires the KB2533623 update to be"
" installed. The embeddable distribution does not detect this update, and "
"may fail at runtime. Later versions of Windows include this update."
msgstr ""

#: ../../using/windows.rst:436
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as "
"for a regular Python installation is not supported with this "
"distribution, though with some care it may be possible to include and use"
" pip for automatic updates. In general, third-party packages should be "
"treated as part of the application (\"vendoring\") so that the developer "
"can ensure compatibility with newer versions before providing updates to "
"users."
msgstr ""

#: ../../using/windows.rst:444
msgid "The two recommended use cases for this distribution are described below."
msgstr ""

#: ../../using/windows.rst:447
msgid "Python Application"
msgstr ""

#: ../../using/windows.rst:449
msgid ""
"An application written in Python does not necessarily require users to be"
" aware of that fact. The embedded distribution may be used in this case "
"to include a private version of Python in an install package. Depending "
"on how transparent it should be (or conversely, how professional it "
"should appear), there are two options."
msgstr ""

#: ../../using/windows.rst:455
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on"
" Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom"
" launcher should simply be able to call ``Py_Main`` with a hard-coded "
"command line."
msgstr ""

#: ../../using/windows.rst:462
msgid ""
"The simpler approach is to provide a batch file or generated shortcut "
"that directly calls the ``python.exe`` or ``pythonw.exe`` with the "
"required command-line arguments. In this case, the application will "
"appear to be Python and not its actual name, and users may have trouble "
"distinguishing it from other running Python processes or file "
"associations."
msgstr ""

#: ../../using/windows.rst:468
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path."
" With the specialized launcher, packages can be located in other "
"locations as there is an opportunity to specify the search path before "
"launching the application."
msgstr ""

#: ../../using/windows.rst:474
msgid "Embedding Python"
msgstr ""

#: ../../using/windows.rst:476
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this "
"purpose. In general, the majority of the application is in native code, "
"and some part will either invoke ``python.exe`` or directly use "
"``python3.dll``. For either case, extracting the embedded distribution to"
" a subdirectory of the application installation is sufficient to provide "
"a loadable Python interpreter."
msgstr ""

#: ../../using/windows.rst:483
msgid ""
"As with the application use, packages can be installed to any location as"
" there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using"
" the embedded distribution and a regular installation."
msgstr ""

#: ../../using/windows.rst:490
msgid "Alternative bundles"
msgstr ""

#: ../../using/windows.rst:492
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../../using/windows.rst:497
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr ""

#: ../../using/windows.rst:497
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../../using/windows.rst:501
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr ""

#: ../../using/windows.rst:500
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr ""

#: ../../using/windows.rst:505
msgid "`Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: ../../using/windows.rst:504
msgid ""
"A \"comprehensive Python analysis environment\" with editors and other "
"development tools."
msgstr ""

#: ../../using/windows.rst:509
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr ""

#: ../../using/windows.rst:508
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools"
" for building packages."
msgstr ""

#: ../../using/windows.rst:511
msgid ""
"Note that these packages may not include the latest versions of Python or"
" other libraries, and are not maintained or supported by the core Python "
"team."
msgstr ""

#: ../../using/windows.rst:517
msgid "Configuring Python"
msgstr ""

#: ../../using/windows.rst:519
msgid ""
"To run Python conveniently from a command prompt, you might consider "
"changing some default environment variables in Windows.  While the "
"installer provides an option to configure the PATH and PATHEXT variables "
"for you, this is only reliable for a single, system-wide installation.  "
"If you regularly use multiple versions of Python, consider using the "
":ref:`launcher`."
msgstr ""

#: ../../using/windows.rst:529
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../../using/windows.rst:531
msgid ""
"Windows allows environment variables to be configured permanently at both"
" the User level and the System level, or temporarily in a command prompt."
msgstr ""

#: ../../using/windows.rst:534
msgid ""
"To temporarily set environment variables, open Command Prompt and use the"
" :command:`set` command:"
msgstr ""

#: ../../using/windows.rst:543
msgid ""
"These changes will apply to any further commands executed in that "
"console, and will be inherited by any applications started from the "
"console."
msgstr ""

#: ../../using/windows.rst:546
msgid ""
"Including the variable name within percent signs will expand to the "
"existing value, allowing you to add your new value at either the start or"
" the end. Modifying :envvar:`PATH` by adding the directory containing "
":program:`python.exe` to the start is a common way to ensure the correct "
"version of Python is launched."
msgstr ""

#: ../../using/windows.rst:552
msgid ""
"To permanently modify the default environment variables, click Start and "
"search for 'edit environment variables', or open System properties, "
":guilabel:`Advanced system settings` and click the :guilabel:`Environment"
" Variables` button. In this dialog, you can add or modify User and System"
" variables. To change System variables, you need non-restricted access to"
" your machine (i.e. Administrator rights)."
msgstr ""

#: ../../using/windows.rst:561
msgid ""
"Windows will concatenate User variables *after* System variables, which "
"may cause unexpected results when modifying :envvar:`PATH`."
msgstr ""

#: ../../using/windows.rst:564
msgid ""
"The :envvar:`PYTHONPATH` variable is used by all versions of Python 2 and"
" Python 3, so you should not permanently configure this variable unless "
"it only includes code that is compatible with all of your installed "
"Python versions."
msgstr ""

#: ../../using/windows.rst:572
msgid "https://www.microsoft.com/en-us/wdsi/help/folder-variables"
msgstr ""

#: ../../using/windows.rst:572
msgid "Environment variables in Windows NT"
msgstr ""

#: ../../using/windows.rst:575
msgid "https://technet.microsoft.com/en-us/library/cc754250.aspx"
msgstr ""

#: ../../using/windows.rst:575
msgid "The SET command, for temporarily modifying environment variables"
msgstr ""

#: ../../using/windows.rst:578
msgid "https://technet.microsoft.com/en-us/library/cc755104.aspx"
msgstr ""

#: ../../using/windows.rst:578
msgid "The SETX command, for permanently modifying environment variables"
msgstr ""

#: ../../using/windows.rst:581
msgid ""
"https://support.microsoft.com/en-us/help/310519/how-to-manage-"
"environment-variables-in-windows-xp"
msgstr ""

#: ../../using/windows.rst:581
msgid "How To Manage Environment Variables in Windows XP"
msgstr ""

#: ../../using/windows.rst:583
msgid "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../../using/windows.rst:584
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr ""

#: ../../using/windows.rst:589
msgid "Finding the Python executable"
msgstr ""

#: ../../using/windows.rst:593
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. The "
"installer has an option to set that up for you."
msgstr ""

#: ../../using/windows.rst:597
msgid ""
"On the first page of the installer, an option labelled \"Add Python to "
"PATH\" may be selected to have the installer add the install location "
"into the :envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder "
"is also added. This allows you to type :command:`python` to run the "
"interpreter, and :command:`pip` for the package installer. Thus, you can "
"also execute your scripts with command line options, see :ref:`using-on-"
"cmdline` documentation."
msgstr ""

#: ../../using/windows.rst:604
msgid ""
"If you don't enable this option at install time, you can always re-run "
"the installer, select Modify, and enable it.  Alternatively, you can "
"manually modify the :envvar:`PATH` using the directions in :ref:`setting-"
"envvars`.  You need to set your :envvar:`PATH` environment variable to "
"include the directory of your Python installation, delimited by a "
"semicolon from other entries.  An example variable could look like this "
"(assuming the first two entries already existed)::"
msgstr ""

#: ../../using/windows.rst:617
msgid "UTF-8 mode"
msgstr ""

#: ../../using/windows.rst:621
msgid ""
"Windows still uses legacy encodings for the system encoding (the ANSI "
"Code Page).  Python uses it for the default encoding of text files (e.g. "
":func:`locale.getpreferredencoding`)."
msgstr ""

#: ../../using/windows.rst:625
msgid ""
"This may cause issues because UTF-8 is widely used on the internet and "
"most Unix systems, including WSL (Windows Subsystem for Linux)."
msgstr ""

#: ../../using/windows.rst:628
msgid ""
"You can use UTF-8 mode to change the default text encoding to UTF-8. You "
"can enable UTF-8 mode via the ``-X utf8`` command line option, or the "
"``PYTHONUTF8=1`` environment variable.  See :envvar:`PYTHONUTF8` for "
"enabling UTF-8 mode, and :ref:`setting-envvars` for how to modify "
"environment variables."
msgstr ""

#: ../../using/windows.rst:634
msgid "When UTF-8 mode is enabled:"
msgstr ""

#: ../../using/windows.rst:636
msgid ""
":func:`locale.getpreferredencoding` returns ``'UTF-8'`` instead of the "
"system encoding.  This function is used for the default text encoding in "
"many places, including :func:`open`, :class:`Popen`, "
":meth:`Path.read_text`, etc."
msgstr ""

#: ../../using/windows.rst:640
msgid ""
":data:`sys.stdin`, :data:`sys.stdout`, and :data:`sys.stderr` all use "
"UTF-8 as their text encoding."
msgstr ""

#: ../../using/windows.rst:642
msgid "You can still use the system encoding via the \"mbcs\" codec."
msgstr ""

#: ../../using/windows.rst:644
msgid ""
"Note that adding ``PYTHONUTF8=1`` to the default environment variables "
"will affect all Python 3.7+ applications on your system. If you have any "
"Python 3.7+ applications which rely on the legacy system encoding, it is "
"recommended to set the environment variable temporarily or use the ``-X "
"utf8`` command line option."
msgstr ""

#: ../../using/windows.rst:651
msgid ""
"Even when UTF-8 mode is disabled, Python uses UTF-8 by default on Windows"
" for:"
msgstr ""

#: ../../using/windows.rst:654
msgid "Console I/O including standard I/O (see :pep:`528` for details)."
msgstr ""

#: ../../using/windows.rst:655
msgid "The filesystem encoding (see :pep:`529` for details)."
msgstr ""

#: ../../using/windows.rst:661
msgid "Python Launcher for Windows"
msgstr ""

#: ../../using/windows.rst:665
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the "
"command-line) to indicate a preference for a specific Python version, and"
" will locate and execute that version."
msgstr ""

#: ../../using/windows.rst:670
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select "
"the most appropriate version of Python. It will prefer per-user "
"installations over system-wide ones, and orders by language version "
"rather than using the most recently installed version."
msgstr ""

#: ../../using/windows.rst:675
msgid "The launcher was originally specified in :pep:`397`."
msgstr ""

#: ../../using/windows.rst:678
msgid "Getting started"
msgstr ""

#: ../../using/windows.rst:681
msgid "From the command-line"
msgstr ""

#: ../../using/windows.rst:685
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher "
"on your :envvar:`PATH`. The launcher is compatible with all available "
"versions of Python, so it does not matter which version is installed. To "
"check that the launcher is available, execute the following command in "
"Command Prompt:"
msgstr ""

#: ../../using/windows.rst:694
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr ""

#: ../../using/windows.rst:698
msgid ""
"If you have multiple versions of Python installed (e.g., 2.7 and "
"|version|) you will have noticed that Python |version| was started - to "
"launch Python 2.7, try the command:"
msgstr ""

#: ../../using/windows.rst:706
msgid ""
"If you want the latest version of Python 2.x you have installed, try the "
"command:"
msgstr ""

#: ../../using/windows.rst:713
msgid "You should find the latest version of Python 2.x starts."
msgstr ""

#: ../../using/windows.rst:715
msgid "If you see the following error, you do not have the launcher installed:"
msgstr ""

#: ../../using/windows.rst:722
msgid ""
"Per-user installations of Python do not add the launcher to "
":envvar:`PATH` unless the option was selected on installation."
msgstr ""

#: ../../using/windows.rst:726
msgid "Virtual environments"
msgstr ""

#: ../../using/windows.rst:730
msgid ""
"If the launcher is run with no explicit Python version specification, and"
" a virtual environment (created with the standard library :mod:`venv` "
"module or the external ``virtualenv`` tool) active, the launcher will run"
" the virtual environment's interpreter rather than the global one.  To "
"run the global interpreter, either deactivate the virtual environment, or"
" explicitly specify the global Python version."
msgstr ""

#: ../../using/windows.rst:738
msgid "From a script"
msgstr ""

#: ../../using/windows.rst:740
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` "
"with the following contents"
msgstr ""

#: ../../using/windows.rst:749
msgid "From the directory in which hello.py lives, execute the command:"
msgstr ""

#: ../../using/windows.rst:755
msgid ""
"You should notice the version number of your latest Python 2.x "
"installation is printed.  Now try changing the first line to be:"
msgstr ""

#: ../../using/windows.rst:762
msgid ""
"Re-executing the command should now print the latest Python 3.x "
"information. As with the above command-line examples, you can specify a "
"more explicit version qualifier.  Assuming you have Python 2.6 installed,"
" try changing the first line to ``#! python2.6`` and you should find the "
"2.6 version information printed."
msgstr ""

#: ../../using/windows.rst:768
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command "
"``python`` typically refers to Python 2."
msgstr ""

#: ../../using/windows.rst:774
msgid "From file associations"
msgstr ""

#: ../../using/windows.rst:776
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``,"
" ``.pyw``, ``.pyc`` files) when it was installed.  This means that when "
"you double-click on one of these files from Windows explorer the launcher"
" will be used, and therefore you can use the same facilities described "
"above to have the script specify the version which should be used."
msgstr ""

#: ../../using/windows.rst:782
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first "
"line."
msgstr ""

#: ../../using/windows.rst:786
msgid "Shebang Lines"
msgstr ""

#: ../../using/windows.rst:788
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have "
"native support for such lines and they are commonly used on such systems "
"to indicate how a script should be executed.  This launcher allows the "
"same facilities to be used with Python scripts on Windows and the "
"examples above demonstrate their use."
msgstr ""

#: ../../using/windows.rst:795
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify"
" which interpreter to use.  The supported virtual commands are:"
msgstr ""

#: ../../using/windows.rst:799
msgid "``/usr/bin/env python``"
msgstr ""

#: ../../using/windows.rst:800
msgid "``/usr/bin/python``"
msgstr ""

#: ../../using/windows.rst:801
msgid "``/usr/local/bin/python``"
msgstr ""

#: ../../using/windows.rst:802
msgid "``python``"
msgstr ""

#: ../../using/windows.rst:804
msgid "For example, if the first line of your script starts with"
msgstr ""

#: ../../using/windows.rst:810
msgid ""
"The default Python will be located and used.  As many Python scripts "
"written to work on Unix will already have this line, you should find "
"these scripts can be used by the launcher without modification.  If you "
"are writing a new script on Windows which you hope will be useful on "
"Unix, you should use one of the shebang lines starting with ``/usr``."
msgstr ""

#: ../../using/windows.rst:816
msgid ""
"Any of the above virtual commands can be suffixed with an explicit "
"version (either just the major version, or the major and minor version). "
"Furthermore the 32-bit version can be requested by adding \"-32\" after "
"the minor version. I.e. ``/usr/bin/python2.7-32`` will request usage of "
"the 32-bit python 2.7."
msgstr ""

#: ../../using/windows.rst:824
msgid ""
"Beginning with python launcher 3.7 it is possible to request 64-bit "
"version by the \"-64\" suffix. Furthermore it is possible to specify a "
"major and architecture without minor (i.e. ``/usr/bin/python3-64``)."
msgstr ""

#: ../../using/windows.rst:828
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special "
"property. Before looking for installed Python interpreters, this form "
"will search the executable :envvar:`PATH` for a Python executable. This "
"corresponds to the behaviour of the Unix ``env`` program, which performs "
"a :envvar:`PATH` search."
msgstr ""

#: ../../using/windows.rst:834
msgid "Arguments in shebang lines"
msgstr ""

#: ../../using/windows.rst:836
msgid ""
"The shebang lines can also specify additional options to be passed to the"
" Python interpreter.  For example, if you have a shebang line:"
msgstr ""

#: ../../using/windows.rst:843
msgid "Then Python will be started with the ``-v`` option"
msgstr ""

#: ../../using/windows.rst:846
msgid "Customization"
msgstr ""

#: ../../using/windows.rst:849
msgid "Customization via INI files"
msgstr ""

#: ../../using/windows.rst:851
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the "
"current user's \"application data\" directory (i.e. the directory "
"returned by calling the Windows function ``SHGetFolderPath`` with "
"``CSIDL_LOCAL_APPDATA``) and ``py.ini`` in the same directory as the "
"launcher. The same .ini files are used for both the 'console' version of "
"the launcher (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)."
msgstr ""

#: ../../using/windows.rst:858
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not "
"have write access to the .ini file next to the launcher, can override "
"commands in that global .ini file."
msgstr ""

#: ../../using/windows.rst:863
msgid "Customizing default Python versions"
msgstr ""

#: ../../using/windows.rst:865
msgid ""
"In some cases, a version qualifier can be included in a command to "
"dictate which version of Python will be used by the command. A version "
"qualifier starts with a major version number and can optionally be "
"followed by a period ('.') and a minor version specifier. Furthermore it "
"is possible to specify if a 32 or 64 bit implementation shall be "
"requested by adding \"-32\" or \"-64\"."
msgstr ""

#: ../../using/windows.rst:871
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, "
"while ``#!python3`` has a version qualifier which specifies only a major "
"version."
msgstr ""

#: ../../using/windows.rst:874
msgid ""
"If no version qualifiers are found in a command, the environment variable"
" :envvar:`PY_PYTHON` can be set to specify the default version qualifier."
" If it is not set, the default is \"3\". The variable can specify any "
"value that may be passed on the command line, such as \"3\", \"3.7\", "
"\"3.7-32\" or \"3.7-64\". (Note that the \"-64\" option is only available"
" with the launcher included with Python 3.7 or newer.)"
msgstr ""

#: ../../using/windows.rst:881
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If"
" no such option is found, the launcher will enumerate the installed "
"Python versions and use the latest minor release found for the major "
"version, which is likely, although not guaranteed, to be the most "
"recently installed version in that family."
msgstr ""

#: ../../using/windows.rst:889
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same"
" (major.minor) Python version installed, the 64-bit version will always "
"be preferred. This will be true for both 32-bit and 64-bit "
"implementations of the launcher - a 32-bit launcher will prefer to "
"execute a 64-bit Python installation of the specified version if "
"available. This is so the behavior of the launcher can be predicted "
"knowing only what versions are installed on the PC and without regard to "
"the order in which they were installed (i.e., without knowing whether a "
"32 or 64-bit version of Python and corresponding launcher was installed "
"last). As noted above, an optional \"-32\" or \"-64\" suffix can be used "
"on a version specifier to change this behaviour."
msgstr ""

#: ../../using/windows.rst:900
msgid "Examples:"
msgstr ""

#: ../../using/windows.rst:902
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` "
"will use the latest Python 2.x version installed and the command "
"``python3`` will use the latest Python 3.x installed."
msgstr ""

#: ../../using/windows.rst:906
msgid ""
"The commands ``python3.1`` and ``python2.7`` will not consult any options"
" at all as the versions are fully specified."
msgstr ""

#: ../../using/windows.rst:909
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use"
" the latest installed Python 3 version."
msgstr ""

#: ../../using/windows.rst:912
msgid ""
"If ``PY_PYTHON=3.1-32``, the command ``python`` will use the 32-bit "
"implementation of 3.1 whereas the command ``python3`` will use the latest"
" installed Python (PY_PYTHON was not considered at all as a major version"
" was specified.)"
msgstr ""

#: ../../using/windows.rst:917
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1``, the commands ``python`` and "
"``python3`` will both use specifically 3.1"
msgstr ""

#: ../../using/windows.rst:920
msgid ""
"In addition to environment variables, the same settings can be configured"
" in the .INI file used by the launcher.  The section in the INI file is "
"called ``[defaults]`` and the key name will be the same as the "
"environment variables without the leading ``PY_`` prefix (and note that "
"the key names in the INI file are case insensitive.)  The contents of an "
"environment variable will override things specified in the INI file."
msgstr ""

#: ../../using/windows.rst:927
msgid "For example:"
msgstr ""

#: ../../using/windows.rst:929
msgid "Setting ``PY_PYTHON=3.1`` is equivalent to the INI file containing:"
msgstr ""

#: ../../using/windows.rst:936
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1`` is equivalent to the INI "
"file containing:"
msgstr ""

#: ../../using/windows.rst:946
msgid "Diagnostics"
msgstr ""

#: ../../using/windows.rst:948
msgid ""
"If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the "
"launcher will print diagnostic information to stderr (i.e. to the "
"console). While this information manages to be simultaneously verbose "
"*and* terse, it should allow you to see what versions of Python were "
"located, why a particular version was chosen and the exact command-line "
"used to execute the target Python."
msgstr ""

#: ../../using/windows.rst:960
msgid "Finding modules"
msgstr ""

#: ../../using/windows.rst:962
msgid ""
"Python usually stores its library (and thereby your site-packages folder)"
" in the installation directory.  So, if you had installed Python to "
":file:`C:\\\\Python\\\\`, the default library would reside in "
":file:`C:\\\\Python\\\\Lib\\\\` and third-party modules should be stored "
"in :file:`C:\\\\Python\\\\Lib\\\\site-packages\\\\`."
msgstr ""

#: ../../using/windows.rst:968
msgid ""
"To completely override :data:`sys.path`, create a ``._pth`` file with the"
" same name as the DLL (``python37._pth``) or the executable "
"(``python._pth``) and specify one line for each path to add to "
":data:`sys.path`. The file based on the DLL name overrides the one based "
"on the executable, which allows paths to be restricted for any program "
"loading the runtime if desired."
msgstr ""

#: ../../using/windows.rst:974
msgid ""
"When the file exists, all registry and environment variables are ignored,"
" isolated mode is enabled, and :mod:`site` is not imported unless one "
"line in the file specifies ``import site``. Blank paths and lines "
"starting with ``#`` are ignored. Each path may be absolute or relative to"
" the location of the file. Import statements other than to ``site`` are "
"not permitted, and arbitrary code cannot be specified."
msgstr ""

#: ../../using/windows.rst:981
msgid ""
"Note that ``.pth`` files (without leading underscore) will be processed "
"normally by the :mod:`site` module when ``import site`` has been "
"specified."
msgstr ""

#: ../../using/windows.rst:984
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is "
"populated on Windows:"
msgstr ""

#: ../../using/windows.rst:987
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../../using/windows.rst:990
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in "
":ref:`using-on-envvars`, its entries are added next.  Note that on "
"Windows, paths in this variable must be separated by semicolons, to "
"distinguish them from the colon used in drive identifiers (``C:\\`` "
"etc.)."
msgstr ""

#: ../../using/windows.rst:995
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys "
"of "
":samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` "
"under both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  "
"Subkeys which have semicolon-delimited path strings as their default "
"value will cause each path to be added to :data:`sys.path`.  (Note that "
"all known installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../../using/windows.rst:1002
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as"
" \"Python Home\".  Otherwise, the path of the main Python executable is "
"used to locate a \"landmark file\" (either ``Lib\\os.py`` or "
"``pythonXY.zip``) to deduce the \"Python Home\".  If a Python home is "
"found, the relevant sub-directories added to :data:`sys.path` (``Lib``, "
"``plat-win``, etc) are based on that folder.  Otherwise, the core Python "
"path is constructed from the PythonPath stored in the registry."
msgstr ""

#: ../../using/windows.rst:1010
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is "
"specified in the environment, and no registry entries can be found, a "
"default path with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, "
"etc)."
msgstr ""

#: ../../using/windows.rst:1014
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the"
" directory one level above the executable, the following variations "
"apply:"
msgstr ""

#: ../../using/windows.rst:1017
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this"
" path is used instead of the path to the main executable when deducing "
"the home location."
msgstr ""

#: ../../using/windows.rst:1021
msgid "The end result of all this is:"
msgstr ""

#: ../../using/windows.rst:1023
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry "
"are ignored.  Other \"application paths\" in the registry are always "
"read."
msgstr ""

#: ../../using/windows.rst:1028
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from"
" the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../../using/windows.rst:1032
msgid ""
"If Python can't find its home and there are no registry value (frozen "
".exe, some very strange installation setup) you get a path with some "
"default, but relative, paths."
msgstr ""

#: ../../using/windows.rst:1036
msgid ""
"For those who want to bundle Python into their application or "
"distribution, the following advice will prevent conflicts with other "
"installations:"
msgstr ""

#: ../../using/windows.rst:1039
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and"
" environment variables, and also ignore :mod:`site` unless ``import "
"site`` is listed."
msgstr ""

#: ../../using/windows.rst:1044
msgid ""
"If you are loading :file:`python3.dll` or :file:`python37.dll` in your "
"own executable, explicitly call :c:func:`Py_SetPath` or (at least) "
":c:func:`Py_SetProgramName` before :c:func:`Py_Initialize`."
msgstr ""

#: ../../using/windows.rst:1048
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""

#: ../../using/windows.rst:1051
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), "
"ensure that the landmark file (:file:`Lib\\\\os.py`) exists in your "
"install directory. (Note that it will not be detected inside a ZIP file, "
"but a correctly named ZIP file will be detected instead.)"
msgstr ""

#: ../../using/windows.rst:1057
msgid ""
"These will ensure that the files in a system-wide installation will not "
"take precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the others "
"may still be susceptible to non-standard paths in the registry and user "
"site-packages."
msgstr ""

#: ../../using/windows.rst:1066
msgid ""
"Adds ``._pth`` file support and removes ``applocal`` option from "
"``pyvenv.cfg``."
msgstr ""

#: ../../using/windows.rst:1068
msgid ""
"Adds ``pythonXX.zip`` as a potential landmark when directly adjacent to "
"the executable."
msgstr ""

#: ../../using/windows.rst:1074
msgid ""
"Modules specified in the registry under ``Modules`` (not ``PythonPath``) "
"may be imported by :class:`importlib.machinery.WindowsRegistryFinder`. "
"This finder is enabled on Windows in 3.6.0 and earlier, but may need to "
"be explicitly added to :attr:`sys.meta_path` in the future."
msgstr ""

#: ../../using/windows.rst:1080
msgid "Additional modules"
msgstr ""

#: ../../using/windows.rst:1082
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../../using/windows.rst:1086
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-"
"specific-services`."
msgstr ""

#: ../../using/windows.rst:1090
msgid "PyWin32"
msgstr ""

#: ../../using/windows.rst:1092
msgid ""
"The `PyWin32 <https://pypi.org/project/pywin32>`_ module by Mark Hammond "
"is a collection of modules for advanced Windows-specific support.  This "
"includes utilities for:"
msgstr ""

#: ../../using/windows.rst:1096
msgid ""
"`Component Object Model <https://docs.microsoft.com/en-"
"us/windows/desktop/com/component-object-model--com--portal>`_ (COM)"
msgstr ""

#: ../../using/windows.rst:1099
msgid "Win32 API calls"
msgstr ""

#: ../../using/windows.rst:1100
msgid "Registry"
msgstr ""

#: ../../using/windows.rst:1101
msgid "Event log"
msgstr ""

#: ../../using/windows.rst:1102
msgid ""
"`Microsoft Foundation Classes <https://msdn.microsoft.com/en-"
"us/library/fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""

#: ../../using/windows.rst:1105
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ "
"https://www.python.org/windows/pythonwin/>`_ is a sample MFC application "
"shipped with PyWin32.  It is an embeddable IDE with a built-in debugger."
msgstr ""

#: ../../using/windows.rst:1112
msgid "`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../../using/windows.rst:1112
msgid "by Tim Golden"
msgstr ""

#: ../../using/windows.rst:1114
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../../using/windows.rst:1115
msgid "by David and Paul Boddie"
msgstr ""

#: ../../using/windows.rst:1119
msgid "cx_Freeze"
msgstr ""

#: ../../using/windows.rst:1121
msgid ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ is a "
":mod:`distutils` extension (see :ref:`extending-distutils`) which wraps "
"Python scripts into executable Windows programs (:file:`{*}.exe` files)."
"  When you have done this, you can distribute your application without "
"requiring your users to install Python."
msgstr ""

#: ../../using/windows.rst:1129
msgid "WConio"
msgstr ""

#: ../../using/windows.rst:1131
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows "
"as well: Windows Console I/O for Python."
msgstr ""

#: ../../using/windows.rst:1135
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a "
"wrapper for Turbo-C's :file:`CONIO.H`, used to create text user "
"interfaces."
msgstr ""

#: ../../using/windows.rst:1141
msgid "Compiling Python on Windows"
msgstr ""

#: ../../using/windows.rst:1143
msgid ""
"If you want to compile CPython yourself, first thing you should do is get"
" the `source <https://www.python.org/downloads/source/>`_. You can "
"download either the latest release's source or just grab a fresh "
"`checkout <https://devguide.python.org/setup/#getting-the-source-code>`_."
msgstr ""

#: ../../using/windows.rst:1148
msgid ""
"The source tree contains a build solution and project files for Microsoft"
" Visual Studio 2015, which is the compiler used to build the official "
"Python releases. These files are in the :file:`PCbuild` directory."
msgstr ""

#: ../../using/windows.rst:1152
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr ""

#: ../../using/windows.rst:1155
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../../using/windows.rst:1161
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW "
"<http://sebsauvage.net/python/mingw.html>`_"
msgstr ""

#: ../../using/windows.rst:1160
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them "
"with MinGW gcc under Windows\" or \"Installing Python extension with "
"distutils and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../../using/windows.rst:1166
msgid "Other Platforms"
msgstr ""

#: ../../using/windows.rst:1168
msgid ""
"With ongoing development of Python, some platforms that used to be "
"supported earlier are no longer supported (due to the lack of users or "
"developers). Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../../using/windows.rst:1172
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../../using/windows.rst:1173
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the "
"Python interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-"
"erlangen.de/pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, "
"`Maintainer releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../../using/windows.rst:1179
msgid ""
"See `Python for Windows <https://www.python.org/downloads/windows/>`_ for"
" detailed information about platforms with pre-compiled installers."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-16 06:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Synchronization Primitives"
msgstr ""

msgid "**Source code:** :source:`Lib/asyncio/locks.py`"
msgstr ""

msgid ""
"asyncio synchronization primitives are designed to be similar to those of "
"the :mod:`threading` module with two important caveats:"
msgstr ""

msgid ""
"asyncio primitives are not thread-safe, therefore they should not be used "
"for OS thread synchronization (use :mod:`threading` for that);"
msgstr ""

msgid ""
"methods of these synchronization primitives do not accept the *timeout* "
"argument; use the :func:`asyncio.wait_for` function to perform operations "
"with timeouts."
msgstr ""

msgid "asyncio has the following basic synchronization primitives:"
msgstr ""

msgid ":class:`Lock`"
msgstr ""

msgid ":class:`Event`"
msgstr ""

msgid ":class:`Condition`"
msgstr ""

msgid ":class:`Semaphore`"
msgstr ""

msgid ":class:`BoundedSemaphore`"
msgstr ""

msgid "Lock"
msgstr ""

msgid "Implements a mutex lock for asyncio tasks.  Not thread-safe."
msgstr ""

msgid ""
"An asyncio lock can be used to guarantee exclusive access to a shared "
"resource."
msgstr ""

msgid "The preferred way to use a Lock is an :keyword:`async with` statement::"
msgstr ""

msgid "which is equivalent to::"
msgstr ""

msgid "Removed the *loop* parameter."
msgstr ""

msgid "Acquire the lock."
msgstr ""

msgid ""
"This method waits until the lock is *unlocked*, sets it to *locked* and "
"returns ``True``."
msgstr ""

msgid ""
"When more than one coroutine is blocked in :meth:`acquire` waiting for the "
"lock to be unlocked, only one coroutine eventually proceeds."
msgstr ""

msgid ""
"Acquiring a lock is *fair*: the coroutine that proceeds will be the first "
"coroutine that started waiting on the lock."
msgstr ""

msgid "Release the lock."
msgstr ""

msgid "When the lock is *locked*, reset it to *unlocked* and return."
msgstr ""

msgid "If the lock is *unlocked*, a :exc:`RuntimeError` is raised."
msgstr ""

msgid "Return ``True`` if the lock is *locked*."
msgstr ""

msgid "Event"
msgstr "Zdarzenie"

msgid "An event object.  Not thread-safe."
msgstr ""

msgid ""
"An asyncio event can be used to notify multiple asyncio tasks that some "
"event has happened."
msgstr ""

msgid ""
"An Event object manages an internal flag that can be set to *true* with the :"
"meth:`~Event.set` method and reset to *false* with the :meth:`clear` "
"method.  The :meth:`~Event.wait` method blocks until the flag is set to "
"*true*.  The flag is set to *false* initially."
msgstr ""

msgid "Example::"
msgstr ""

msgid "Wait until the event is set."
msgstr ""

msgid ""
"If the event is set, return ``True`` immediately. Otherwise block until "
"another task calls :meth:`~Event.set`."
msgstr ""

msgid "Set the event."
msgstr ""

msgid "All tasks waiting for event to be set will be immediately awakened."
msgstr ""

msgid "Clear (unset) the event."
msgstr ""

msgid ""
"Tasks awaiting on :meth:`~Event.wait` will now block until the :meth:`~Event."
"set` method is called again."
msgstr ""

msgid "Return ``True`` if the event is set."
msgstr ""

msgid "Condition"
msgstr ""

msgid "A Condition object.  Not thread-safe."
msgstr ""

msgid ""
"An asyncio condition primitive can be used by a task to wait for some event "
"to happen and then get exclusive access to a shared resource."
msgstr ""

msgid ""
"In essence, a Condition object combines the functionality of an :class:"
"`Event` and a :class:`Lock`.  It is possible to have multiple Condition "
"objects share one Lock, which allows coordinating exclusive access to a "
"shared resource between different tasks interested in particular states of "
"that shared resource."
msgstr ""

msgid ""
"The optional *lock* argument must be a :class:`Lock` object or ``None``.  In "
"the latter case a new Lock object is created automatically."
msgstr ""

msgid ""
"The preferred way to use a Condition is an :keyword:`async with` statement::"
msgstr ""

msgid "Acquire the underlying lock."
msgstr ""

msgid ""
"This method waits until the underlying lock is *unlocked*, sets it to "
"*locked* and returns ``True``."
msgstr ""

msgid ""
"Wake up at most *n* tasks (1 by default) waiting on this condition.  The "
"method is no-op if no tasks are waiting."
msgstr ""

msgid ""
"The lock must be acquired before this method is called and released shortly "
"after.  If called with an *unlocked* lock a :exc:`RuntimeError` error is "
"raised."
msgstr ""

msgid "Return ``True`` if the underlying lock is acquired."
msgstr ""

msgid "Wake up all tasks waiting on this condition."
msgstr ""

msgid "This method acts like :meth:`notify`, but wakes up all waiting tasks."
msgstr ""

msgid "Release the underlying lock."
msgstr ""

msgid "When invoked on an unlocked lock, a :exc:`RuntimeError` is raised."
msgstr ""

msgid "Wait until notified."
msgstr ""

msgid ""
"If the calling task has not acquired the lock when this method is called, a :"
"exc:`RuntimeError` is raised."
msgstr ""

msgid ""
"This method releases the underlying lock, and then blocks until it is "
"awakened by a :meth:`notify` or :meth:`notify_all` call. Once awakened, the "
"Condition re-acquires its lock and this method returns ``True``."
msgstr ""

msgid "Wait until a predicate becomes *true*."
msgstr ""

msgid ""
"The predicate must be a callable which result will be interpreted as a "
"boolean value.  The final value is the return value."
msgstr ""

msgid "Semaphore"
msgstr ""

msgid "A Semaphore object.  Not thread-safe."
msgstr ""

msgid ""
"A semaphore manages an internal counter which is decremented by each :meth:"
"`acquire` call and incremented by each :meth:`release` call. The counter can "
"never go below zero; when :meth:`acquire` finds that it is zero, it blocks, "
"waiting until some task calls :meth:`release`."
msgstr ""

msgid ""
"The optional *value* argument gives the initial value for the internal "
"counter (``1`` by default). If the given value is less than ``0`` a :exc:"
"`ValueError` is raised."
msgstr ""

msgid ""
"The preferred way to use a Semaphore is an :keyword:`async with` statement::"
msgstr ""

msgid "Acquire a semaphore."
msgstr ""

msgid ""
"If the internal counter is greater than zero, decrement it by one and return "
"``True`` immediately.  If it is zero, wait until a :meth:`release` is called "
"and return ``True``."
msgstr ""

msgid "Returns ``True`` if semaphore can not be acquired immediately."
msgstr ""

msgid ""
"Release a semaphore, incrementing the internal counter by one. Can wake up a "
"task waiting to acquire the semaphore."
msgstr ""

msgid ""
"Unlike :class:`BoundedSemaphore`, :class:`Semaphore` allows making more "
"``release()`` calls than ``acquire()`` calls."
msgstr ""

msgid "BoundedSemaphore"
msgstr ""

msgid "A bounded semaphore object.  Not thread-safe."
msgstr ""

msgid ""
"Bounded Semaphore is a version of :class:`Semaphore` that raises a :exc:"
"`ValueError` in :meth:`~Semaphore.release` if it increases the internal "
"counter above the initial *value*."
msgstr ""

msgid ""
"Acquiring a lock using ``await lock`` or ``yield from lock`` and/or :keyword:"
"`with` statement (``with await lock``, ``with (yield from lock)``) was "
"removed.  Use ``async with lock`` instead."
msgstr ""

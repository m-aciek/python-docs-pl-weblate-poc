# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-09 22:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../c-api/abstract.rst:7
msgid "Abstract Objects Layer"
msgstr ""

#: ../../c-api/abstract.rst:9
msgid ""
"The functions in this chapter interact with Python objects regardless of "
"their type, or with wide classes of object types (e.g. all numerical "
"types, or all sequence types).  When used on object types for which they "
"do not apply, they will raise a Python exception."
msgstr ""

#: ../../c-api/abstract.rst:14
msgid ""
"It is not possible to use these functions on objects that are not "
"properly initialized, such as a list object that has been created by "
":c:func:`PyList_New`, but whose items have not been set to some non-\\ "
"``NULL`` value yet."
msgstr ""

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr ""

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the"
" object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes "
"the length information for a variable-size object."
msgstr ""

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object "
"header are not initialized; the object's reference count will be one.  "
"The size of the memory allocation is determined from the "
":c:member:`~PyTypeObject.tp_basicsize` field of the type object."
msgstr ""

#: ../../c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object "
"header are not initialized.  The allocated memory allows for the *TYPE* "
"structure plus *size* fields of the size given by the "
":c:member:`~PyTypeObject.tp_itemsize` field of *type*.  This is useful "
"for implementing objects like tuples, which are able to determine their "
"size at construction time.  Embedding the array of fields into the same "
"allocation decreases the number of allocations, improving the memory "
"management efficiency."
msgstr ""

#: ../../c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or "
":c:func:`PyObject_NewVar`.  This is normally called from the "
":c:member:`~PyTypeObject.tp_dealloc` handler specified in the object's "
"type.  The fields of the object should not be accessed after this call as"
" the memory is no longer a valid Python object."
msgstr ""

#: ../../c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be "
"accessed using the :c:macro:`Py_None` macro, which evaluates to a pointer"
" to this object."
msgstr ""

#: ../../c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ""

#: ../../c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr ""

#: ../../c-api/apiabiversion.rst:7
msgid "API and ABI Versioning"
msgstr ""

#: ../../c-api/apiabiversion.rst:9
msgid ""
"``PY_VERSION_HEX`` is the Python version number encoded in a single "
"integer."
msgstr ""

#: ../../c-api/apiabiversion.rst:11
msgid ""
"For example if the ``PY_VERSION_HEX`` is set to ``0x030401a2``, the "
"underlying version information can be found by treating it as a 32 bit "
"number in the following manner:"
msgstr ""

#: ../../c-api/apiabiversion.rst:16
msgid "Bytes"
msgstr ""

#: ../../c-api/apiabiversion.rst:16
msgid "Bits (big endian order)"
msgstr ""

#: ../../c-api/apiabiversion.rst:16 ../../c-api/memory.rst:368
#: ../../c-api/memory.rst:513 ../../c-api/structures.rst:139
#: ../../c-api/structures.rst:279 ../../c-api/structures.rst:345
#: ../../c-api/tuple.rst:151 ../../c-api/tuple.rst:174
msgid "Meaning"
msgstr ""

#: ../../c-api/apiabiversion.rst:18
msgid "``1``"
msgstr ""

#: ../../c-api/apiabiversion.rst:18
msgid "``1-8``"
msgstr ""

#: ../../c-api/apiabiversion.rst:18
msgid "``PY_MAJOR_VERSION`` (the ``3`` in ``3.4.1a2``)"
msgstr ""

#: ../../c-api/apiabiversion.rst:21
msgid "``2``"
msgstr ""

#: ../../c-api/apiabiversion.rst:21
msgid "``9-16``"
msgstr ""

#: ../../c-api/apiabiversion.rst:21
msgid "``PY_MINOR_VERSION`` (the ``4`` in ``3.4.1a2``)"
msgstr ""

#: ../../c-api/apiabiversion.rst:24
msgid "``3``"
msgstr ""

#: ../../c-api/apiabiversion.rst:24
msgid "``17-24``"
msgstr ""

#: ../../c-api/apiabiversion.rst:24
msgid "``PY_MICRO_VERSION`` (the ``1`` in ``3.4.1a2``)"
msgstr ""

#: ../../c-api/apiabiversion.rst:27
msgid "``4``"
msgstr ""

#: ../../c-api/apiabiversion.rst:27
msgid "``25-28``"
msgstr ""

#: ../../c-api/apiabiversion.rst:27
msgid ""
"``PY_RELEASE_LEVEL`` (``0xA`` for alpha, ``0xB`` for beta, ``0xC`` for "
"release candidate and ``0xF`` for final), in this case it is alpha."
msgstr ""

#: ../../c-api/apiabiversion.rst:32
msgid "``29-32``"
msgstr ""

#: ../../c-api/apiabiversion.rst:32
msgid "``PY_RELEASE_SERIAL`` (the ``2`` in ``3.4.1a2``, zero for final releases)"
msgstr ""

#: ../../c-api/apiabiversion.rst:36
msgid "Thus ``3.4.1a2`` is hexversion ``0x030401a2``."
msgstr ""

#: ../../c-api/apiabiversion.rst:38
msgid "All the given macros are defined in :source:`Include/patchlevel.h`."
msgstr ""

#: ../../c-api/arg.rst:6
msgid "Parsing arguments and building values"
msgstr ""

#: ../../c-api/arg.rst:8
msgid ""
"These functions are useful when creating your own extensions functions "
"and methods.  Additional information and examples are available in :ref"
":`extending-index`."
msgstr ""

#: ../../c-api/arg.rst:12
msgid ""
"The first three of these functions described, :c:func:`PyArg_ParseTuple`,"
" :c:func:`PyArg_ParseTupleAndKeywords`, and :c:func:`PyArg_Parse`, all "
"use *format strings* which are used to tell the function about the "
"expected arguments.  The format strings use the same syntax for each of "
"these functions."
msgstr ""

#: ../../c-api/arg.rst:19
msgid "Parsing arguments"
msgstr ""

#: ../../c-api/arg.rst:21
msgid ""
"A format string consists of zero or more \"format units.\"  A format unit"
" describes one Python object; it is usually a single character or a "
"parenthesized sequence of format units.  With a few exceptions, a format "
"unit that is not a parenthesized sequence normally corresponds to a "
"single address argument to these functions.  In the following "
"description, the quoted form is the format unit; the entry in (round) "
"parentheses is the Python object type that matches the format unit; and "
"the entry in [square] brackets is the type of the C variable(s) whose "
"address should be passed."
msgstr ""

#: ../../c-api/arg.rst:31
msgid "Strings and buffers"
msgstr ""

#: ../../c-api/arg.rst:33
msgid ""
"These formats allow accessing an object as a contiguous chunk of memory. "
"You don't have to provide raw storage for the returned unicode or bytes "
"area."
msgstr ""

#: ../../c-api/arg.rst:37
msgid ""
"In general, when a format sets a pointer to a buffer, the buffer is "
"managed by the corresponding Python object, and the buffer shares the "
"lifetime of this object.  You won't have to release any memory yourself. "
"The only exceptions are ``es``, ``es#``, ``et`` and ``et#``."
msgstr ""

#: ../../c-api/arg.rst:42
msgid ""
"However, when a :c:type:`Py_buffer` structure gets filled, the underlying"
" buffer is locked so that the caller can subsequently use the buffer even"
" inside a :c:type:`Py_BEGIN_ALLOW_THREADS` block without the risk of "
"mutable data being resized or destroyed.  As a result, **you have to "
"call** :c:func:`PyBuffer_Release` after you have finished processing the "
"data (or in any early abort case)."
msgstr ""

#: ../../c-api/arg.rst:49
msgid "Unless otherwise stated, buffers are not NUL-terminated."
msgstr ""

#: ../../c-api/arg.rst:51
msgid ""
"Some formats require a read-only :term:`bytes-like object`, and set a "
"pointer instead of a buffer structure.  They work by checking that the "
"object's :c:member:`PyBufferProcs.bf_releasebuffer` field is ``NULL``, "
"which disallows mutable objects such as :class:`bytearray`."
msgstr ""

#: ../../c-api/arg.rst:58
msgid ""
"For all ``#`` variants of formats (``s#``, ``y#``, etc.), the type of the"
" length argument (int or :c:type:`Py_ssize_t`) is controlled by defining "
"the macro :c:macro:`PY_SSIZE_T_CLEAN` before including :file:`Python.h`."
"  If the macro was defined, length is a :c:type:`Py_ssize_t` rather than "
"an :c:type:`int`. This behavior will change in a future Python version to"
" only support :c:type:`Py_ssize_t` and drop :c:type:`int` support. It is "
"best to always define :c:macro:`PY_SSIZE_T_CLEAN`."
msgstr ""

#: ../../c-api/arg.rst:85
msgid "``s`` (:class:`str`) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:68
msgid ""
"Convert a Unicode object to a C pointer to a character string. A pointer "
"to an existing string is stored in the character pointer variable whose "
"address you pass.  The C string is NUL-terminated. The Python string must"
" not contain embedded null code points; if it does, a :exc:`ValueError` "
"exception is raised. Unicode objects are converted to C strings using "
"``'utf-8'`` encoding. If this conversion fails, a :exc:`UnicodeError` is "
"raised."
msgstr ""

#: ../../c-api/arg.rst:77
msgid ""
"This format does not accept :term:`bytes-like objects <bytes-like "
"object>`.  If you want to accept filesystem paths and convert them to C "
"character strings, it is preferable to use the ``O&`` format with "
":c:func:`PyUnicode_FSConverter` as *converter*."
msgstr ""

#: ../../c-api/arg.rst:83 ../../c-api/arg.rst:150
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null code points "
"were encountered in the Python string."
msgstr ""

#: ../../c-api/arg.rst:91
msgid "``s*`` (:class:`str` or :term:`bytes-like object`) [Py_buffer]"
msgstr ""

#: ../../c-api/arg.rst:88
msgid ""
"This format accepts Unicode objects as well as bytes-like objects. It "
"fills a :c:type:`Py_buffer` structure provided by the caller. In this "
"case the resulting C string may contain embedded NUL bytes. Unicode "
"objects are converted to C strings using ``'utf-8'`` encoding."
msgstr ""

#: ../../c-api/arg.rst:98
msgid ""
"``s#`` (:class:`str`, read-only :term:`bytes-like object`) [const char "
"\\*, int or :c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:94
msgid ""
"Like ``s*``, except that it doesn't accept mutable objects. The result is"
" stored into two C variables, the first one a pointer to a C string, the "
"second one its length. The string may contain embedded null bytes. "
"Unicode objects are converted to C strings using ``'utf-8'`` encoding."
msgstr ""

#: ../../c-api/arg.rst:102 ../../c-api/arg.rst:566
msgid "``z`` (:class:`str` or ``None``) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:101
msgid ""
"Like ``s``, but the Python object may also be ``None``, in which case the"
" C pointer is set to ``NULL``."
msgstr ""

#: ../../c-api/arg.rst:106
msgid "``z*`` (:class:`str`, :term:`bytes-like object` or ``None``) [Py_buffer]"
msgstr ""

#: ../../c-api/arg.rst:105
msgid ""
"Like ``s*``, but the Python object may also be ``None``, in which case "
"the ``buf`` member of the :c:type:`Py_buffer` structure is set to "
"``NULL``."
msgstr ""

#: ../../c-api/arg.rst:110
msgid ""
"``z#`` (:class:`str`, read-only :term:`bytes-like object` or ``None``) "
"[const char \\*, int or :c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:109
msgid ""
"Like ``s#``, but the Python object may also be ``None``, in which case "
"the C pointer is set to ``NULL``."
msgstr ""

#: ../../c-api/arg.rst:120
msgid "``y`` (read-only :term:`bytes-like object`) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:113
msgid ""
"This format converts a bytes-like object to a C pointer to a character "
"string; it does not accept Unicode objects.  The bytes buffer must not "
"contain embedded null bytes; if it does, a :exc:`ValueError` exception is"
" raised."
msgstr ""

#: ../../c-api/arg.rst:118
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null bytes were "
"encountered in the bytes buffer."
msgstr ""

#: ../../c-api/arg.rst:125
msgid "``y*`` (:term:`bytes-like object`) [Py_buffer]"
msgstr ""

#: ../../c-api/arg.rst:123
msgid ""
"This variant on ``s*`` doesn't accept Unicode objects, only bytes-like "
"objects.  **This is the recommended way to accept binary data.**"
msgstr ""

#: ../../c-api/arg.rst:129
msgid ""
"``y#`` (read-only :term:`bytes-like object`) [const char \\*, int or "
":c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:128
msgid ""
"This variant on ``s#`` doesn't accept Unicode objects, only bytes-like "
"objects."
msgstr ""

#: ../../c-api/arg.rst:134
msgid "``S`` (:class:`bytes`) [PyBytesObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:132
msgid ""
"Requires that the Python object is a :class:`bytes` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not "
"a bytes object.  The C variable may also be declared as "
":c:type:`PyObject*`."
msgstr ""

#: ../../c-api/arg.rst:139
msgid "``Y`` (:class:`bytearray`) [PyByteArrayObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:137
msgid ""
"Requires that the Python object is a :class:`bytearray` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not "
"a :class:`bytearray` object. The C variable may also be declared as "
":c:type:`PyObject*`."
msgstr ""

#: ../../c-api/arg.rst:156
msgid "``u`` (:class:`str`) [const Py_UNICODE \\*]"
msgstr ""

#: ../../c-api/arg.rst:142
msgid ""
"Convert a Python Unicode object to a C pointer to a NUL-terminated buffer"
" of Unicode characters.  You must pass the address of a "
":c:type:`Py_UNICODE` pointer variable, which will be filled with the "
"pointer to an existing Unicode buffer.  Please note that the width of a "
":c:type:`Py_UNICODE` character depends on compilation options (it is "
"either 16 or 32 bits). The Python string must not contain embedded null "
"code points; if it does, a :exc:`ValueError` exception is raised."
msgstr ""

#: ../../c-api/arg.rst:157 ../../c-api/arg.rst:166 ../../c-api/arg.rst:174
#: ../../c-api/arg.rst:182
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsWideCharString`."
msgstr ""

#: ../../c-api/arg.rst:165
msgid "``u#`` (:class:`str`) [const Py_UNICODE \\*, int or :c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:159
msgid ""
"This variant on ``u`` stores into two C variables, the first one a "
"pointer to a Unicode data buffer, the second one its length.  This "
"variant allows null code points."
msgstr ""

#: ../../c-api/arg.rst:173
msgid "``Z`` (:class:`str` or ``None``) [const Py_UNICODE \\*]"
msgstr ""

#: ../../c-api/arg.rst:168
msgid ""
"Like ``u``, but the Python object may also be ``None``, in which case the"
" :c:type:`Py_UNICODE` pointer is set to ``NULL``."
msgstr ""

#: ../../c-api/arg.rst:181
msgid ""
"``Z#`` (:class:`str` or ``None``) [const Py_UNICODE \\*, int or "
":c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:176
msgid ""
"Like ``u#``, but the Python object may also be ``None``, in which case "
"the :c:type:`Py_UNICODE` pointer is set to ``NULL``."
msgstr ""

#: ../../c-api/arg.rst:186
msgid "``U`` (:class:`str`) [PyObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:184
msgid ""
"Requires that the Python object is a Unicode object, without attempting "
"any conversion.  Raises :exc:`TypeError` if the object is not a Unicode "
"object.  The C variable may also be declared as :c:type:`PyObject*`."
msgstr ""

#: ../../c-api/arg.rst:192
msgid "``w*`` (read-write :term:`bytes-like object`) [Py_buffer]"
msgstr ""

#: ../../c-api/arg.rst:189
msgid ""
"This format accepts any object which implements the read-write buffer "
"interface. It fills a :c:type:`Py_buffer` structure provided by the "
"caller. The buffer may contain embedded null bytes. The caller have to "
"call :c:func:`PyBuffer_Release` when it is done with the buffer."
msgstr ""

#: ../../c-api/arg.rst:209
msgid "``es`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer]"
msgstr ""

#: ../../c-api/arg.rst:195
msgid ""
"This variant on ``s`` is used for encoding Unicode into a character "
"buffer. It only works for encoded data without embedded NUL bytes."
msgstr ""

#: ../../c-api/arg.rst:198
msgid ""
"This format requires two arguments.  The first is only used as input, and"
" must be a :c:type:`const char*` which points to the name of an encoding "
"as a NUL-terminated string, or ``NULL``, in which case ``'utf-8'`` "
"encoding is used. An exception is raised if the named encoding is not "
"known to Python.  The second argument must be a :c:type:`char**`; the "
"value of the pointer it references will be set to a buffer with the "
"contents of the argument text. The text will be encoded in the encoding "
"specified by the first argument."
msgstr ""

#: ../../c-api/arg.rst:206
msgid ""
":c:func:`PyArg_ParseTuple` will allocate a buffer of the needed size, "
"copy the encoded data into this buffer and adjust *\\*buffer* to "
"reference the newly allocated storage.  The caller is responsible for "
"calling :c:func:`PyMem_Free` to free the allocated buffer after use."
msgstr ""

#: ../../c-api/arg.rst:214
msgid ""
"``et`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer]"
msgstr ""

#: ../../c-api/arg.rst:212
msgid ""
"Same as ``es`` except that byte string objects are passed through without"
" recoding them.  Instead, the implementation assumes that the byte string"
" object uses the encoding passed in as parameter."
msgstr ""

#: ../../c-api/arg.rst:245
msgid ""
"``es#`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer, int or"
" :c:type:`Py_ssize_t` \\*buffer_length]"
msgstr ""

#: ../../c-api/arg.rst:217
msgid ""
"This variant on ``s#`` is used for encoding Unicode into a character "
"buffer. Unlike the ``es`` format, this variant allows input data which "
"contains NUL characters."
msgstr ""

#: ../../c-api/arg.rst:221
msgid ""
"It requires three arguments.  The first is only used as input, and must "
"be a :c:type:`const char*` which points to the name of an encoding as a "
"NUL-terminated string, or ``NULL``, in which case ``'utf-8'`` encoding is"
" used. An exception is raised if the named encoding is not known to "
"Python.  The second argument must be a :c:type:`char**`; the value of the"
" pointer it references will be set to a buffer with the contents of the "
"argument text. The text will be encoded in the encoding specified by the "
"first argument. The third argument must be a pointer to an integer; the "
"referenced integer will be set to the number of bytes in the output "
"buffer."
msgstr ""

#: ../../c-api/arg.rst:231
msgid "There are two modes of operation:"
msgstr ""

#: ../../c-api/arg.rst:233
msgid ""
"If *\\*buffer* points a ``NULL`` pointer, the function will allocate a "
"buffer of the needed size, copy the encoded data into this buffer and set"
" *\\*buffer* to reference the newly allocated storage.  The caller is "
"responsible for calling :c:func:`PyMem_Free` to free the allocated buffer"
" after usage."
msgstr ""

#: ../../c-api/arg.rst:238
msgid ""
"If *\\*buffer* points to a non-``NULL`` pointer (an already allocated "
"buffer), :c:func:`PyArg_ParseTuple` will use this location as the buffer "
"and interpret the initial value of *\\*buffer_length* as the buffer size."
"  It will then copy the encoded data into the buffer and NUL-terminate "
"it.  If the buffer is not large enough, a :exc:`ValueError` will be set."
msgstr ""

#: ../../c-api/arg.rst:244
msgid ""
"In both cases, *\\*buffer_length* is set to the length of the encoded "
"data without the trailing NUL byte."
msgstr ""

#: ../../c-api/arg.rst:250
msgid ""
"``et#`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer, int or :c:type:`Py_ssize_t` "
"\\*buffer_length]"
msgstr ""

#: ../../c-api/arg.rst:248
msgid ""
"Same as ``es#`` except that byte string objects are passed through "
"without recoding them. Instead, the implementation assumes that the byte "
"string object uses the encoding passed in as parameter."
msgstr ""

#: ../../c-api/arg.rst:253
msgid "Numbers"
msgstr ""

#: ../../c-api/arg.rst:257
msgid "``b`` (:class:`int`) [unsigned char]"
msgstr ""

#: ../../c-api/arg.rst:256
msgid ""
"Convert a nonnegative Python integer to an unsigned tiny int, stored in a"
" C :c:type:`unsigned char`."
msgstr ""

#: ../../c-api/arg.rst:261 ../../c-api/arg.rst:600
msgid "``B`` (:class:`int`) [unsigned char]"
msgstr ""

#: ../../c-api/arg.rst:260
msgid ""
"Convert a Python integer to a tiny int without overflow checking, stored "
"in a C :c:type:`unsigned char`."
msgstr ""

#: ../../c-api/arg.rst:264 ../../c-api/arg.rst:594
msgid "``h`` (:class:`int`) [short int]"
msgstr ""

#: ../../c-api/arg.rst:264
msgid "Convert a Python integer to a C :c:type:`short int`."
msgstr ""

#: ../../c-api/arg.rst:268 ../../c-api/arg.rst:603
msgid "``H`` (:class:`int`) [unsigned short int]"
msgstr ""

#: ../../c-api/arg.rst:267
msgid ""
"Convert a Python integer to a C :c:type:`unsigned short int`, without "
"overflow checking."
msgstr ""

#: ../../c-api/arg.rst:271 ../../c-api/arg.rst:588
msgid "``i`` (:class:`int`) [int]"
msgstr ""

#: ../../c-api/arg.rst:271
msgid "Convert a Python integer to a plain C :c:type:`int`."
msgstr ""

#: ../../c-api/arg.rst:275 ../../c-api/arg.rst:606
msgid "``I`` (:class:`int`) [unsigned int]"
msgstr ""

#: ../../c-api/arg.rst:274
msgid ""
"Convert a Python integer to a C :c:type:`unsigned int`, without overflow "
"checking."
msgstr ""

#: ../../c-api/arg.rst:278 ../../c-api/arg.rst:597
msgid "``l`` (:class:`int`) [long int]"
msgstr ""

#: ../../c-api/arg.rst:278
msgid "Convert a Python integer to a C :c:type:`long int`."
msgstr ""

#: ../../c-api/arg.rst:282 ../../c-api/arg.rst:609
msgid "``k`` (:class:`int`) [unsigned long]"
msgstr ""

#: ../../c-api/arg.rst:281
msgid ""
"Convert a Python integer to a C :c:type:`unsigned long` without overflow "
"checking."
msgstr ""

#: ../../c-api/arg.rst:285 ../../c-api/arg.rst:612
msgid "``L`` (:class:`int`) [long long]"
msgstr ""

#: ../../c-api/arg.rst:285
msgid "Convert a Python integer to a C :c:type:`long long`."
msgstr ""

#: ../../c-api/arg.rst:289 ../../c-api/arg.rst:615
msgid "``K`` (:class:`int`) [unsigned long long]"
msgstr ""

#: ../../c-api/arg.rst:288
msgid ""
"Convert a Python integer to a C :c:type:`unsigned long long` without "
"overflow checking."
msgstr ""

#: ../../c-api/arg.rst:292 ../../c-api/arg.rst:618
msgid "``n`` (:class:`int`) [Py_ssize_t]"
msgstr ""

#: ../../c-api/arg.rst:292
msgid "Convert a Python integer to a C :c:type:`Py_ssize_t`."
msgstr ""

#: ../../c-api/arg.rst:299
msgid "``c`` (:class:`bytes` or :class:`bytearray` of length 1) [char]"
msgstr ""

#: ../../c-api/arg.rst:295
msgid ""
"Convert a Python byte, represented as a :class:`bytes` or "
":class:`bytearray` object of length 1, to a C :c:type:`char`."
msgstr ""

#: ../../c-api/arg.rst:298
msgid "Allow :class:`bytearray` objects."
msgstr ""

#: ../../c-api/arg.rst:303 ../../c-api/arg.rst:626
msgid "``C`` (:class:`str` of length 1) [int]"
msgstr ""

#: ../../c-api/arg.rst:302
msgid ""
"Convert a Python character, represented as a :class:`str` object of "
"length 1, to a C :c:type:`int`."
msgstr ""

#: ../../c-api/arg.rst:306 ../../c-api/arg.rst:632
msgid "``f`` (:class:`float`) [float]"
msgstr ""

#: ../../c-api/arg.rst:306
msgid "Convert a Python floating point number to a C :c:type:`float`."
msgstr ""

#: ../../c-api/arg.rst:309 ../../c-api/arg.rst:629
msgid "``d`` (:class:`float`) [double]"
msgstr ""

#: ../../c-api/arg.rst:309
msgid "Convert a Python floating point number to a C :c:type:`double`."
msgstr ""

#: ../../c-api/arg.rst:312
msgid "``D`` (:class:`complex`) [Py_complex]"
msgstr ""

#: ../../c-api/arg.rst:312
msgid "Convert a Python complex number to a C :c:type:`Py_complex` structure."
msgstr ""

#: ../../c-api/arg.rst:315
msgid "Other objects"
msgstr ""

#: ../../c-api/arg.rst:320 ../../c-api/arg.rst:643
msgid "``O`` (object) [PyObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:318
msgid ""
"Store a Python object (without any conversion) in a C object pointer.  "
"The C program thus receives the actual object that was passed.  The "
"object's reference count is not increased.  The pointer stored is not "
"``NULL``."
msgstr ""

#: ../../c-api/arg.rst:327
msgid "``O!`` (object) [*typeobject*, PyObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:323
msgid ""
"Store a Python object in a C object pointer.  This is similar to ``O``, "
"but takes two C arguments: the first is the address of a Python type "
"object, the second is the address of the C variable (of type "
":c:type:`PyObject*`) into which the object pointer is stored.  If the "
"Python object does not have the required type, :exc:`TypeError` is "
"raised."
msgstr ""

#: ../../c-api/arg.rst:352 ../../c-api/arg.rst:657
msgid "``O&`` (object) [*converter*, *anything*]"
msgstr ""

#: ../../c-api/arg.rst:332
msgid ""
"Convert a Python object to a C variable through a *converter* function.  "
"This takes two arguments: the first is a function, the second is the "
"address of a C variable (of arbitrary type), converted to :c:type:`void "
"*`.  The *converter* function in turn is called as follows::"
msgstr ""

#: ../../c-api/arg.rst:339
msgid ""
"where *object* is the Python object to be converted and *address* is the "
":c:type:`void*` argument that was passed to the :c:func:`PyArg_Parse\\*` "
"function. The returned *status* should be ``1`` for a successful "
"conversion and ``0`` if the conversion has failed.  When the conversion "
"fails, the *converter* function should raise an exception and leave the "
"content of *address* unmodified."
msgstr ""

#: ../../c-api/arg.rst:345
msgid ""
"If the *converter* returns ``Py_CLEANUP_SUPPORTED``, it may get called a "
"second time if the argument parsing eventually fails, giving the "
"converter a chance to release any memory that it had already allocated. "
"In this second call, the *object* parameter will be ``NULL``; *address* "
"will have the same value as in the original call."
msgstr ""

#: ../../c-api/arg.rst:351
msgid "``Py_CLEANUP_SUPPORTED`` was added."
msgstr ""

#: ../../c-api/arg.rst:361
msgid "``p`` (:class:`bool`) [int]"
msgstr ""

#: ../../c-api/arg.rst:355
msgid ""
"Tests the value passed in for truth (a boolean **p**\\ redicate) and "
"converts the result to its equivalent C true/false integer value. Sets "
"the int to ``1`` if the expression was true and ``0`` if it was false. "
"This accepts any valid Python value.  See :ref:`truth` for more "
"information about how Python tests values for truth."
msgstr ""

#: ../../c-api/arg.rst:366 ../../c-api/arg.rst:660
msgid "``(items)`` (:class:`tuple`) [*matching-items*]"
msgstr ""

#: ../../c-api/arg.rst:364
msgid ""
"The object must be a Python sequence whose length is the number of format"
" units in *items*.  The C arguments must correspond to the individual "
"format units in *items*.  Format units for sequences may be nested."
msgstr ""

#: ../../c-api/arg.rst:368
msgid ""
"It is possible to pass \"long\" integers (integers whose value exceeds "
"the platform's :const:`LONG_MAX`) however no proper range checking is "
"done --- the most significant bits are silently truncated when the "
"receiving field is too small to receive the value (actually, the "
"semantics are inherited from downcasts in C --- your mileage may vary)."
msgstr ""

#: ../../c-api/arg.rst:374
msgid ""
"A few other characters have a meaning in a format string.  These may not "
"occur inside nested parentheses.  They are:"
msgstr ""

#: ../../c-api/arg.rst:382
msgid "``|``"
msgstr ""

#: ../../c-api/arg.rst:378
msgid ""
"Indicates that the remaining arguments in the Python argument list are "
"optional. The C variables corresponding to optional arguments should be "
"initialized to their default value --- when an optional argument is not "
"specified, :c:func:`PyArg_ParseTuple` does not touch the contents of the "
"corresponding C variable(s)."
msgstr ""

#: ../../c-api/arg.rst:391
msgid "``$``"
msgstr ""

#: ../../c-api/arg.rst:385
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` only: Indicates that the remaining "
"arguments in the Python argument list are keyword-only.  Currently, all "
"keyword-only arguments must also be optional arguments, so ``|`` must "
"always be specified before ``$`` in the format string."
msgstr ""

#: ../../c-api/arg.rst:396
msgid "``:``"
msgstr ""

#: ../../c-api/arg.rst:394
msgid ""
"The list of format units ends here; the string after the colon is used as"
" the function name in error messages (the \"associated value\" of the "
"exception that :c:func:`PyArg_ParseTuple` raises)."
msgstr ""

#: ../../c-api/arg.rst:401
msgid "``;``"
msgstr ""

#: ../../c-api/arg.rst:399
msgid ""
"The list of format units ends here; the string after the semicolon is "
"used as the error message *instead* of the default error message.  ``:`` "
"and ``;`` mutually exclude each other."
msgstr ""

#: ../../c-api/arg.rst:403
msgid ""
"Note that any Python object references which are provided to the caller "
"are *borrowed* references; do not decrement their reference count!"
msgstr ""

#: ../../c-api/arg.rst:406
msgid ""
"Additional arguments passed to these functions must be addresses of "
"variables whose type is determined by the format string; these are used "
"to store values from the input tuple.  There are a few cases, as "
"described in the list of format units above, where these parameters are "
"used as input values; they should match what is specified for the "
"corresponding format unit in that case."
msgstr ""

#: ../../c-api/arg.rst:412
msgid ""
"For the conversion to succeed, the *arg* object must match the format and"
" the format must be exhausted.  On success, the :c:func:`PyArg_Parse\\*` "
"functions return true, otherwise they return false and raise an "
"appropriate exception. When the :c:func:`PyArg_Parse\\*` functions fail "
"due to conversion failure in one of the format units, the variables at "
"the addresses corresponding to that and the following format units are "
"left untouched."
msgstr ""

#: ../../c-api/arg.rst:421
msgid "API Functions"
msgstr ""

#: ../../c-api/arg.rst:425
msgid ""
"Parse the parameters of a function that takes only positional parameters "
"into local variables.  Returns true on success; on failure, it returns "
"false and raises the appropriate exception."
msgstr ""

#: ../../c-api/arg.rst:432
msgid ""
"Identical to :c:func:`PyArg_ParseTuple`, except that it accepts a va_list"
" rather than a variable number of arguments."
msgstr ""

#: ../../c-api/arg.rst:438
msgid ""
"Parse the parameters of a function that takes both positional and keyword"
" parameters into local variables.  The *keywords* argument is a "
"``NULL``-terminated array of keyword parameter names.  Empty names denote"
" :ref:`positional-only parameters <positional-only_parameter>`. Returns "
"true on success; on failure, it returns false and raises the appropriate "
"exception."
msgstr ""

#: ../../c-api/arg.rst:445
msgid ""
"Added support for :ref:`positional-only parameters <positional-"
"only_parameter>`."
msgstr ""

#: ../../c-api/arg.rst:452
msgid ""
"Identical to :c:func:`PyArg_ParseTupleAndKeywords`, except that it "
"accepts a va_list rather than a variable number of arguments."
msgstr ""

#: ../../c-api/arg.rst:458
msgid ""
"Ensure that the keys in the keywords argument dictionary are strings.  "
"This is only needed if :c:func:`PyArg_ParseTupleAndKeywords` is not used,"
" since the latter already does this check."
msgstr ""

#: ../../c-api/arg.rst:468
msgid ""
"Function used to deconstruct the argument lists of \"old-style\" "
"functions --- these are functions which use the :const:`METH_OLDARGS` "
"parameter parsing method, which has been removed in Python 3.  This is "
"not recommended for use in parameter parsing in new code, and most code "
"in the standard interpreter has been modified to no longer use this for "
"that purpose.  It does remain a convenient way to decompose other tuples,"
" however, and may continue to be used for that purpose."
msgstr ""

#: ../../c-api/arg.rst:479
msgid ""
"A simpler form of parameter retrieval which does not use a format string "
"to specify the types of the arguments.  Functions which use this method "
"to retrieve their parameters should be declared as :const:`METH_VARARGS` "
"in function or method tables.  The tuple containing the actual parameters"
" should be passed as *args*; it must actually be a tuple.  The length of "
"the tuple must be at least *min* and no more than *max*; *min* and *max* "
"may be equal.  Additional arguments must be passed to the function, each "
"of which should be a pointer to a :c:type:`PyObject*` variable; these "
"will be filled in with the values from *args*; they will contain borrowed"
" references.  The variables which correspond to optional parameters not "
"given by *args* will not be filled in; these should be initialized by the"
" caller. This function returns true on success and false if *args* is not"
" a tuple or contains the wrong number of elements; an exception will be "
"set if there was a failure."
msgstr ""

#: ../../c-api/arg.rst:493
msgid ""
"This is an example of the use of this function, taken from the sources "
"for the :mod:`_weakref` helper module for weak references::"
msgstr ""

#: ../../c-api/arg.rst:509
msgid ""
"The call to :c:func:`PyArg_UnpackTuple` in this example is entirely "
"equivalent to this call to :c:func:`PyArg_ParseTuple`::"
msgstr ""

#: ../../c-api/arg.rst:517
msgid "Building values"
msgstr ""

#: ../../c-api/arg.rst:521
msgid ""
"Create a new value based on a format string similar to those accepted by "
"the :c:func:`PyArg_Parse\\*` family of functions and a sequence of "
"values.  Returns the value or ``NULL`` in the case of an error; an "
"exception will be raised if ``NULL`` is returned."
msgstr ""

#: ../../c-api/arg.rst:526
msgid ""
":c:func:`Py_BuildValue` does not always build a tuple.  It builds a tuple"
" only if its format string contains two or more format units.  If the "
"format string is empty, it returns ``None``; if it contains exactly one "
"format unit, it returns whatever object is described by that format unit."
"  To force it to return a tuple of size 0 or one, parenthesize the format"
" string."
msgstr ""

#: ../../c-api/arg.rst:532
msgid ""
"When memory buffers are passed as parameters to supply data to build "
"objects, as for the ``s`` and ``s#`` formats, the required data is "
"copied.  Buffers provided by the caller are never referenced by the "
"objects created by :c:func:`Py_BuildValue`.  In other words, if your code"
" invokes :c:func:`malloc` and passes the allocated memory to "
":c:func:`Py_BuildValue`, your code is responsible for calling "
":c:func:`free` for that memory once :c:func:`Py_BuildValue` returns."
msgstr ""

#: ../../c-api/arg.rst:540
msgid ""
"In the following description, the quoted form is the format unit; the "
"entry in (round) parentheses is the Python object type that the format "
"unit will return; and the entry in [square] brackets is the type of the C"
" value(s) to be passed."
msgstr ""

#: ../../c-api/arg.rst:544
msgid ""
"The characters space, tab, colon and comma are ignored in format strings "
"(but not within format units such as ``s#``).  This can be used to make "
"long format strings a tad more readable."
msgstr ""

#: ../../c-api/arg.rst:550
msgid "``s`` (:class:`str` or ``None``) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:549
msgid ""
"Convert a null-terminated C string to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is ``NULL``, ``None`` is "
"used."
msgstr ""

#: ../../c-api/arg.rst:555
msgid ""
"``s#`` (:class:`str` or ``None``) [const char \\*, int or "
":c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:553
msgid ""
"Convert a C string and its length to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is ``NULL``, the length is "
"ignored and ``None`` is returned."
msgstr ""

#: ../../c-api/arg.rst:559
msgid "``y`` (:class:`bytes`) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:558
msgid ""
"This converts a C string to a Python :class:`bytes` object.  If the C "
"string pointer is ``NULL``, ``None`` is returned."
msgstr ""

#: ../../c-api/arg.rst:563
msgid "``y#`` (:class:`bytes`) [const char \\*, int or :c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:562
msgid ""
"This converts a C string and its lengths to a Python object.  If the C "
"string pointer is ``NULL``, ``None`` is returned."
msgstr ""

#: ../../c-api/arg.rst:566 ../../c-api/arg.rst:582
msgid "Same as ``s``."
msgstr ""

#: ../../c-api/arg.rst:569
msgid ""
"``z#`` (:class:`str` or ``None``) [const char \\*, int or "
":c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:569 ../../c-api/arg.rst:585
msgid "Same as ``s#``."
msgstr ""

#: ../../c-api/arg.rst:574
msgid "``u`` (:class:`str`) [const wchar_t \\*]"
msgstr ""

#: ../../c-api/arg.rst:572
msgid ""
"Convert a null-terminated :c:type:`wchar_t` buffer of Unicode (UTF-16 or "
"UCS-4) data to a Python Unicode object.  If the Unicode buffer pointer is"
" ``NULL``, ``None`` is returned."
msgstr ""

#: ../../c-api/arg.rst:579
msgid "``u#`` (:class:`str`) [const wchar_t \\*, int or :c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:577
msgid ""
"Convert a Unicode (UTF-16 or UCS-4) data buffer and its length to a "
"Python Unicode object.   If the Unicode buffer pointer is ``NULL``, the "
"length is ignored and ``None`` is returned."
msgstr ""

#: ../../c-api/arg.rst:582
msgid "``U`` (:class:`str` or ``None``) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:585
msgid ""
"``U#`` (:class:`str` or ``None``) [const char \\*, int or "
":c:type:`Py_ssize_t`]"
msgstr ""

#: ../../c-api/arg.rst:588
msgid "Convert a plain C :c:type:`int` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:591
msgid "``b`` (:class:`int`) [char]"
msgstr ""

#: ../../c-api/arg.rst:591
msgid "Convert a plain C :c:type:`char` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:594
msgid "Convert a plain C :c:type:`short int` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:597
msgid "Convert a C :c:type:`long int` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:600
msgid "Convert a C :c:type:`unsigned char` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:603
msgid "Convert a C :c:type:`unsigned short int` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:606
msgid "Convert a C :c:type:`unsigned int` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:609
msgid "Convert a C :c:type:`unsigned long` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:612
msgid "Convert a C :c:type:`long long` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:615
msgid "Convert a C :c:type:`unsigned long long` to a Python integer object."
msgstr ""

#: ../../c-api/arg.rst:618
msgid "Convert a C :c:type:`Py_ssize_t` to a Python integer."
msgstr ""

#: ../../c-api/arg.rst:622
msgid "``c`` (:class:`bytes` of length 1) [char]"
msgstr ""

#: ../../c-api/arg.rst:621
msgid ""
"Convert a C :c:type:`int` representing a byte to a Python :class:`bytes` "
"object of length 1."
msgstr ""

#: ../../c-api/arg.rst:625
msgid ""
"Convert a C :c:type:`int` representing a character to Python :class:`str`"
" object of length 1."
msgstr ""

#: ../../c-api/arg.rst:629
msgid "Convert a C :c:type:`double` to a Python floating point number."
msgstr ""

#: ../../c-api/arg.rst:632
msgid "Convert a C :c:type:`float` to a Python floating point number."
msgstr ""

#: ../../c-api/arg.rst:635
msgid "``D`` (:class:`complex`) [Py_complex \\*]"
msgstr ""

#: ../../c-api/arg.rst:635
msgid "Convert a C :c:type:`Py_complex` structure to a Python complex number."
msgstr ""

#: ../../c-api/arg.rst:638
msgid ""
"Pass a Python object untouched (except for its reference count, which is "
"incremented by one).  If the object passed in is a ``NULL`` pointer, it "
"is assumed that this was caused because the call producing the argument "
"found an error and set an exception. Therefore, :c:func:`Py_BuildValue` "
"will return ``NULL`` but won't raise an exception.  If no exception has "
"been raised yet, :exc:`SystemError` is set."
msgstr ""

#: ../../c-api/arg.rst:646
msgid "``S`` (object) [PyObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:646
msgid "Same as ``O``."
msgstr ""

#: ../../c-api/arg.rst:651
msgid "``N`` (object) [PyObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:649
msgid ""
"Same as ``O``, except it doesn't increment the reference count on the "
"object. Useful when the object is created by a call to an object "
"constructor in the argument list."
msgstr ""

#: ../../c-api/arg.rst:654
msgid ""
"Convert *anything* to a Python object through a *converter* function.  "
"The function is called with *anything* (which should be compatible with "
":c:type:`void*`) as its argument and should return a \"new\" Python "
"object, or ``NULL`` if an error occurred."
msgstr ""

#: ../../c-api/arg.rst:660
msgid ""
"Convert a sequence of C values to a Python tuple with the same number of "
"items."
msgstr ""

#: ../../c-api/arg.rst:663
msgid "``[items]`` (:class:`list`) [*matching-items*]"
msgstr ""

#: ../../c-api/arg.rst:663
msgid ""
"Convert a sequence of C values to a Python list with the same number of "
"items."
msgstr ""

#: ../../c-api/arg.rst:668
msgid "``{items}`` (:class:`dict`) [*matching-items*]"
msgstr ""

#: ../../c-api/arg.rst:666
msgid ""
"Convert a sequence of C values to a Python dictionary.  Each pair of "
"consecutive C values adds one item to the dictionary, serving as key and "
"value, respectively."
msgstr ""

#: ../../c-api/arg.rst:670
msgid ""
"If there is an error in the format string, the :exc:`SystemError` "
"exception is set and ``NULL`` returned."
msgstr ""

#: ../../c-api/arg.rst:675
msgid ""
"Identical to :c:func:`Py_BuildValue`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ""

#: ../../c-api/bool.rst:6
msgid "Boolean Objects"
msgstr ""

#: ../../c-api/bool.rst:8
msgid ""
"Booleans in Python are implemented as a subclass of integers.  There are "
"only two booleans, :const:`Py_False` and :const:`Py_True`.  As such, the "
"normal creation and deletion functions don't apply to booleans.  The "
"following macros are available, however."
msgstr ""

#: ../../c-api/bool.rst:16
msgid "Return true if *o* is of type :c:data:`PyBool_Type`."
msgstr ""

#: ../../c-api/bool.rst:21
msgid ""
"The Python ``False`` object.  This object has no methods.  It needs to be"
" treated just like any other object with respect to reference counts."
msgstr ""

#: ../../c-api/bool.rst:27
msgid ""
"The Python ``True`` object.  This object has no methods.  It needs to be "
"treated just like any other object with respect to reference counts."
msgstr ""

#: ../../c-api/bool.rst:33
msgid ""
"Return :const:`Py_False` from a function, properly incrementing its "
"reference count."
msgstr ""

#: ../../c-api/bool.rst:39
msgid ""
"Return :const:`Py_True` from a function, properly incrementing its "
"reference count."
msgstr ""

#: ../../c-api/bool.rst:45
msgid ""
"Return a new reference to :const:`Py_True` or :const:`Py_False` depending"
" on the truth value of *v*."
msgstr ""

#: ../../c-api/buffer.rst:11
msgid "Buffer Protocol"
msgstr ""

#: ../../c-api/buffer.rst:18
msgid ""
"Certain objects available in Python wrap access to an underlying memory "
"array or *buffer*.  Such objects include the built-in :class:`bytes` and "
":class:`bytearray`, and some extension types like :class:`array.array`. "
"Third-party libraries may define their own types for special purposes, "
"such as image processing or numeric analysis."
msgstr ""

#: ../../c-api/buffer.rst:24
msgid ""
"While each of these types have their own semantics, they share the common"
" characteristic of being backed by a possibly large memory buffer.  It is"
" then desirable, in some situations, to access that buffer directly and "
"without intermediate copying."
msgstr ""

#: ../../c-api/buffer.rst:29
msgid ""
"Python provides such a facility at the C level in the form of the "
":ref:`buffer protocol <bufferobjects>`.  This protocol has two sides:"
msgstr ""

#: ../../c-api/buffer.rst:34
msgid ""
"on the producer side, a type can export a \"buffer interface\" which "
"allows objects of that type to expose information about their underlying "
"buffer. This interface is described in the section :ref:`buffer-structs`;"
msgstr ""

#: ../../c-api/buffer.rst:38
msgid ""
"on the consumer side, several means are available to obtain a pointer to "
"the raw underlying data of an object (for example a method parameter)."
msgstr ""

#: ../../c-api/buffer.rst:41
msgid ""
"Simple objects such as :class:`bytes` and :class:`bytearray` expose their"
" underlying buffer in byte-oriented form.  Other forms are possible; for "
"example, the elements exposed by an :class:`array.array` can be multi-"
"byte values."
msgstr ""

#: ../../c-api/buffer.rst:45
msgid ""
"An example consumer of the buffer interface is the "
":meth:`~io.BufferedIOBase.write` method of file objects: any object that "
"can export a series of bytes through the buffer interface can be written "
"to a file.  While :meth:`write` only needs read-only access to the "
"internal contents of the object passed to it, other methods such as "
":meth:`~io.BufferedIOBase.readinto` need write access to the contents of "
"their argument.  The buffer interface allows objects to selectively allow"
" or reject exporting of read-write and read-only buffers."
msgstr ""

#: ../../c-api/buffer.rst:53
msgid ""
"There are two ways for a consumer of the buffer interface to acquire a "
"buffer over a target object:"
msgstr ""

#: ../../c-api/buffer.rst:56
msgid "call :c:func:`PyObject_GetBuffer` with the right parameters;"
msgstr ""

#: ../../c-api/buffer.rst:58
msgid ""
"call :c:func:`PyArg_ParseTuple` (or one of its siblings) with one of the "
"``y*``, ``w*`` or ``s*`` :ref:`format codes <arg-parsing>`."
msgstr ""

#: ../../c-api/buffer.rst:61
msgid ""
"In both cases, :c:func:`PyBuffer_Release` must be called when the buffer "
"isn't needed anymore.  Failure to do so could lead to various issues such"
" as resource leaks."
msgstr ""

#: ../../c-api/buffer.rst:69
msgid "Buffer structure"
msgstr ""

#: ../../c-api/buffer.rst:71
msgid ""
"Buffer structures (or simply \"buffers\") are useful as a way to expose "
"the binary data from another object to the Python programmer.  They can "
"also be used as a zero-copy slicing mechanism.  Using their ability to "
"reference a block of memory, it is possible to expose any data to the "
"Python programmer quite easily.  The memory could be a large, constant "
"array in a C extension, it could be a raw block of memory for "
"manipulation before passing to an operating system library, or it could "
"be used to pass around structured data in its native, in-memory format."
msgstr ""

#: ../../c-api/buffer.rst:80
msgid ""
"Contrary to most data types exposed by the Python interpreter, buffers "
"are not :c:type:`PyObject` pointers but rather simple C structures.  This"
" allows them to be created and copied very simply.  When a generic "
"wrapper around a buffer is needed, a :ref:`memoryview <memoryview-"
"objects>` object can be created."
msgstr ""

#: ../../c-api/buffer.rst:86
msgid ""
"For short instructions how to write an exporting object, see :ref:`Buffer"
" Object Structures <buffer-structs>`. For obtaining a buffer, see "
":c:func:`PyObject_GetBuffer`."
msgstr ""

#: ../../c-api/buffer.rst:94
msgid ""
"A pointer to the start of the logical structure described by the buffer "
"fields. This can be any location within the underlying physical memory "
"block of the exporter. For example, with negative "
":c:member:`~Py_buffer.strides` the value may point to the end of the "
"memory block."
msgstr ""

#: ../../c-api/buffer.rst:99
msgid ""
"For :term:`contiguous` arrays, the value points to the beginning of the "
"memory block."
msgstr ""

#: ../../c-api/buffer.rst:104
msgid ""
"A new reference to the exporting object. The reference is owned by the "
"consumer and automatically decremented and set to ``NULL`` by "
":c:func:`PyBuffer_Release`. The field is the equivalent of the return "
"value of any standard C-API function."
msgstr ""

#: ../../c-api/buffer.rst:109
msgid ""
"As a special case, for *temporary* buffers that are wrapped by "
":c:func:`PyMemoryView_FromBuffer` or :c:func:`PyBuffer_FillInfo` this "
"field is ``NULL``. In general, exporting objects MUST NOT use this "
"scheme."
msgstr ""

#: ../../c-api/buffer.rst:116
msgid ""
"``product(shape) * itemsize``. For contiguous arrays, this is the length "
"of the underlying memory block. For non-contiguous arrays, it is the "
"length that the logical structure would have if it were copied to a "
"contiguous representation."
msgstr ""

#: ../../c-api/buffer.rst:121
msgid ""
"Accessing ``((char *)buf)[0] up to ((char *)buf)[len-1]`` is only valid "
"if the buffer has been obtained by a request that guarantees contiguity. "
"In most cases such a request will be :c:macro:`PyBUF_SIMPLE` or "
":c:macro:`PyBUF_WRITABLE`."
msgstr ""

#: ../../c-api/buffer.rst:127
msgid ""
"An indicator of whether the buffer is read-only. This field is controlled"
" by the :c:macro:`PyBUF_WRITABLE` flag."
msgstr ""

#: ../../c-api/buffer.rst:132
msgid ""
"Item size in bytes of a single element. Same as the value of "
":func:`struct.calcsize` called on non-``NULL`` "
":c:member:`~Py_buffer.format` values."
msgstr ""

#: ../../c-api/buffer.rst:135
msgid ""
"Important exception: If a consumer requests a buffer without the "
":c:macro:`PyBUF_FORMAT` flag, :c:member:`~Py_buffer.format` will be set "
"to  ``NULL``,  but :c:member:`~Py_buffer.itemsize` still has the value "
"for the original format."
msgstr ""

#: ../../c-api/buffer.rst:140
msgid ""
"If :c:member:`~Py_buffer.shape` is present, the equality ``product(shape)"
" * itemsize == len`` still holds and the consumer can use "
":c:member:`~Py_buffer.itemsize` to navigate the buffer."
msgstr ""

#: ../../c-api/buffer.rst:144
msgid ""
"If :c:member:`~Py_buffer.shape` is ``NULL`` as a result of a "
":c:macro:`PyBUF_SIMPLE` or a :c:macro:`PyBUF_WRITABLE` request, the "
"consumer must disregard :c:member:`~Py_buffer.itemsize` and assume "
"``itemsize == 1``."
msgstr ""

#: ../../c-api/buffer.rst:150
msgid ""
"A *NUL* terminated string in :mod:`struct` module style syntax describing"
" the contents of a single item. If this is ``NULL``, ``\"B\"`` (unsigned "
"bytes) is assumed."
msgstr ""

#: ../../c-api/buffer.rst:154
msgid "This field is controlled by the :c:macro:`PyBUF_FORMAT` flag."
msgstr ""

#: ../../c-api/buffer.rst:158
msgid ""
"The number of dimensions the memory represents as an n-dimensional array."
" If it is ``0``, :c:member:`~Py_buffer.buf` points to a single item "
"representing a scalar. In this case, :c:member:`~Py_buffer.shape`, "
":c:member:`~Py_buffer.strides` and :c:member:`~Py_buffer.suboffsets` MUST"
" be ``NULL``."
msgstr ""

#: ../../c-api/buffer.rst:163
msgid ""
"The macro :c:macro:`PyBUF_MAX_NDIM` limits the maximum number of "
"dimensions to 64. Exporters MUST respect this limit, consumers of multi-"
"dimensional buffers SHOULD be able to handle up to "
":c:macro:`PyBUF_MAX_NDIM` dimensions."
msgstr ""

#: ../../c-api/buffer.rst:169
msgid ""
"An array of :c:type:`Py_ssize_t` of length :c:member:`~Py_buffer.ndim` "
"indicating the shape of the memory as an n-dimensional array. Note that "
"``shape[0] * ... * shape[ndim-1] * itemsize`` MUST be equal to "
":c:member:`~Py_buffer.len`."
msgstr ""

#: ../../c-api/buffer.rst:174
msgid ""
"Shape values are restricted to ``shape[n] >= 0``. The case ``shape[n] == "
"0`` requires special attention. See `complex arrays`_ for further "
"information."
msgstr ""

#: ../../c-api/buffer.rst:178
msgid "The shape array is read-only for the consumer."
msgstr ""

#: ../../c-api/buffer.rst:182
msgid ""
"An array of :c:type:`Py_ssize_t` of length :c:member:`~Py_buffer.ndim` "
"giving the number of bytes to skip to get to a new element in each "
"dimension."
msgstr ""

#: ../../c-api/buffer.rst:186
msgid ""
"Stride values can be any integer. For regular arrays, strides are usually"
" positive, but a consumer MUST be able to handle the case ``strides[n] <="
" 0``. See `complex arrays`_ for further information."
msgstr ""

#: ../../c-api/buffer.rst:190
msgid "The strides array is read-only for the consumer."
msgstr ""

#: ../../c-api/buffer.rst:194
msgid ""
"An array of :c:type:`Py_ssize_t` of length :c:member:`~Py_buffer.ndim`. "
"If ``suboffsets[n] >= 0``, the values stored along the nth dimension are "
"pointers and the suboffset value dictates how many bytes to add to each "
"pointer after de-referencing. A suboffset value that is negative "
"indicates that no de-referencing should occur (striding in a contiguous "
"memory block)."
msgstr ""

#: ../../c-api/buffer.rst:201
msgid ""
"If all suboffsets are negative (i.e. no de-referencing is needed), then "
"this field must be ``NULL`` (the default value)."
msgstr ""

#: ../../c-api/buffer.rst:204
msgid ""
"This type of array representation is used by the Python Imaging Library "
"(PIL). See `complex arrays`_ for further information how to access "
"elements of such an array."
msgstr ""

#: ../../c-api/buffer.rst:208
msgid "The suboffsets array is read-only for the consumer."
msgstr ""

#: ../../c-api/buffer.rst:212
msgid ""
"This is for use internally by the exporting object. For example, this "
"might be re-cast as an integer by the exporter and used to store flags "
"about whether or not the shape, strides, and suboffsets arrays must be "
"freed when the buffer is released. The consumer MUST NOT alter this "
"value."
msgstr ""

#: ../../c-api/buffer.rst:221
msgid "Buffer request types"
msgstr ""

#: ../../c-api/buffer.rst:223
msgid ""
"Buffers are usually obtained by sending a buffer request to an exporting "
"object via :c:func:`PyObject_GetBuffer`. Since the complexity of the "
"logical structure of the memory can vary drastically, the consumer uses "
"the *flags* argument to specify the exact buffer type it can handle."
msgstr ""

#: ../../c-api/buffer.rst:228
msgid ""
"All :c:data:`Py_buffer` fields are unambiguously defined by the request "
"type."
msgstr ""

#: ../../c-api/buffer.rst:232
msgid "request-independent fields"
msgstr ""

#: ../../c-api/buffer.rst:233
msgid ""
"The following fields are not influenced by *flags* and must always be "
"filled in with the correct values: :c:member:`~Py_buffer.obj`, "
":c:member:`~Py_buffer.buf`, :c:member:`~Py_buffer.len`, "
":c:member:`~Py_buffer.itemsize`, :c:member:`~Py_buffer.ndim`."
msgstr ""

#: ../../c-api/buffer.rst:239
msgid "readonly, format"
msgstr ""

#: ../../c-api/buffer.rst:243
msgid ""
"Controls the :c:member:`~Py_buffer.readonly` field. If set, the exporter "
"MUST provide a writable buffer or else report failure. Otherwise, the "
"exporter MAY provide either a read-only or writable buffer, but the "
"choice MUST be consistent for all consumers."
msgstr ""

#: ../../c-api/buffer.rst:250
msgid ""
"Controls the :c:member:`~Py_buffer.format` field. If set, this field MUST"
" be filled in correctly. Otherwise, this field MUST be ``NULL``."
msgstr ""

#: ../../c-api/buffer.rst:254
msgid ""
":c:macro:`PyBUF_WRITABLE` can be \\|'d to any of the flags in the next "
"section. Since :c:macro:`PyBUF_SIMPLE` is defined as 0, "
":c:macro:`PyBUF_WRITABLE` can be used as a stand-alone flag to request a "
"simple writable buffer."
msgstr ""

#: ../../c-api/buffer.rst:258
msgid ""
":c:macro:`PyBUF_FORMAT` can be \\|'d to any of the flags except "
":c:macro:`PyBUF_SIMPLE`. The latter already implies format ``B`` "
"(unsigned bytes)."
msgstr ""

#: ../../c-api/buffer.rst:263
msgid "shape, strides, suboffsets"
msgstr ""

#: ../../c-api/buffer.rst:265
msgid ""
"The flags that control the logical structure of the memory are listed in "
"decreasing order of complexity. Note that each flag contains all bits of "
"the flags below it."
msgstr ""

#: ../../c-api/buffer.rst:272 ../../c-api/buffer.rst:296
#: ../../c-api/buffer.rst:321
msgid "Request"
msgstr ""

#: ../../c-api/buffer.rst:272 ../../c-api/buffer.rst:296
#: ../../c-api/buffer.rst:321
msgid "shape"
msgstr ""

#: ../../c-api/buffer.rst:272 ../../c-api/buffer.rst:296
#: ../../c-api/buffer.rst:321
msgid "strides"
msgstr ""

#: ../../c-api/buffer.rst:272 ../../c-api/buffer.rst:296
#: ../../c-api/buffer.rst:321
msgid "suboffsets"
msgstr ""

#: ../../c-api/buffer.rst:274 ../../c-api/buffer.rst:276
#: ../../c-api/buffer.rst:278 ../../c-api/buffer.rst:298
#: ../../c-api/buffer.rst:300 ../../c-api/buffer.rst:302
#: ../../c-api/buffer.rst:304 ../../c-api/buffer.rst:323
#: ../../c-api/buffer.rst:325 ../../c-api/buffer.rst:327
#: ../../c-api/buffer.rst:329 ../../c-api/buffer.rst:331
#: ../../c-api/buffer.rst:333 ../../c-api/buffer.rst:335
#: ../../c-api/buffer.rst:337
msgid "yes"
msgstr ""

#: ../../c-api/buffer.rst:274 ../../c-api/buffer.rst:323
#: ../../c-api/buffer.rst:325
msgid "if needed"
msgstr ""

#: ../../c-api/buffer.rst:276 ../../c-api/buffer.rst:278
#: ../../c-api/buffer.rst:280 ../../c-api/buffer.rst:298
#: ../../c-api/buffer.rst:300 ../../c-api/buffer.rst:302
#: ../../c-api/buffer.rst:304 ../../c-api/buffer.rst:327
#: ../../c-api/buffer.rst:329 ../../c-api/buffer.rst:331
#: ../../c-api/buffer.rst:333 ../../c-api/buffer.rst:335
#: ../../c-api/buffer.rst:337
msgid "NULL"
msgstr ""

#: ../../c-api/buffer.rst:287
msgid "contiguity requests"
msgstr ""

#: ../../c-api/buffer.rst:289
msgid ""
"C or Fortran :term:`contiguity <contiguous>` can be explicitly requested,"
" with and without stride information. Without stride information, the "
"buffer must be C-contiguous."
msgstr ""

#: ../../c-api/buffer.rst:296 ../../c-api/buffer.rst:321
msgid "contig"
msgstr ""

#: ../../c-api/buffer.rst:298 ../../c-api/buffer.rst:304
#: ../../c-api/buffer.rst:335 ../../c-api/buffer.rst:337
msgid "C"
msgstr ""

#: ../../c-api/buffer.rst:300
msgid "F"
msgstr ""

#: ../../c-api/buffer.rst:302
msgid "C or F"
msgstr ""

#: ../../c-api/buffer.rst:304
msgid ":c:macro:`PyBUF_ND`"
msgstr ""

#: ../../c-api/buffer.rst:309
msgid "compound requests"
msgstr ""

#: ../../c-api/buffer.rst:311
msgid ""
"All possible requests are fully defined by some combination of the flags "
"in the previous section. For convenience, the buffer protocol provides "
"frequently used combinations as single flags."
msgstr ""

#: ../../c-api/buffer.rst:315
msgid ""
"In the following table *U* stands for undefined contiguity. The consumer "
"would have to call :c:func:`PyBuffer_IsContiguous` to determine "
"contiguity."
msgstr ""

#: ../../c-api/buffer.rst:321
msgid "readonly"
msgstr ""

#: ../../c-api/buffer.rst:321
msgid "format"
msgstr ""

#: ../../c-api/buffer.rst:323 ../../c-api/buffer.rst:325
#: ../../c-api/buffer.rst:327 ../../c-api/buffer.rst:329
#: ../../c-api/buffer.rst:331 ../../c-api/buffer.rst:333
msgid "U"
msgstr ""

#: ../../c-api/buffer.rst:323 ../../c-api/buffer.rst:327
#: ../../c-api/buffer.rst:331 ../../c-api/buffer.rst:335
msgid "0"
msgstr ""

#: ../../c-api/buffer.rst:325 ../../c-api/buffer.rst:329
#: ../../c-api/buffer.rst:333 ../../c-api/buffer.rst:337
msgid "1 or 0"
msgstr ""

#: ../../c-api/buffer.rst:342
msgid "Complex arrays"
msgstr ""

#: ../../c-api/buffer.rst:345
msgid "NumPy-style: shape and strides"
msgstr ""

#: ../../c-api/buffer.rst:347
msgid ""
"The logical structure of NumPy-style arrays is defined by "
":c:member:`~Py_buffer.itemsize`, :c:member:`~Py_buffer.ndim`, "
":c:member:`~Py_buffer.shape` and :c:member:`~Py_buffer.strides`."
msgstr ""

#: ../../c-api/buffer.rst:350
msgid ""
"If ``ndim == 0``, the memory location pointed to by "
":c:member:`~Py_buffer.buf` is interpreted as a scalar of size "
":c:member:`~Py_buffer.itemsize`. In that case, both "
":c:member:`~Py_buffer.shape` and :c:member:`~Py_buffer.strides` are "
"``NULL``."
msgstr ""

#: ../../c-api/buffer.rst:354
msgid ""
"If :c:member:`~Py_buffer.strides` is ``NULL``, the array is interpreted "
"as a standard n-dimensional C-array. Otherwise, the consumer must access "
"an n-dimensional array as follows:"
msgstr ""

#: ../../c-api/buffer.rst:364
msgid ""
"As noted above, :c:member:`~Py_buffer.buf` can point to any location "
"within the actual memory block. An exporter can check the validity of a "
"buffer with this function:"
msgstr ""

#: ../../c-api/buffer.rst:398
msgid "PIL-style: shape, strides and suboffsets"
msgstr ""

#: ../../c-api/buffer.rst:400
msgid ""
"In addition to the regular items, PIL-style arrays can contain pointers "
"that must be followed in order to get to the next element in a dimension."
" For example, the regular three-dimensional C-array ``char v[2][2][3]`` "
"can also be viewed as an array of 2 pointers to 2 two-dimensional arrays:"
" ``char (*v[2])[2][3]``. In suboffsets representation, those two pointers"
" can be embedded at the start of :c:member:`~Py_buffer.buf`, pointing to "
"two ``char x[2][3]`` arrays that can be located anywhere in memory."
msgstr ""

#: ../../c-api/buffer.rst:409
msgid ""
"Here is a function that returns a pointer to the element in an N-D array "
"pointed to by an N-dimensional index when there are both non-``NULL`` "
"strides and suboffsets::"
msgstr ""

#: ../../c-api/buffer.rst:428
msgid "Buffer-related functions"
msgstr ""

#: ../../c-api/buffer.rst:432
msgid ""
"Return ``1`` if *obj* supports the buffer interface otherwise ``0``.  "
"When ``1`` is returned, it doesn't guarantee that "
":c:func:`PyObject_GetBuffer` will succeed.  This function always "
"succeeds."
msgstr ""

#: ../../c-api/buffer.rst:439
msgid ""
"Send a request to *exporter* to fill in *view* as specified by  *flags*. "
"If the exporter cannot provide a buffer of the exact type, it MUST raise "
":c:data:`PyExc_BufferError`, set ``view->obj`` to ``NULL`` and return "
"``-1``."
msgstr ""

#: ../../c-api/buffer.rst:444
msgid ""
"On success, fill in *view*, set ``view->obj`` to a new reference to "
"*exporter* and return 0. In the case of chained buffer providers that "
"redirect requests to a single object, ``view->obj`` MAY refer to this "
"object instead of *exporter* (See :ref:`Buffer Object Structures <buffer-"
"structs>`)."
msgstr ""

#: ../../c-api/buffer.rst:449
msgid ""
"Successful calls to :c:func:`PyObject_GetBuffer` must be paired with "
"calls to :c:func:`PyBuffer_Release`, similar to :c:func:`malloc` and "
":c:func:`free`. Thus, after the consumer is done with the buffer, "
":c:func:`PyBuffer_Release` must be called exactly once."
msgstr ""

#: ../../c-api/buffer.rst:457
msgid ""
"Release the buffer *view* and decrement the reference count for "
"``view->obj``. This function MUST be called when the buffer is no longer "
"being used, otherwise reference leaks may occur."
msgstr ""

#: ../../c-api/buffer.rst:461
msgid ""
"It is an error to call this function on a buffer that was not obtained "
"via :c:func:`PyObject_GetBuffer`."
msgstr ""

#: ../../c-api/buffer.rst:467
msgid ""
"Return the implied :c:data:`~Py_buffer.itemsize` from "
":c:data:`~Py_buffer.format`. This function is not yet implemented."
msgstr ""

#: ../../c-api/buffer.rst:473
msgid ""
"Return ``1`` if the memory defined by the *view* is C-style (*order* is "
"``'C'``) or Fortran-style (*order* is ``'F'``) :term:`contiguous` or "
"either one (*order* is ``'A'``).  Return ``0`` otherwise.  This function "
"always succeeds."
msgstr ""

#: ../../c-api/buffer.rst:480
msgid ""
"Get the memory area pointed to by the *indices* inside the given *view*. "
"*indices* must point to an array of ``view->ndim`` indices."
msgstr ""

#: ../../c-api/buffer.rst:486
msgid ""
"Copy contiguous *len* bytes from *buf* to *view*. *fort* can be ``'C'`` "
"or ``'F'`` (for C-style or Fortran-style ordering). ``0`` is returned on "
"success, ``-1`` on error."
msgstr ""

#: ../../c-api/buffer.rst:493
msgid ""
"Copy *len* bytes from *src* to its contiguous representation in *buf*. "
"*order* can be ``'C'`` or ``'F'`` or ``'A'`` (for C-style or Fortran-"
"style ordering or either one). ``0`` is returned on success, ``-1`` on "
"error."
msgstr ""

#: ../../c-api/buffer.rst:497
msgid "This function fails if *len* != *src->len*."
msgstr ""

#: ../../c-api/buffer.rst:502
msgid ""
"Fill the *strides* array with byte-strides of a :term:`contiguous` "
"(C-style if *order* is ``'C'`` or Fortran-style if *order* is ``'F'``) "
"array of the given shape with the given number of bytes per element."
msgstr ""

#: ../../c-api/buffer.rst:509
msgid ""
"Handle buffer requests for an exporter that wants to expose *buf* of size"
" *len* with writability set according to *readonly*. *buf* is interpreted"
" as a sequence of unsigned bytes."
msgstr ""

#: ../../c-api/buffer.rst:513
msgid ""
"The *flags* argument indicates the request type. This function always "
"fills in *view* as specified by flags, unless *buf* has been designated "
"as read-only and :c:macro:`PyBUF_WRITABLE` is set in *flags*."
msgstr ""

#: ../../c-api/buffer.rst:517
msgid ""
"On success, set ``view->obj`` to a new reference to *exporter* and return"
" 0. Otherwise, raise :c:data:`PyExc_BufferError`, set ``view->obj`` to "
"``NULL`` and return ``-1``;"
msgstr ""

#: ../../c-api/buffer.rst:521
msgid ""
"If this function is used as part of a :ref:`getbufferproc <buffer-"
"structs>`, *exporter* MUST be set to the exporting object and *flags* "
"must be passed unmodified. Otherwise, *exporter* MUST be ``NULL``."
msgstr ""

#: ../../c-api/bytearray.rst:6
msgid "Byte Array Objects"
msgstr ""

#: ../../c-api/bytearray.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python bytearray object."
msgstr ""

#: ../../c-api/bytearray.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python bytearray "
"type; it is the same object as :class:`bytearray` in the Python layer."
msgstr ""

#: ../../c-api/bytearray.rst:23
msgid "Type check macros"
msgstr ""

#: ../../c-api/bytearray.rst:27
msgid ""
"Return true if the object *o* is a bytearray object or an instance of a "
"subtype of the bytearray type."
msgstr ""

#: ../../c-api/bytearray.rst:33
msgid ""
"Return true if the object *o* is a bytearray object, but not an instance "
"of a subtype of the bytearray type."
msgstr ""

#: ../../c-api/bytearray.rst:38
msgid "Direct API functions"
msgstr ""

#: ../../c-api/bytearray.rst:42
msgid ""
"Return a new bytearray object from any object, *o*, that implements the "
":ref:`buffer protocol <bufferobjects>`."
msgstr ""

#: ../../c-api/bytearray.rst:50
msgid ""
"Create a new bytearray object from *string* and its length, *len*.  On "
"failure, ``NULL`` is returned."
msgstr ""

#: ../../c-api/bytearray.rst:56
msgid "Concat bytearrays *a* and *b* and return a new bytearray with the result."
msgstr ""

#: ../../c-api/bytearray.rst:61
msgid "Return the size of *bytearray* after checking for a ``NULL`` pointer."
msgstr ""

#: ../../c-api/bytearray.rst:66
msgid ""
"Return the contents of *bytearray* as a char array after checking for a "
"``NULL`` pointer.  The returned array always has an extra null byte "
"appended."
msgstr ""

#: ../../c-api/bytearray.rst:73
msgid "Resize the internal buffer of *bytearray* to *len*."
msgstr ""

#: ../../c-api/bytearray.rst:76
msgid "Macros"
msgstr ""

#: ../../c-api/bytearray.rst:78
msgid "These macros trade safety for speed and they don't check pointers."
msgstr ""

#: ../../c-api/bytearray.rst:82
msgid "Macro version of :c:func:`PyByteArray_AsString`."
msgstr ""

#: ../../c-api/bytearray.rst:87
msgid "Macro version of :c:func:`PyByteArray_Size`."
msgstr ""

#: ../../c-api/bytes.rst:6
msgid "Bytes Objects"
msgstr ""

#: ../../c-api/bytes.rst:8
msgid ""
"These functions raise :exc:`TypeError` when expecting a bytes parameter "
"and are called with a non-bytes parameter."
msgstr ""

#: ../../c-api/bytes.rst:16
msgid "This subtype of :c:type:`PyObject` represents a Python bytes object."
msgstr ""

#: ../../c-api/bytes.rst:21
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python bytes type;"
" it is the same object as :class:`bytes` in the Python layer."
msgstr ""

#: ../../c-api/bytes.rst:27
msgid ""
"Return true if the object *o* is a bytes object or an instance of a "
"subtype of the bytes type."
msgstr ""

#: ../../c-api/bytes.rst:33
msgid ""
"Return true if the object *o* is a bytes object, but not an instance of a"
" subtype of the bytes type."
msgstr ""

#: ../../c-api/bytes.rst:39
msgid ""
"Return a new bytes object with a copy of the string *v* as value on "
"success, and ``NULL`` on failure.  The parameter *v* must not be "
"``NULL``; it will not be checked."
msgstr ""

#: ../../c-api/bytes.rst:46
msgid ""
"Return a new bytes object with a copy of the string *v* as value and "
"length *len* on success, and ``NULL`` on failure.  If *v* is ``NULL``, "
"the contents of the bytes object are uninitialized."
msgstr ""

#: ../../c-api/bytes.rst:53
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number "
"of arguments, calculate the size of the resulting Python bytes object and"
" return a bytes object with the values formatted into it.  The variable "
"arguments must be C types and must correspond exactly to the format "
"characters in the *format* string.  The following format characters are "
"allowed:"
msgstr ""

#: ../../c-api/bytes.rst:68 ../../c-api/unicode.rst:457
msgid "Format Characters"
msgstr ""

#: ../../c-api/bytes.rst:68 ../../c-api/unicode.rst:457
msgid "Type"
msgstr ""

#: ../../c-api/bytes.rst:68 ../../c-api/unicode.rst:457
msgid "Comment"
msgstr ""

#: ../../c-api/bytes.rst:70 ../../c-api/unicode.rst:459
#, python-format
msgid ":attr:`%%`"
msgstr ""

#: ../../c-api/bytes.rst:70 ../../c-api/unicode.rst:459
msgid "*n/a*"
msgstr ""

#: ../../c-api/bytes.rst:70 ../../c-api/unicode.rst:459
#, python-format
msgid "The literal % character."
msgstr ""

#: ../../c-api/bytes.rst:72 ../../c-api/unicode.rst:461
#, python-format
msgid ":attr:`%c`"
msgstr ""

#: ../../c-api/bytes.rst:72 ../../c-api/bytes.rst:75 ../../c-api/bytes.rst:93
#: ../../c-api/bytes.rst:96 ../../c-api/structures.rst:146
#: ../../c-api/structures.rst:283 ../../c-api/structures.rst:290
#: ../../c-api/structures.rst:306 ../../c-api/typeobj.rst
#: ../../c-api/typeobj.rst:347 ../../c-api/typeobj.rst:359
#: ../../c-api/typeobj.rst:372 ../../c-api/typeobj.rst:383
#: ../../c-api/typeobj.rst:395 ../../c-api/typeobj.rst:415
#: ../../c-api/typeobj.rst:426 ../../c-api/typeobj.rst:448
#: ../../c-api/typeobj.rst:453 ../../c-api/typeobj.rst:458
#: ../../c-api/unicode.rst:461 ../../c-api/unicode.rst:464
#: ../../c-api/unicode.rst:497 ../../c-api/unicode.rst:500
msgid "int"
msgstr ""

#: ../../c-api/bytes.rst:72
msgid "A single byte, represented as a C int."
msgstr ""

#: ../../c-api/bytes.rst:75 ../../c-api/unicode.rst:464
#, python-format
msgid ":attr:`%d`"
msgstr ""

#: ../../c-api/bytes.rst:75 ../../c-api/unicode.rst:464
#, python-format
msgid "Equivalent to ``printf(\"%d\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:78 ../../c-api/unicode.rst:467
#, python-format
msgid ":attr:`%u`"
msgstr ""

#: ../../c-api/bytes.rst:78 ../../c-api/structures.rst:316
#: ../../c-api/typeobj.rst:144 ../../c-api/unicode.rst:467
msgid "unsigned int"
msgstr ""

#: ../../c-api/bytes.rst:78 ../../c-api/unicode.rst:467
#, python-format
msgid "Equivalent to ``printf(\"%u\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:81 ../../c-api/unicode.rst:470
#, python-format
msgid ":attr:`%ld`"
msgstr ""

#: ../../c-api/bytes.rst:81 ../../c-api/structures.rst:307
#: ../../c-api/unicode.rst:470 ../../c-api/unicode.rst:473
msgid "long"
msgstr ""

#: ../../c-api/bytes.rst:81 ../../c-api/unicode.rst:470
#, python-format
msgid "Equivalent to ``printf(\"%ld\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:84 ../../c-api/unicode.rst:476
#, python-format
msgid ":attr:`%lu`"
msgstr ""

#: ../../c-api/bytes.rst:84 ../../c-api/structures.rst:318
#: ../../c-api/typeobj.rst:84 ../../c-api/unicode.rst:476
msgid "unsigned long"
msgstr ""

#: ../../c-api/bytes.rst:84 ../../c-api/unicode.rst:476
#, python-format
msgid "Equivalent to ``printf(\"%lu\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:87 ../../c-api/unicode.rst:488
msgid ":attr:`%zd`"
msgstr ""

#: ../../c-api/bytes.rst:87 ../../c-api/structures.rst:286
#: ../../c-api/structures.rst:322 ../../c-api/typeobj.rst
#: ../../c-api/typeobj.rst:46 ../../c-api/typeobj.rst:48
#: ../../c-api/typeobj.rst:52 ../../c-api/typeobj.rst:99
#: ../../c-api/typeobj.rst:120 ../../c-api/typeobj.rst:413
#: ../../c-api/unicode.rst:488 ../../c-api/unicode.rst:491
msgid "Py_ssize_t"
msgstr ""

#: ../../c-api/bytes.rst:87 ../../c-api/unicode.rst:488
msgid "Equivalent to ``printf(\"%zd\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:90 ../../c-api/unicode.rst:494
msgid ":attr:`%zu`"
msgstr ""

#: ../../c-api/bytes.rst:90 ../../c-api/unicode.rst:494
msgid "size_t"
msgstr ""

#: ../../c-api/bytes.rst:90 ../../c-api/unicode.rst:494
msgid "Equivalent to ``printf(\"%zu\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:93 ../../c-api/unicode.rst:497
#, python-format
msgid ":attr:`%i`"
msgstr ""

#: ../../c-api/bytes.rst:93 ../../c-api/unicode.rst:497
#, python-format
msgid "Equivalent to ``printf(\"%i\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:96 ../../c-api/unicode.rst:500
#, python-format
msgid ":attr:`%x`"
msgstr ""

#: ../../c-api/bytes.rst:96 ../../c-api/unicode.rst:500
#, python-format
msgid "Equivalent to ``printf(\"%x\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:99 ../../c-api/unicode.rst:503
#, python-format
msgid ":attr:`%s`"
msgstr ""

#: ../../c-api/bytes.rst:99 ../../c-api/unicode.rst:503
msgid "const char\\*"
msgstr ""

#: ../../c-api/bytes.rst:99 ../../c-api/unicode.rst:503
msgid "A null-terminated C character array."
msgstr ""

#: ../../c-api/bytes.rst:102 ../../c-api/unicode.rst:506
msgid ":attr:`%p`"
msgstr ""

#: ../../c-api/bytes.rst:102 ../../c-api/unicode.rst:506
msgid "const void\\*"
msgstr ""

#: ../../c-api/bytes.rst:102 ../../c-api/unicode.rst:506
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal"
" ``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""

#: ../../c-api/bytes.rst:111
msgid ""
"An unrecognized format character causes all the rest of the format string"
" to be copied as-is to the result object, and any extra arguments "
"discarded."
msgstr ""

#: ../../c-api/bytes.rst:114
msgid ""
"For integer specifiers (d, u, ld, lu, zd, zu, i, x): the 0-conversion "
"flag has effect even when a precision is given."
msgstr ""

#: ../../c-api/bytes.rst:120
msgid ""
"Identical to :c:func:`PyBytes_FromFormat` except that it takes exactly "
"two arguments."
msgstr ""

#: ../../c-api/bytes.rst:126
msgid ""
"Return the bytes representation of object *o* that implements the buffer "
"protocol."
msgstr ""

#: ../../c-api/bytes.rst:132
msgid "Return the length of the bytes in bytes object *o*."
msgstr ""

#: ../../c-api/bytes.rst:137
msgid "Macro form of :c:func:`PyBytes_Size` but without error checking."
msgstr ""

#: ../../c-api/bytes.rst:142
msgid ""
"Return a pointer to the contents of *o*.  The pointer refers to the "
"internal buffer of *o*, which consists of ``len(o) + 1`` bytes.  The last"
" byte in the buffer is always null, regardless of whether there are any "
"other null bytes.  The data must not be modified in any way, unless the "
"object was just created using ``PyBytes_FromStringAndSize(NULL, size)``. "
"It must not be deallocated.  If *o* is not a bytes object at all, "
":c:func:`PyBytes_AsString` returns ``NULL`` and raises :exc:`TypeError`."
msgstr ""

#: ../../c-api/bytes.rst:154
msgid "Macro form of :c:func:`PyBytes_AsString` but without error checking."
msgstr ""

#: ../../c-api/bytes.rst:159
msgid ""
"Return the null-terminated contents of the object *obj* through the "
"output variables *buffer* and *length*."
msgstr ""

#: ../../c-api/bytes.rst:162
msgid ""
"If *length* is ``NULL``, the bytes object may not contain embedded null "
"bytes; if it does, the function returns ``-1`` and a :exc:`ValueError` is"
" raised."
msgstr ""

#: ../../c-api/bytes.rst:166
msgid ""
"The buffer refers to an internal buffer of *obj*, which includes an "
"additional null byte at the end (not counted in *length*).  The data must"
" not be modified in any way, unless the object was just created using "
"``PyBytes_FromStringAndSize(NULL, size)``.  It must not be deallocated.  "
"If *obj* is not a bytes object at all, :c:func:`PyBytes_AsStringAndSize` "
"returns ``-1`` and raises :exc:`TypeError`."
msgstr ""

#: ../../c-api/bytes.rst:173
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null bytes were "
"encountered in the bytes object."
msgstr ""

#: ../../c-api/bytes.rst:180
msgid ""
"Create a new bytes object in *\\*bytes* containing the contents of "
"*newpart* appended to *bytes*; the caller will own the new reference.  "
"The reference to the old value of *bytes* will be stolen.  If the new "
"object cannot be created, the old reference to *bytes* will still be "
"discarded and the value of *\\*bytes* will be set to ``NULL``; the "
"appropriate exception will be set."
msgstr ""

#: ../../c-api/bytes.rst:189
msgid ""
"Create a new bytes object in *\\*bytes* containing the contents of "
"*newpart* appended to *bytes*.  This version decrements the reference "
"count of *newpart*."
msgstr ""

#: ../../c-api/bytes.rst:196
msgid ""
"A way to resize a bytes object even though it is \"immutable\". Only use "
"this to build up a brand new bytes object; don't use this if the bytes "
"may already be known in other parts of the code.  It is an error to call "
"this function if the refcount on the input bytes object is not one. Pass "
"the address of an existing bytes object as an lvalue (it may be written "
"into), and the new size desired.  On success, *\\*bytes* holds the "
"resized bytes object and ``0`` is returned; the address in *\\*bytes* may"
" differ from its input value.  If the reallocation fails, the original "
"bytes object at *\\*bytes* is deallocated, *\\*bytes* is set to ``NULL``,"
" :exc:`MemoryError` is set, and ``-1`` is returned."
msgstr ""

#: ../../c-api/capsule.rst:6
msgid "Capsules"
msgstr ""

#: ../../c-api/capsule.rst:10
msgid ""
"Refer to :ref:`using-capsules` for more information on using these "
"objects."
msgstr ""

#: ../../c-api/capsule.rst:17
msgid ""
"This subtype of :c:type:`PyObject` represents an opaque value, useful for"
" C extension modules who need to pass an opaque value (as a "
":c:type:`void*` pointer) through Python code to other C code.  It is "
"often used to make a C function pointer defined in one module available "
"to other modules, so the regular import mechanism can be used to access C"
" APIs defined in dynamically loaded modules."
msgstr ""

#: ../../c-api/capsule.rst:27
msgid "The type of a destructor callback for a capsule.  Defined as::"
msgstr ""

#: ../../c-api/capsule.rst:31
msgid ""
"See :c:func:`PyCapsule_New` for the semantics of PyCapsule_Destructor "
"callbacks."
msgstr ""

#: ../../c-api/capsule.rst:37
msgid "Return true if its argument is a :c:type:`PyCapsule`."
msgstr ""

#: ../../c-api/capsule.rst:42
msgid ""
"Create a :c:type:`PyCapsule` encapsulating the *pointer*.  The *pointer* "
"argument may not be ``NULL``."
msgstr ""

#: ../../c-api/capsule.rst:45
msgid "On failure, set an exception and return ``NULL``."
msgstr ""

#: ../../c-api/capsule.rst:47
msgid ""
"The *name* string may either be ``NULL`` or a pointer to a valid C "
"string.  If non-``NULL``, this string must outlive the capsule.  (Though "
"it is permitted to free it inside the *destructor*.)"
msgstr ""

#: ../../c-api/capsule.rst:51
msgid ""
"If the *destructor* argument is not ``NULL``, it will be called with the "
"capsule as its argument when it is destroyed."
msgstr ""

#: ../../c-api/capsule.rst:54
msgid ""
"If this capsule will be stored as an attribute of a module, the *name* "
"should be specified as ``modulename.attributename``.  This will enable "
"other modules to import the capsule using :c:func:`PyCapsule_Import`."
msgstr ""

#: ../../c-api/capsule.rst:61
msgid ""
"Retrieve the *pointer* stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""

#: ../../c-api/capsule.rst:64
msgid ""
"The *name* parameter must compare exactly to the name stored in the "
"capsule. If the name stored in the capsule is ``NULL``, the *name* passed"
" in must also be ``NULL``.  Python uses the C function :c:func:`strcmp` "
"to compare capsule names."
msgstr ""

#: ../../c-api/capsule.rst:72
msgid ""
"Return the current destructor stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""

#: ../../c-api/capsule.rst:75
msgid ""
"It is legal for a capsule to have a ``NULL`` destructor.  This makes a "
"``NULL`` return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` "
"or :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/capsule.rst:82
msgid ""
"Return the current context stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""

#: ../../c-api/capsule.rst:85
msgid ""
"It is legal for a capsule to have a ``NULL`` context.  This makes a "
"``NULL`` return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` "
"or :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/capsule.rst:92
msgid ""
"Return the current name stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""

#: ../../c-api/capsule.rst:95
msgid ""
"It is legal for a capsule to have a ``NULL`` name.  This makes a ``NULL``"
" return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or "
":c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/capsule.rst:102
msgid ""
"Import a pointer to a C object from a capsule attribute in a module.  The"
" *name* parameter should specify the full name to the attribute, as in "
"``module.attribute``.  The *name* stored in the capsule must match this "
"string exactly.  If *no_block* is true, import the module without "
"blocking (using :c:func:`PyImport_ImportModuleNoBlock`).  If *no_block* "
"is false, import the module conventionally (using "
":c:func:`PyImport_ImportModule`)."
msgstr ""

#: ../../c-api/capsule.rst:109
msgid ""
"Return the capsule's internal *pointer* on success.  On failure, set an "
"exception and return ``NULL``."
msgstr ""

#: ../../c-api/capsule.rst:115
msgid ""
"Determines whether or not *capsule* is a valid capsule.  A valid capsule "
"is non-``NULL``, passes :c:func:`PyCapsule_CheckExact`, has a "
"non-``NULL`` pointer stored in it, and its internal name matches the "
"*name* parameter.  (See :c:func:`PyCapsule_GetPointer` for information on"
" how capsule names are compared.)"
msgstr ""

#: ../../c-api/capsule.rst:121
msgid ""
"In other words, if :c:func:`PyCapsule_IsValid` returns a true value, "
"calls to any of the accessors (any function starting with "
":c:func:`PyCapsule_Get`) are guaranteed to succeed."
msgstr ""

#: ../../c-api/capsule.rst:125
msgid ""
"Return a nonzero value if the object is valid and matches the name passed"
" in. Return ``0`` otherwise.  This function will not fail."
msgstr ""

#: ../../c-api/capsule.rst:131
msgid "Set the context pointer inside *capsule* to *context*."
msgstr ""

#: ../../c-api/capsule.rst:133 ../../c-api/capsule.rst:140
#: ../../c-api/capsule.rst:149 ../../c-api/capsule.rst:157
msgid "Return ``0`` on success.  Return nonzero and set an exception on failure."
msgstr ""

#: ../../c-api/capsule.rst:138
msgid "Set the destructor inside *capsule* to *destructor*."
msgstr ""

#: ../../c-api/capsule.rst:145
msgid ""
"Set the name inside *capsule* to *name*.  If non-``NULL``, the name must "
"outlive the capsule.  If the previous *name* stored in the capsule was "
"not ``NULL``, no attempt is made to free it."
msgstr ""

#: ../../c-api/capsule.rst:154
msgid ""
"Set the void pointer inside *capsule* to *pointer*.  The pointer may not "
"be ``NULL``."
msgstr ""

#: ../../c-api/cell.rst:6
msgid "Cell Objects"
msgstr ""

#: ../../c-api/cell.rst:8
msgid ""
"\"Cell\" objects are used to implement variables referenced by multiple "
"scopes. For each such variable, a cell object is created to store the "
"value; the local variables of each stack frame that references the value "
"contains a reference to the cells from outer scopes which also use that "
"variable.  When the value is accessed, the value contained in the cell is"
" used instead of the cell object itself.  This de-referencing of the cell"
" object requires support from the generated byte-code; these are not "
"automatically de-referenced when accessed. Cell objects are not likely to"
" be useful elsewhere."
msgstr ""

#: ../../c-api/cell.rst:20
msgid "The C structure used for cell objects."
msgstr ""

#: ../../c-api/cell.rst:25
msgid "The type object corresponding to cell objects."
msgstr ""

#: ../../c-api/cell.rst:30
msgid "Return true if *ob* is a cell object; *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/cell.rst:35
msgid ""
"Create and return a new cell object containing the value *ob*. The "
"parameter may be ``NULL``."
msgstr ""

#: ../../c-api/cell.rst:41
msgid "Return the contents of the cell *cell*."
msgstr ""

#: ../../c-api/cell.rst:46
msgid ""
"Return the contents of the cell *cell*, but without checking that *cell* "
"is non-``NULL`` and a cell object."
msgstr ""

#: ../../c-api/cell.rst:52
msgid ""
"Set the contents of the cell object *cell* to *value*.  This releases the"
" reference to any current content of the cell. *value* may be ``NULL``.  "
"*cell* must be non-``NULL``; if it is not a cell object, ``-1`` will be "
"returned.  On success, ``0`` will be returned."
msgstr ""

#: ../../c-api/cell.rst:60
msgid ""
"Sets the value of the cell object *cell* to *value*.  No reference counts"
" are adjusted, and no checks are made for safety; *cell* must be "
"non-``NULL`` and must be a cell object."
msgstr ""

#: ../../c-api/code.rst:8
msgid "Code Objects"
msgstr ""

#: ../../c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each "
"one represents a chunk of executable code that hasn't yet been bound into"
" a function."
msgstr ""

#: ../../c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields"
" of this type are subject to change at any time."
msgstr ""

#: ../../c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python "
":class:`code` type."
msgstr ""

#: ../../c-api/code.rst:30
msgid "Return true if *co* is a :class:`code` object."
msgstr ""

#: ../../c-api/code.rst:34
msgid "Return the number of free variables in *co*."
msgstr ""

#: ../../c-api/code.rst:38
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead.  Calling "
":c:func:`PyCode_New` directly can bind you to a precise Python version "
"since the definition of the bytecode changes often."
msgstr ""

#: ../../c-api/code.rst:45
msgid ""
"Similar to :c:func:`PyCode_New`, but with an extra \"posonlyargcount\" "
"for positional-only arguments."
msgstr ""

#: ../../c-api/code.rst:51
msgid ""
"Return a new empty code object with the specified filename, function "
"name, and first line number.  It is illegal to :func:`exec` or "
":func:`eval` the resulting code object."
msgstr ""

#: ../../c-api/codec.rst:4
msgid "Codec registry and support functions"
msgstr ""

#: ../../c-api/codec.rst:8
msgid "Register a new codec search function."
msgstr ""

#: ../../c-api/codec.rst:10
msgid ""
"As side effect, this tries to load the :mod:`encodings` package, if not "
"yet done, to make sure that it is always first in the list of search "
"functions."
msgstr ""

#: ../../c-api/codec.rst:15
msgid ""
"Return ``1`` or ``0`` depending on whether there is a registered codec "
"for the given *encoding*.  This function always succeeds."
msgstr ""

#: ../../c-api/codec.rst:20
msgid "Generic codec based encoding API."
msgstr ""

#: ../../c-api/codec.rst:22
msgid ""
"*object* is passed through the encoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors*"
" may be ``NULL`` to use the default method defined for the codec.  Raises"
" a :exc:`LookupError` if no encoder can be found."
msgstr ""

#: ../../c-api/codec.rst:29
msgid "Generic codec based decoding API."
msgstr ""

#: ../../c-api/codec.rst:31
msgid ""
"*object* is passed through the decoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors*"
" may be ``NULL`` to use the default method defined for the codec.  Raises"
" a :exc:`LookupError` if no encoder can be found."
msgstr ""

#: ../../c-api/codec.rst:38
msgid "Codec lookup API"
msgstr ""

#: ../../c-api/codec.rst:40
msgid ""
"In the following functions, the *encoding* string is looked up converted "
"to all lower-case characters, which makes encodings looked up through "
"this mechanism effectively case-insensitive.  If no codec is found, a "
":exc:`KeyError` is set and ``NULL`` returned."
msgstr ""

#: ../../c-api/codec.rst:47
msgid "Get an encoder function for the given *encoding*."
msgstr ""

#: ../../c-api/codec.rst:51
msgid "Get a decoder function for the given *encoding*."
msgstr ""

#: ../../c-api/codec.rst:55
msgid ""
"Get an :class:`~codecs.IncrementalEncoder` object for the given "
"*encoding*."
msgstr ""

#: ../../c-api/codec.rst:59
msgid ""
"Get an :class:`~codecs.IncrementalDecoder` object for the given "
"*encoding*."
msgstr ""

#: ../../c-api/codec.rst:63
msgid ""
"Get a :class:`~codecs.StreamReader` factory function for the given "
"*encoding*."
msgstr ""

#: ../../c-api/codec.rst:67
msgid ""
"Get a :class:`~codecs.StreamWriter` factory function for the given "
"*encoding*."
msgstr ""

#: ../../c-api/codec.rst:71
msgid "Registry API for Unicode encoding error handlers"
msgstr ""

#: ../../c-api/codec.rst:75
msgid ""
"Register the error handling callback function *error* under the given "
"*name*. This callback function will be called by a codec when it "
"encounters unencodable characters/undecodable bytes and *name* is "
"specified as the error parameter in the call to the encode/decode "
"function."
msgstr ""

#: ../../c-api/codec.rst:80
msgid ""
"The callback gets a single argument, an instance of "
":exc:`UnicodeEncodeError`, :exc:`UnicodeDecodeError` or "
":exc:`UnicodeTranslateError` that holds information about the problematic"
" sequence of characters or bytes and their offset in the original string "
"(see :ref:`unicodeexceptions` for functions to extract this information)."
"  The callback must either raise the given exception, or return a two-"
"item tuple containing the replacement for the problematic sequence, and "
"an integer giving the offset in the original string at which "
"encoding/decoding should be resumed."
msgstr ""

#: ../../c-api/codec.rst:90
msgid "Return ``0`` on success, ``-1`` on error."
msgstr ""

#: ../../c-api/codec.rst:94
msgid ""
"Lookup the error handling callback function registered under *name*.  As "
"a special case ``NULL`` can be passed, in which case the error handling "
"callback for \"strict\" will be returned."
msgstr ""

#: ../../c-api/codec.rst:100
msgid "Raise *exc* as an exception."
msgstr ""

#: ../../c-api/codec.rst:104
msgid "Ignore the unicode error, skipping the faulty input."
msgstr ""

#: ../../c-api/codec.rst:108
msgid "Replace the unicode encode error with ``?`` or ``U+FFFD``."
msgstr ""

#: ../../c-api/codec.rst:112
msgid "Replace the unicode encode error with XML character references."
msgstr ""

#: ../../c-api/codec.rst:116
msgid ""
"Replace the unicode encode error with backslash escapes (``\\x``, ``\\u``"
" and ``\\U``)."
msgstr ""

#: ../../c-api/codec.rst:121
msgid "Replace the unicode encode error with ``\\N{...}`` escapes."
msgstr ""

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr ""

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types "
"when viewed from the C API:  one is the Python object exposed to Python "
"programs, and the other is a C structure which represents the actual "
"complex number value. The API provides functions for working with both."
msgstr ""

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr ""

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python "
"complex number object.  Most of the functions for dealing with complex "
"number objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""

#: ../../c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

#: ../../c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *complex*, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` "
"to :c:data:`EDOM`."
msgstr ""

#: ../../c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""

#: ../../c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr ""

#: ../../c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number "
"object."
msgstr ""

#: ../../c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex "
"number type. It is the same object as :class:`complex` in the Python "
"layer."
msgstr ""

#: ../../c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype "
"of :c:type:`PyComplexObject`."
msgstr ""

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`."
msgstr ""

#: ../../c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""

#: ../../c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr ""

#: ../../c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr ""

#: ../../c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr ""

#: ../../c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr ""

#: ../../c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`__complex__` method, this method will first be called to convert "
"*op* to a Python complex number object.  If ``__complex__()`` is not "
"defined then it falls back to :meth:`__float__`.  If ``__float__()`` is "
"not defined then it falls back to :meth:`__index__`.  Upon failure, this "
"method returns ``-1.0`` as a real value."
msgstr ""

#: ../../c-api/complex.rst:137 ../../c-api/float.rst:54
#: ../../c-api/long.rst:139 ../../c-api/long.rst:160 ../../c-api/long.rst:182
#: ../../c-api/long.rst:205 ../../c-api/long.rst:290 ../../c-api/long.rst:310
msgid "Use :meth:`__index__` if available."
msgstr ""

#: ../../c-api/concrete.rst:8
msgid "Concrete Objects Layer"
msgstr ""

#: ../../c-api/concrete.rst:10
msgid ""
"The functions in this chapter are specific to certain Python object "
"types. Passing them an object of the wrong type is not a good idea; if "
"you receive an object from a Python program and you are not sure that it "
"has the right type, you must perform a type check first; for example, to "
"check that an object is a dictionary, use :c:func:`PyDict_Check`.  The "
"chapter is structured like the \"family tree\" of Python object types."
msgstr ""

#: ../../c-api/concrete.rst:19
msgid ""
"While the functions described in this chapter carefully check the type of"
" the objects which are passed in, many of them do not check for ``NULL`` "
"being passed instead of a valid object.  Allowing ``NULL`` to be passed "
"in can cause memory access violations and immediate termination of the "
"interpreter."
msgstr ""

#: ../../c-api/concrete.rst:28
msgid "Fundamental Objects"
msgstr ""

#: ../../c-api/concrete.rst:30
msgid ""
"This section describes Python type objects and the singleton object "
"``None``."
msgstr ""

#: ../../c-api/concrete.rst:41
msgid "Numeric Objects"
msgstr ""

#: ../../c-api/concrete.rst:56
msgid "Sequence Objects"
msgstr ""

#: ../../c-api/concrete.rst:60
msgid ""
"Generic operations on sequence objects were discussed in the previous "
"chapter; this section deals with the specific kinds of sequence objects "
"that are intrinsic to the Python language."
msgstr ""

#: ../../c-api/concrete.rst:78
msgid "Container Objects"
msgstr ""

#: ../../c-api/concrete.rst:91 ../../c-api/function.rst:6
msgid "Function Objects"
msgstr ""

#: ../../c-api/concrete.rst:102
msgid "Other Objects"
msgstr ""

#: ../../c-api/contextvars.rst:6
msgid "Context Variables Objects"
msgstr ""

#: ../../c-api/contextvars.rst:13
msgid ""
"In Python 3.7.1 the signatures of all context variables C APIs were "
"**changed** to use :c:type:`PyObject` pointers instead of "
":c:type:`PyContext`, :c:type:`PyContextVar`, and "
":c:type:`PyContextToken`, e.g.::"
msgstr ""

#: ../../c-api/contextvars.rst:24
msgid "See :issue:`34762` for more details."
msgstr ""

#: ../../c-api/contextvars.rst:29
msgid "This section details the public C API for the :mod:`contextvars` module."
msgstr ""

#: ../../c-api/contextvars.rst:33
msgid "The C structure used to represent a :class:`contextvars.Context` object."
msgstr ""

#: ../../c-api/contextvars.rst:38
msgid ""
"The C structure used to represent a :class:`contextvars.ContextVar` "
"object."
msgstr ""

#: ../../c-api/contextvars.rst:43
msgid "The C structure used to represent a :class:`contextvars.Token` object."
msgstr ""

#: ../../c-api/contextvars.rst:47
msgid "The type object representing the *context* type."
msgstr ""

#: ../../c-api/contextvars.rst:51
msgid "The type object representing the *context variable* type."
msgstr ""

#: ../../c-api/contextvars.rst:55
msgid "The type object representing the *context variable token* type."
msgstr ""

#: ../../c-api/contextvars.rst:58 ../../c-api/datetime.rst:26
msgid "Type-check macros:"
msgstr ""

#: ../../c-api/contextvars.rst:62
msgid ""
"Return true if *o* is of type :c:data:`PyContext_Type`. *o* must not be "
"``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/contextvars.rst:67
msgid ""
"Return true if *o* is of type :c:data:`PyContextVar_Type`. *o* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/contextvars.rst:72
msgid ""
"Return true if *o* is of type :c:data:`PyContextToken_Type`. *o* must not"
" be ``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/contextvars.rst:76
msgid "Context object management functions:"
msgstr ""

#: ../../c-api/contextvars.rst:80
msgid ""
"Create a new empty context object.  Returns ``NULL`` if an error has "
"occurred."
msgstr ""

#: ../../c-api/contextvars.rst:85
msgid ""
"Create a shallow copy of the passed *ctx* context object. Returns "
"``NULL`` if an error has occurred."
msgstr ""

#: ../../c-api/contextvars.rst:90
msgid ""
"Create a shallow copy of the current thread context. Returns ``NULL`` if "
"an error has occurred."
msgstr ""

#: ../../c-api/contextvars.rst:95
msgid ""
"Set *ctx* as the current context for the current thread. Returns ``0`` on"
" success, and ``-1`` on error."
msgstr ""

#: ../../c-api/contextvars.rst:100
msgid ""
"Deactivate the *ctx* context and restore the previous context as the "
"current context for the current thread.  Returns ``0`` on success, and "
"``-1`` on error."
msgstr ""

#: ../../c-api/contextvars.rst:106
msgid ""
"Clear the context variable free list. Return the total number of freed "
"items.  This function always succeeds."
msgstr ""

#: ../../c-api/contextvars.rst:110
msgid "Context variable functions:"
msgstr ""

#: ../../c-api/contextvars.rst:114
msgid ""
"Create a new ``ContextVar`` object.  The *name* parameter is used for "
"introspection and debug purposes.  The *def* parameter specifies a "
"default value for the context variable, or ``NULL`` for no default. If an"
" error has occurred, this function returns ``NULL``."
msgstr ""

#: ../../c-api/contextvars.rst:121
msgid ""
"Get the value of a context variable.  Returns ``-1`` if an error has "
"occurred during lookup, and ``0`` if no error occurred, whether or not a "
"value was found."
msgstr ""

#: ../../c-api/contextvars.rst:125
msgid ""
"If the context variable was found, *value* will be a pointer to it. If "
"the context variable was *not* found, *value* will point to:"
msgstr ""

#: ../../c-api/contextvars.rst:128
msgid "*default_value*, if not ``NULL``;"
msgstr ""

#: ../../c-api/contextvars.rst:129
msgid "the default value of *var*, if not ``NULL``;"
msgstr ""

#: ../../c-api/contextvars.rst:130
msgid "``NULL``"
msgstr ""

#: ../../c-api/contextvars.rst:132
msgid "Except for ``NULL``, the function returns a new reference."
msgstr ""

#: ../../c-api/contextvars.rst:136
msgid ""
"Set the value of *var* to *value* in the current context.  Returns a new "
"token object for this change, or ``NULL`` if an error has occurred."
msgstr ""

#: ../../c-api/contextvars.rst:141
msgid ""
"Reset the state of the *var* context variable to that it was in before "
":c:func:`PyContextVar_Set` that returned the *token* was called. This "
"function returns ``0`` on success and ``-1`` on error."
msgstr ""

#: ../../c-api/conversion.rst:6
msgid "String conversion and formatting"
msgstr ""

#: ../../c-api/conversion.rst:8
msgid "Functions for number conversion and formatted string output."
msgstr ""

#: ../../c-api/conversion.rst:13
msgid ""
"Output not more than *size* bytes to *str* according to the format string"
" *format* and the extra arguments. See the Unix man page "
":manpage:`snprintf(3)`."
msgstr ""

#: ../../c-api/conversion.rst:19
msgid ""
"Output not more than *size* bytes to *str* according to the format string"
" *format* and the variable argument list *va*. Unix man page "
":manpage:`vsnprintf(3)`."
msgstr ""

#: ../../c-api/conversion.rst:23
msgid ""
":c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf` wrap the Standard C "
"library functions :c:func:`snprintf` and :c:func:`vsnprintf`. Their "
"purpose is to guarantee consistent behavior in corner cases, which the "
"Standard C functions do not."
msgstr ""

#: ../../c-api/conversion.rst:28
msgid ""
"The wrappers ensure that ``str[size-1]`` is always ``'\\0'`` upon return."
" They never write more than *size* bytes (including the trailing "
"``'\\0'``) into str. Both functions require that ``str != NULL``, ``size "
"> 0`` and ``format != NULL``."
msgstr ""

#: ../../c-api/conversion.rst:33
msgid ""
"If the platform doesn't have :c:func:`vsnprintf` and the buffer size "
"needed to avoid truncation exceeds *size* by more than 512 bytes, Python "
"aborts with a :c:func:`Py_FatalError`."
msgstr ""

#: ../../c-api/conversion.rst:37
msgid ""
"The return value (*rv*) for these functions should be interpreted as "
"follows:"
msgstr ""

#: ../../c-api/conversion.rst:39
msgid ""
"When ``0 <= rv < size``, the output conversion was successful and *rv* "
"characters were written to *str* (excluding the trailing ``'\\0'`` byte "
"at ``str[rv]``)."
msgstr ""

#: ../../c-api/conversion.rst:43
msgid ""
"When ``rv >= size``, the output conversion was truncated and a buffer "
"with ``rv + 1`` bytes would have been needed to succeed. ``str[size-1]`` "
"is ``'\\0'`` in this case."
msgstr ""

#: ../../c-api/conversion.rst:47
msgid ""
"When ``rv < 0``, \"something bad happened.\" ``str[size-1]`` is ``'\\0'``"
" in this case too, but the rest of *str* is undefined. The exact cause of"
" the error depends on the underlying platform."
msgstr ""

#: ../../c-api/conversion.rst:51
msgid ""
"The following functions provide locale-independent string to number "
"conversions."
msgstr ""

#: ../../c-api/conversion.rst:56
msgid ""
"Convert a string ``s`` to a :c:type:`double`, raising a Python exception "
"on failure.  The set of accepted strings corresponds to the set of "
"strings accepted by Python's :func:`float` constructor, except that ``s``"
" must not have leading or trailing whitespace. The conversion is "
"independent of the current locale."
msgstr ""

#: ../../c-api/conversion.rst:62
msgid ""
"If ``endptr`` is ``NULL``, convert the whole string.  Raise "
":exc:`ValueError` and return ``-1.0`` if the string is not a valid "
"representation of a floating-point number."
msgstr ""

#: ../../c-api/conversion.rst:66
msgid ""
"If endptr is not ``NULL``, convert as much of the string as possible and "
"set ``*endptr`` to point to the first unconverted character.  If no "
"initial segment of the string is the valid representation of a floating-"
"point number, set ``*endptr`` to point to the beginning of the string, "
"raise ValueError, and return ``-1.0``."
msgstr ""

#: ../../c-api/conversion.rst:73
msgid ""
"If ``s`` represents a value that is too large to store in a float (for "
"example, ``\"1e500\"`` is such a string on many platforms) then if "
"``overflow_exception`` is ``NULL`` return ``Py_HUGE_VAL`` (with an "
"appropriate sign) and don't set any exception.  Otherwise, "
"``overflow_exception`` must point to a Python exception object; raise "
"that exception and return ``-1.0``.  In both cases, set ``*endptr`` to "
"point to the first character after the converted value."
msgstr ""

#: ../../c-api/conversion.rst:81
msgid ""
"If any other error occurs during the conversion (for example an out-of-"
"memory error), set the appropriate Python exception and return ``-1.0``."
msgstr ""

#: ../../c-api/conversion.rst:90
msgid ""
"Convert a :c:type:`double` *val* to a string using supplied "
"*format_code*, *precision*, and *flags*."
msgstr ""

#: ../../c-api/conversion.rst:93
msgid ""
"*format_code* must be one of ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``,"
" ``'G'`` or ``'r'``.  For ``'r'``, the supplied *precision* must be 0 and"
" is ignored.  The ``'r'`` format code specifies the standard :func:`repr`"
" format."
msgstr ""

#: ../../c-api/conversion.rst:98
msgid ""
"*flags* can be zero or more of the values ``Py_DTSF_SIGN``, "
"``Py_DTSF_ADD_DOT_0``, or ``Py_DTSF_ALT``, or-ed together:"
msgstr ""

#: ../../c-api/conversion.rst:101
msgid ""
"``Py_DTSF_SIGN`` means to always precede the returned string with a sign "
"character, even if *val* is non-negative."
msgstr ""

#: ../../c-api/conversion.rst:104
msgid ""
"``Py_DTSF_ADD_DOT_0`` means to ensure that the returned string will not "
"look like an integer."
msgstr ""

#: ../../c-api/conversion.rst:107
msgid ""
"``Py_DTSF_ALT`` means to apply \"alternate\" formatting rules.  See the "
"documentation for the :c:func:`PyOS_snprintf` ``'#'`` specifier for "
"details."
msgstr ""

#: ../../c-api/conversion.rst:111
msgid ""
"If *ptype* is non-``NULL``, then the value it points to will be set to "
"one of ``Py_DTST_FINITE``, ``Py_DTST_INFINITE``, or ``Py_DTST_NAN``, "
"signifying that *val* is a finite number, an infinite number, or not a "
"number, respectively."
msgstr ""

#: ../../c-api/conversion.rst:115
msgid ""
"The return value is a pointer to *buffer* with the converted string or "
"``NULL`` if the conversion failed. The caller is responsible for freeing "
"the returned string by calling :c:func:`PyMem_Free`."
msgstr ""

#: ../../c-api/conversion.rst:124
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strcmp` except that it ignores the case."
msgstr ""

#: ../../c-api/conversion.rst:130
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strncmp` except that it ignores the case."
msgstr ""

#: ../../c-api/coro.rst:6
msgid "Coroutine Objects"
msgstr ""

#: ../../c-api/coro.rst:10
msgid ""
"Coroutine objects are what functions declared with an ``async`` keyword "
"return."
msgstr ""

#: ../../c-api/coro.rst:16
msgid "The C structure used for coroutine objects."
msgstr ""

#: ../../c-api/coro.rst:21
msgid "The type object corresponding to coroutine objects."
msgstr ""

#: ../../c-api/coro.rst:26
msgid ""
"Return true if *ob*'s type is :c:type:`PyCoro_Type`; *ob* must not be "
"``NULL``."
msgstr ""

#: ../../c-api/coro.rst:31
msgid ""
"Create and return a new coroutine object based on the *frame* object, "
"with ``__name__`` and ``__qualname__`` set to *name* and *qualname*. A "
"reference to *frame* is stolen by this function.  The *frame* argument "
"must not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr ""

#: ../../c-api/datetime.rst:8
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module."
" Before using any of these functions, the header file :file:`datetime.h` "
"must be included in your source (note that this is not included by "
":file:`Python.h`), and the macro :c:macro:`PyDateTime_IMPORT` must be "
"invoked, usually as part of the module initialisation function.  The "
"macro puts a pointer to a C structure into a static variable, "
":c:data:`PyDateTimeAPI`, that is used by the following macros."
msgstr ""

#: ../../c-api/datetime.rst:16
msgid "Macro for access to the UTC singleton:"
msgstr ""

#: ../../c-api/datetime.rst:20
msgid ""
"Returns the time zone singleton representing UTC, the same object as "
":attr:`datetime.timezone.utc`."
msgstr ""

#: ../../c-api/datetime.rst:30
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype"
" of :c:data:`PyDateTime_DateType`.  *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:36
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must "
"not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:42
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`PyDateTime_DateTimeType`.  *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:48
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* "
"must not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:54
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype"
" of :c:data:`PyDateTime_TimeType`.  *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:60
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must "
"not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:66
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a "
"subtype of :c:data:`PyDateTime_DeltaType`.  *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:72
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must "
"not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:78
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a "
"subtype of :c:data:`PyDateTime_TZInfoType`.  *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:84
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must"
" not be ``NULL``."
msgstr ""

#: ../../c-api/datetime.rst:88
msgid "Macros to create objects:"
msgstr ""

#: ../../c-api/datetime.rst:92
msgid ""
"Return a :class:`datetime.date` object with the specified year, month and"
" day."
msgstr ""

#: ../../c-api/datetime.rst:97
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, "
"month, day, hour, minute, second and microsecond."
msgstr ""

#: ../../c-api/datetime.rst:103
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, "
"month, day, hour, minute, second, microsecond and fold."
msgstr ""

#: ../../c-api/datetime.rst:111
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second and microsecond."
msgstr ""

#: ../../c-api/datetime.rst:117
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second, microsecond and fold."
msgstr ""

#: ../../c-api/datetime.rst:125
msgid ""
"Return a :class:`datetime.timedelta` object representing the given number"
" of days, seconds and microseconds.  Normalization is performed so that "
"the resulting number of microseconds and seconds lie in the ranges "
"documented for :class:`datetime.timedelta` objects."
msgstr ""

#: ../../c-api/datetime.rst:132
msgid ""
"Return a :class:`datetime.timezone` object with an unnamed fixed offset "
"represented by the *offset* argument."
msgstr ""

#: ../../c-api/datetime.rst:139
msgid ""
"Return a :class:`datetime.timezone` object with a fixed offset "
"represented by the *offset* argument and with tzname *name*."
msgstr ""

#: ../../c-api/datetime.rst:145
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Date`, including subclasses (such as "
":c:data:`PyDateTime_DateTime`).  The argument must not be ``NULL``, and "
"the type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:152
msgid "Return the year, as a positive int."
msgstr ""

#: ../../c-api/datetime.rst:157
msgid "Return the month, as an int from 1 through 12."
msgstr ""

#: ../../c-api/datetime.rst:162
msgid "Return the day, as an int from 1 through 31."
msgstr ""

#: ../../c-api/datetime.rst:165
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:data:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:171 ../../c-api/datetime.rst:195
msgid "Return the hour, as an int from 0 through 23."
msgstr ""

#: ../../c-api/datetime.rst:176 ../../c-api/datetime.rst:200
msgid "Return the minute, as an int from 0 through 59."
msgstr ""

#: ../../c-api/datetime.rst:181 ../../c-api/datetime.rst:205
msgid "Return the second, as an int from 0 through 59."
msgstr ""

#: ../../c-api/datetime.rst:186 ../../c-api/datetime.rst:210
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr ""

#: ../../c-api/datetime.rst:189
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Time`, including subclasses. The argument"
" must not be ``NULL``, and the type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:213
msgid ""
"Macros to extract fields from time delta objects.  The argument must be "
"an instance of :c:data:`PyDateTime_Delta`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:219
msgid "Return the number of days, as an int from -999999999 to 999999999."
msgstr ""

#: ../../c-api/datetime.rst:226
msgid "Return the number of seconds, as an int from 0 through 86399."
msgstr ""

#: ../../c-api/datetime.rst:233
msgid "Return the number of microseconds, as an int from 0 through 999999."
msgstr ""

#: ../../c-api/datetime.rst:238
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr ""

#: ../../c-api/datetime.rst:242
msgid ""
"Create and return a new :class:`datetime.datetime` object given an "
"argument tuple suitable for passing to "
":meth:`datetime.datetime.fromtimestamp()`."
msgstr ""

#: ../../c-api/datetime.rst:248
msgid ""
"Create and return a new :class:`datetime.date` object given an argument "
"tuple suitable for passing to :meth:`datetime.date.fromtimestamp()`."
msgstr ""

#: ../../c-api/descriptor.rst:6
msgid "Descriptor Objects"
msgstr ""

#: ../../c-api/descriptor.rst:8
msgid ""
"\"Descriptors\" are objects that describe some attribute of an object. "
"They are found in the dictionary of type objects."
msgstr ""

#: ../../c-api/descriptor.rst:15
msgid "The type object for the built-in descriptor types."
msgstr ""

#: ../../c-api/descriptor.rst:35
msgid ""
"Return true if the descriptor objects *descr* describes a data attribute,"
" or false if it describes a method.  *descr* must be a descriptor object;"
" there is no error checking."
msgstr ""

#: ../../c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr ""

#: ../../c-api/dict.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr ""

#: ../../c-api/dict.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""

#: ../../c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the "
"dict type."
msgstr ""

#: ../../c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of "
"the dict type."
msgstr ""

#: ../../c-api/dict.rst:36
msgid "Return a new empty dictionary, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/dict.rst:41
msgid ""
"Return a :class:`types.MappingProxyType` object for a mapping which "
"enforces read-only behavior.  This is normally used to create a view to "
"prevent modification of the dictionary for non-dynamic class types."
msgstr ""

#: ../../c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr ""

#: ../../c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches"
" *key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. "
"This is equivalent to the Python expression ``key in p``."
msgstr ""

#: ../../c-api/dict.rst:60
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr ""

#: ../../c-api/dict.rst:65
msgid ""
"Insert *val* into the dictionary *p* with a key of *key*.  *key* must be "
":term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return "
"``0`` on success or ``-1`` on failure.  This function *does not* steal a "
"reference to *val*."
msgstr ""

#: ../../c-api/dict.rst:75
msgid ""
"Insert *val* into the dictionary *p* using *key* as a key. *key* should "
"be a :c:type:`const char*`.  The key object is created using "
"``PyUnicode_FromString(key)``.  Return ``0`` on success or ``-1`` on "
"failure.  This function *does not* steal a reference to *val*."
msgstr ""

#: ../../c-api/dict.rst:83
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be "
"hashable; if it isn't, :exc:`TypeError` is raised. If *key* is not in the"
" dictionary, :exc:`KeyError` is raised. Return ``0`` on success or ``-1``"
" on failure."
msgstr ""

#: ../../c-api/dict.rst:91
msgid ""
"Remove the entry in dictionary *p* which has a key specified by the "
"string *key*. If *key* is not in the dictionary, :exc:`KeyError` is "
"raised. Return ``0`` on success or ``-1`` on failure."
msgstr ""

#: ../../c-api/dict.rst:98
msgid ""
"Return the object from dictionary *p* which has a key *key*.  Return "
"``NULL`` if the key *key* is not present, but *without* setting an "
"exception."
msgstr ""

#: ../../c-api/dict.rst:101
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and "
":meth:`__eq__` methods will get suppressed. To get error reporting use "
":c:func:`PyDict_GetItemWithError()` instead."
msgstr ""

#: ../../c-api/dict.rst:108
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return ``NULL`` **with** an exception set if an exception occurred.  "
"Return ``NULL`` **without** an exception set if the key wasn't present."
msgstr ""

#: ../../c-api/dict.rst:116
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a"
" :c:type:`const char*`, rather than a :c:type:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:119
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and "
":meth:`__eq__` methods and creating a temporary string object will get "
"suppressed. To get error reporting use "
":c:func:`PyDict_GetItemWithError()` instead."
msgstr ""

#: ../../c-api/dict.rst:127
msgid ""
"This is the same as the Python-level :meth:`dict.setdefault`.  If "
"present, it returns the value corresponding to *key* from the dictionary "
"*p*.  If the key is not in the dict, it is inserted with value "
"*defaultobj* and *defaultobj* is returned.  This function evaluates the "
"hash function of *key* only once, instead of evaluating it independently "
"for the lookup and the insertion."
msgstr ""

#: ../../c-api/dict.rst:137
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the "
"dictionary."
msgstr ""

#: ../../c-api/dict.rst:142
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the "
"dictionary."
msgstr ""

#: ../../c-api/dict.rst:147
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr ""

#: ../../c-api/dict.rst:155
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr ""

#: ../../c-api/dict.rst:161
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The "
":c:type:`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` "
"prior to the first call to this function to start the iteration; the "
"function returns true for each pair in the dictionary, and false once all"
" pairs have been reported.  The parameters *pkey* and *pvalue* should "
"either point to :c:type:`PyObject*` variables that will be filled in with"
" each key and value, respectively, or may be ``NULL``.  Any references "
"returned through them are borrowed.  *ppos* should not be altered during "
"iteration. Its value represents offsets within the internal dictionary "
"structure, and since the structure is sparse, the offsets are not "
"consecutive."
msgstr ""

#: ../../c-api/dict.rst:172
msgid "For example::"
msgstr ""

#: ../../c-api/dict.rst:182
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to"
" modify the values of the keys as you iterate over the dictionary, but "
"only so long as the set of keys does not change.  For example::"
msgstr ""

#: ../../c-api/dict.rst:207
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*."
" *b* may be a dictionary, or any object supporting "
":c:func:`PyMapping_Keys` and :c:func:`PyObject_GetItem`. If *override* is"
" true, existing pairs in *a* will be replaced if a matching key is found "
"in *b*, otherwise pairs will only be added if there is not a matching key"
" in *a*. Return ``0`` on success or ``-1`` if an exception was raised."
msgstr ""

#: ../../c-api/dict.rst:217
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, and is similar to "
"``a.update(b)`` in Python except that :c:func:`PyDict_Update` doesn't "
"fall back to the iterating over a sequence of key value pairs if the "
"second argument has no \"keys\" attribute.  Return ``0`` on success or "
"``-1`` if an exception was raised."
msgstr ""

#: ../../c-api/dict.rst:226
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2,"
" viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or "
"``-1`` if an exception was raised. Equivalent Python (except for the "
"return value)::"
msgstr ""

#: ../../c-api/dict.rst:241 ../../c-api/list.rst:149 ../../c-api/method.rst:99
#: ../../c-api/set.rst:164 ../../c-api/tuple.rst:116
#: ../../c-api/unicode.rst:212
msgid "Clear the free list. Return the total number of freed items."
msgstr ""

#: ../../c-api/exceptions.rst:8
msgid "Exception Handling"
msgstr ""

#: ../../c-api/exceptions.rst:10
msgid ""
"The functions described in this chapter will let you handle and raise "
"Python exceptions.  It is important to understand some of the basics of "
"Python exception handling.  It works somewhat like the POSIX "
":c:data:`errno` variable: there is a global indicator (per thread) of the"
" last error that occurred.  Most C API functions don't clear this on "
"success, but will set it to indicate the cause of the error on failure.  "
"Most C API functions also return an error indicator, usually ``NULL`` if "
"they are supposed to return a pointer, or ``-1`` if they return an "
"integer (exception: the :c:func:`PyArg_\\*` functions return ``1`` for "
"success and ``0`` for failure)."
msgstr ""

#: ../../c-api/exceptions.rst:20
msgid ""
"Concretely, the error indicator consists of three object pointers: the "
"exception's type, the exception's value, and the traceback object.  Any "
"of those pointers can be ``NULL`` if non-set (although some combinations "
"are forbidden, for example you can't have a non-``NULL`` traceback if the"
" exception type is ``NULL``)."
msgstr ""

#: ../../c-api/exceptions.rst:26
msgid ""
"When a function must fail because some function it called failed, it "
"generally doesn't set the error indicator; the function it called already"
" set it.  It is responsible for either handling the error and clearing "
"the exception or returning after cleaning up any resources it holds (such"
" as object references or memory allocations); it should *not* continue "
"normally if it is not prepared to handle the error.  If returning due to "
"an error, it is important to indicate to the caller that an error has "
"been set.  If the error is not handled or carefully propagated, "
"additional calls into the Python/C API may not behave as intended and may"
" fail in mysterious ways."
msgstr ""

#: ../../c-api/exceptions.rst:37
msgid ""
"The error indicator is **not** the result of :func:`sys.exc_info()`. The "
"former corresponds to an exception that is not yet caught (and is "
"therefore still propagating), while the latter returns an exception after"
" it is caught (and has therefore stopped propagating)."
msgstr ""

#: ../../c-api/exceptions.rst:44
msgid "Printing and clearing"
msgstr ""

#: ../../c-api/exceptions.rst:49
msgid ""
"Clear the error indicator.  If the error indicator is not set, there is "
"no effect."
msgstr ""

#: ../../c-api/exceptions.rst:55
msgid ""
"Print a standard traceback to ``sys.stderr`` and clear the error "
"indicator. **Unless** the error is a ``SystemExit``, in that case no "
"traceback is printed and the Python process will exit with the error code"
" specified by the ``SystemExit`` instance."
msgstr ""

#: ../../c-api/exceptions.rst:60
msgid ""
"Call this function **only** when the error indicator is set.  Otherwise "
"it will cause a fatal error!"
msgstr ""

#: ../../c-api/exceptions.rst:63
msgid ""
"If *set_sys_last_vars* is nonzero, the variables :data:`sys.last_type`, "
":data:`sys.last_value` and :data:`sys.last_traceback` will be set to the "
"type, value and traceback of the printed exception, respectively."
msgstr ""

#: ../../c-api/exceptions.rst:70
msgid "Alias for ``PyErr_PrintEx(1)``."
msgstr ""

#: ../../c-api/exceptions.rst:75
msgid ""
"Call :func:`sys.unraisablehook` using the current exception and *obj* "
"argument."
msgstr ""

#: ../../c-api/exceptions.rst:78
msgid ""
"This utility function prints a warning message to ``sys.stderr`` when an "
"exception has been set but it is impossible for the interpreter to "
"actually raise the exception.  It is used, for example, when an exception"
" occurs in an :meth:`__del__` method."
msgstr ""

#: ../../c-api/exceptions.rst:83
msgid ""
"The function is called with a single argument *obj* that identifies the "
"context in which the unraisable exception occurred. If possible, the repr"
" of *obj* will be printed in the warning message."
msgstr ""

#: ../../c-api/exceptions.rst:87
msgid "An exception must be set when calling this function."
msgstr ""

#: ../../c-api/exceptions.rst:91
msgid "Raising exceptions"
msgstr ""

#: ../../c-api/exceptions.rst:93
msgid ""
"These functions help you set the current thread's error indicator. For "
"convenience, some of these functions will always return a ``NULL`` "
"pointer for use in a ``return`` statement."
msgstr ""

#: ../../c-api/exceptions.rst:100
msgid ""
"This is the most common way to set the error indicator.  The first "
"argument specifies the exception type; it is normally one of the standard"
" exceptions, e.g. :c:data:`PyExc_RuntimeError`.  You need not increment "
"its reference count. The second argument is an error message; it is "
"decoded from ``'utf-8``'."
msgstr ""

#: ../../c-api/exceptions.rst:108
msgid ""
"This function is similar to :c:func:`PyErr_SetString` but lets you "
"specify an arbitrary Python object for the \"value\" of the exception."
msgstr ""

#: ../../c-api/exceptions.rst:114
msgid ""
"This function sets the error indicator and returns ``NULL``.  *exception*"
" should be a Python exception class.  The *format* and subsequent "
"parameters help format the error message; they have the same meaning and "
"values as in :c:func:`PyUnicode_FromFormat`. *format* is an ASCII-encoded"
" string."
msgstr ""

#: ../../c-api/exceptions.rst:123
msgid ""
"Same as :c:func:`PyErr_Format`, but taking a :c:type:`va_list` argument "
"rather than a variable number of arguments."
msgstr ""

#: ../../c-api/exceptions.rst:131
msgid "This is a shorthand for ``PyErr_SetObject(type, Py_None)``."
msgstr ""

#: ../../c-api/exceptions.rst:136
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_TypeError, message)``, "
"where *message* indicates that a built-in operation was invoked with an "
"illegal argument.  It is mostly for internal use."
msgstr ""

#: ../../c-api/exceptions.rst:143
msgid ""
"This is a shorthand for ``PyErr_SetNone(PyExc_MemoryError)``; it returns "
"``NULL`` so an object allocation function can write ``return "
"PyErr_NoMemory();`` when it runs out of memory."
msgstr ""

#: ../../c-api/exceptions.rst:152
msgid ""
"This is a convenience function to raise an exception when a C library "
"function has returned an error and set the C variable :c:data:`errno`.  "
"It constructs a tuple object whose first item is the integer "
":c:data:`errno` value and whose second item is the corresponding error "
"message (gotten from :c:func:`strerror`), and then calls "
"``PyErr_SetObject(type, object)``.  On Unix, when the :c:data:`errno` "
"value is :const:`EINTR`, indicating an interrupted system call, this "
"calls :c:func:`PyErr_CheckSignals`, and if that set the error indicator, "
"leaves it set to that.  The function always returns ``NULL``, so a "
"wrapper function around a system call can write ``return "
"PyErr_SetFromErrno(type);`` when the system call returns an error."
msgstr ""

#: ../../c-api/exceptions.rst:166
msgid ""
"Similar to :c:func:`PyErr_SetFromErrno`, with the additional behavior "
"that if *filenameObject* is not ``NULL``, it is passed to the constructor"
" of *type* as a third parameter.  In the case of :exc:`OSError` "
"exception, this is used to define the :attr:`filename` attribute of the "
"exception instance."
msgstr ""

#: ../../c-api/exceptions.rst:175
msgid ""
"Similar to :c:func:`PyErr_SetFromErrnoWithFilenameObject`, but takes a "
"second filename object, for raising errors when a function that takes two"
" filenames fails."
msgstr ""

#: ../../c-api/exceptions.rst:184
msgid ""
"Similar to :c:func:`PyErr_SetFromErrnoWithFilenameObject`, but the "
"filename is given as a C string.  *filename* is decoded from the "
"filesystem encoding (:func:`os.fsdecode`)."
msgstr ""

#: ../../c-api/exceptions.rst:191
msgid ""
"This is a convenience function to raise :exc:`WindowsError`. If called "
"with *ierr* of :c:data:`0`, the error code returned by a call to "
":c:func:`GetLastError` is used instead.  It calls the Win32 function "
":c:func:`FormatMessage` to retrieve the Windows description of error code"
" given by *ierr* or :c:func:`GetLastError`, then it constructs a tuple "
"object whose first item is the *ierr* value and whose second item is the "
"corresponding error message (gotten from :c:func:`FormatMessage`), and "
"then calls ``PyErr_SetObject(PyExc_WindowsError, object)``. This function"
" always returns ``NULL``."
msgstr ""

#: ../../c-api/exceptions.rst:200 ../../c-api/exceptions.rst:208
#: ../../c-api/exceptions.rst:217 ../../c-api/exceptions.rst:225
#: ../../c-api/exceptions.rst:234 ../../c-api/exceptions.rst:243
#: ../../c-api/init.rst:162 ../../c-api/init.rst:174
msgid ":ref:`Availability <availability>`: Windows."
msgstr ""

#: ../../c-api/exceptions.rst:205
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with an additional "
"parameter specifying the exception type to be raised."
msgstr ""

#: ../../c-api/exceptions.rst:213
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilenameObject`, but the "
"filename is given as a C string.  *filename* is decoded from the "
"filesystem encoding (:func:`os.fsdecode`)."
msgstr ""

#: ../../c-api/exceptions.rst:222
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilenameObject`, with an "
"additional parameter specifying the exception type to be raised."
msgstr ""

#: ../../c-api/exceptions.rst:230
msgid ""
"Similar to :c:func:`PyErr_SetExcFromWindowsErrWithFilenameObject`, but "
"accepts a second filename object."
msgstr ""

#: ../../c-api/exceptions.rst:240
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilename`, with an "
"additional parameter specifying the exception type to be raised."
msgstr ""

#: ../../c-api/exceptions.rst:248
msgid ""
"This is a convenience function to raise :exc:`ImportError`. *msg* will be"
" set as the exception's message string. *name* and *path*, both of which "
"can be ``NULL``, will be set as the :exc:`ImportError`'s respective "
"``name`` and ``path`` attributes."
msgstr ""

#: ../../c-api/exceptions.rst:258
msgid ""
"Set file, line, and offset information for the current exception.  If the"
" current exception is not a :exc:`SyntaxError`, then it sets additional "
"attributes, which make the exception printing subsystem think the "
"exception is a :exc:`SyntaxError`."
msgstr ""

#: ../../c-api/exceptions.rst:268
msgid ""
"Like :c:func:`PyErr_SyntaxLocationObject`, but *filename* is a byte "
"string decoded from the filesystem encoding (:func:`os.fsdecode`)."
msgstr ""

#: ../../c-api/exceptions.rst:276
msgid ""
"Like :c:func:`PyErr_SyntaxLocationEx`, but the col_offset parameter is "
"omitted."
msgstr ""

#: ../../c-api/exceptions.rst:282
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_SystemError, message)``, "
"where *message* indicates that an internal operation (e.g. a Python/C API"
" function) was invoked with an illegal argument.  It is mostly for "
"internal use."
msgstr ""

#: ../../c-api/exceptions.rst:289
msgid "Issuing warnings"
msgstr ""

#: ../../c-api/exceptions.rst:291
msgid ""
"Use these functions to issue warnings from C code.  They mirror similar "
"functions exported by the Python :mod:`warnings` module.  They normally "
"print a warning message to *sys.stderr*; however, it is also possible "
"that the user has specified that warnings are to be turned into errors, "
"and in that case they will raise an exception.  It is also possible that "
"the functions raise an exception because of a problem with the warning "
"machinery. The return value is ``0`` if no exception is raised, or ``-1``"
" if an exception is raised.  (It is not possible to determine whether a "
"warning message is actually printed, nor what the reason is for the "
"exception; this is intentional.)  If an exception is raised, the caller "
"should do its normal exception handling (for example, :c:func:`Py_DECREF`"
" owned references and return an error value)."
msgstr ""

#: ../../c-api/exceptions.rst:306
msgid ""
"Issue a warning message.  The *category* argument is a warning category "
"(see below) or ``NULL``; the *message* argument is a UTF-8 encoded "
"string.  *stack_level* is a positive number giving a number of stack "
"frames; the warning will be issued from the  currently executing line of "
"code in that stack frame.  A *stack_level* of 1 is the function calling "
":c:func:`PyErr_WarnEx`, 2 is  the function above that, and so forth."
msgstr ""

#: ../../c-api/exceptions.rst:313
msgid ""
"Warning categories must be subclasses of :c:data:`PyExc_Warning`; "
":c:data:`PyExc_Warning` is a subclass of :c:data:`PyExc_Exception`; the "
"default warning category is :c:data:`PyExc_RuntimeWarning`. The standard "
"Python warning categories are available as global variables whose names "
"are enumerated at :ref:`standardwarningcategories`."
msgstr ""

#: ../../c-api/exceptions.rst:319
msgid ""
"For information about warning control, see the documentation for the "
":mod:`warnings` module and the :option:`-W` option in the command line "
"documentation.  There is no C API for warning control."
msgstr ""

#: ../../c-api/exceptions.rst:325
msgid ""
"Much like :c:func:`PyErr_SetImportError` but this function allows for "
"specifying a subclass of :exc:`ImportError` to raise."
msgstr ""

#: ../../c-api/exceptions.rst:333
msgid ""
"Issue a warning message with explicit control over all warning "
"attributes.  This is a straightforward wrapper around the Python function"
" :func:`warnings.warn_explicit`, see there for more information.  The "
"*module* and *registry* arguments may be set to ``NULL`` to get the "
"default effect described there."
msgstr ""

#: ../../c-api/exceptions.rst:344
msgid ""
"Similar to :c:func:`PyErr_WarnExplicitObject` except that *message* and "
"*module* are UTF-8 encoded strings, and *filename* is decoded from the "
"filesystem encoding (:func:`os.fsdecode`)."
msgstr ""

#: ../../c-api/exceptions.rst:351
msgid ""
"Function similar to :c:func:`PyErr_WarnEx`, but use "
":c:func:`PyUnicode_FromFormat` to format the warning message.  *format* "
"is an ASCII-encoded string."
msgstr ""

#: ../../c-api/exceptions.rst:360
msgid ""
"Function similar to :c:func:`PyErr_WarnFormat`, but *category* is "
":exc:`ResourceWarning` and it passes *source* to "
":func:`warnings.WarningMessage`."
msgstr ""

#: ../../c-api/exceptions.rst:367
msgid "Querying the error indicator"
msgstr ""

#: ../../c-api/exceptions.rst:371
msgid ""
"Test whether the error indicator is set.  If set, return the exception "
"*type* (the first argument to the last call to one of the "
":c:func:`PyErr_Set\\*` functions or to :c:func:`PyErr_Restore`).  If not "
"set, return ``NULL``.  You do not own a reference to the return value, so"
" you do not need to :c:func:`Py_DECREF` it."
msgstr ""

#: ../../c-api/exceptions.rst:379
msgid ""
"Do not compare the return value to a specific exception; use "
":c:func:`PyErr_ExceptionMatches` instead, shown below.  (The comparison "
"could easily fail since the exception may be an instance instead of a "
"class, in the case of a class exception, or it may be a subclass of the "
"expected exception.)"
msgstr ""

#: ../../c-api/exceptions.rst:387
msgid ""
"Equivalent to ``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)``.  "
"This should only be called when an exception is actually set; a memory "
"access violation will occur if no exception has been raised."
msgstr ""

#: ../../c-api/exceptions.rst:394
msgid ""
"Return true if the *given* exception matches the exception type in *exc*."
"  If *exc* is a class object, this also returns true when *given* is an "
"instance of a subclass.  If *exc* is a tuple, all exception types in the "
"tuple (and recursively in subtuples) are searched for a match."
msgstr ""

#: ../../c-api/exceptions.rst:402
msgid ""
"Retrieve the error indicator into three variables whose addresses are "
"passed. If the error indicator is not set, set all three variables to "
"``NULL``.  If it is set, it will be cleared and you own a reference to "
"each object retrieved.  The value and traceback object may be ``NULL`` "
"even when the type object is not."
msgstr ""

#: ../../c-api/exceptions.rst:409
msgid ""
"This function is normally only used by code that needs to catch "
"exceptions or by code that needs to save and restore the error indicator "
"temporarily, e.g.::"
msgstr ""

#: ../../c-api/exceptions.rst:424
msgid ""
"Set  the error indicator from the three objects.  If the error indicator "
"is already set, it is cleared first.  If the objects are ``NULL``, the "
"error indicator is cleared.  Do not pass a ``NULL`` type and non-``NULL``"
" value or traceback.  The exception type should be a class.  Do not pass "
"an invalid exception type or value. (Violating these rules will cause "
"subtle problems later.)  This call takes away a reference to each object:"
" you must own a reference to each object before the call and after the "
"call you no longer own these references.  (If you don't understand this, "
"don't use this function.  I warned you.)"
msgstr ""

#: ../../c-api/exceptions.rst:436
msgid ""
"This function is normally only used by code that needs to save and "
"restore the error indicator temporarily.  Use :c:func:`PyErr_Fetch` to "
"save the current error indicator."
msgstr ""

#: ../../c-api/exceptions.rst:443
msgid ""
"Under certain circumstances, the values returned by :c:func:`PyErr_Fetch`"
" below can be \"unnormalized\", meaning that ``*exc`` is a class object "
"but ``*val`` is not an instance of the  same class.  This function can be"
" used to instantiate the class in that case.  If the values are already "
"normalized, nothing happens. The delayed normalization is implemented to "
"improve performance."
msgstr ""

#: ../../c-api/exceptions.rst:451
msgid ""
"This function *does not* implicitly set the ``__traceback__`` attribute "
"on the exception value. If setting the traceback appropriately is "
"desired, the following additional snippet is needed::"
msgstr ""

#: ../../c-api/exceptions.rst:462
msgid ""
"Retrieve the exception info, as known from ``sys.exc_info()``.  This "
"refers to an exception that was *already caught*, not to an exception "
"that was freshly raised.  Returns new references for the three objects, "
"any of which may be ``NULL``.  Does not modify the exception info state."
msgstr ""

#: ../../c-api/exceptions.rst:469
msgid ""
"This function is not normally used by code that wants to handle "
"exceptions. Rather, it can be used when code needs to save and restore "
"the exception state temporarily.  Use :c:func:`PyErr_SetExcInfo` to "
"restore or clear the exception state."
msgstr ""

#: ../../c-api/exceptions.rst:479
msgid ""
"Set the exception info, as known from ``sys.exc_info()``.  This refers to"
" an exception that was *already caught*, not to an exception that was "
"freshly raised.  This function steals the references of the arguments. To"
" clear the exception state, pass ``NULL`` for all three arguments. For "
"general rules about the three arguments, see :c:func:`PyErr_Restore`."
msgstr ""

#: ../../c-api/exceptions.rst:487
msgid ""
"This function is not normally used by code that wants to handle "
"exceptions. Rather, it can be used when code needs to save and restore "
"the exception state temporarily.  Use :c:func:`PyErr_GetExcInfo` to read "
"the exception state."
msgstr ""

#: ../../c-api/exceptions.rst:496
msgid "Signal Handling"
msgstr ""

#: ../../c-api/exceptions.rst:506
msgid ""
"This function interacts with Python's signal handling.  It checks whether"
" a signal has been sent to the processes and if so, invokes the "
"corresponding signal handler.  If the :mod:`signal` module is supported, "
"this can invoke a signal handler written in Python.  In all cases, the "
"default effect for :const:`SIGINT` is to raise the  "
":exc:`KeyboardInterrupt` exception.  If an exception is raised the error "
"indicator is set and the function returns ``-1``; otherwise the function "
"returns ``0``.  The error indicator may or may not be cleared if it was "
"previously set."
msgstr ""

#: ../../c-api/exceptions.rst:522
msgid ""
"Simulate the effect of a :const:`SIGINT` signal arriving. The next time "
":c:func:`PyErr_CheckSignals` is called,  the Python signal handler for "
":const:`SIGINT` will be called."
msgstr ""

#: ../../c-api/exceptions.rst:526
msgid ""
"If :const:`SIGINT` isn't handled by Python (it was set to "
":data:`signal.SIG_DFL` or :data:`signal.SIG_IGN`), this function does "
"nothing."
msgstr ""

#: ../../c-api/exceptions.rst:532
msgid ""
"This utility function specifies a file descriptor to which the signal "
"number is written as a single byte whenever a signal is received. *fd* "
"must be non-blocking. It returns the previous such file descriptor."
msgstr ""

#: ../../c-api/exceptions.rst:536
msgid ""
"The value ``-1`` disables the feature; this is the initial state. This is"
" equivalent to :func:`signal.set_wakeup_fd` in Python, but without any "
"error checking.  *fd* should be a valid file descriptor.  The function "
"should only be called from the main thread."
msgstr ""

#: ../../c-api/exceptions.rst:541
msgid "On Windows, the function now also supports socket handles."
msgstr ""

#: ../../c-api/exceptions.rst:546
msgid "Exception Classes"
msgstr ""

#: ../../c-api/exceptions.rst:550
msgid ""
"This utility function creates and returns a new exception class. The "
"*name* argument must be the name of the new exception, a C string of the "
"form ``module.classname``.  The *base* and *dict* arguments are normally "
"``NULL``. This creates a class object derived from :exc:`Exception` "
"(accessible in C as :c:data:`PyExc_Exception`)."
msgstr ""

#: ../../c-api/exceptions.rst:556
msgid ""
"The :attr:`__module__` attribute of the new class is set to the first "
"part (up to the last dot) of the *name* argument, and the class name is "
"set to the last part (after the last dot).  The *base* argument can be "
"used to specify alternate base classes; it can either be only one class "
"or a tuple of classes. The *dict* argument can be used to specify a "
"dictionary of class variables and methods."
msgstr ""

#: ../../c-api/exceptions.rst:565
msgid ""
"Same as :c:func:`PyErr_NewException`, except that the new exception class"
" can easily be given a docstring: If *doc* is non-``NULL``, it will be "
"used as the docstring for the exception class."
msgstr ""

#: ../../c-api/exceptions.rst:573
msgid "Exception Objects"
msgstr ""

#: ../../c-api/exceptions.rst:577
msgid ""
"Return the traceback associated with the exception as a new reference, as"
" accessible from Python through :attr:`__traceback__`.  If there is no "
"traceback associated, this returns ``NULL``."
msgstr ""

#: ../../c-api/exceptions.rst:584
msgid ""
"Set the traceback associated with the exception to *tb*.  Use ``Py_None``"
" to clear it."
msgstr ""

#: ../../c-api/exceptions.rst:590
msgid ""
"Return the context (another exception instance during whose handling *ex*"
" was raised) associated with the exception as a new reference, as "
"accessible from Python through :attr:`__context__`.  If there is no "
"context associated, this returns ``NULL``."
msgstr ""

#: ../../c-api/exceptions.rst:598
msgid ""
"Set the context associated with the exception to *ctx*.  Use ``NULL`` to "
"clear it.  There is no type check to make sure that *ctx* is an exception"
" instance. This steals a reference to *ctx*."
msgstr ""

#: ../../c-api/exceptions.rst:605
msgid ""
"Return the cause (either an exception instance, or :const:`None`, set by "
"``raise ... from ...``) associated with the exception as a new reference,"
" as accessible from Python through :attr:`__cause__`."
msgstr ""

#: ../../c-api/exceptions.rst:612
msgid ""
"Set the cause associated with the exception to *cause*.  Use ``NULL`` to "
"clear it.  There is no type check to make sure that *cause* is either an "
"exception instance or :const:`None`.  This steals a reference to *cause*."
msgstr ""

#: ../../c-api/exceptions.rst:616
msgid ""
":attr:`__suppress_context__` is implicitly set to ``True`` by this "
"function."
msgstr ""

#: ../../c-api/exceptions.rst:622
msgid "Unicode Exception Objects"
msgstr ""

#: ../../c-api/exceptions.rst:624
msgid ""
"The following functions are used to create and modify Unicode exceptions "
"from C."
msgstr ""

#: ../../c-api/exceptions.rst:628
msgid ""
"Create a :class:`UnicodeDecodeError` object with the attributes "
"*encoding*, *object*, *length*, *start*, *end* and *reason*. *encoding* "
"and *reason* are UTF-8 encoded strings."
msgstr ""

#: ../../c-api/exceptions.rst:634
msgid ""
"Create a :class:`UnicodeEncodeError` object with the attributes "
"*encoding*, *object*, *length*, *start*, *end* and *reason*. *encoding* "
"and *reason* are UTF-8 encoded strings."
msgstr ""

#: ../../c-api/exceptions.rst:638 ../../c-api/exceptions.rst:648
msgid "3.11"
msgstr ""

#: ../../c-api/exceptions.rst:640
msgid ""
"``Py_UNICODE`` is deprecated since Python 3.3. Please migrate to "
"``PyObject_CallFunction(PyExc_UnicodeEncodeError, \"sOnns\", ...)``."
msgstr ""

#: ../../c-api/exceptions.rst:645
msgid ""
"Create a :class:`UnicodeTranslateError` object with the attributes "
"*object*, *length*, *start*, *end* and *reason*. *reason* is a UTF-8 "
"encoded string."
msgstr ""

#: ../../c-api/exceptions.rst:650
msgid ""
"``Py_UNICODE`` is deprecated since Python 3.3. Please migrate to "
"``PyObject_CallFunction(PyExc_UnicodeTranslateError, \"Onns\", ...)``."
msgstr ""

#: ../../c-api/exceptions.rst:656
msgid "Return the *encoding* attribute of the given exception object."
msgstr ""

#: ../../c-api/exceptions.rst:662
msgid "Return the *object* attribute of the given exception object."
msgstr ""

#: ../../c-api/exceptions.rst:668
msgid ""
"Get the *start* attribute of the given exception object and place it into"
" *\\*start*.  *start* must not be ``NULL``.  Return ``0`` on success, "
"``-1`` on failure."
msgstr ""

#: ../../c-api/exceptions.rst:676
msgid ""
"Set the *start* attribute of the given exception object to *start*.  "
"Return ``0`` on success, ``-1`` on failure."
msgstr ""

#: ../../c-api/exceptions.rst:683
msgid ""
"Get the *end* attribute of the given exception object and place it into "
"*\\*end*.  *end* must not be ``NULL``.  Return ``0`` on success, ``-1`` "
"on failure."
msgstr ""

#: ../../c-api/exceptions.rst:691
msgid ""
"Set the *end* attribute of the given exception object to *end*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""

#: ../../c-api/exceptions.rst:698
msgid "Return the *reason* attribute of the given exception object."
msgstr ""

#: ../../c-api/exceptions.rst:704
msgid ""
"Set the *reason* attribute of the given exception object to *reason*.  "
"Return ``0`` on success, ``-1`` on failure."
msgstr ""

#: ../../c-api/exceptions.rst:709
msgid "Recursion Control"
msgstr ""

#: ../../c-api/exceptions.rst:711
msgid ""
"These two functions provide a way to perform safe recursive calls at the "
"C level, both in the core and in extension modules.  They are needed if "
"the recursive code does not necessarily invoke Python code (which tracks "
"its recursion depth automatically)."
msgstr ""

#: ../../c-api/exceptions.rst:718
msgid "Marks a point where a recursive C-level call is about to be performed."
msgstr ""

#: ../../c-api/exceptions.rst:720
msgid ""
"If :const:`USE_STACKCHECK` is defined, this function checks if the OS "
"stack overflowed using :c:func:`PyOS_CheckStack`.  In this is the case, "
"it sets a :exc:`MemoryError` and returns a nonzero value."
msgstr ""

#: ../../c-api/exceptions.rst:724
msgid ""
"The function then checks if the recursion limit is reached.  If this is "
"the case, a :exc:`RecursionError` is set and a nonzero value is returned."
" Otherwise, zero is returned."
msgstr ""

#: ../../c-api/exceptions.rst:728
msgid ""
"*where* should be a string such as ``\" in instance check\"`` to be "
"concatenated to the :exc:`RecursionError` message caused by the recursion"
" depth limit."
msgstr ""

#: ../../c-api/exceptions.rst:734
msgid ""
"Ends a :c:func:`Py_EnterRecursiveCall`.  Must be called once for each "
"*successful* invocation of :c:func:`Py_EnterRecursiveCall`."
msgstr ""

#: ../../c-api/exceptions.rst:737
msgid ""
"Properly implementing :c:member:`~PyTypeObject.tp_repr` for container "
"types requires special recursion handling.  In addition to protecting the"
" stack, :c:member:`~PyTypeObject.tp_repr` also needs to track objects to "
"prevent cycles.  The following two functions facilitate this "
"functionality.  Effectively, these are the C equivalent to "
":func:`reprlib.recursive_repr`."
msgstr ""

#: ../../c-api/exceptions.rst:745
msgid ""
"Called at the beginning of the :c:member:`~PyTypeObject.tp_repr` "
"implementation to detect cycles."
msgstr ""

#: ../../c-api/exceptions.rst:748
msgid ""
"If the object has already been processed, the function returns a positive"
" integer.  In that case the :c:member:`~PyTypeObject.tp_repr` "
"implementation should return a string object indicating a cycle.  As "
"examples, :class:`dict` objects return ``{...}`` and :class:`list` "
"objects return ``[...]``."
msgstr ""

#: ../../c-api/exceptions.rst:754
msgid ""
"The function will return a negative integer if the recursion limit is "
"reached.  In that case the :c:member:`~PyTypeObject.tp_repr` "
"implementation should typically return ``NULL``."
msgstr ""

#: ../../c-api/exceptions.rst:758
msgid ""
"Otherwise, the function returns zero and the "
":c:member:`~PyTypeObject.tp_repr` implementation can continue normally."
msgstr ""

#: ../../c-api/exceptions.rst:763
msgid ""
"Ends a :c:func:`Py_ReprEnter`.  Must be called once for each invocation "
"of :c:func:`Py_ReprEnter` that returns zero."
msgstr ""

#: ../../c-api/exceptions.rst:770
msgid "Standard Exceptions"
msgstr ""

#: ../../c-api/exceptions.rst:772
msgid ""
"All standard Python exceptions are available as global variables whose "
"names are ``PyExc_`` followed by the Python exception name.  These have "
"the type :c:type:`PyObject*`; they are all class objects.  For "
"completeness, here are all the variables:"
msgstr ""

#: ../../c-api/exceptions.rst:833 ../../c-api/exceptions.rst:966
#: ../../c-api/exceptions.rst:1011
msgid "C Name"
msgstr ""

#: ../../c-api/exceptions.rst:833 ../../c-api/exceptions.rst:1011
msgid "Python Name"
msgstr ""

#: ../../c-api/exceptions.rst:833 ../../c-api/exceptions.rst:966
#: ../../c-api/exceptions.rst:1011
msgid "Notes"
msgstr ""

#: ../../c-api/exceptions.rst:835
msgid ":c:data:`PyExc_BaseException`"
msgstr ""

#: ../../c-api/exceptions.rst:835
msgid ":exc:`BaseException`"
msgstr ""

#: ../../c-api/exceptions.rst:835 ../../c-api/exceptions.rst:837
#: ../../c-api/exceptions.rst:839 ../../c-api/exceptions.rst:885
#: ../../c-api/exceptions.rst:897 ../../c-api/exceptions.rst:1013
msgid "\\(1)"
msgstr ""

#: ../../c-api/exceptions.rst:837
msgid ":c:data:`PyExc_Exception`"
msgstr ""

#: ../../c-api/exceptions.rst:837
msgid ":exc:`Exception`"
msgstr ""

#: ../../c-api/exceptions.rst:839
msgid ":c:data:`PyExc_ArithmeticError`"
msgstr ""

#: ../../c-api/exceptions.rst:839
msgid ":exc:`ArithmeticError`"
msgstr ""

#: ../../c-api/exceptions.rst:841
msgid ":c:data:`PyExc_AssertionError`"
msgstr ""

#: ../../c-api/exceptions.rst:841
msgid ":exc:`AssertionError`"
msgstr ""

#: ../../c-api/exceptions.rst:843
msgid ":c:data:`PyExc_AttributeError`"
msgstr ""

#: ../../c-api/exceptions.rst:843
msgid ":exc:`AttributeError`"
msgstr ""

#: ../../c-api/exceptions.rst:845
msgid ":c:data:`PyExc_BlockingIOError`"
msgstr ""

#: ../../c-api/exceptions.rst:845
msgid ":exc:`BlockingIOError`"
msgstr ""

#: ../../c-api/exceptions.rst:847
msgid ":c:data:`PyExc_BrokenPipeError`"
msgstr ""

#: ../../c-api/exceptions.rst:847
msgid ":exc:`BrokenPipeError`"
msgstr ""

#: ../../c-api/exceptions.rst:849
msgid ":c:data:`PyExc_BufferError`"
msgstr ""

#: ../../c-api/exceptions.rst:849
msgid ":exc:`BufferError`"
msgstr ""

#: ../../c-api/exceptions.rst:851
msgid ":c:data:`PyExc_ChildProcessError`"
msgstr ""

#: ../../c-api/exceptions.rst:851
msgid ":exc:`ChildProcessError`"
msgstr ""

#: ../../c-api/exceptions.rst:853
msgid ":c:data:`PyExc_ConnectionAbortedError`"
msgstr ""

#: ../../c-api/exceptions.rst:853
msgid ":exc:`ConnectionAbortedError`"
msgstr ""

#: ../../c-api/exceptions.rst:855
msgid ":c:data:`PyExc_ConnectionError`"
msgstr ""

#: ../../c-api/exceptions.rst:855
msgid ":exc:`ConnectionError`"
msgstr ""

#: ../../c-api/exceptions.rst:857
msgid ":c:data:`PyExc_ConnectionRefusedError`"
msgstr ""

#: ../../c-api/exceptions.rst:857
msgid ":exc:`ConnectionRefusedError`"
msgstr ""

#: ../../c-api/exceptions.rst:859
msgid ":c:data:`PyExc_ConnectionResetError`"
msgstr ""

#: ../../c-api/exceptions.rst:859
msgid ":exc:`ConnectionResetError`"
msgstr ""

#: ../../c-api/exceptions.rst:861
msgid ":c:data:`PyExc_EOFError`"
msgstr ""

#: ../../c-api/exceptions.rst:861
msgid ":exc:`EOFError`"
msgstr ""

#: ../../c-api/exceptions.rst:863
msgid ":c:data:`PyExc_FileExistsError`"
msgstr ""

#: ../../c-api/exceptions.rst:863
msgid ":exc:`FileExistsError`"
msgstr ""

#: ../../c-api/exceptions.rst:865
msgid ":c:data:`PyExc_FileNotFoundError`"
msgstr ""

#: ../../c-api/exceptions.rst:865
msgid ":exc:`FileNotFoundError`"
msgstr ""

#: ../../c-api/exceptions.rst:867
msgid ":c:data:`PyExc_FloatingPointError`"
msgstr ""

#: ../../c-api/exceptions.rst:867
msgid ":exc:`FloatingPointError`"
msgstr ""

#: ../../c-api/exceptions.rst:869
msgid ":c:data:`PyExc_GeneratorExit`"
msgstr ""

#: ../../c-api/exceptions.rst:869
msgid ":exc:`GeneratorExit`"
msgstr ""

#: ../../c-api/exceptions.rst:871
msgid ":c:data:`PyExc_ImportError`"
msgstr ""

#: ../../c-api/exceptions.rst:871
msgid ":exc:`ImportError`"
msgstr ""

#: ../../c-api/exceptions.rst:873
msgid ":c:data:`PyExc_IndentationError`"
msgstr ""

#: ../../c-api/exceptions.rst:873
msgid ":exc:`IndentationError`"
msgstr ""

#: ../../c-api/exceptions.rst:875
msgid ":c:data:`PyExc_IndexError`"
msgstr ""

#: ../../c-api/exceptions.rst:875
msgid ":exc:`IndexError`"
msgstr ""

#: ../../c-api/exceptions.rst:877
msgid ":c:data:`PyExc_InterruptedError`"
msgstr ""

#: ../../c-api/exceptions.rst:877
msgid ":exc:`InterruptedError`"
msgstr ""

#: ../../c-api/exceptions.rst:879
msgid ":c:data:`PyExc_IsADirectoryError`"
msgstr ""

#: ../../c-api/exceptions.rst:879
msgid ":exc:`IsADirectoryError`"
msgstr ""

#: ../../c-api/exceptions.rst:881
msgid ":c:data:`PyExc_KeyError`"
msgstr ""

#: ../../c-api/exceptions.rst:881
msgid ":exc:`KeyError`"
msgstr ""

#: ../../c-api/exceptions.rst:883
msgid ":c:data:`PyExc_KeyboardInterrupt`"
msgstr ""

#: ../../c-api/exceptions.rst:883
msgid ":exc:`KeyboardInterrupt`"
msgstr ""

#: ../../c-api/exceptions.rst:885
msgid ":c:data:`PyExc_LookupError`"
msgstr ""

#: ../../c-api/exceptions.rst:885
msgid ":exc:`LookupError`"
msgstr ""

#: ../../c-api/exceptions.rst:887
msgid ":c:data:`PyExc_MemoryError`"
msgstr ""

#: ../../c-api/exceptions.rst:887
msgid ":exc:`MemoryError`"
msgstr ""

#: ../../c-api/exceptions.rst:889
msgid ":c:data:`PyExc_ModuleNotFoundError`"
msgstr ""

#: ../../c-api/exceptions.rst:889
msgid ":exc:`ModuleNotFoundError`"
msgstr ""

#: ../../c-api/exceptions.rst:891
msgid ":c:data:`PyExc_NameError`"
msgstr ""

#: ../../c-api/exceptions.rst:891
msgid ":exc:`NameError`"
msgstr ""

#: ../../c-api/exceptions.rst:893
msgid ":c:data:`PyExc_NotADirectoryError`"
msgstr ""

#: ../../c-api/exceptions.rst:893
msgid ":exc:`NotADirectoryError`"
msgstr ""

#: ../../c-api/exceptions.rst:895
msgid ":c:data:`PyExc_NotImplementedError`"
msgstr ""

#: ../../c-api/exceptions.rst:895
msgid ":exc:`NotImplementedError`"
msgstr ""

#: ../../c-api/exceptions.rst:897
msgid ":c:data:`PyExc_OSError`"
msgstr ""

#: ../../c-api/exceptions.rst:897
msgid ":exc:`OSError`"
msgstr ""

#: ../../c-api/exceptions.rst:899
msgid ":c:data:`PyExc_OverflowError`"
msgstr ""

#: ../../c-api/exceptions.rst:899
msgid ":exc:`OverflowError`"
msgstr ""

#: ../../c-api/exceptions.rst:901
msgid ":c:data:`PyExc_PermissionError`"
msgstr ""

#: ../../c-api/exceptions.rst:901
msgid ":exc:`PermissionError`"
msgstr ""

#: ../../c-api/exceptions.rst:903
msgid ":c:data:`PyExc_ProcessLookupError`"
msgstr ""

#: ../../c-api/exceptions.rst:903
msgid ":exc:`ProcessLookupError`"
msgstr ""

#: ../../c-api/exceptions.rst:905
msgid ":c:data:`PyExc_RecursionError`"
msgstr ""

#: ../../c-api/exceptions.rst:905
msgid ":exc:`RecursionError`"
msgstr ""

#: ../../c-api/exceptions.rst:907
msgid ":c:data:`PyExc_ReferenceError`"
msgstr ""

#: ../../c-api/exceptions.rst:907
msgid ":exc:`ReferenceError`"
msgstr ""

#: ../../c-api/exceptions.rst:907
msgid "\\(2)"
msgstr ""

#: ../../c-api/exceptions.rst:909
msgid ":c:data:`PyExc_RuntimeError`"
msgstr ""

#: ../../c-api/exceptions.rst:909
msgid ":exc:`RuntimeError`"
msgstr ""

#: ../../c-api/exceptions.rst:911
msgid ":c:data:`PyExc_StopAsyncIteration`"
msgstr ""

#: ../../c-api/exceptions.rst:911
msgid ":exc:`StopAsyncIteration`"
msgstr ""

#: ../../c-api/exceptions.rst:913
msgid ":c:data:`PyExc_StopIteration`"
msgstr ""

#: ../../c-api/exceptions.rst:913
msgid ":exc:`StopIteration`"
msgstr ""

#: ../../c-api/exceptions.rst:915
msgid ":c:data:`PyExc_SyntaxError`"
msgstr ""

#: ../../c-api/exceptions.rst:915
msgid ":exc:`SyntaxError`"
msgstr ""

#: ../../c-api/exceptions.rst:917
msgid ":c:data:`PyExc_SystemError`"
msgstr ""

#: ../../c-api/exceptions.rst:917
msgid ":exc:`SystemError`"
msgstr ""

#: ../../c-api/exceptions.rst:919
msgid ":c:data:`PyExc_SystemExit`"
msgstr ""

#: ../../c-api/exceptions.rst:919
msgid ":exc:`SystemExit`"
msgstr ""

#: ../../c-api/exceptions.rst:921
msgid ":c:data:`PyExc_TabError`"
msgstr ""

#: ../../c-api/exceptions.rst:921
msgid ":exc:`TabError`"
msgstr ""

#: ../../c-api/exceptions.rst:923
msgid ":c:data:`PyExc_TimeoutError`"
msgstr ""

#: ../../c-api/exceptions.rst:923
msgid ":exc:`TimeoutError`"
msgstr ""

#: ../../c-api/exceptions.rst:925
msgid ":c:data:`PyExc_TypeError`"
msgstr ""

#: ../../c-api/exceptions.rst:925
msgid ":exc:`TypeError`"
msgstr ""

#: ../../c-api/exceptions.rst:927
msgid ":c:data:`PyExc_UnboundLocalError`"
msgstr ""

#: ../../c-api/exceptions.rst:927
msgid ":exc:`UnboundLocalError`"
msgstr ""

#: ../../c-api/exceptions.rst:929
msgid ":c:data:`PyExc_UnicodeDecodeError`"
msgstr ""

#: ../../c-api/exceptions.rst:929
msgid ":exc:`UnicodeDecodeError`"
msgstr ""

#: ../../c-api/exceptions.rst:931
msgid ":c:data:`PyExc_UnicodeEncodeError`"
msgstr ""

#: ../../c-api/exceptions.rst:931
msgid ":exc:`UnicodeEncodeError`"
msgstr ""

#: ../../c-api/exceptions.rst:933
msgid ":c:data:`PyExc_UnicodeError`"
msgstr ""

#: ../../c-api/exceptions.rst:933
msgid ":exc:`UnicodeError`"
msgstr ""

#: ../../c-api/exceptions.rst:935
msgid ":c:data:`PyExc_UnicodeTranslateError`"
msgstr ""

#: ../../c-api/exceptions.rst:935
msgid ":exc:`UnicodeTranslateError`"
msgstr ""

#: ../../c-api/exceptions.rst:937
msgid ":c:data:`PyExc_ValueError`"
msgstr ""

#: ../../c-api/exceptions.rst:937
msgid ":exc:`ValueError`"
msgstr ""

#: ../../c-api/exceptions.rst:939
msgid ":c:data:`PyExc_ZeroDivisionError`"
msgstr ""

#: ../../c-api/exceptions.rst:939
msgid ":exc:`ZeroDivisionError`"
msgstr ""

#: ../../c-api/exceptions.rst:942
msgid ""
":c:data:`PyExc_BlockingIOError`, :c:data:`PyExc_BrokenPipeError`, "
":c:data:`PyExc_ChildProcessError`, :c:data:`PyExc_ConnectionError`, "
":c:data:`PyExc_ConnectionAbortedError`, "
":c:data:`PyExc_ConnectionRefusedError`, "
":c:data:`PyExc_ConnectionResetError`, :c:data:`PyExc_FileExistsError`, "
":c:data:`PyExc_FileNotFoundError`, :c:data:`PyExc_InterruptedError`, "
":c:data:`PyExc_IsADirectoryError`, :c:data:`PyExc_NotADirectoryError`, "
":c:data:`PyExc_PermissionError`, :c:data:`PyExc_ProcessLookupError` and "
":c:data:`PyExc_TimeoutError` were introduced following :pep:`3151`."
msgstr ""

#: ../../c-api/exceptions.rst:952
msgid ":c:data:`PyExc_StopAsyncIteration` and :c:data:`PyExc_RecursionError`."
msgstr ""

#: ../../c-api/exceptions.rst:955
msgid ":c:data:`PyExc_ModuleNotFoundError`."
msgstr ""

#: ../../c-api/exceptions.rst:958
msgid "These are compatibility aliases to :c:data:`PyExc_OSError`:"
msgstr ""

#: ../../c-api/exceptions.rst:968
msgid ":c:data:`PyExc_EnvironmentError`"
msgstr ""

#: ../../c-api/exceptions.rst:970
msgid ":c:data:`PyExc_IOError`"
msgstr ""

#: ../../c-api/exceptions.rst:972
msgid ":c:data:`PyExc_WindowsError`"
msgstr ""

#: ../../c-api/exceptions.rst:972
msgid "\\(3)"
msgstr ""

#: ../../c-api/exceptions.rst:975
msgid "These aliases used to be separate exception types."
msgstr ""

#: ../../c-api/exceptions.rst:978 ../../c-api/exceptions.rst:1039
msgid "Notes:"
msgstr ""

#: ../../c-api/exceptions.rst:981
msgid "This is a base class for other standard exceptions."
msgstr ""

#: ../../c-api/exceptions.rst:984
msgid ""
"Only defined on Windows; protect code that uses this by testing that the "
"preprocessor macro ``MS_WINDOWS`` is defined."
msgstr ""

#: ../../c-api/exceptions.rst:990
msgid "Standard Warning Categories"
msgstr ""

#: ../../c-api/exceptions.rst:992
msgid ""
"All standard Python warning categories are available as global variables "
"whose names are ``PyExc_`` followed by the Python exception name. These "
"have the type :c:type:`PyObject*`; they are all class objects. For "
"completeness, here are all the variables:"
msgstr ""

#: ../../c-api/exceptions.rst:1013
msgid ":c:data:`PyExc_Warning`"
msgstr ""

#: ../../c-api/exceptions.rst:1013
msgid ":exc:`Warning`"
msgstr ""

#: ../../c-api/exceptions.rst:1015
msgid ":c:data:`PyExc_BytesWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1015
msgid ":exc:`BytesWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1017
msgid ":c:data:`PyExc_DeprecationWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1017
msgid ":exc:`DeprecationWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1019
msgid ":c:data:`PyExc_FutureWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1019
msgid ":exc:`FutureWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1021
msgid ":c:data:`PyExc_ImportWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1021
msgid ":exc:`ImportWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1023
msgid ":c:data:`PyExc_PendingDeprecationWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1023
msgid ":exc:`PendingDeprecationWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1025
msgid ":c:data:`PyExc_ResourceWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1025
msgid ":exc:`ResourceWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1027
msgid ":c:data:`PyExc_RuntimeWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1027
msgid ":exc:`RuntimeWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1029
msgid ":c:data:`PyExc_SyntaxWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1029
msgid ":exc:`SyntaxWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1031
msgid ":c:data:`PyExc_UnicodeWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1031
msgid ":exc:`UnicodeWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1033
msgid ":c:data:`PyExc_UserWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1033
msgid ":exc:`UserWarning`"
msgstr ""

#: ../../c-api/exceptions.rst:1036
msgid ":c:data:`PyExc_ResourceWarning`."
msgstr ""

#: ../../c-api/exceptions.rst:1042
msgid "This is a base class for other standard warning categories."
msgstr ""

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr ""

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in "
"file objects, which used to rely on the buffered I/O (:c:type:`FILE*`) "
"support from the C standard library.  In Python 3, files and streams use "
"the new :mod:`io` module, which defines several layers over the low-level"
" unbuffered I/O of the operating system.  The functions described below "
"are convenience C wrappers over these new APIs, and meant mostly for "
"internal error reporting in the interpreter; third-party code is advised "
"to access the :mod:`io` APIs instead."
msgstr ""

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened"
" file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can"
" be ``NULL`` to use the defaults; *buffering* can be *-1* to use the "
"default. *name* is ignored and kept for backward compatibility. Return "
"``NULL`` on failure. For a more comprehensive description of the "
"arguments, please refer to the :func:`io.open` function documentation."
msgstr ""

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr ""

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:type:`int`.  If "
"the object is an integer, its value is returned.  If not, the object's "
":meth:`~io.IOBase.fileno` method is called if it exists; the method must "
"return an integer, which is returned as the file descriptor value.  Sets "
"an exception and returns ``-1`` on failure."
msgstr ""

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a "
":meth:`~io.IOBase.readline` method.  If *n* is ``0``, exactly one line is"
" read, regardless of the length of the line.  If *n* is greater than "
"``0``, no more than *n* bytes will be read from the file; a partial line "
"can be returned.  In both cases, an empty string is returned if the end "
"of the file is reached immediately.  If *n* is less than ``0``, however, "
"one line is read regardless of length, but :exc:`EOFError` is raised if "
"the end of the file is reached immediately."
msgstr ""

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its "
"parameter through the provided handler."
msgstr ""

#: ../../c-api/file.rst:68
msgid ""
"The handler is a function of type :c:type:`PyObject *(\\*)(PyObject "
"*path, void *userData)`, where *path* is guaranteed to be "
":c:type:`PyUnicodeObject`."
msgstr ""

#: ../../c-api/file.rst:71 ../../c-api/sys.rst:344
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""

#: ../../c-api/file.rst:75
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or "
"available in ``sys.modules``."
msgstr ""

#: ../../c-api/file.rst:79
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later "
"calls to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the "
"function returns -1 and sets an exception if the interpreter has been "
"initialized."
msgstr ""

#: ../../c-api/file.rst:83
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/file.rst:86
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""

#: ../../c-api/file.rst:95
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for "
"*flags* is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object"
" is written instead of the :func:`repr`.  Return ``0`` on success or "
"``-1`` on failure; the appropriate exception will be set."
msgstr ""

#: ../../c-api/file.rst:103
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` "
"on failure; the appropriate exception will be set."
msgstr ""

#: ../../c-api/float.rst:6
msgid "Floating Point Objects"
msgstr ""

#: ../../c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point "
"object."
msgstr ""

#: ../../c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating "
"point type.  This is the same object as :class:`float` in the Python "
"layer."
msgstr ""

#: ../../c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of "
":c:type:`PyFloatObject`."
msgstr ""

#: ../../c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a "
"subtype of :c:type:`PyFloatObject`."
msgstr ""

#: ../../c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in "
"*str*, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/float.rst:42
msgid "Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/float.rst:47
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*."
"  If *pyfloat* is not a Python floating point object but has a "
":meth:`__float__` method, this method will first be called to convert "
"*pyfloat* into a float. If ``__float__()`` is not defined then it falls "
"back to :meth:`__index__`. This method returns ``-1.0`` upon failure, so "
"one should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/float.rst:60
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*, "
"but without error checking."
msgstr ""

#: ../../c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the "
"precision, minimum and maximum values of a float. It's a thin wrapper "
"around the header file :file:`float.h`."
msgstr ""

#: ../../c-api/float.rst:73
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C "
":c:type:`double`."
msgstr ""

#: ../../c-api/float.rst:78
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C "
":c:type:`double`."
msgstr ""

#: ../../c-api/float.rst:82
msgid ""
"Clear the float free list. Return the number of items that could not be "
"freed."
msgstr ""

#: ../../c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr ""

#: ../../c-api/function.rst:15
msgid "The C structure used for functions."
msgstr ""

#: ../../c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as "
"``types.FunctionType``."
msgstr ""

#: ../../c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type "
":c:data:`PyFunction_Type`). The parameter must not be ``NULL``."
msgstr ""

#: ../../c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to "
"the function."
msgstr ""

#: ../../c-api/function.rst:37
msgid ""
"The function's docstring and name are retrieved from the code object. "
"*__module__* is retrieved from *globals*. The argument defaults, "
"annotations and closure are set to ``NULL``. *__qualname__* is set to the"
" same value as the function's name."
msgstr ""

#: ../../c-api/function.rst:44
msgid ""
"As :c:func:`PyFunction_New`, but also allows setting the function "
"object's ``__qualname__`` attribute.  *qualname* should be a unicode "
"object or ``NULL``; if ``NULL``, the ``__qualname__`` attribute is set to"
" the same value as its ``__name__`` attribute."
msgstr ""

#: ../../c-api/function.rst:54
msgid "Return the code object associated with the function object *op*."
msgstr ""

#: ../../c-api/function.rst:59
msgid "Return the globals dictionary associated with the function object *op*."
msgstr ""

#: ../../c-api/function.rst:64
msgid ""
"Return the *__module__* attribute of the function object *op*. This is "
"normally a string containing the module name, but can be set to any other"
" object by Python code."
msgstr ""

#: ../../c-api/function.rst:71
msgid ""
"Return the argument default values of the function object *op*. This can "
"be a tuple of arguments or ``NULL``."
msgstr ""

#: ../../c-api/function.rst:77
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be ``Py_None`` or a tuple."
msgstr ""

#: ../../c-api/function.rst:80 ../../c-api/function.rst:94
#: ../../c-api/function.rst:108
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr ""

#: ../../c-api/function.rst:85
msgid ""
"Return the closure associated with the function object *op*. This can be "
"``NULL`` or a tuple of cell objects."
msgstr ""

#: ../../c-api/function.rst:91
msgid ""
"Set the closure associated with the function object *op*. *closure* must "
"be ``Py_None`` or a tuple of cell objects."
msgstr ""

#: ../../c-api/function.rst:99
msgid ""
"Return the annotations of the function object *op*. This can be a mutable"
" dictionary or ``NULL``."
msgstr ""

#: ../../c-api/function.rst:105
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a"
" dictionary or ``Py_None``."
msgstr ""

#: ../../c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr ""

#: ../../c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are "
"\"containers\" for other objects which may also be containers.  Types "
"which do not store references to other objects, or which only store "
"references to atomic types (such as numbers or strings), do not need to "
"provide any explicit support for garbage collection."
msgstr ""

#: ../../c-api/gcsupport.rst:15
msgid ""
"To create a container type, the :c:member:`~PyTypeObject.tp_flags` field "
"of the type object must include the :const:`Py_TPFLAGS_HAVE_GC` and "
"provide an implementation of the :c:member:`~PyTypeObject.tp_traverse` "
"handler.  If instances of the type are mutable, a "
":c:member:`~PyTypeObject.tp_clear` implementation must also be provided."
msgstr ""

#: ../../c-api/gcsupport.rst:24
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr ""

#: ../../c-api/gcsupport.rst:28
msgid "Constructors for container types must conform to two rules:"
msgstr ""

#: ../../c-api/gcsupport.rst:30
msgid ""
"The memory for the object must be allocated using "
":c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar`."
msgstr ""

#: ../../c-api/gcsupport.rst:33
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :c:func:`PyObject_GC_Track`."
msgstr ""

#: ../../c-api/gcsupport.rst:39
msgid ""
"Analogous to :c:func:`PyObject_New` but for container objects with the "
":const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

#: ../../c-api/gcsupport.rst:45
msgid ""
"Analogous to :c:func:`PyObject_NewVar` but for container objects with the"
" :const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""

#: ../../c-api/gcsupport.rst:51
msgid ""
"Resize an object allocated by :c:func:`PyObject_NewVar`.  Returns the "
"resized object or ``NULL`` on failure.  *op* must not be tracked by the "
"collector yet."
msgstr ""

#: ../../c-api/gcsupport.rst:57
msgid ""
"Adds the object *op* to the set of container objects tracked by the "
"collector.  The collector can run at unexpected times so objects must be "
"valid while being tracked.  This should be called once all the fields "
"followed by the :c:member:`~PyTypeObject.tp_traverse` handler become "
"valid, usually near the end of the constructor."
msgstr ""

#: ../../c-api/gcsupport.rst:64
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair "
"of rules:"
msgstr ""

#: ../../c-api/gcsupport.rst:67
msgid ""
"Before fields which refer to other containers are invalidated, "
":c:func:`PyObject_GC_UnTrack` must be called."
msgstr ""

#: ../../c-api/gcsupport.rst:70
msgid "The object's memory must be deallocated using :c:func:`PyObject_GC_Del`."
msgstr ""

#: ../../c-api/gcsupport.rst:75
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_GC_New` or"
" :c:func:`PyObject_GC_NewVar`."
msgstr ""

#: ../../c-api/gcsupport.rst:81
msgid ""
"Remove the object *op* from the set of container objects tracked by the "
"collector.  Note that :c:func:`PyObject_GC_Track` can be called again on "
"this object to add it back to the set of tracked objects.  The "
"deallocator (:c:member:`~PyTypeObject.tp_dealloc` handler) should call "
"this for the object before any of the fields used by the "
":c:member:`~PyTypeObject.tp_traverse` handler become invalid."
msgstr ""

#: ../../c-api/gcsupport.rst:90
msgid ""
"The :c:func:`_PyObject_GC_TRACK` and :c:func:`_PyObject_GC_UNTRACK` "
"macros have been removed from the public C API."
msgstr ""

#: ../../c-api/gcsupport.rst:93
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler accepts a function "
"parameter of this type:"
msgstr ""

#: ../../c-api/gcsupport.rst:98
msgid ""
"Type of the visitor function passed to the "
":c:member:`~PyTypeObject.tp_traverse` handler. The function should be "
"called with an object to traverse as *object* and the third parameter to "
"the :c:member:`~PyTypeObject.tp_traverse` handler as *arg*.  The Python "
"core uses several visitor functions to implement cyclic garbage "
"detection; it's not expected that users will need to write their own "
"visitor functions."
msgstr ""

#: ../../c-api/gcsupport.rst:105
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler must have the following"
" type:"
msgstr ""

#: ../../c-api/gcsupport.rst:110
msgid ""
"Traversal function for a container object.  Implementations must call the"
" *visit* function for each object directly contained by *self*, with the "
"parameters to *visit* being the contained object and the *arg* value "
"passed to the handler.  The *visit* function must not be called with a "
"``NULL`` object argument.  If *visit* returns a non-zero value that value"
" should be returned immediately."
msgstr ""

#: ../../c-api/gcsupport.rst:117
msgid ""
"To simplify writing :c:member:`~PyTypeObject.tp_traverse` handlers, a "
":c:func:`Py_VISIT` macro is provided.  In order to use this macro, the "
":c:member:`~PyTypeObject.tp_traverse` implementation must name its "
"arguments exactly *visit* and *arg*:"
msgstr ""

#: ../../c-api/gcsupport.rst:124
msgid ""
"If *o* is not ``NULL``, call the *visit* callback, with arguments *o* and"
" *arg*.  If *visit* returns a non-zero value, then return it. Using this "
"macro, :c:member:`~PyTypeObject.tp_traverse` handlers look like::"
msgstr ""

#: ../../c-api/gcsupport.rst:137
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` handler must be of the "
":c:type:`inquiry` type, or ``NULL`` if the object is immutable."
msgstr ""

#: ../../c-api/gcsupport.rst:143
msgid ""
"Drop references that may have created reference cycles.  Immutable "
"objects do not have to define this method since they can never directly "
"create reference cycles.  Note that the object must still be valid after "
"calling this method (don't just call :c:func:`Py_DECREF` on a reference)."
"  The collector will call this method if it detects that this object is "
"involved in a reference cycle."
msgstr ""

#: ../../c-api/gen.rst:6
msgid "Generator Objects"
msgstr ""

#: ../../c-api/gen.rst:8
msgid ""
"Generator objects are what Python uses to implement generator iterators. "
"They are normally created by iterating over a function that yields "
"values, rather than explicitly calling :c:func:`PyGen_New` or "
":c:func:`PyGen_NewWithQualName`."
msgstr ""

#: ../../c-api/gen.rst:15
msgid "The C structure used for generator objects."
msgstr ""

#: ../../c-api/gen.rst:20
msgid "The type object corresponding to generator objects."
msgstr ""

#: ../../c-api/gen.rst:25
msgid "Return true if *ob* is a generator object; *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/gen.rst:30
msgid ""
"Return true if *ob*'s type is :c:type:`PyGen_Type`; *ob* must not be "
"``NULL``."
msgstr ""

#: ../../c-api/gen.rst:35
msgid ""
"Create and return a new generator object based on the *frame* object. A "
"reference to *frame* is stolen by this function. The argument must not be"
" ``NULL``."
msgstr ""

#: ../../c-api/gen.rst:41
msgid ""
"Create and return a new generator object based on the *frame* object, "
"with ``__name__`` and ``__qualname__`` set to *name* and *qualname*. A "
"reference to *frame* is stolen by this function.  The *frame* argument "
"must not be ``NULL``."
msgstr ""

#: ../../c-api/import.rst:6
msgid "Importing Modules"
msgstr ""

#: ../../c-api/import.rst:16
msgid ""
"This is a simplified interface to :c:func:`PyImport_ImportModuleEx` "
"below, leaving the *globals* and *locals* arguments set to ``NULL`` and "
"*level* set to 0.  When the *name* argument contains a dot (when it "
"specifies a submodule of a package), the *fromlist* argument is set to "
"the list ``['*']`` so that the return value is the named module rather "
"than the top-level package containing it as would otherwise be the case."
"  (Unfortunately, this has an additional side effect when *name* in fact "
"specifies a subpackage instead of a submodule: the submodules specified "
"in the package's ``__all__`` variable are  loaded.)  Return a new "
"reference to the imported module, or ``NULL`` with an exception set on "
"failure.  A failing import of a module doesn't leave the module in "
":data:`sys.modules`."
msgstr ""

#: ../../c-api/import.rst:28 ../../c-api/import.rst:89
msgid "This function always uses absolute imports."
msgstr ""

#: ../../c-api/import.rst:33
msgid "This function is a deprecated alias of :c:func:`PyImport_ImportModule`."
msgstr ""

#: ../../c-api/import.rst:35
msgid ""
"This function used to fail immediately when the import lock was held by "
"another thread.  In Python 3.3 though, the locking scheme switched to "
"per-module locks for most purposes, so this function's special behaviour "
"isn't needed anymore."
msgstr ""

#: ../../c-api/import.rst:46
msgid ""
"Import a module.  This is best described by referring to the built-in "
"Python function :func:`__import__`."
msgstr ""

#: ../../c-api/import.rst:49 ../../c-api/import.rst:65
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or ``NULL`` with an exception set on failure.  Like for "
":func:`__import__`, the return value when a submodule of a package was "
"requested is normally the top-level package, unless a non-empty "
"*fromlist* was given."
msgstr ""

#: ../../c-api/import.rst:55
msgid ""
"Failing imports remove incomplete module objects, like with "
":c:func:`PyImport_ImportModule`."
msgstr ""

#: ../../c-api/import.rst:61
msgid ""
"Import a module.  This is best described by referring to the built-in "
"Python function :func:`__import__`, as the standard :func:`__import__` "
"function calls this function directly."
msgstr ""

#: ../../c-api/import.rst:75
msgid ""
"Similar to :c:func:`PyImport_ImportModuleLevelObject`, but the name is a "
"UTF-8 encoded string instead of a Unicode object."
msgstr ""

#: ../../c-api/import.rst:78
msgid "Negative values for *level* are no longer accepted."
msgstr ""

#: ../../c-api/import.rst:83
msgid ""
"This is a higher-level interface that calls the current \"import hook "
"function\" (with an explicit *level* of 0, meaning absolute import).  It "
"invokes the :func:`__import__` function from the ``__builtins__`` of the "
"current globals.  This means that the import is done using whatever "
"import hooks are installed in the current environment."
msgstr ""

#: ../../c-api/import.rst:94
msgid ""
"Reload a module.  Return a new reference to the reloaded module, or "
"``NULL`` with an exception set on failure (the module still exists in "
"this case)."
msgstr ""

#: ../../c-api/import.rst:100
msgid ""
"Return the module object corresponding to a module name.  The *name* "
"argument may be of the form ``package.module``. First check the modules "
"dictionary if there's one there, and if not, create a new one and insert "
"it in the modules dictionary. Return ``NULL`` with an exception set on "
"failure."
msgstr ""

#: ../../c-api/import.rst:107
msgid ""
"This function does not load or import the module; if the module wasn't "
"already loaded, you will get an empty module object. Use "
":c:func:`PyImport_ImportModule` or one of its variants to import a "
"module.  Package structures implied by a dotted name for *name* are not "
"created if not already present."
msgstr ""

#: ../../c-api/import.rst:117
msgid ""
"Similar to :c:func:`PyImport_AddModuleObject`, but the name is a UTF-8 "
"encoded string instead of a Unicode object."
msgstr ""

#: ../../c-api/import.rst:125
msgid ""
"Given a module name (possibly of the form ``package.module``) and a code "
"object read from a Python bytecode file or obtained from the built-in "
"function :func:`compile`, load the module.  Return a new reference to the"
" module object, or ``NULL`` with an exception set if an error occurred.  "
"*name* is removed from :attr:`sys.modules` in error cases, even if *name*"
" was already in :attr:`sys.modules` on entry to "
":c:func:`PyImport_ExecCodeModule`.  Leaving incompletely initialized "
"modules in :attr:`sys.modules` is dangerous, as imports of such modules "
"have no way to know that the module object is an unknown (and probably "
"damaged with respect to the module author's intents) state."
msgstr ""

#: ../../c-api/import.rst:135
msgid ""
"The module's :attr:`__spec__` and :attr:`__loader__` will be set, if not "
"set already, with the appropriate values.  The spec's loader will be set "
"to the module's ``__loader__`` (if set) and to an instance of "
":class:`SourceFileLoader` otherwise."
msgstr ""

#: ../../c-api/import.rst:140
msgid ""
"The module's :attr:`__file__` attribute will be set to the code object's "
":c:member:`co_filename`.  If applicable, :attr:`__cached__` will also be "
"set."
msgstr ""

#: ../../c-api/import.rst:144
msgid ""
"This function will reload the module if it was already imported.  See "
":c:func:`PyImport_ReloadModule` for the intended way to reload a module."
msgstr ""

#: ../../c-api/import.rst:147
msgid ""
"If *name* points to a dotted name of the form ``package.module``, any "
"package structures not already created will still not be created."
msgstr ""

#: ../../c-api/import.rst:150
msgid ""
"See also :c:func:`PyImport_ExecCodeModuleEx` and "
":c:func:`PyImport_ExecCodeModuleWithPathnames`."
msgstr ""

#: ../../c-api/import.rst:156
msgid ""
"Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`__file__` "
"attribute of the module object is set to *pathname* if it is "
"non-``NULL``."
msgstr ""

#: ../../c-api/import.rst:159
msgid "See also :c:func:`PyImport_ExecCodeModuleWithPathnames`."
msgstr ""

#: ../../c-api/import.rst:164
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleEx`, but the :attr:`__cached__` "
"attribute of the module object is set to *cpathname* if it is "
"non-``NULL``.  Of the three functions, this is the preferred one to use."
msgstr ""

#: ../../c-api/import.rst:173
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleObject`, but *name*, *pathname* and "
"*cpathname* are UTF-8 encoded strings. Attempts are also made to figure "
"out what the value for *pathname* should be from *cpathname* if the "
"former is set to ``NULL``."
msgstr ""

#: ../../c-api/import.rst:179
msgid ""
"Uses :func:`imp.source_from_cache()` in calculating the source path if "
"only the bytecode path is provided."
msgstr ""

#: ../../c-api/import.rst:186
msgid ""
"Return the magic number for Python bytecode files (a.k.a. :file:`.pyc` "
"file). The magic number should be present in the first four bytes of the "
"bytecode file, in little-endian byte order. Returns ``-1`` on error."
msgstr ""

#: ../../c-api/import.rst:190
msgid "Return value of ``-1`` upon failure."
msgstr ""

#: ../../c-api/import.rst:196
msgid ""
"Return the magic tag string for :pep:`3147` format Python bytecode file "
"names.  Keep in mind that the value at ``sys.implementation.cache_tag`` "
"is authoritative and should be used instead of this function."
msgstr ""

#: ../../c-api/import.rst:204
msgid ""
"Return the dictionary used for the module administration (a.k.a. "
"``sys.modules``).  Note that this is a per-interpreter variable."
msgstr ""

#: ../../c-api/import.rst:209
msgid ""
"Return the already imported module with the given name.  If the module "
"has not been imported yet then returns ``NULL`` but does not set an "
"error.  Returns ``NULL`` and sets an error if the lookup failed."
msgstr ""

#: ../../c-api/import.rst:217
msgid ""
"Return a finder object for a :data:`sys.path`/:attr:`pkg.__path__` item "
"*path*, possibly by fetching it from the :data:`sys.path_importer_cache` "
"dict.  If it wasn't yet cached, traverse :data:`sys.path_hooks` until a "
"hook is found that can handle the path item.  Return ``None`` if no hook "
"could; this tells our caller that the :term:`path based finder` could not"
" find a finder for this path item. Cache the result in "
":data:`sys.path_importer_cache`. Return a new reference to the finder "
"object."
msgstr ""

#: ../../c-api/import.rst:228
msgid "Initialize the import mechanism.  For internal use only."
msgstr ""

#: ../../c-api/import.rst:233
msgid "Empty the module table.  For internal use only."
msgstr ""

#: ../../c-api/import.rst:238
msgid "Finalize the import mechanism.  For internal use only."
msgstr ""

#: ../../c-api/import.rst:243
msgid ""
"Load a frozen module named *name*.  Return ``1`` for success, ``0`` if "
"the module is not found, and ``-1`` with an exception set if the "
"initialization failed.  To access the imported module on a successful "
"load, use :c:func:`PyImport_ImportModule`.  (Note the misnomer --- this "
"function would reload the module if it was already imported.)"
msgstr ""

#: ../../c-api/import.rst:251
msgid "The ``__file__`` attribute is no longer set on the module."
msgstr ""

#: ../../c-api/import.rst:257
msgid ""
"Similar to :c:func:`PyImport_ImportFrozenModuleObject`, but the name is a"
" UTF-8 encoded string instead of a Unicode object."
msgstr ""

#: ../../c-api/import.rst:265
msgid ""
"This is the structure type definition for frozen module descriptors, as "
"generated by the :program:`freeze` utility (see :file:`Tools/freeze/` in "
"the Python source distribution).  Its definition, found in "
":file:`Include/import.h`, is::"
msgstr ""

#: ../../c-api/import.rst:279
msgid ""
"This pointer is initialized to point to an array of :c:type:`struct "
"_frozen` records, terminated by one whose members are all ``NULL`` or "
"zero.  When a frozen module is imported, it is searched in this table.  "
"Third-party code could play tricks with this to provide a dynamically "
"created collection of frozen modules."
msgstr ""

#: ../../c-api/import.rst:287
msgid ""
"Add a single module to the existing table of built-in modules.  This is a"
" convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning "
"``-1`` if the table could not be extended.  The new module can be "
"imported by the name *name*, and uses the function *initfunc* as the "
"initialization function called on the first attempted import.  This "
"should be called before :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/import.rst:297
msgid ""
"Structure describing a single entry in the list of built-in modules.  "
"Each of these structures gives the name and initialization function for a"
" module built into the interpreter.  The name is an ASCII encoded string."
"  Programs which embed Python may use an array of these structures in "
"conjunction with :c:func:`PyImport_ExtendInittab` to provide additional "
"built-in modules. The structure is defined in :file:`Include/import.h` "
"as::"
msgstr ""

#: ../../c-api/import.rst:312
msgid ""
"Add a collection of modules to the table of built-in modules.  The "
"*newtab* array must end with a sentinel entry which contains ``NULL`` for"
" the :attr:`name` field; failure to provide the sentinel value can result"
" in a memory fault. Returns ``0`` on success or ``-1`` if insufficient "
"memory could be allocated to extend the internal table.  In the event of "
"failure, no modules are added to the internal table.  This should be "
"called before :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/index.rst:5
msgid "Python/C API Reference Manual"
msgstr ""

#: ../../c-api/index.rst:7
msgid ""
"This manual documents the API used by C and C++ programmers who want to "
"write extension modules or embed Python.  It is a companion to :ref"
":`extending-index`, which describes the general principles of extension "
"writing but does not document the API functions in detail."
msgstr ""

#: ../../c-api/init.rst:8
msgid "Initialization, Finalization, and Threads"
msgstr ""

#: ../../c-api/init.rst:10
msgid "See also :ref:`Python Initialization Configuration <init-config>`."
msgstr ""

#: ../../c-api/init.rst:15
msgid "Before Python Initialization"
msgstr ""

#: ../../c-api/init.rst:17
msgid ""
"In an application embedding  Python, the :c:func:`Py_Initialize` function"
" must be called before using any other Python/C API functions; with the "
"exception of a few functions and the :ref:`global configuration variables"
" <global-conf-vars>`."
msgstr ""

#: ../../c-api/init.rst:22
msgid "The following functions can be safely called before Python is initialized:"
msgstr ""

#: ../../c-api/init.rst:24
msgid "Configuration functions:"
msgstr ""

#: ../../c-api/init.rst:26
msgid ":c:func:`PyImport_AppendInittab`"
msgstr ""

#: ../../c-api/init.rst:27
msgid ":c:func:`PyImport_ExtendInittab`"
msgstr ""

#: ../../c-api/init.rst:28
msgid ":c:func:`PyInitFrozenExtensions`"
msgstr ""

#: ../../c-api/init.rst:29
msgid ":c:func:`PyMem_SetAllocator`"
msgstr ""

#: ../../c-api/init.rst:30
msgid ":c:func:`PyMem_SetupDebugHooks`"
msgstr ""

#: ../../c-api/init.rst:31
msgid ":c:func:`PyObject_SetArenaAllocator`"
msgstr ""

#: ../../c-api/init.rst:32
msgid ":c:func:`Py_SetPath`"
msgstr ""

#: ../../c-api/init.rst:33
msgid ":c:func:`Py_SetProgramName`"
msgstr ""

#: ../../c-api/init.rst:34
msgid ":c:func:`Py_SetPythonHome`"
msgstr ""

#: ../../c-api/init.rst:35
msgid ":c:func:`Py_SetStandardStreamEncoding`"
msgstr ""

#: ../../c-api/init.rst:36
msgid ":c:func:`PySys_AddWarnOption`"
msgstr ""

#: ../../c-api/init.rst:37
msgid ":c:func:`PySys_AddXOption`"
msgstr ""

#: ../../c-api/init.rst:38
msgid ":c:func:`PySys_ResetWarnOptions`"
msgstr ""

#: ../../c-api/init.rst:40
msgid "Informative functions:"
msgstr ""

#: ../../c-api/init.rst:42
msgid ":c:func:`Py_IsInitialized`"
msgstr ""

#: ../../c-api/init.rst:43
msgid ":c:func:`PyMem_GetAllocator`"
msgstr ""

#: ../../c-api/init.rst:44
msgid ":c:func:`PyObject_GetArenaAllocator`"
msgstr ""

#: ../../c-api/init.rst:45
msgid ":c:func:`Py_GetBuildInfo`"
msgstr ""

#: ../../c-api/init.rst:46
msgid ":c:func:`Py_GetCompiler`"
msgstr ""

#: ../../c-api/init.rst:47
msgid ":c:func:`Py_GetCopyright`"
msgstr ""

#: ../../c-api/init.rst:48
msgid ":c:func:`Py_GetPlatform`"
msgstr ""

#: ../../c-api/init.rst:49
msgid ":c:func:`Py_GetVersion`"
msgstr ""

#: ../../c-api/init.rst:51
msgid "Utilities:"
msgstr ""

#: ../../c-api/init.rst:53
msgid ":c:func:`Py_DecodeLocale`"
msgstr ""

#: ../../c-api/init.rst:55
msgid "Memory allocators:"
msgstr ""

#: ../../c-api/init.rst:57 ../../c-api/memory.rst:395
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ""

#: ../../c-api/init.rst:58 ../../c-api/memory.rst:396
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ""

#: ../../c-api/init.rst:59 ../../c-api/memory.rst:397
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ""

#: ../../c-api/init.rst:60 ../../c-api/memory.rst:398
msgid ":c:func:`PyMem_RawFree`"
msgstr ""

#: ../../c-api/init.rst:64
msgid ""
"The following functions **should not be called** before "
":c:func:`Py_Initialize`: :c:func:`Py_EncodeLocale`, :c:func:`Py_GetPath`,"
" :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, "
":c:func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome`, "
":c:func:`Py_GetProgramName` and :c:func:`PyEval_InitThreads`."
msgstr ""

#: ../../c-api/init.rst:74
msgid "Global configuration variables"
msgstr ""

#: ../../c-api/init.rst:76
msgid ""
"Python has variables for the global configuration to control different "
"features and options. By default, these flags are controlled by "
":ref:`command line options <using-on-interface-options>`."
msgstr ""

#: ../../c-api/init.rst:80
msgid ""
"When a flag is set by an option, the value of the flag is the number of "
"times that the option was set. For example, ``-b`` sets "
":c:data:`Py_BytesWarningFlag` to 1 and ``-bb`` sets "
":c:data:`Py_BytesWarningFlag` to 2."
msgstr ""

#: ../../c-api/init.rst:86
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with "
":class:`str` or :class:`bytes` with :class:`int`.  Issue an error if "
"greater or equal to ``2``."
msgstr ""

#: ../../c-api/init.rst:90
msgid "Set by the :option:`-b` option."
msgstr ""

#: ../../c-api/init.rst:94
msgid ""
"Turn on parser debugging output (for expert only, depending on "
"compilation options)."
msgstr ""

#: ../../c-api/init.rst:97
msgid ""
"Set by the :option:`-d` option and the :envvar:`PYTHONDEBUG` environment "
"variable."
msgstr ""

#: ../../c-api/init.rst:102
msgid ""
"If set to non-zero, Python won't try to write ``.pyc`` files on the "
"import of source modules."
msgstr ""

#: ../../c-api/init.rst:105
msgid ""
"Set by the :option:`-B` option and the :envvar:`PYTHONDONTWRITEBYTECODE` "
"environment variable."
msgstr ""

#: ../../c-api/init.rst:110
msgid ""
"Suppress error messages when calculating the module search path in "
":c:func:`Py_GetPath`."
msgstr ""

#: ../../c-api/init.rst:113
msgid "Private flag used by ``_freeze_importlib`` and ``frozenmain`` programs."
msgstr ""

#: ../../c-api/init.rst:117
msgid ""
"Set to ``1`` if the :envvar:`PYTHONHASHSEED` environment variable is set "
"to a non-empty string."
msgstr ""

#: ../../c-api/init.rst:120
msgid ""
"If the flag is non-zero, read the :envvar:`PYTHONHASHSEED` environment "
"variable to initialize the secret hash seed."
msgstr ""

#: ../../c-api/init.rst:125
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. "
":envvar:`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../c-api/init.rst:128
msgid "Set by the :option:`-E` and :option:`-I` options."
msgstr ""

#: ../../c-api/init.rst:132
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, "
"even when :data:`sys.stdin` does not appear to be a terminal."
msgstr ""

#: ../../c-api/init.rst:136
msgid ""
"Set by the :option:`-i` option and the :envvar:`PYTHONINSPECT` "
"environment variable."
msgstr ""

#: ../../c-api/init.rst:141
msgid "Set by the :option:`-i` option."
msgstr ""

#: ../../c-api/init.rst:145
msgid ""
"Run Python in isolated mode. In isolated mode :data:`sys.path` contains "
"neither the script's directory nor the user's site-packages directory."
msgstr ""

#: ../../c-api/init.rst:148
msgid "Set by the :option:`-I` option."
msgstr ""

#: ../../c-api/init.rst:154
msgid ""
"If the flag is non-zero, use the ``mbcs`` encoding instead of the UTF-8 "
"encoding for the filesystem encoding."
msgstr ""

#: ../../c-api/init.rst:157
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable is set to a non-empty string."
msgstr ""

#: ../../c-api/init.rst:160
msgid "See :pep:`529` for more details."
msgstr ""

#: ../../c-api/init.rst:166
msgid ""
"If the flag is non-zero, use :class:`io.FileIO` instead of "
":class:`WindowsConsoleIO` for :mod:`sys` standard streams."
msgstr ""

#: ../../c-api/init.rst:169
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment "
"variable is set to a non-empty string."
msgstr ""

#: ../../c-api/init.rst:172
msgid "See :pep:`528` for more details."
msgstr ""

#: ../../c-api/init.rst:178
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call "
":func:`site.main` if you want them to be triggered)."
msgstr ""

#: ../../c-api/init.rst:183
msgid "Set by the :option:`-S` option."
msgstr ""

#: ../../c-api/init.rst:187
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to "
":data:`sys.path`."
msgstr ""

#: ../../c-api/init.rst:190
msgid ""
"Set by the :option:`-s` and :option:`-I` options, and the "
":envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""

#: ../../c-api/init.rst:195
msgid ""
"Set by the :option:`-O` option and the :envvar:`PYTHONOPTIMIZE` "
"environment variable."
msgstr ""

#: ../../c-api/init.rst:200
msgid "Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../../c-api/init.rst:202
msgid "Set by the :option:`-q` option."
msgstr ""

#: ../../c-api/init.rst:208
msgid "Force the stdout and stderr streams to be unbuffered."
msgstr ""

#: ../../c-api/init.rst:210
msgid ""
"Set by the :option:`-u` option and the :envvar:`PYTHONUNBUFFERED` "
"environment variable."
msgstr ""

#: ../../c-api/init.rst:215
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  If greater or "
"equal to ``2``, print a message for each file that is checked for when "
"searching for a module. Also provides information on module cleanup at "
"exit."
msgstr ""

#: ../../c-api/init.rst:220
msgid ""
"Set by the :option:`-v` option and the :envvar:`PYTHONVERBOSE` "
"environment variable."
msgstr ""

#: ../../c-api/init.rst:225
msgid "Initializing and finalizing the interpreter"
msgstr ""

#: ../../c-api/init.rst:243
msgid ""
"Initialize the Python interpreter.  In an application embedding  Python, "
"this should be called before using any other Python/C API functions; see "
":ref:`Before Python Initialization <pre-init-safe>` for the few "
"exceptions."
msgstr ""

#: ../../c-api/init.rst:247
msgid ""
"This initializes the table of loaded modules (``sys.modules``), and "
"creates the fundamental modules :mod:`builtins`, :mod:`__main__` and "
":mod:`sys`.  It also initializes the module search path (``sys.path``). "
"It does not set ``sys.argv``; use :c:func:`PySys_SetArgvEx` for that.  "
"This is a no-op when called for a second time (without calling "
":c:func:`Py_FinalizeEx` first).  There is no return value; it is a fatal "
"error if the initialization fails."
msgstr ""

#: ../../c-api/init.rst:256
msgid ""
"On Windows, changes the console mode from ``O_TEXT`` to ``O_BINARY``, "
"which will also affect non-Python uses of the console using the C "
"Runtime."
msgstr ""

#: ../../c-api/init.rst:262
msgid ""
"This function works like :c:func:`Py_Initialize` if *initsigs* is ``1``. "
"If *initsigs* is ``0``, it skips initialization registration of signal "
"handlers, which might be useful when Python is embedded."
msgstr ""

#: ../../c-api/init.rst:269
msgid ""
"Return true (nonzero) when the Python interpreter has been initialized, "
"false (zero) if not.  After :c:func:`Py_FinalizeEx` is called, this "
"returns false until :c:func:`Py_Initialize` is called again."
msgstr ""

#: ../../c-api/init.rst:276
msgid ""
"Undo all initializations made by :c:func:`Py_Initialize` and subsequent "
"use of Python/C API functions, and destroy all sub-interpreters (see "
":c:func:`Py_NewInterpreter` below) that were created and not yet "
"destroyed since the last call to :c:func:`Py_Initialize`.  Ideally, this "
"frees all memory allocated by the Python interpreter.  This is a no-op "
"when called for a second time (without calling :c:func:`Py_Initialize` "
"again first).  Normally the return value is ``0``.  If there were errors "
"during finalization (flushing buffered data), ``-1`` is returned."
msgstr ""

#: ../../c-api/init.rst:285
msgid ""
"This function is provided for a number of reasons.  An embedding "
"application might want to restart Python without having to restart the "
"application itself. An application that has loaded the Python interpreter"
" from a dynamically loadable library (or DLL) might want to free all "
"memory allocated by Python before unloading the DLL. During a hunt for "
"memory leaks in an application a developer might want to free all memory "
"allocated by Python before exiting from the application."
msgstr ""

#: ../../c-api/init.rst:293
msgid ""
"**Bugs and caveats:** The destruction of modules and objects in modules "
"is done in random order; this may cause destructors (:meth:`__del__` "
"methods) to fail when they depend on other objects (even functions) or "
"modules.  Dynamically loaded extension modules loaded by Python are not "
"unloaded.  Small amounts of memory allocated by the Python interpreter "
"may not be freed (if you find a leak, please report it).  Memory tied up "
"in circular references between objects is not freed.  Some memory "
"allocated by extension modules may not be freed.  Some extensions may not"
" work properly if their initialization routine is called more than once; "
"this can happen if an application calls :c:func:`Py_Initialize` and "
":c:func:`Py_FinalizeEx` more than once."
msgstr ""

#: ../../c-api/init.rst:305
msgid ""
"Raises an :ref:`auditing event <auditing>` "
"``cpython._PySys_ClearAuditHooks`` with no arguments."
msgstr ""

#: ../../c-api/init.rst:310
msgid ""
"This is a backwards-compatible version of :c:func:`Py_FinalizeEx` that "
"disregards the return value."
msgstr ""

#: ../../c-api/init.rst:315
msgid "Process-wide parameters"
msgstr ""

#: ../../c-api/init.rst:325
msgid ""
"This function should be called before :c:func:`Py_Initialize`, if it is "
"called at all. It specifies which encoding and error handling to use with"
" standard IO, with the same meanings as in :func:`str.encode`."
msgstr ""

#: ../../c-api/init.rst:329
msgid ""
"It overrides :envvar:`PYTHONIOENCODING` values, and allows embedding code"
" to control IO encoding when the environment variable does not work."
msgstr ""

#: ../../c-api/init.rst:332
msgid ""
"*encoding* and/or *errors* may be ``NULL`` to use "
":envvar:`PYTHONIOENCODING` and/or default values (depending on other "
"settings)."
msgstr ""

#: ../../c-api/init.rst:336
msgid ""
"Note that :data:`sys.stderr` always uses the \"backslashreplace\" error "
"handler, regardless of this (or any other) setting."
msgstr ""

#: ../../c-api/init.rst:339
msgid ""
"If :c:func:`Py_FinalizeEx` is called, this function will need to be "
"called again in order to affect subsequent calls to "
":c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/init.rst:342
msgid ""
"Returns ``0`` if successful, a nonzero value on error (e.g. calling after"
" the interpreter has already been initialized)."
msgstr ""

#: ../../c-api/init.rst:355
msgid ""
"This function should be called before :c:func:`Py_Initialize` is called "
"for the first time, if it is called at all.  It tells the interpreter the"
" value of the ``argv[0]`` argument to the :c:func:`main` function of the "
"program (converted to wide characters). This is used by "
":c:func:`Py_GetPath` and some other functions below to find the Python "
"run-time libraries relative to the interpreter executable.  The default "
"value is ``'python'``.  The argument should point to a zero-terminated "
"wide character string in static storage whose contents will not change "
"for the duration of the program's execution.  No code in the Python "
"interpreter will change the contents of this storage."
msgstr ""

#: ../../c-api/init.rst:366 ../../c-api/init.rst:480 ../../c-api/init.rst:586
#: ../../c-api/init.rst:613 ../../c-api/init.rst:630
msgid ""
"Use :c:func:`Py_DecodeLocale` to decode a bytes string to get a "
":c:type:`wchar_*` string."
msgstr ""

#: ../../c-api/init.rst:374
msgid ""
"Return the program name set with :c:func:`Py_SetProgramName`, or the "
"default. The returned string points into static storage; the caller "
"should not modify its value."
msgstr ""

#: ../../c-api/init.rst:381
msgid ""
"Return the *prefix* for installed platform-independent files. This is "
"derived through a number of complicated rules from the program name set "
"with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the prefix "
"is ``'/usr/local'``. The returned string points into static storage; the "
"caller should not modify its value.  This corresponds to the "
":makevar:`prefix` variable in the top-level :file:`Makefile` and the "
"``--prefix`` argument to the :program:`configure` script at build time.  "
"The value is available to Python code as ``sys.prefix``. It is only "
"useful on Unix.  See also the next function."
msgstr ""

#: ../../c-api/init.rst:394
msgid ""
"Return the *exec-prefix* for installed platform-*dependent* files.  This "
"is derived through a number of complicated rules from the program name "
"set with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the exec-"
"prefix is ``'/usr/local'``.  The returned string points into static "
"storage; the caller should not modify its value.  This corresponds to the"
" :makevar:`exec_prefix` variable in the top-level :file:`Makefile` and "
"the ``--exec-prefix`` argument to the :program:`configure` script at "
"build  time.  The value is available to Python code as "
"``sys.exec_prefix``.  It is only useful on Unix."
msgstr ""

#: ../../c-api/init.rst:404
msgid ""
"Background: The exec-prefix differs from the prefix when platform "
"dependent files (such as executables and shared libraries) are installed "
"in a different directory tree.  In a typical installation, platform "
"dependent files may be installed in the :file:`/usr/local/plat` subtree "
"while platform independent may be installed in :file:`/usr/local`."
msgstr ""

#: ../../c-api/init.rst:410
msgid ""
"Generally speaking, a platform is a combination of hardware and software "
"families, e.g.  Sparc machines running the Solaris 2.x operating system "
"are considered the same platform, but Intel machines running Solaris 2.x "
"are another platform, and Intel machines running Linux are yet another "
"platform.  Different major revisions of the same operating system "
"generally also form different platforms.  Non-Unix operating systems are "
"a different story; the installation strategies on those systems are so "
"different that the prefix and exec-prefix are meaningless, and set to the"
" empty string. Note that compiled Python bytecode files are platform "
"independent (but not independent from the Python version by which they "
"were compiled!)."
msgstr ""

#: ../../c-api/init.rst:421
msgid ""
"System administrators will know how to configure the :program:`mount` or "
":program:`automount` programs to share :file:`/usr/local` between "
"platforms while having :file:`/usr/local/plat` be a different filesystem "
"for each platform."
msgstr ""

#: ../../c-api/init.rst:433
msgid ""
"Return the full program name of the Python executable; this is  computed "
"as a side-effect of deriving the default module search path  from the "
"program name (set by :c:func:`Py_SetProgramName` above). The returned "
"string points into static storage; the caller should not modify its "
"value.  The value is available to Python code as ``sys.executable``."
msgstr ""

#: ../../c-api/init.rst:447
msgid ""
"Return the default module search path; this is computed from the program "
"name (set by :c:func:`Py_SetProgramName` above) and some environment "
"variables. The returned string consists of a series of directory names "
"separated by a platform dependent delimiter character.  The delimiter "
"character is ``':'`` on Unix and Mac OS X, ``';'`` on Windows.  The "
"returned string points into static storage; the caller should not modify "
"its value.  The list :data:`sys.path` is initialized with this value on "
"interpreter startup; it can be (and usually is) modified later to change "
"the search path for loading modules."
msgstr ""

#: ../../c-api/init.rst:467
msgid ""
"Set the default module search path.  If this function is called before "
":c:func:`Py_Initialize`, then :c:func:`Py_GetPath` won't attempt to "
"compute a default search path but uses the one provided instead.  This is"
" useful if Python is embedded by an application that has full knowledge "
"of the location of all modules.  The path components should be separated "
"by the platform dependent delimiter character, which is ``':'`` on Unix "
"and Mac OS X, ``';'`` on Windows."
msgstr ""

#: ../../c-api/init.rst:475
msgid ""
"This also causes :data:`sys.executable` to be set to the program full "
"path (see :c:func:`Py_GetProgramFullPath`) and for :data:`sys.prefix` and"
" :data:`sys.exec_prefix` to be empty.  It is up to the caller to modify "
"these if required after calling :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/init.rst:483
msgid ""
"The path argument is copied internally, so the caller may free it after "
"the call completes."
msgstr ""

#: ../../c-api/init.rst:486
msgid ""
"The program full path is now used for :data:`sys.executable`, instead of "
"the program name."
msgstr ""

#: ../../c-api/init.rst:493
msgid ""
"Return the version of this Python interpreter.  This is a string that "
"looks something like ::"
msgstr ""

#: ../../c-api/init.rst:500
msgid ""
"The first word (up to the first space character) is the current Python "
"version; the first three characters are the major and minor version "
"separated by a period.  The returned string points into static storage; "
"the caller should not modify its value.  The value is available to Python"
" code as :data:`sys.version`."
msgstr ""

#: ../../c-api/init.rst:510
msgid ""
"Return the platform identifier for the current platform.  On Unix, this "
"is formed from the \"official\" name of the operating system, converted "
"to lower case, followed by the major revision number; e.g., for Solaris "
"2.x, which is also known as SunOS 5.x, the value is ``'sunos5'``.  On Mac"
" OS X, it is ``'darwin'``.  On Windows, it is ``'win'``.  The returned "
"string points into static storage; the caller should not modify its "
"value.  The value is available to Python code as ``sys.platform``."
msgstr ""

#: ../../c-api/init.rst:521
msgid ""
"Return the official copyright string for the current Python version, for "
"example"
msgstr ""

#: ../../c-api/init.rst:523
msgid "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"
msgstr ""

#: ../../c-api/init.rst:527
msgid ""
"The returned string points into static storage; the caller should not "
"modify its value.  The value is available to Python code as "
"``sys.copyright``."
msgstr ""

#: ../../c-api/init.rst:533
msgid ""
"Return an indication of the compiler used to build the current Python "
"version, in square brackets, for example::"
msgstr ""

#: ../../c-api/init.rst:540 ../../c-api/init.rst:554
msgid ""
"The returned string points into static storage; the caller should not "
"modify its value.  The value is available to Python code as part of the "
"variable ``sys.version``."
msgstr ""

#: ../../c-api/init.rst:547
msgid ""
"Return information about the sequence number and build date and time  of "
"the current Python interpreter instance, for example ::"
msgstr ""

#: ../../c-api/init.rst:566
msgid ""
"Set :data:`sys.argv` based on *argc* and *argv*.  These parameters are "
"similar to those passed to the program's :c:func:`main` function with the"
" difference that the first entry should refer to the script file to be "
"executed rather than the executable hosting the Python interpreter.  If "
"there isn't a script that will be run, the first entry in *argv* can be "
"an empty string.  If this function fails to initialize :data:`sys.argv`, "
"a fatal condition is signalled using :c:func:`Py_FatalError`."
msgstr ""

#: ../../c-api/init.rst:574
msgid ""
"If *updatepath* is zero, this is all the function does.  If *updatepath* "
"is non-zero, the function also modifies :data:`sys.path` according to the"
" following algorithm:"
msgstr ""

#: ../../c-api/init.rst:578
msgid ""
"If the name of an existing script is passed in ``argv[0]``, the absolute "
"path of the directory where the script is located is prepended to "
":data:`sys.path`."
msgstr ""

#: ../../c-api/init.rst:581
msgid ""
"Otherwise (that is, if *argc* is ``0`` or ``argv[0]`` doesn't point to an"
" existing file name), an empty string is prepended to :data:`sys.path`, "
"which is the same as prepending the current working directory "
"(``\".\"``)."
msgstr ""

#: ../../c-api/init.rst:590
msgid ""
"It is recommended that applications embedding the Python interpreter for "
"purposes other than executing a single script pass ``0`` as *updatepath*,"
" and update :data:`sys.path` themselves if desired. See `CVE-2008-5983 "
"<https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983>`_."
msgstr ""

#: ../../c-api/init.rst:595
msgid ""
"On versions before 3.1.3, you can achieve the same effect by manually "
"popping the first :data:`sys.path` element after having called "
":c:func:`PySys_SetArgv`, for example using::"
msgstr ""

#: ../../c-api/init.rst:609
msgid ""
"This function works like :c:func:`PySys_SetArgvEx` with *updatepath* set "
"to ``1`` unless the :program:`python` interpreter was started with the "
":option:`-I`."
msgstr ""

#: ../../c-api/init.rst:616
msgid "The *updatepath* value depends on :option:`-I`."
msgstr ""

#: ../../c-api/init.rst:621
msgid ""
"Set the default \"home\" directory, that is, the location of the standard"
" Python libraries.  See :envvar:`PYTHONHOME` for the meaning of the "
"argument string."
msgstr ""

#: ../../c-api/init.rst:625
msgid ""
"The argument should point to a zero-terminated character string in static"
" storage whose contents will not change for the duration of the program's"
" execution.  No code in the Python interpreter will change the contents "
"of this storage."
msgstr ""

#: ../../c-api/init.rst:636
msgid ""
"Return the default \"home\", that is, the value set by a previous call to"
" :c:func:`Py_SetPythonHome`, or the value of the :envvar:`PYTHONHOME` "
"environment variable if it is set."
msgstr ""

#: ../../c-api/init.rst:644
msgid "Thread State and the Global Interpreter Lock"
msgstr ""

#: ../../c-api/init.rst:651
msgid ""
"The Python interpreter is not fully thread-safe.  In order to support "
"multi-threaded Python programs, there's a global lock, called the "
":term:`global interpreter lock` or :term:`GIL`, that must be held by the "
"current thread before it can safely access Python objects. Without the "
"lock, even the simplest operations could cause problems in a multi-"
"threaded program: for example, when two threads simultaneously increment "
"the reference count of the same object, the reference count could end up "
"being incremented only once instead of twice."
msgstr ""

#: ../../c-api/init.rst:661
msgid ""
"Therefore, the rule exists that only the thread that has acquired the "
":term:`GIL` may operate on Python objects or call Python/C API functions."
" In order to emulate concurrency of execution, the interpreter regularly "
"tries to switch threads (see :func:`sys.setswitchinterval`).  The lock is"
" also released around potentially blocking I/O operations like reading or"
" writing a file, so that other Python threads can run in the meantime."
msgstr ""

#: ../../c-api/init.rst:672
msgid ""
"The Python interpreter keeps some thread-specific bookkeeping information"
" inside a data structure called :c:type:`PyThreadState`.  There's also "
"one global variable pointing to the current :c:type:`PyThreadState`: it "
"can be retrieved using :c:func:`PyThreadState_Get`."
msgstr ""

#: ../../c-api/init.rst:678
msgid "Releasing the GIL from extension code"
msgstr ""

#: ../../c-api/init.rst:680
msgid ""
"Most extension code manipulating the :term:`GIL` has the following simple"
" structure::"
msgstr ""

#: ../../c-api/init.rst:689
msgid "This is so common that a pair of macros exists to simplify it::"
msgstr ""

#: ../../c-api/init.rst:699
msgid ""
"The :c:macro:`Py_BEGIN_ALLOW_THREADS` macro opens a new block and "
"declares a hidden local variable; the :c:macro:`Py_END_ALLOW_THREADS` "
"macro closes the block."
msgstr ""

#: ../../c-api/init.rst:703
msgid "The block above expands to the following code::"
msgstr ""

#: ../../c-api/init.rst:715
msgid ""
"Here is how these functions work: the global interpreter lock is used to "
"protect the pointer to the current thread state.  When releasing the lock"
" and saving the thread state, the current thread state pointer must be "
"retrieved before the lock is released (since another thread could "
"immediately acquire the lock and store its own thread state in the global"
" variable). Conversely, when acquiring the lock and restoring the thread "
"state, the lock must be acquired before storing the thread state pointer."
msgstr ""

#: ../../c-api/init.rst:724
msgid ""
"Calling system I/O functions is the most common use case for releasing "
"the GIL, but it can also be useful before calling long-running "
"computations which don't need access to Python objects, such as "
"compression or cryptographic functions operating over memory buffers.  "
"For example, the standard :mod:`zlib` and :mod:`hashlib` modules release "
"the GIL when compressing or hashing data."
msgstr ""

#: ../../c-api/init.rst:735
msgid "Non-Python created threads"
msgstr ""

#: ../../c-api/init.rst:737
msgid ""
"When threads are created using the dedicated Python APIs (such as the "
":mod:`threading` module), a thread state is automatically associated to "
"them and the code showed above is therefore correct.  However, when "
"threads are created from C (for example by a third-party library with its"
" own thread management), they don't hold the GIL, nor is there a thread "
"state structure for them."
msgstr ""

#: ../../c-api/init.rst:744
msgid ""
"If you need to call Python code from these threads (often this will be "
"part of a callback API provided by the aforementioned third-party "
"library), you must first register these threads with the interpreter by "
"creating a thread state data structure, then acquiring the GIL, and "
"finally storing their thread state pointer, before you can start using "
"the Python/C API.  When you are done, you should reset the thread state "
"pointer, release the GIL, and finally free the thread state data "
"structure."
msgstr ""

#: ../../c-api/init.rst:752
msgid ""
"The :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` "
"functions do all of the above automatically.  The typical idiom for "
"calling into Python from a C thread is::"
msgstr ""

#: ../../c-api/init.rst:766
msgid ""
"Note that the :c:func:`PyGILState_\\*` functions assume there is only one"
" global interpreter (created automatically by :c:func:`Py_Initialize`).  "
"Python supports the creation of additional interpreters (using "
":c:func:`Py_NewInterpreter`), but mixing multiple interpreters and the "
":c:func:`PyGILState_\\*` API is unsupported."
msgstr ""

#: ../../c-api/init.rst:776
msgid "Cautions about fork()"
msgstr ""

#: ../../c-api/init.rst:778
msgid ""
"Another important thing to note about threads is their behaviour in the "
"face of the C :c:func:`fork` call. On most systems with :c:func:`fork`, "
"after a process forks only the thread that issued the fork will exist.  "
"This has a concrete impact both on how locks must be handled and on all "
"stored state in CPython's runtime."
msgstr ""

#: ../../c-api/init.rst:784
msgid ""
"The fact that only the \"current\" thread remains means any locks held by"
" other threads will never be released. Python solves this for "
":func:`os.fork` by acquiring the locks it uses internally before the "
"fork, and releasing them afterwards. In addition, it resets any :ref"
":`lock-objects` in the child. When extending or embedding Python, there "
"is no way to inform Python of additional (non-Python) locks that need to "
"be acquired before or reset after a fork. OS facilities such as "
":c:func:`pthread_atfork` would need to be used to accomplish the same "
"thing. Additionally, when extending or embedding Python, calling "
":c:func:`fork` directly rather than through :func:`os.fork` (and "
"returning to or calling into Python) may result in a deadlock by one of "
"Python's internal locks being held by a thread that is defunct after the "
"fork. :c:func:`PyOS_AfterFork_Child` tries to reset the necessary locks, "
"but is not always able to."
msgstr ""

#: ../../c-api/init.rst:799
msgid ""
"The fact that all other threads go away also means that CPython's runtime"
" state there must be cleaned up properly, which :func:`os.fork` does.  "
"This means finalizing all other :c:type:`PyThreadState` objects belonging"
" to the current interpreter and all other :c:type:`PyInterpreterState` "
"objects.  Due to this and the special nature of the :ref:`\"main\" "
"interpreter <sub-interpreter-support>`, :c:func:`fork` should only be "
"called in that interpreter's \"main\" thread, where the CPython global "
"runtime was originally initialized. The only exception is if "
":c:func:`exec` will be called immediately after."
msgstr ""

#: ../../c-api/init.rst:812
msgid "High-level API"
msgstr ""

#: ../../c-api/init.rst:814
msgid ""
"These are the most commonly used types and functions when writing C "
"extension code, or when embedding the Python interpreter:"
msgstr ""

#: ../../c-api/init.rst:819
msgid ""
"This data structure represents the state shared by a number of "
"cooperating threads.  Threads belonging to the same interpreter share "
"their module administration and a few other internal items. There are no "
"public members in this structure."
msgstr ""

#: ../../c-api/init.rst:824
msgid ""
"Threads belonging to different interpreters initially share nothing, "
"except process state like available memory, open file descriptors and "
"such.  The global interpreter lock is also shared by all threads, "
"regardless of to which interpreter they belong."
msgstr ""

#: ../../c-api/init.rst:832
msgid ""
"This data structure represents the state of a single thread.  The only "
"public data member is :attr:`interp` (:c:type:`PyInterpreterState *`), "
"which points to this thread's interpreter state."
msgstr ""

#: ../../c-api/init.rst:845
msgid ""
"Initialize and acquire the global interpreter lock.  It should be called "
"in the main thread before creating a second thread or engaging in any "
"other thread operations such as ``PyEval_ReleaseThread(tstate)``. It is "
"not needed before calling :c:func:`PyEval_SaveThread` or "
":c:func:`PyEval_RestoreThread`."
msgstr ""

#: ../../c-api/init.rst:850
msgid "This is a no-op when called for a second time."
msgstr ""

#: ../../c-api/init.rst:852
msgid ""
"This function is now called by :c:func:`Py_Initialize()`, so you don't "
"have to call it yourself anymore."
msgstr ""

#: ../../c-api/init.rst:856
msgid "This function cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr ""

#: ../../c-api/init.rst:864
msgid ""
"Returns a non-zero value if :c:func:`PyEval_InitThreads` has been called."
"  This function can be called without holding the GIL, and therefore can "
"be used to avoid calls to the locking API when running single-threaded."
msgstr ""

#: ../../c-api/init.rst:868
msgid "The :term:`GIL` is now initialized by :c:func:`Py_Initialize()`."
msgstr ""

#: ../../c-api/init.rst:874
msgid ""
"Release the global interpreter lock (if it has been created) and reset "
"the thread state to ``NULL``, returning the previous thread state (which "
"is not ``NULL``).  If the lock has been created, the current thread must "
"have acquired it."
msgstr ""

#: ../../c-api/init.rst:882
msgid ""
"Acquire the global interpreter lock (if it has been created) and set the "
"thread state to *tstate*, which must not be ``NULL``.  If the lock has "
"been created, the current thread must not have acquired it, otherwise "
"deadlock ensues."
msgstr ""

#: ../../c-api/init.rst:888 ../../c-api/init.rst:934 ../../c-api/init.rst:1109
#: ../../c-api/init.rst:1147
msgid ""
"Calling this function from a thread when the runtime is finalizing will "
"terminate the thread, even if the thread was not created by Python. You "
"can use :c:func:`_Py_IsFinalizing` or :func:`sys.is_finalizing` to check "
"if the interpreter is in process of being finalized before calling this "
"function to avoid unwanted termination."
msgstr ""

#: ../../c-api/init.rst:896
msgid ""
"Return the current thread state.  The global interpreter lock must be "
"held. When the current thread state is ``NULL``, this issues a fatal "
"error (so that the caller needn't check for ``NULL``)."
msgstr ""

#: ../../c-api/init.rst:903
msgid ""
"Swap the current thread state with the thread state given by the argument"
" *tstate*, which may be ``NULL``.  The global interpreter lock must be "
"held and is not released."
msgstr ""

#: ../../c-api/init.rst:908
msgid ""
"The following functions use thread-local storage, and are not compatible "
"with sub-interpreters:"
msgstr ""

#: ../../c-api/init.rst:913
msgid ""
"Ensure that the current thread is ready to call the Python C API "
"regardless of the current state of Python, or of the global interpreter "
"lock. This may be called as many times as desired by a thread as long as "
"each call is matched with a call to :c:func:`PyGILState_Release`. In "
"general, other thread-related APIs may be used between "
":c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` calls as "
"long as the thread state is restored to its previous state before the "
"Release().  For example, normal usage of the "
":c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS` "
"macros is acceptable."
msgstr ""

#: ../../c-api/init.rst:923
msgid ""
"The return value is an opaque \"handle\" to the thread state when "
":c:func:`PyGILState_Ensure` was called, and must be passed to "
":c:func:`PyGILState_Release` to ensure Python is left in the same state. "
"Even though recursive calls are allowed, these handles *cannot* be shared"
" - each unique call to :c:func:`PyGILState_Ensure` must save the handle "
"for its call to :c:func:`PyGILState_Release`."
msgstr ""

#: ../../c-api/init.rst:930
msgid ""
"When the function returns, the current thread will hold the GIL and be "
"able to call arbitrary Python code.  Failure is a fatal error."
msgstr ""

#: ../../c-api/init.rst:942
msgid ""
"Release any resources previously acquired.  After this call, Python's "
"state will be the same as it was prior to the corresponding "
":c:func:`PyGILState_Ensure` call (but generally this state will be "
"unknown to the caller, hence the use of the GILState API)."
msgstr ""

#: ../../c-api/init.rst:947
msgid ""
"Every call to :c:func:`PyGILState_Ensure` must be matched by a call to "
":c:func:`PyGILState_Release` on the same thread."
msgstr ""

#: ../../c-api/init.rst:953
msgid ""
"Get the current thread state for this thread.  May return ``NULL`` if no "
"GILState API has been used on the current thread.  Note that the main "
"thread always has such a thread-state, even if no auto-thread-state call "
"has been made on the main thread.  This is mainly a helper/diagnostic "
"function."
msgstr ""

#: ../../c-api/init.rst:961
msgid ""
"Return ``1`` if the current thread is holding the GIL and ``0`` "
"otherwise. This function can be called from any thread at any time. Only "
"if it has had its Python thread state initialized and currently is "
"holding the GIL will it return ``1``. This is mainly a helper/diagnostic "
"function.  It can be useful for example in callback contexts or memory "
"allocation functions when knowing that the GIL is locked can allow the "
"caller to perform sensitive actions or otherwise behave differently."
msgstr ""

#: ../../c-api/init.rst:973
msgid ""
"The following macros are normally used without a trailing semicolon; look"
" for example usage in the Python source distribution."
msgstr ""

#: ../../c-api/init.rst:979
msgid ""
"This macro expands to ``{ PyThreadState *_save; _save = "
"PyEval_SaveThread();``. Note that it contains an opening brace; it must "
"be matched with a following :c:macro:`Py_END_ALLOW_THREADS` macro.  See "
"above for further discussion of this macro."
msgstr ""

#: ../../c-api/init.rst:987
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save); }``. Note that it "
"contains a closing brace; it must be matched with an earlier "
":c:macro:`Py_BEGIN_ALLOW_THREADS` macro.  See above for further "
"discussion of this macro."
msgstr ""

#: ../../c-api/init.rst:995
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save);``: it is equivalent "
"to :c:macro:`Py_END_ALLOW_THREADS` without the closing brace."
msgstr ""

#: ../../c-api/init.rst:1001
msgid ""
"This macro expands to ``_save = PyEval_SaveThread();``: it is equivalent "
"to :c:macro:`Py_BEGIN_ALLOW_THREADS` without the opening brace and "
"variable declaration."
msgstr ""

#: ../../c-api/init.rst:1007
msgid "Low-level API"
msgstr ""

#: ../../c-api/init.rst:1009
msgid ""
"All of the following functions must be called after "
":c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/init.rst:1011
msgid ":c:func:`Py_Initialize()` now initializes the :term:`GIL`."
msgstr ""

#: ../../c-api/init.rst:1017
msgid ""
"Create a new interpreter state object.  The global interpreter lock need "
"not be held, but may be held if it is necessary to serialize calls to "
"this function."
msgstr ""

#: ../../c-api/init.rst:1021
msgid ""
"Raises an :ref:`auditing event <auditing>` "
"``cpython.PyInterpreterState_New`` with no arguments."
msgstr ""

#: ../../c-api/init.rst:1026
msgid ""
"Reset all information in an interpreter state object.  The global "
"interpreter lock must be held."
msgstr ""

#: ../../c-api/init.rst:1029
msgid ""
"Raises an :ref:`auditing event <auditing>` "
"``cpython.PyInterpreterState_Clear`` with no arguments."
msgstr ""

#: ../../c-api/init.rst:1034
msgid ""
"Destroy an interpreter state object.  The global interpreter lock need "
"not be held.  The interpreter state must have been reset with a previous "
"call to :c:func:`PyInterpreterState_Clear`."
msgstr ""

#: ../../c-api/init.rst:1041
msgid ""
"Create a new thread state object belonging to the given interpreter "
"object. The global interpreter lock need not be held, but may be held if "
"it is necessary to serialize calls to this function."
msgstr ""

#: ../../c-api/init.rst:1048
msgid ""
"Reset all information in a thread state object.  The global interpreter "
"lock must be held."
msgstr ""

#: ../../c-api/init.rst:1054
msgid ""
"Destroy a thread state object.  The global interpreter lock need not be "
"held. The thread state must have been reset with a previous call to "
":c:func:`PyThreadState_Clear`."
msgstr ""

#: ../../c-api/init.rst:1061
msgid ""
"Return the interpreter's unique ID.  If there was any error in doing so "
"then ``-1`` is returned and an error is set."
msgstr ""

#: ../../c-api/init.rst:1069
msgid ""
"Return a dictionary in which interpreter-specific data may be stored. If "
"this function returns ``NULL`` then no exception has been raised and the "
"caller should assume no interpreter-specific dict is available."
msgstr ""

#: ../../c-api/init.rst:1073
msgid ""
"This is not a replacement for :c:func:`PyModule_GetState()`, which "
"extensions should use to store interpreter-specific state information."
msgstr ""

#: ../../c-api/init.rst:1081
msgid ""
"Return a dictionary in which extensions can store thread-specific state "
"information.  Each extension should use a unique key to use to store "
"state in the dictionary.  It is okay to call this function when no "
"current thread state is available. If this function returns ``NULL``, no "
"exception has been raised and the caller should assume no current thread "
"state is available."
msgstr ""

#: ../../c-api/init.rst:1090
msgid ""
"Asynchronously raise an exception in a thread. The *id* argument is the "
"thread id of the target thread; *exc* is the exception object to be "
"raised. This function does not steal any references to *exc*. To prevent "
"naive misuse, you must write your own C extension to call this.  Must be "
"called with the GIL held. Returns the number of thread states modified; "
"this is normally one, but will be zero if the thread id isn't found.  If "
"*exc* is :const:`NULL`, the pending exception (if any) for the thread is "
"cleared. This raises no exceptions."
msgstr ""

#: ../../c-api/init.rst:1098
msgid ""
"The type of the *id* parameter changed from :c:type:`long` to "
":c:type:`unsigned long`."
msgstr ""

#: ../../c-api/init.rst:1104
msgid ""
"Acquire the global interpreter lock and set the current thread state to "
"*tstate*, which should not be ``NULL``.  The lock must have been created "
"earlier. If this thread already has the lock, deadlock ensues."
msgstr ""

#: ../../c-api/init.rst:1115 ../../c-api/init.rst:1153
msgid ""
"Updated to be consistent with :c:func:`PyEval_RestoreThread`, "
":c:func:`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`, and "
"terminate the current thread if called while the interpreter is "
"finalizing."
msgstr ""

#: ../../c-api/init.rst:1120
msgid ""
":c:func:`PyEval_RestoreThread` is a higher-level function which is always"
" available (even when threads have not been initialized)."
msgstr ""

#: ../../c-api/init.rst:1126
msgid ""
"Reset the current thread state to ``NULL`` and release the global "
"interpreter lock.  The lock must have been created earlier and must be "
"held by the current thread.  The *tstate* argument, which must not be "
"``NULL``, is only used to check that it represents the current thread "
"state --- if it isn't, a fatal error is reported."
msgstr ""

#: ../../c-api/init.rst:1132
msgid ""
":c:func:`PyEval_SaveThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""

#: ../../c-api/init.rst:1138
msgid ""
"Acquire the global interpreter lock.  The lock must have been created "
"earlier. If this thread already has the lock, a deadlock ensues."
msgstr ""

#: ../../c-api/init.rst:1141
msgid ""
"This function does not update the current thread state.  Please use "
":c:func:`PyEval_RestoreThread` or :c:func:`PyEval_AcquireThread` instead."
msgstr ""

#: ../../c-api/init.rst:1161
msgid ""
"Release the global interpreter lock.  The lock must have been created "
"earlier."
msgstr ""

#: ../../c-api/init.rst:1163
msgid ""
"This function does not update the current thread state.  Please use "
":c:func:`PyEval_SaveThread` or :c:func:`PyEval_ReleaseThread` instead."
msgstr ""

#: ../../c-api/init.rst:1172
msgid "Sub-interpreter support"
msgstr ""

#: ../../c-api/init.rst:1174
msgid ""
"While in most uses, you will only embed a single Python interpreter, "
"there are cases where you need to create several independent interpreters"
" in the same process and perhaps even in the same thread. Sub-"
"interpreters allow you to do that."
msgstr ""

#: ../../c-api/init.rst:1179
msgid ""
"The \"main\" interpreter is the first one created when the runtime "
"initializes. It is usually the only Python interpreter in a process.  "
"Unlike sub-interpreters, the main interpreter has unique process-global "
"responsibilities like signal handling.  It is also responsible for "
"execution during runtime initialization and is usually the active "
"interpreter during runtime finalization.  The "
":c:func:`PyInterpreterState_Main` function returns a pointer to its "
"state."
msgstr ""

#: ../../c-api/init.rst:1186
msgid ""
"You can switch between sub-interpreters using the "
":c:func:`PyThreadState_Swap` function. You can create and destroy them "
"using the following functions:"
msgstr ""

#: ../../c-api/init.rst:1200
msgid ""
"Create a new sub-interpreter.  This is an (almost) totally separate "
"environment for the execution of Python code.  In particular, the new "
"interpreter has separate, independent versions of all imported modules, "
"including the fundamental modules :mod:`builtins`, :mod:`__main__` and "
":mod:`sys`.  The table of loaded modules (``sys.modules``) and the module"
" search path (``sys.path``) are also separate.  The new environment has "
"no ``sys.argv`` variable.  It has new standard I/O stream file objects "
"``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` (however these refer to "
"the same underlying file descriptors)."
msgstr ""

#: ../../c-api/init.rst:1210
msgid ""
"The return value points to the first thread state created in the new sub-"
"interpreter.  This thread state is made in the current thread state. Note"
" that no actual thread is created; see the discussion of thread states "
"below.  If creation of the new interpreter is unsuccessful, ``NULL`` is "
"returned; no exception is set since the exception state is stored in the "
"current thread state and there may not be a current thread state.  (Like "
"all other Python/C API functions, the global interpreter lock must be "
"held before calling this function and is still held when it returns; "
"however, unlike most other Python/C API functions, there needn't be a "
"current thread state on entry.)"
msgstr ""

#: ../../c-api/init.rst:1225
msgid "Extension modules are shared between (sub-)interpreters as follows:"
msgstr ""

#: ../../c-api/init.rst:1227
msgid ""
"For modules using multi-phase initialization, e.g. "
":c:func:`PyModule_FromDefAndSpec`, a separate module object is created "
"and initialized for each interpreter. Only C-level static and global "
"variables are shared between these module objects."
msgstr ""

#: ../../c-api/init.rst:1233
msgid ""
"For modules using single-phase initialization, e.g. "
":c:func:`PyModule_Create`, the first time a particular extension is "
"imported, it is initialized normally, and a (shallow) copy of its "
"module's dictionary is squirreled away. When the same extension is "
"imported by another (sub-)interpreter, a new module is initialized and "
"filled with the contents of this copy; the extension's ``init`` function "
"is not called. Objects in the module's dictionary thus end up shared "
"across (sub-)interpreters, which might cause unwanted behavior (see `Bugs"
" and caveats`_ below)."
msgstr ""

#: ../../c-api/init.rst:1244
msgid ""
"Note that this is different from what happens when an extension is "
"imported after the interpreter has been completely re-initialized by "
"calling :c:func:`Py_FinalizeEx` and :c:func:`Py_Initialize`; in that "
"case, the extension's ``initmodule`` function *is* called again. As with "
"multi-phase initialization, this means that only C-level static and "
"global variables are shared between these modules."
msgstr ""

#: ../../c-api/init.rst:1258
msgid ""
"Destroy the (sub-)interpreter represented by the given thread state. The "
"given thread state must be the current thread state.  See the discussion "
"of thread states below.  When the call returns, the current thread state "
"is ``NULL``.  All thread states associated with this interpreter are "
"destroyed.  (The global interpreter lock must be held before calling this"
" function and is still held when it returns.)  :c:func:`Py_FinalizeEx` "
"will destroy all sub-interpreters that haven't been explicitly destroyed "
"at that point."
msgstr ""

#: ../../c-api/init.rst:1268
msgid "Bugs and caveats"
msgstr ""

#: ../../c-api/init.rst:1270
msgid ""
"Because sub-interpreters (and the main interpreter) are part of the same "
"process, the insulation between them isn't perfect --- for example, using"
" low-level file operations like  :func:`os.close` they can (accidentally "
"or maliciously) affect each other's open files.  Because of the way "
"extensions are shared between (sub-)interpreters, some extensions may not"
" work properly; this is especially likely when using single-phase "
"initialization or (static) global variables. It is possible to insert "
"objects created in one sub-interpreter into a namespace of another "
"(sub-)interpreter; this should be avoided if possible."
msgstr ""

#: ../../c-api/init.rst:1280
msgid ""
"Special care should be taken to avoid sharing user-defined functions, "
"methods, instances or classes between sub-interpreters, since import "
"operations executed by such objects may affect the wrong "
"(sub-)interpreter's dictionary of loaded modules. It is equally important"
" to avoid sharing objects from which the above are reachable."
msgstr ""

#: ../../c-api/init.rst:1286
msgid ""
"Also note that combining this functionality with :c:func:`PyGILState_\\*`"
" APIs is delicate, because these APIs assume a bijection between Python "
"thread states and OS-level threads, an assumption broken by the presence "
"of sub-interpreters. It is highly recommended that you don't switch sub-"
"interpreters between a pair of matching :c:func:`PyGILState_Ensure` and "
":c:func:`PyGILState_Release` calls. Furthermore, extensions (such as "
":mod:`ctypes`) using these APIs to allow calling of Python code from non-"
"Python created threads will probably be broken when using sub-"
"interpreters."
msgstr ""

#: ../../c-api/init.rst:1297
msgid "Asynchronous Notifications"
msgstr ""

#: ../../c-api/init.rst:1299
msgid ""
"A mechanism is provided to make asynchronous notifications to the main "
"interpreter thread.  These notifications take the form of a function "
"pointer and a void pointer argument."
msgstr ""

#: ../../c-api/init.rst:1308
msgid ""
"Schedule a function to be called from the main interpreter thread.  On "
"success, ``0`` is returned and *func* is queued for being called in the "
"main thread.  On failure, ``-1`` is returned without setting any "
"exception."
msgstr ""

#: ../../c-api/init.rst:1312
msgid ""
"When successfully queued, *func* will be *eventually* called from the "
"main interpreter thread with the argument *arg*.  It will be called "
"asynchronously with respect to normally running Python code, but with "
"both these conditions met:"
msgstr ""

#: ../../c-api/init.rst:1317
msgid "on a :term:`bytecode` boundary;"
msgstr ""

#: ../../c-api/init.rst:1318
msgid ""
"with the main thread holding the :term:`global interpreter lock` (*func* "
"can therefore use the full C API)."
msgstr ""

#: ../../c-api/init.rst:1321
msgid ""
"*func* must return ``0`` on success, or ``-1`` on failure with an "
"exception set.  *func* won't be interrupted to perform another "
"asynchronous notification recursively, but it can still be interrupted to"
" switch threads if the global interpreter lock is released."
msgstr ""

#: ../../c-api/init.rst:1326
msgid ""
"This function doesn't need a current thread state to run, and it doesn't "
"need the global interpreter lock."
msgstr ""

#: ../../c-api/init.rst:1330
msgid ""
"This is a low-level function, only useful for very special cases. There "
"is no guarantee that *func* will be called as quick as possible.  If the "
"main thread is busy executing a system call, *func* won't be called "
"before the system call returns.  This function is generally **not** "
"suitable for calling Python code from arbitrary C threads.  Instead, use "
"the :ref:`PyGILState API<gilstate>`."
msgstr ""

#: ../../c-api/init.rst:1342
msgid "Profiling and Tracing"
msgstr ""

#: ../../c-api/init.rst:1347
msgid ""
"The Python interpreter provides some low-level support for attaching "
"profiling and execution tracing facilities.  These are used for "
"profiling, debugging, and coverage analysis tools."
msgstr ""

#: ../../c-api/init.rst:1351
msgid ""
"This C interface allows the profiling or tracing code to avoid the "
"overhead of calling through Python-level callable objects, making a "
"direct C function call instead.  The essential attributes of the facility"
" have not changed; the interface allows trace functions to be installed "
"per-thread, and the basic events reported to the trace function are the "
"same as had been reported to the Python-level trace functions in previous"
" versions."
msgstr ""

#: ../../c-api/init.rst:1361
msgid ""
"The type of the trace function registered using "
":c:func:`PyEval_SetProfile` and :c:func:`PyEval_SetTrace`. The first "
"parameter is the object passed to the registration function as *obj*, "
"*frame* is the frame object to which the event pertains, *what* is one of"
" the constants :const:`PyTrace_CALL`, :const:`PyTrace_EXCEPTION`, "
":const:`PyTrace_LINE`, :const:`PyTrace_RETURN`, :const:`PyTrace_C_CALL`, "
":const:`PyTrace_C_EXCEPTION`, :const:`PyTrace_C_RETURN`, or "
":const:`PyTrace_OPCODE`, and *arg* depends on the value of *what*:"
msgstr ""

#: ../../c-api/init.rst:1370
msgid "Value of *what*"
msgstr ""

#: ../../c-api/init.rst:1370
msgid "Meaning of *arg*"
msgstr ""

#: ../../c-api/init.rst:1372
msgid ":const:`PyTrace_CALL`"
msgstr ""

#: ../../c-api/init.rst:1372 ../../c-api/init.rst:1377
#: ../../c-api/init.rst:1388
msgid "Always :c:data:`Py_None`."
msgstr ""

#: ../../c-api/init.rst:1374
msgid ":const:`PyTrace_EXCEPTION`"
msgstr ""

#: ../../c-api/init.rst:1374
msgid "Exception information as returned by :func:`sys.exc_info`."
msgstr ""

#: ../../c-api/init.rst:1377
msgid ":const:`PyTrace_LINE`"
msgstr ""

#: ../../c-api/init.rst:1379
msgid ":const:`PyTrace_RETURN`"
msgstr ""

#: ../../c-api/init.rst:1379
msgid "Value being returned to the caller, or ``NULL`` if caused by an exception."
msgstr ""

#: ../../c-api/init.rst:1382
msgid ":const:`PyTrace_C_CALL`"
msgstr ""

#: ../../c-api/init.rst:1382 ../../c-api/init.rst:1384
#: ../../c-api/init.rst:1386
msgid "Function object being called."
msgstr ""

#: ../../c-api/init.rst:1384
msgid ":const:`PyTrace_C_EXCEPTION`"
msgstr ""

#: ../../c-api/init.rst:1386
msgid ":const:`PyTrace_C_RETURN`"
msgstr ""

#: ../../c-api/init.rst:1388
msgid ":const:`PyTrace_OPCODE`"
msgstr ""

#: ../../c-api/init.rst:1393
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function "
"when a new call to a function or method is being reported, or a new entry"
" into a generator. Note that the creation of the iterator for a generator"
" function is not reported as there is no control transfer to the Python "
"bytecode in the corresponding frame."
msgstr ""

#: ../../c-api/init.rst:1402
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function "
"when an exception has been raised.  The callback function is called with "
"this value for *what* when after any bytecode is processed after which "
"the exception becomes set within the frame being executed.  The effect of"
" this is that as exception propagation causes the Python stack to unwind,"
" the callback is called upon return to each frame as the exception "
"propagates.  Only trace functions receives these events; they are not "
"needed by the profiler."
msgstr ""

#: ../../c-api/init.rst:1413
msgid ""
"The value passed as the *what* parameter to a :c:type:`Py_tracefunc` "
"function (but not a profiling function) when a line-number event is being"
" reported. It may be disabled for a frame by setting "
":attr:`f_trace_lines` to *0* on that frame."
msgstr ""

#: ../../c-api/init.rst:1420
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions "
"when a call is about to return."
msgstr ""

#: ../../c-api/init.rst:1426
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions "
"when a C function is about to be called."
msgstr ""

#: ../../c-api/init.rst:1432
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions "
"when a C function has raised an exception."
msgstr ""

#: ../../c-api/init.rst:1438
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions "
"when a C function has returned."
msgstr ""

#: ../../c-api/init.rst:1444
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions "
"(but not profiling functions) when a new opcode is about to be executed."
"  This event is not emitted by default: it must be explicitly requested "
"by setting :attr:`f_trace_opcodes` to *1* on the frame."
msgstr ""

#: ../../c-api/init.rst:1452
msgid ""
"Set the profiler function to *func*.  The *obj* parameter is passed to "
"the function as its first parameter, and may be any Python object, or "
"``NULL``.  If the profile function needs to maintain state, using a "
"different value for *obj* for each thread provides a convenient and "
"thread-safe place to store it.  The profile function is called for all "
"monitored events except :const:`PyTrace_LINE` :const:`PyTrace_OPCODE` and"
" :const:`PyTrace_EXCEPTION`."
msgstr ""

#: ../../c-api/init.rst:1462
msgid ""
"Set the tracing function to *func*.  This is similar to "
":c:func:`PyEval_SetProfile`, except the tracing function does receive "
"line-number events and per-opcode events, but does not receive any event "
"related to C function objects being called.  Any trace function "
"registered using :c:func:`PyEval_SetTrace` will not receive "
":const:`PyTrace_C_CALL`, :const:`PyTrace_C_EXCEPTION` or "
":const:`PyTrace_C_RETURN` as a value for the *what* parameter."
msgstr ""

#: ../../c-api/init.rst:1472
msgid "Advanced Debugger Support"
msgstr ""

#: ../../c-api/init.rst:1477
msgid "These functions are only intended to be used by advanced debugging tools."
msgstr ""

#: ../../c-api/init.rst:1482
msgid ""
"Return the interpreter state object at the head of the list of all such "
"objects."
msgstr ""

#: ../../c-api/init.rst:1487
msgid "Return the main interpreter state object."
msgstr ""

#: ../../c-api/init.rst:1492
msgid ""
"Return the next interpreter state object after *interp* from the list of "
"all such objects."
msgstr ""

#: ../../c-api/init.rst:1498
msgid ""
"Return the pointer to the first :c:type:`PyThreadState` object in the "
"list of threads associated with the interpreter *interp*."
msgstr ""

#: ../../c-api/init.rst:1504
msgid ""
"Return the next thread state object after *tstate* from the list of all "
"such objects belonging to the same :c:type:`PyInterpreterState` object."
msgstr ""

#: ../../c-api/init.rst:1511
msgid "Thread Local Storage Support"
msgstr ""

#: ../../c-api/init.rst:1515
msgid ""
"The Python interpreter provides low-level support for thread-local "
"storage (TLS) which wraps the underlying native TLS implementation to "
"support the Python-level thread local storage API "
"(:class:`threading.local`).  The CPython C level APIs are similar to "
"those offered by pthreads and Windows: use a thread key and functions to "
"associate a :c:type:`void*` value per thread."
msgstr ""

#: ../../c-api/init.rst:1522
msgid ""
"The GIL does *not* need to be held when calling these functions; they "
"supply their own locking."
msgstr ""

#: ../../c-api/init.rst:1525
msgid ""
"Note that :file:`Python.h` does not include the declaration of the TLS "
"APIs, you need to include :file:`pythread.h` to use thread-local storage."
msgstr ""

#: ../../c-api/init.rst:1529
msgid ""
"None of these API functions handle memory management on behalf of the "
":c:type:`void*` values.  You need to allocate and deallocate them "
"yourself. If the :c:type:`void*` values happen to be :c:type:`PyObject*`,"
" these functions don't do refcount operations on them either."
msgstr ""

#: ../../c-api/init.rst:1537
msgid "Thread Specific Storage (TSS) API"
msgstr ""

#: ../../c-api/init.rst:1539
msgid ""
"TSS API is introduced to supersede the use of the existing TLS API within"
" the CPython interpreter.  This API uses a new type :c:type:`Py_tss_t` "
"instead of :c:type:`int` to represent thread keys."
msgstr ""

#: ../../c-api/init.rst:1545
msgid "\"A New C-API for Thread-Local Storage in CPython\" (:pep:`539`)"
msgstr ""

#: ../../c-api/init.rst:1550
msgid ""
"This data structure represents the state of a thread key, the definition "
"of which may depend on the underlying TLS implementation, and it has an "
"internal field representing the key's initialization state.  There are no"
" public members in this structure."
msgstr ""

#: ../../c-api/init.rst:1555
msgid ""
"When :ref:`Py_LIMITED_API <stable>` is not defined, static allocation of "
"this type by :c:macro:`Py_tss_NEEDS_INIT` is allowed."
msgstr ""

#: ../../c-api/init.rst:1561
msgid ""
"This macro expands to the initializer for :c:type:`Py_tss_t` variables. "
"Note that this macro won't be defined with :ref:`Py_LIMITED_API "
"<stable>`."
msgstr ""

#: ../../c-api/init.rst:1566
msgid "Dynamic Allocation"
msgstr ""

#: ../../c-api/init.rst:1568
msgid ""
"Dynamic allocation of the :c:type:`Py_tss_t`, required in extension "
"modules built with :ref:`Py_LIMITED_API <stable>`, where static "
"allocation of this type is not possible due to its implementation being "
"opaque at build time."
msgstr ""

#: ../../c-api/init.rst:1575
msgid ""
"Return a value which is the same state as a value initialized with "
":c:macro:`Py_tss_NEEDS_INIT`, or ``NULL`` in the case of dynamic "
"allocation failure."
msgstr ""

#: ../../c-api/init.rst:1582
msgid ""
"Free the given *key* allocated by :c:func:`PyThread_tss_alloc`, after "
"first calling :c:func:`PyThread_tss_delete` to ensure any associated "
"thread locals have been unassigned. This is a no-op if the *key* argument"
" is `NULL`."
msgstr ""

#: ../../c-api/init.rst:1588
msgid ""
"A freed key becomes a dangling pointer, you should reset the key to "
"`NULL`."
msgstr ""

#: ../../c-api/init.rst:1593
msgid "Methods"
msgstr ""

#: ../../c-api/init.rst:1595
msgid ""
"The parameter *key* of these functions must not be ``NULL``.  Moreover, "
"the behaviors of :c:func:`PyThread_tss_set` and "
":c:func:`PyThread_tss_get` are undefined if the given :c:type:`Py_tss_t` "
"has not been initialized by :c:func:`PyThread_tss_create`."
msgstr ""

#: ../../c-api/init.rst:1603
msgid ""
"Return a non-zero value if the given :c:type:`Py_tss_t` has been "
"initialized by :c:func:`PyThread_tss_create`."
msgstr ""

#: ../../c-api/init.rst:1609
msgid ""
"Return a zero value on successful initialization of a TSS key.  The "
"behavior is undefined if the value pointed to by the *key* argument is "
"not initialized by :c:macro:`Py_tss_NEEDS_INIT`.  This function can be "
"called repeatedly on the same key -- calling it on an already initialized"
" key is a no-op and immediately returns success."
msgstr ""

#: ../../c-api/init.rst:1618
msgid ""
"Destroy a TSS key to forget the values associated with the key across all"
" threads, and change the key's initialization state to uninitialized.  A "
"destroyed key is able to be initialized again by "
":c:func:`PyThread_tss_create`. This function can be called repeatedly on "
"the same key -- calling it on an already destroyed key is a no-op."
msgstr ""

#: ../../c-api/init.rst:1627
msgid ""
"Return a zero value to indicate successfully associating a "
":c:type:`void*` value with a TSS key in the current thread.  Each thread "
"has a distinct mapping of the key to a :c:type:`void*` value."
msgstr ""

#: ../../c-api/init.rst:1634
msgid ""
"Return the :c:type:`void*` value associated with a TSS key in the current"
" thread.  This returns ``NULL`` if no value is associated with the key in"
" the current thread."
msgstr ""

#: ../../c-api/init.rst:1642
msgid "Thread Local Storage (TLS) API"
msgstr ""

#: ../../c-api/init.rst:1644
msgid ""
"This API is superseded by :ref:`Thread Specific Storage (TSS) API "
"<thread-specific-storage-api>`."
msgstr ""

#: ../../c-api/init.rst:1649
msgid ""
"This version of the API does not support platforms where the native TLS "
"key is defined in a way that cannot be safely cast to ``int``.  On such "
"platforms, :c:func:`PyThread_create_key` will return immediately with a "
"failure status, and the other TLS functions will all be no-ops on such "
"platforms."
msgstr ""

#: ../../c-api/init.rst:1654
msgid ""
"Due to the compatibility problem noted above, this version of the API "
"should not be used in new code."
msgstr ""

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr ""

#: ../../c-api/init_config.rst:11
msgid "Structures:"
msgstr ""

#: ../../c-api/init_config.rst:13
msgid ":c:type:`PyConfig`"
msgstr ""

#: ../../c-api/init_config.rst:14
msgid ":c:type:`PyPreConfig`"
msgstr ""

#: ../../c-api/init_config.rst:15
msgid ":c:type:`PyStatus`"
msgstr ""

#: ../../c-api/init_config.rst:16
msgid ":c:type:`PyWideStringList`"
msgstr ""

#: ../../c-api/init_config.rst:18 ../../c-api/memory.rst:393
#: ../../c-api/memory.rst:402 ../../c-api/memory.rst:411
msgid "Functions:"
msgstr ""

#: ../../c-api/init_config.rst:20
msgid ":c:func:`PyConfig_Clear`"
msgstr ""

#: ../../c-api/init_config.rst:21
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ""

#: ../../c-api/init_config.rst:22
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ""

#: ../../c-api/init_config.rst:23
msgid ":c:func:`PyConfig_Read`"
msgstr ""

#: ../../c-api/init_config.rst:24
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ""

#: ../../c-api/init_config.rst:25
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ""

#: ../../c-api/init_config.rst:26
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ""

#: ../../c-api/init_config.rst:27
msgid ":c:func:`PyConfig_SetString`"
msgstr ""

#: ../../c-api/init_config.rst:28
msgid ":c:func:`PyConfig_SetWideStringList`"
msgstr ""

#: ../../c-api/init_config.rst:29
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ""

#: ../../c-api/init_config.rst:30
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ""

#: ../../c-api/init_config.rst:31
msgid ":c:func:`PyStatus_Error`"
msgstr ""

#: ../../c-api/init_config.rst:32
msgid ":c:func:`PyStatus_Exception`"
msgstr ""

#: ../../c-api/init_config.rst:33
msgid ":c:func:`PyStatus_Exit`"
msgstr ""

#: ../../c-api/init_config.rst:34
msgid ":c:func:`PyStatus_IsError`"
msgstr ""

#: ../../c-api/init_config.rst:35
msgid ":c:func:`PyStatus_IsExit`"
msgstr ""

#: ../../c-api/init_config.rst:36
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ""

#: ../../c-api/init_config.rst:37
msgid ":c:func:`PyStatus_Ok`"
msgstr ""

#: ../../c-api/init_config.rst:38
msgid ":c:func:`PyWideStringList_Append`"
msgstr ""

#: ../../c-api/init_config.rst:39
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ""

#: ../../c-api/init_config.rst:40
msgid ":c:func:`Py_ExitStatusException`"
msgstr ""

#: ../../c-api/init_config.rst:41
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ""

#: ../../c-api/init_config.rst:42
msgid ":c:func:`Py_PreInitialize`"
msgstr ""

#: ../../c-api/init_config.rst:43
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ""

#: ../../c-api/init_config.rst:44
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ""

#: ../../c-api/init_config.rst:45
msgid ":c:func:`Py_RunMain`"
msgstr ""

#: ../../c-api/init_config.rst:47
msgid ""
"The preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig`` and the configuration (``PyConfig`` type) is "
"stored in ``PyInterpreterState.config``."
msgstr ""

#: ../../c-api/init_config.rst:51
msgid ""
"See also :ref:`Initialization, Finalization, and Threads "
"<initialization>`."
msgstr ""

#: ../../c-api/init_config.rst:54
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ""

#: ../../c-api/init_config.rst:58
msgid "PyWideStringList"
msgstr ""

#: ../../c-api/init_config.rst:62
msgid "List of ``wchar_t*`` strings."
msgstr ""

#: ../../c-api/init_config.rst:64
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings "
"must be non-``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:67
msgid "Methods:"
msgstr ""

#: ../../c-api/init_config.rst:71
msgid "Append *item* to *list*."
msgstr ""

#: ../../c-api/init_config.rst:73 ../../c-api/init_config.rst:84
msgid "Python must be preinitialized to call this function."
msgstr ""

#: ../../c-api/init_config.rst:77
msgid "Insert *item* into *list* at *index*."
msgstr ""

#: ../../c-api/init_config.rst:79
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr ""

#: ../../c-api/init_config.rst:82
msgid "*index* must be greater than or equal to 0."
msgstr ""

#: ../../c-api/init_config.rst:86 ../../c-api/init_config.rst:106
#: ../../c-api/init_config.rst:209 ../../c-api/init_config.rst:416
msgid "Structure fields:"
msgstr ""

#: ../../c-api/init_config.rst:90
msgid "List length."
msgstr ""

#: ../../c-api/init_config.rst:94
msgid "List items."
msgstr ""

#: ../../c-api/init_config.rst:97
msgid "PyStatus"
msgstr ""

#: ../../c-api/init_config.rst:101
msgid ""
"Structure to store an initialization function status: success, error or "
"exit."
msgstr ""

#: ../../c-api/init_config.rst:104
msgid "For an error, it can store the C function name which created the error."
msgstr ""

#: ../../c-api/init_config.rst:110
msgid "Exit code. Argument passed to ``exit()``."
msgstr ""

#: ../../c-api/init_config.rst:114
msgid "Error message."
msgstr ""

#: ../../c-api/init_config.rst:118
msgid "Name of the function which created an error, can be ``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:120
msgid "Functions to create a status:"
msgstr ""

#: ../../c-api/init_config.rst:124
msgid "Success."
msgstr ""

#: ../../c-api/init_config.rst:128
msgid "Initialization error with a message."
msgstr ""

#: ../../c-api/init_config.rst:132
msgid "Memory allocation failure (out of memory)."
msgstr ""

#: ../../c-api/init_config.rst:136
msgid "Exit Python with the specified exit code."
msgstr ""

#: ../../c-api/init_config.rst:138
msgid "Functions to handle a status:"
msgstr ""

#: ../../c-api/init_config.rst:142
msgid ""
"Is the status an error or an exit? If true, the exception must be "
"handled; by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""

#: ../../c-api/init_config.rst:147
msgid "Is the result an error?"
msgstr ""

#: ../../c-api/init_config.rst:151
msgid "Is the result an exit?"
msgstr ""

#: ../../c-api/init_config.rst:155
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message "
"and exit with a non-zero exit code if *status* is an error.  Must only be"
" called if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""

#: ../../c-api/init_config.rst:160
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:163 ../../c-api/intro.rst:170
#: ../../c-api/intro.rst:185 ../../c-api/intro.rst:203
msgid "Example::"
msgstr ""

#: ../../c-api/init_config.rst:187
msgid "PyPreConfig"
msgstr ""

#: ../../c-api/init_config.rst:191
msgid "Structure used to preinitialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:193
msgid "Set the Python memory allocator"
msgstr ""

#: ../../c-api/init_config.rst:194
msgid "Configure the LC_CTYPE locale"
msgstr ""

#: ../../c-api/init_config.rst:195
msgid "Set the UTF-8 mode"
msgstr ""

#: ../../c-api/init_config.rst:197
msgid "Function to initialize a preconfiguration:"
msgstr ""

#: ../../c-api/init_config.rst:201
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-"
"python-config>`."
msgstr ""

#: ../../c-api/init_config.rst:206
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""

#: ../../c-api/init_config.rst:213
msgid "Name of the memory allocator:"
msgstr ""

#: ../../c-api/init_config.rst:215
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)"
msgstr ""

#: ../../c-api/init_config.rst:217
msgid "``PYMEM_ALLOCATOR_DEFAULT`` (``1``): default memory allocators"
msgstr ""

#: ../../c-api/init_config.rst:218
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): default memory allocators with debug "
"hooks"
msgstr ""

#: ../../c-api/init_config.rst:220
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): force usage of ``malloc()``"
msgstr ""

#: ../../c-api/init_config.rst:221
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` "
"with debug hooks"
msgstr ""

#: ../../c-api/init_config.rst:223
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory "
"allocator <pymalloc>`"
msgstr ""

#: ../../c-api/init_config.rst:225
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with debug hooks"
msgstr ""

#: ../../c-api/init_config.rst:228
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are "
"not supported if Python is configured using ``--without-pymalloc``"
msgstr ""

#: ../../c-api/init_config.rst:231
msgid "See :ref:`Memory Management <memory>`."
msgstr ""

#: ../../c-api/init_config.rst:235
msgid ""
"Set the LC_CTYPE locale to the user preferred locale? If equals to 0, set"
" :c:member:`coerce_c_locale` and :c:member:`coerce_c_locale_warn` to 0."
msgstr ""

#: ../../c-api/init_config.rst:240
msgid ""
"If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE "
"locale to decide if it should be coerced."
msgstr ""

#: ../../c-api/init_config.rst:245
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr ""

#: ../../c-api/init_config.rst:249
msgid "See :c:member:`PyConfig.dev_mode`."
msgstr ""

#: ../../c-api/init_config.rst:253
msgid "See :c:member:`PyConfig.isolated`."
msgstr ""

#: ../../c-api/init_config.rst:257
msgid ""
"If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to "
"``mbcs``, set the filesystem error handler to ``replace``."
msgstr ""

#: ../../c-api/init_config.rst:260 ../../c-api/init_config.rst:546
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""

#: ../../c-api/init_config.rst:265
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and "
":c:func:`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the"
" same way the regular Python parses command line arguments: see "
":ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:272
msgid "See :c:member:`PyConfig.use_environment`."
msgstr ""

#: ../../c-api/init_config.rst:276
msgid "If non-zero, enable the UTF-8 mode."
msgstr ""

#: ../../c-api/init_config.rst:279
msgid "Preinitialization with PyPreConfig"
msgstr ""

#: ../../c-api/init_config.rst:281
msgid "Functions to preinitialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:285
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""

#: ../../c-api/init_config.rst:289
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (bytes strings)."
msgstr ""

#: ../../c-api/init_config.rst:294
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (wide strings)."
msgstr ""

#: ../../c-api/init_config.rst:297 ../../c-api/init_config.rst:715
msgid ""
"The caller is responsible to handle exceptions (error or exit) using "
":c:func:`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""

#: ../../c-api/init_config.rst:300
msgid ""
"For :ref:`Python Configuration <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`), if Python is initialized with "
"command line arguments, the command line arguments must also be passed to"
" preinitialize Python, since they have an effect on the pre-configuration"
" like encodings. For example, the :option:`-X utf8 <-X>` command line "
"option enables the UTF-8 Mode."
msgstr ""

#: ../../c-api/init_config.rst:307
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` "
"and before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if "
":c:member:`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

#: ../../c-api/init_config.rst:312
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must "
"not be used before Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` "
"must not be called before the preinitialization."
msgstr ""

#: ../../c-api/init_config.rst:317
msgid "Example using the preinitialization to enable the UTF-8 Mode::"
msgstr ""

#: ../../c-api/init_config.rst:338
msgid "PyConfig"
msgstr ""

#: ../../c-api/init_config.rst:342
msgid "Structure containing most parameters to configure Python."
msgstr ""

#: ../../c-api/init_config.rst:344
msgid "Structure methods:"
msgstr ""

#: ../../c-api/init_config.rst:348
msgid ""
"Initialize configuration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

#: ../../c-api/init_config.rst:353
msgid ""
"Initialize configuration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""

#: ../../c-api/init_config.rst:358
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr ""

#: ../../c-api/init_config.rst:360 ../../c-api/init_config.rst:366
#: ../../c-api/init_config.rst:372 ../../c-api/init_config.rst:378
#: ../../c-api/init_config.rst:384 ../../c-api/init_config.rst:392
msgid "Preinitialize Python if needed."
msgstr ""

#: ../../c-api/init_config.rst:364
msgid ""
"Decode *str* using ``Py_DecodeLocale()`` and set the result into "
"``*config_str``."
msgstr ""

#: ../../c-api/init_config.rst:370
msgid "Set command line arguments from wide character strings."
msgstr ""

#: ../../c-api/init_config.rst:376
msgid "Set command line arguments: decode bytes using :c:func:`Py_DecodeLocale`."
msgstr ""

#: ../../c-api/init_config.rst:382
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""

#: ../../c-api/init_config.rst:388
msgid "Read all Python configuration."
msgstr ""

#: ../../c-api/init_config.rst:390
msgid "Fields which are already initialized are left unchanged."
msgstr ""

#: ../../c-api/init_config.rst:396
msgid "Release configuration memory."
msgstr ""

#: ../../c-api/init_config.rst:398
msgid ""
"Most ``PyConfig`` methods preinitialize Python if needed. In that case, "
"the Python preinitialization configuration in based on the "
":c:type:`PyConfig`. If configuration fields which are in common with "
":c:type:`PyPreConfig` are tuned, they must be set before calling a "
":c:type:`PyConfig` method:"
msgstr ""

#: ../../c-api/init_config.rst:403
msgid ":c:member:`~PyConfig.dev_mode`"
msgstr ""

#: ../../c-api/init_config.rst:404
msgid ":c:member:`~PyConfig.isolated`"
msgstr ""

#: ../../c-api/init_config.rst:405
msgid ":c:member:`~PyConfig.parse_argv`"
msgstr ""

#: ../../c-api/init_config.rst:406
msgid ":c:member:`~PyConfig.use_environment`"
msgstr ""

#: ../../c-api/init_config.rst:408
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or "
":c:func:`PyConfig_SetBytesArgv` is used, this method must be called "
"first, before other methods, since the preinitialization configuration "
"depends on command line arguments (if :c:member:`parse_argv` is non-"
"zero)."
msgstr ""

#: ../../c-api/init_config.rst:413
msgid ""
"The caller of these methods is responsible to handle exceptions (error or"
" exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""

#: ../../c-api/init_config.rst:420
msgid ""
"Command line arguments, :data:`sys.argv`. See "
":c:member:`~PyConfig.parse_argv` to parse :c:member:`~PyConfig.argv` the "
"same way the regular Python parses Python command line arguments. If "
":c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""

#: ../../c-api/init_config.rst:428
msgid ":data:`sys.base_exec_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:432
msgid ""
":data:`sys._base_executable`: ``__PYVENV_LAUNCHER__`` environment "
"variable value, or copy of :c:member:`PyConfig.executable`."
msgstr ""

#: ../../c-api/init_config.rst:437
msgid ":data:`sys.base_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:441
msgid ""
"If equals to 0, enable unbuffered mode, making the stdout and stderr "
"streams unbuffered."
msgstr ""

#: ../../c-api/init_config.rst:444
msgid "stdin is always opened in buffered mode."
msgstr ""

#: ../../c-api/init_config.rst:448
msgid ""
"If equals to 1, issue a warning when comparing :class:`bytes` or "
":class:`bytearray` with :class:`str`, or comparing :class:`bytes` with "
":class:`int`. If equal or greater to 2, raise a :exc:`BytesWarning` "
"exception."
msgstr ""

#: ../../c-api/init_config.rst:455
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files (see "
":pep:`552`): :option:`--check-hash-based-pycs` command line option value."
msgstr ""

#: ../../c-api/init_config.rst:458
msgid "Valid values: ``always``, ``never`` and ``default``."
msgstr ""

#: ../../c-api/init_config.rst:460
msgid "The default value is: ``default``."
msgstr ""

#: ../../c-api/init_config.rst:464
msgid ""
"If non-zero, configure C standard streams (``stdio``, ``stdout``, "
"``stdout``). For example, set their mode to ``O_BINARY`` on Windows."
msgstr ""

#: ../../c-api/init_config.rst:469
msgid "Development mode: see :option:`-X dev <-X>`."
msgstr ""

#: ../../c-api/init_config.rst:473
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr ""

#: ../../c-api/init_config.rst:475
msgid "Require a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:479
msgid ":data:`sys.exec_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:483
msgid ":data:`sys.executable`."
msgstr ""

#: ../../c-api/init_config.rst:487
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr ""

#: ../../c-api/init_config.rst:491
msgid "Filesystem encoding, :func:`sys.getfilesystemencoding`."
msgstr ""

#: ../../c-api/init_config.rst:495
msgid "Filesystem encoding errors, :func:`sys.getfilesystemencodeerrors`."
msgstr ""

#: ../../c-api/init_config.rst:500
msgid "Randomized hash function seed."
msgstr ""

#: ../../c-api/init_config.rst:502
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly"
" at Pythonstartup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""

#: ../../c-api/init_config.rst:507
msgid "Python home directory."
msgstr ""

#: ../../c-api/init_config.rst:509
msgid ""
"Initialized from :envvar:`PYTHONHOME` environment variable value by "
"default."
msgstr ""

#: ../../c-api/init_config.rst:514
msgid "If non-zero, profile import time."
msgstr ""

#: ../../c-api/init_config.rst:518
msgid "Enter interactive mode after executing a script or a command."
msgstr ""

#: ../../c-api/init_config.rst:522
msgid "Install signal handlers?"
msgstr ""

#: ../../c-api/init_config.rst:526
msgid "Interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:530
msgid "If greater than 0, enable isolated mode:"
msgstr ""

#: ../../c-api/init_config.rst:532
msgid ""
":data:`sys.path` contains neither the script's directory (computed from "
"``argv[0]`` or the current directory) nor the user's site-packages "
"directory."
msgstr ""

#: ../../c-api/init_config.rst:535
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""

#: ../../c-api/init_config.rst:537
msgid ""
"Set :c:member:`~PyConfig.use_environment` and "
":c:member:`~PyConfig.user_site_directory` to 0."
msgstr ""

#: ../../c-api/init_config.rst:542
msgid ""
"If non-zero, use :class:`io.FileIO` instead of "
":class:`io.WindowsConsoleIO` for :data:`sys.stdin`, :data:`sys.stdout` "
"and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:551
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""

#: ../../c-api/init_config.rst:554
msgid "The option is ignored if Python is built using ``--without-pymalloc``."
msgstr ""

#: ../../c-api/init_config.rst:558
msgid ""
"Module search paths as a string separated by ``DELIM`` "
"(:data:`os.path.pathsep`)."
msgstr ""

#: ../../c-api/init_config.rst:561
msgid ""
"Initialized from :envvar:`PYTHONPATH` environment variable value by "
"default."
msgstr ""

#: ../../c-api/init_config.rst:567
msgid ""
":data:`sys.path`. If :c:member:`~PyConfig.module_search_paths_set` is "
"equal to 0, the :c:member:`~PyConfig.module_search_paths` is overridden "
"by the function calculating the :ref:`Path Configuration <init-path-"
"config>`."
msgstr ""

#: ../../c-api/init_config.rst:574
msgid "Compilation optimization level:"
msgstr ""

#: ../../c-api/init_config.rst:576
msgid "0: Peephole optimizer (and ``__debug__`` is set to ``True``)"
msgstr ""

#: ../../c-api/init_config.rst:577
msgid "1: Remove assertions, set ``__debug__`` to ``False``"
msgstr ""

#: ../../c-api/init_config.rst:578
msgid "2: Strip docstrings"
msgstr ""

#: ../../c-api/init_config.rst:582
msgid ""
"If non-zero, parse :c:member:`~PyConfig.argv` the same way the regular "
"Python command line arguments, and strip Python arguments from "
":c:member:`~PyConfig.argv`: see :ref:`Command Line Arguments <using-on-"
"cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:589
msgid ""
"If non-zero, turn on parser debugging output (for expert only, depending "
"on compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:594
msgid ""
"If equal to 0, suppress warnings when calculating the :ref:`Path "
"Configuration <init-path-config>` (Unix only, Windows does not log any "
"warning). Otherwise, warnings are written into ``stderr``."
msgstr ""

#: ../../c-api/init_config.rst:600
msgid ":data:`sys.prefix`."
msgstr ""

#: ../../c-api/init_config.rst:604
msgid ""
"Program name. Used to initialize :c:member:`~PyConfig.executable`, and in"
" early error messages."
msgstr ""

#: ../../c-api/init_config.rst:609
msgid ":data:`sys.pycache_prefix`: ``.pyc`` cache prefix."
msgstr ""

#: ../../c-api/init_config.rst:611
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""

#: ../../c-api/init_config.rst:615
msgid ""
"Quiet mode. For example, don't display the copyright and version messages"
" in interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:620
msgid "``python3 -c COMMAND`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:624
msgid "``python3 FILENAME`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:628
msgid "``python3 -m MODULE`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:632
msgid "Show allocation counts at exit?"
msgstr ""

#: ../../c-api/init_config.rst:634
msgid "Set to 1 by :option:`-X showalloccount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:636
msgid "Need a special Python build with ``COUNT_ALLOCS`` macro defined."
msgstr ""

#: ../../c-api/init_config.rst:640
msgid "Show total reference count at exit?"
msgstr ""

#: ../../c-api/init_config.rst:642
msgid "Set to 1 by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:644
msgid "Need a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:648
msgid "Import the :mod:`site` module at startup?"
msgstr ""

#: ../../c-api/init_config.rst:652
msgid "Skip the first line of the source?"
msgstr ""

#: ../../c-api/init_config.rst:657
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and"
" :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:662
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""

#: ../../c-api/init_config.rst:666
msgid "If greater than 0, use :ref:`environment variables <using-on-envvars>`."
msgstr ""

#: ../../c-api/init_config.rst:670
msgid "If non-zero, add user site directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:674
msgid "If non-zero, enable verbose mode."
msgstr ""

#: ../../c-api/init_config.rst:678
msgid ""
":data:`sys.warnoptions`: options of the :mod:`warnings` module to build "
"warnings filters: lowest to highest priority."
msgstr ""

#: ../../c-api/init_config.rst:681
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first "
"item of :data:`warnings.filters` which is checked first (highest "
"priority)."
msgstr ""

#: ../../c-api/init_config.rst:688
msgid "If non-zero, write ``.pyc`` files."
msgstr ""

#: ../../c-api/init_config.rst:690
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of "
":c:member:`~PyConfig.write_bytecode`."
msgstr ""

#: ../../c-api/init_config.rst:695
msgid ":data:`sys._xoptions`."
msgstr ""

#: ../../c-api/init_config.rst:697
msgid ""
"If ``parse_argv`` is non-zero, ``argv`` arguments are parsed the same way"
" the regular Python parses command line arguments, and Python arguments "
"are stripped from ``argv``: see :ref:`Command Line Arguments <using-on-"
"cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:702
msgid ""
"The ``xoptions`` options are parsed to set other options: see "
":option:`-X` option."
msgstr ""

#: ../../c-api/init_config.rst:707
msgid "Initialization with PyConfig"
msgstr ""

#: ../../c-api/init_config.rst:709
msgid "Function to initialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:713
msgid "Initialize Python from *config* configuration."
msgstr ""

#: ../../c-api/init_config.rst:718
msgid ""
"If ``PyImport_FrozenModules``, ``PyImport_AppendInittab()`` or "
"``PyImport_ExtendInittab()`` are used, they must be set or called after "
"Python preinitialization and before the Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:722
msgid "Example setting the program name::"
msgstr ""

#: ../../c-api/init_config.rst:750
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters::"
msgstr ""

#: ../../c-api/init_config.rst:801
msgid "Isolated Configuration"
msgstr ""

#: ../../c-api/init_config.rst:803
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and "
":c:func:`PyConfig_InitIsolatedConfig` functions create a configuration to"
" isolate Python from the system. For example, to embed Python into an "
"application."
msgstr ""

#: ../../c-api/init_config.rst:808
msgid ""
"This configuration ignores global configuration variables, environments "
"variables, command line arguments (:c:member:`PyConfig.argv` is not "
"parsed) and user site directory. The C standard streams (ex: ``stdout``) "
"and the LC_CTYPE locale are left unchanged. Signal handlers are not "
"installed."
msgstr ""

#: ../../c-api/init_config.rst:813
msgid ""
"Configuration files are still used with this configuration. Set the "
":ref:`Path Configuration <init-path-config>` (\"output fields\") to "
"ignore these configuration files and avoid the function computing the "
"default path configuration."
msgstr ""

#: ../../c-api/init_config.rst:822
msgid "Python Configuration"
msgstr ""

#: ../../c-api/init_config.rst:824
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and "
":c:func:`PyConfig_InitPythonConfig` functions create a configuration to "
"build a customized Python which behaves as the regular Python."
msgstr ""

#: ../../c-api/init_config.rst:828
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""

#: ../../c-api/init_config.rst:831
msgid ""
"This function enables C locale coercion (:pep:`538`) and UTF-8 Mode "
"(:pep:`540`) depending on the LC_CTYPE locale, :envvar:`PYTHONUTF8` and "
":envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

#: ../../c-api/init_config.rst:835
msgid "Example of customized Python always running in isolated mode::"
msgstr ""

#: ../../c-api/init_config.rst:874
msgid "Path Configuration"
msgstr ""

#: ../../c-api/init_config.rst:876
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:878
msgid "Path configuration inputs:"
msgstr ""

#: ../../c-api/init_config.rst:880
msgid ":c:member:`PyConfig.home`"
msgstr ""

#: ../../c-api/init_config.rst:881
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

#: ../../c-api/init_config.rst:882
msgid ":c:member:`PyConfig.program_name`"
msgstr ""

#: ../../c-api/init_config.rst:883
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ""

#: ../../c-api/init_config.rst:884
msgid "current working directory: to get absolute paths"
msgstr ""

#: ../../c-api/init_config.rst:885
msgid ""
"``PATH`` environment variable to get the program full path (from "
":c:member:`PyConfig.program_name`)"
msgstr ""

#: ../../c-api/init_config.rst:887
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr ""

#: ../../c-api/init_config.rst:888
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER "
"and HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""

#: ../../c-api/init_config.rst:892
msgid "Path configuration output fields:"
msgstr ""

#: ../../c-api/init_config.rst:894
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ""

#: ../../c-api/init_config.rst:895
msgid ":c:member:`PyConfig.base_executable`"
msgstr ""

#: ../../c-api/init_config.rst:896
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ""

#: ../../c-api/init_config.rst:897
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ""

#: ../../c-api/init_config.rst:898
msgid ":c:member:`PyConfig.executable`"
msgstr ""

#: ../../c-api/init_config.rst:899
msgid ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"
msgstr ""

#: ../../c-api/init_config.rst:901
msgid ":c:member:`PyConfig.prefix`"
msgstr ""

#: ../../c-api/init_config.rst:903
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If "
":c:member:`~PyConfig.module_search_paths_set` is equal to 0, "
":c:member:`~PyConfig.module_search_paths` is overridden and "
":c:member:`~PyConfig.module_search_paths_set` is set to 1."
msgstr ""

#: ../../c-api/init_config.rst:909
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-"
"empty. ``module_search_paths`` is considered as set if "
"``module_search_paths_set`` is set to 1. In this case, path configuration"
" input fields are ignored as well."
msgstr ""

#: ../../c-api/init_config.rst:916
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to 0 to suppress warnings "
"when calculating the path configuration (Unix only, Windows does not log "
"any warning)."
msgstr ""

#: ../../c-api/init_config.rst:919
msgid ""
"If :c:member:`~PyConfig.base_prefix` or "
":c:member:`~PyConfig.base_exec_prefix` fields are not set, they inherit "
"their value from :c:member:`~PyConfig.prefix` and "
":c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""

#: ../../c-api/init_config.rst:923
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ""

#: ../../c-api/init_config.rst:925
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend "
":c:member:`~PyConfig.run_filename` to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:928
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ""

#: ../../c-api/init_config.rst:930
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory"
" to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""

#: ../../c-api/init_config.rst:932
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of "
"the filename to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:934
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:936
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be"
" modified by the :mod:`site` module. If "
":c:member:`~PyConfig.user_site_directory` is non-zero and the user's "
"site-package directory exists, the :mod:`site` module appends the user's "
"site-package directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:942
msgid "The following configuration files are used by the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:944
msgid "``pyvenv.cfg``"
msgstr ""

#: ../../c-api/init_config.rst:945
msgid "``python._pth`` (Windows only)"
msgstr ""

#: ../../c-api/init_config.rst:946
msgid "``pybuilddir.txt`` (Unix only)"
msgstr ""

#: ../../c-api/init_config.rst:948
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set "
":c:member:`PyConfig.base_executable`"
msgstr ""

#: ../../c-api/init_config.rst:953
msgid "Py_RunMain()"
msgstr ""

#: ../../c-api/init_config.rst:957
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script "
"(:c:member:`PyConfig.run_filename`) or the module "
"(:c:member:`PyConfig.run_module`) specified on the command line or in the"
" configuration."
msgstr ""

#: ../../c-api/init_config.rst:962
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr ""

#: ../../c-api/init_config.rst:964
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed "
"to the ``exit()`` function."
msgstr ""

#: ../../c-api/init_config.rst:967
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using "
":c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:973
msgid "Multi-Phase Initialization Private Provisional API"
msgstr ""

#: ../../c-api/init_config.rst:975
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of the :pep:`432`:"
msgstr ""

#: ../../c-api/init_config.rst:978
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr ""

#: ../../c-api/init_config.rst:980
msgid "Builtin types;"
msgstr ""

#: ../../c-api/init_config.rst:981
msgid "Builtin exceptions;"
msgstr ""

#: ../../c-api/init_config.rst:982
msgid "Builtin and frozen modules;"
msgstr ""

#: ../../c-api/init_config.rst:983
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path`"
" doesn't exist yet)."
msgstr ""

#: ../../c-api/init_config.rst:986
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr ""

#: ../../c-api/init_config.rst:988
msgid "Install and configure :mod:`importlib`;"
msgstr ""

#: ../../c-api/init_config.rst:989
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr ""

#: ../../c-api/init_config.rst:990
msgid "Install signal handlers;"
msgstr ""

#: ../../c-api/init_config.rst:991
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` "
"and :data:`sys.path`);"
msgstr ""

#: ../../c-api/init_config.rst:993
msgid "Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""

#: ../../c-api/init_config.rst:994
msgid "Import the :mod:`site` module;"
msgstr ""

#: ../../c-api/init_config.rst:995
msgid "etc."
msgstr ""

#: ../../c-api/init_config.rst:997
msgid "Private provisional API:"
msgstr ""

#: ../../c-api/init_config.rst:999
msgid ""
":c:member:`PyConfig._init_main`: if set to 0, "
":c:func:`Py_InitializeFromConfig` stops at the \"Core\" initialization "
"phase."
msgstr ""

#: ../../c-api/init_config.rst:1004
msgid ""
"Move to the \"Main\" initialization phase, finish the Python "
"initialization."
msgstr ""

#: ../../c-api/init_config.rst:1006
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` "
"module is not configured: the :ref:`Path Configuration <init-path-"
"config>` is only applied during the \"Main\" phase. It may allow to "
"customize Python in Python to override or tune the :ref:`Path "
"Configuration <init-path-config>`, maybe install a custom "
":data:`sys.meta_path` importer or an import hook, etc."
msgstr ""

#: ../../c-api/init_config.rst:1012
msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-"
"path-config>` in Python, after the Core phase and before the Main phase, "
"which is one of the :pep:`432` motivation."
msgstr ""

#: ../../c-api/init_config.rst:1016
msgid ""
"The \"Core\" phase is not properly defined: what should be and what "
"should not be available at this phase is not specified yet. The API is "
"marked as private and provisional: the API can be modified or even be "
"removed anytime until a proper public API is designed."
msgstr ""

#: ../../c-api/init_config.rst:1021
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr ""

#: ../../c-api/intro.rst:8
msgid "Introduction"
msgstr ""

#: ../../c-api/intro.rst:10
msgid ""
"The Application Programmer's Interface to Python gives C and C++ "
"programmers access to the Python interpreter at a variety of levels.  The"
" API is equally usable from C++, but for brevity it is generally referred"
" to as the Python/C API.  There are two fundamentally different reasons "
"for using the Python/C API. The first reason is to write *extension "
"modules* for specific purposes; these are C modules that extend the "
"Python interpreter.  This is probably the most common use.  The second "
"reason is to use Python as a component in a larger application; this "
"technique is generally referred to as :dfn:`embedding` Python in an "
"application."
msgstr ""

#: ../../c-api/intro.rst:20
msgid ""
"Writing an extension module is a relatively well-understood process, "
"where a \"cookbook\" approach works well.  There are several tools that "
"automate the process to some extent.  While people have embedded Python "
"in other applications since its early existence, the process of embedding"
" Python is less straightforward than writing an extension."
msgstr ""

#: ../../c-api/intro.rst:26
msgid ""
"Many API functions are useful independent of whether you're embedding  or"
" extending Python; moreover, most applications that embed Python  will "
"need to provide a custom extension as well, so it's probably a  good idea"
" to become familiar with writing an extension before  attempting to embed"
" Python in a real application."
msgstr ""

#: ../../c-api/intro.rst:34
msgid "Coding standards"
msgstr ""

#: ../../c-api/intro.rst:36
msgid ""
"If you're writing C code for inclusion in CPython, you **must** follow "
"the guidelines and standards defined in :PEP:`7`.  These guidelines apply"
" regardless of the version of Python you are contributing to.  Following "
"these conventions is not necessary for your own third party extension "
"modules, unless you eventually expect to contribute them to Python."
msgstr ""

#: ../../c-api/intro.rst:46
msgid "Include Files"
msgstr ""

#: ../../c-api/intro.rst:48
msgid ""
"All function, type and macro definitions needed to use the Python/C API "
"are included in your code by the following line::"
msgstr ""

#: ../../c-api/intro.rst:54
msgid ""
"This implies inclusion of the following standard headers: ``<stdio.h>``, "
"``<string.h>``, ``<errno.h>``, ``<limits.h>``, ``<assert.h>`` and "
"``<stdlib.h>`` (if available)."
msgstr ""

#: ../../c-api/intro.rst:60
msgid ""
"Since Python may define some pre-processor definitions which affect the "
"standard headers on some systems, you *must* include :file:`Python.h` "
"before any standard headers are included."
msgstr ""

#: ../../c-api/intro.rst:64
msgid ""
"It is recommended to always define ``PY_SSIZE_T_CLEAN`` before including "
"``Python.h``.  See :ref:`arg-parsing` for a description of this macro."
msgstr ""

#: ../../c-api/intro.rst:67
msgid ""
"All user visible names defined by Python.h (except those defined by the "
"included standard headers) have one of the prefixes ``Py`` or ``_Py``.  "
"Names beginning with ``_Py`` are for internal use by the Python "
"implementation and should not be used by extension writers. Structure "
"member names do not have a reserved prefix."
msgstr ""

#: ../../c-api/intro.rst:74
msgid ""
"User code should never define names that begin with ``Py`` or ``_Py``. "
"This confuses the reader, and jeopardizes the portability of the user "
"code to future Python versions, which may define additional names "
"beginning with one of these prefixes."
msgstr ""

#: ../../c-api/intro.rst:79
#, python-format
msgid ""
"The header files are typically installed with Python.  On Unix, these  "
"are located in the directories :file:`{prefix}/include/pythonversion/` "
"and :file:`{exec_prefix}/include/pythonversion/`, where :envvar:`prefix` "
"and :envvar:`exec_prefix` are defined by the corresponding parameters to "
"Python's :program:`configure` script and *version* is ``'%d.%d' % "
"sys.version_info[:2]``.  On Windows, the headers are installed in "
":file:`{prefix}/include`, where :envvar:`prefix` is the installation "
"directory specified to the installer."
msgstr ""

#: ../../c-api/intro.rst:88
msgid ""
"To include the headers, place both directories (if different) on your "
"compiler's search path for includes.  Do *not* place the parent "
"directories on the search path and then use ``#include "
"<pythonX.Y/Python.h>``; this will break on multi-platform builds since "
"the platform independent headers under :envvar:`prefix` include the "
"platform specific headers from :envvar:`exec_prefix`."
msgstr ""

#: ../../c-api/intro.rst:95
msgid ""
"C++ users should note that although the API is defined entirely using C, "
"the header files properly declare the entry points to be ``extern "
"\"C\"``. As a result, there is no need to do anything special to use the "
"API from C++."
msgstr ""

#: ../../c-api/intro.rst:101
msgid "Useful macros"
msgstr ""

#: ../../c-api/intro.rst:103
msgid ""
"Several useful macros are defined in the Python header files.  Many are "
"defined closer to where they are useful (e.g. :c:macro:`Py_RETURN_NONE`)."
" Others of a more general utility are defined here.  This is not "
"necessarily a complete listing."
msgstr ""

#: ../../c-api/intro.rst:110
msgid ""
"Use this when you have a code path that you do not expect to be reached. "
"For example, in the ``default:`` clause in a ``switch`` statement for "
"which all possible values are covered in ``case`` statements.  Use this "
"in places where you might be tempted to put an ``assert(0)`` or "
"``abort()`` call."
msgstr ""

#: ../../c-api/intro.rst:119
msgid "Return the absolute value of ``x``."
msgstr ""

#: ../../c-api/intro.rst:125
msgid "Return the minimum value between ``x`` and ``y``."
msgstr ""

#: ../../c-api/intro.rst:131
msgid "Return the maximum value between ``x`` and ``y``."
msgstr ""

#: ../../c-api/intro.rst:137
msgid ""
"Convert ``x`` to a C string.  E.g. ``Py_STRINGIFY(123)`` returns "
"``\"123\"``."
msgstr ""

#: ../../c-api/intro.rst:144
msgid "Return the size of a structure (``type``) ``member`` in bytes."
msgstr ""

#: ../../c-api/intro.rst:150
msgid ""
"Argument must be a character or an integer in the range [-128, 127] or "
"[0, 255].  This macro returns ``c`` cast to an ``unsigned char``."
msgstr ""

#: ../../c-api/intro.rst:155
msgid ""
"Like ``getenv(s)``, but returns ``NULL`` if :option:`-E` was passed on "
"the command line (i.e. if ``Py_IgnoreEnvironmentFlag`` is set)."
msgstr ""

#: ../../c-api/intro.rst:160
msgid ""
"Use this for unused arguments in a function definition to silence "
"compiler warnings. Example: ``int func(int a, int Py_UNUSED(b)) { return "
"a; }``."
msgstr ""

#: ../../c-api/intro.rst:167
msgid ""
"Use this for deprecated declarations.  The macro must be placed before "
"the symbol name."
msgstr ""

#: ../../c-api/intro.rst:174
msgid "MSVC support was added."
msgstr ""

#: ../../c-api/intro.rst:179
msgid ""
"Creates a variable with name ``name`` that can be used in docstrings. If "
"Python is built without docstrings, the value will be empty."
msgstr ""

#: ../../c-api/intro.rst:182
msgid ""
"Use :c:macro:`PyDoc_STRVAR` for docstrings to support building Python "
"without docstrings, as specified in :pep:`7`."
msgstr ""

#: ../../c-api/intro.rst:197
msgid ""
"Creates a docstring for the given input string or an empty string if "
"docstrings are disabled."
msgstr ""

#: ../../c-api/intro.rst:200
msgid ""
"Use :c:macro:`PyDoc_STR` in specifying docstrings to support building "
"Python without docstrings, as specified in :pep:`7`."
msgstr ""

#: ../../c-api/intro.rst:214
msgid "Objects, Types and Reference Counts"
msgstr ""

#: ../../c-api/intro.rst:218
msgid ""
"Most Python/C API functions have one or more arguments as well as a "
"return value of type :c:type:`PyObject*`.  This type is a pointer to an "
"opaque data type representing an arbitrary Python object.  Since all "
"Python object types are treated the same way by the Python language in "
"most situations (e.g., assignments, scope rules, and argument passing), "
"it is only fitting that they should be represented by a single C type.  "
"Almost all Python objects live on the heap: you never declare an "
"automatic or static variable of type :c:type:`PyObject`, only pointer "
"variables of type :c:type:`PyObject*` can  be declared.  The sole "
"exception are the type objects; since these must never be deallocated, "
"they are typically static :c:type:`PyTypeObject` objects."
msgstr ""

#: ../../c-api/intro.rst:229
msgid ""
"All Python objects (even Python integers) have a :dfn:`type` and a "
":dfn:`reference count`.  An object's type determines what kind of object "
"it is (e.g., an integer, a list, or a user-defined function; there are "
"many more as explained in :ref:`types`).  For each of the well-known "
"types there is a macro to check whether an object is of that type; for "
"instance, ``PyList_Check(a)`` is true if (and only if) the object pointed"
" to by *a* is a Python list."
msgstr ""

#: ../../c-api/intro.rst:240
msgid "Reference Counts"
msgstr ""

#: ../../c-api/intro.rst:242
msgid ""
"The reference count is important because today's computers have a  finite"
" (and often severely limited) memory size; it counts how many  different "
"places there are that have a reference to an object.  Such a  place could"
" be another object, or a global (or static) C variable, or  a local "
"variable in some C function. When an object's reference count  becomes "
"zero, the object is deallocated.  If it contains references to  other "
"objects, their reference count is decremented. Those other  objects may "
"be deallocated in turn, if this decrement makes their reference count "
"become zero, and so on.  (There's an obvious problem  with objects that "
"reference each other here; for now, the solution is  \"don't do that.\")"
msgstr ""

#: ../../c-api/intro.rst:257
msgid ""
"Reference counts are always manipulated explicitly.  The normal way is  "
"to use the macro :c:func:`Py_INCREF` to increment an object's reference "
"count by one, and :c:func:`Py_DECREF` to decrement it by   one.  The "
":c:func:`Py_DECREF` macro is considerably more complex than the incref "
"one, since it must check whether the reference count becomes zero and "
"then cause the object's deallocator to be called. The deallocator is a "
"function pointer contained in the object's type structure.  The type-"
"specific deallocator takes care of decrementing the reference counts for "
"other objects contained in the object if this is a compound object type, "
"such as a list, as well as performing any additional finalization that's "
"needed.  There's no chance that the reference count can overflow; at "
"least as many bits are used to hold the reference count as there are "
"distinct memory locations in virtual memory (assuming "
"``sizeof(Py_ssize_t) >= sizeof(void*)``). Thus, the reference count "
"increment is a simple operation."
msgstr ""

#: ../../c-api/intro.rst:271
msgid ""
"It is not necessary to increment an object's reference count for every  "
"local variable that contains a pointer to an object.  In theory, the  "
"object's reference count goes up by one when the variable is made to  "
"point to it and it goes down by one when the variable goes out of  scope."
"  However, these two cancel each other out, so at the end the  reference "
"count hasn't changed.  The only real reason to use the  reference count "
"is to prevent the object from being deallocated as  long as our variable "
"is pointing to it.  If we know that there is at  least one other "
"reference to the object that lives at least as long as our variable, "
"there is no need to increment the reference count  temporarily. An "
"important situation where this arises is in objects  that are passed as "
"arguments to C functions in an extension module  that are called from "
"Python; the call mechanism guarantees to hold a  reference to every "
"argument for the duration of the call."
msgstr ""

#: ../../c-api/intro.rst:285
msgid ""
"However, a common pitfall is to extract an object from a list and hold on"
" to it for a while without incrementing its reference count. Some other "
"operation might conceivably remove the object from the list, decrementing"
" its reference count and possibly deallocating it. The real danger is "
"that innocent-looking operations may invoke arbitrary Python code which "
"could do this; there is a code path which allows control to flow back to "
"the user from a :c:func:`Py_DECREF`, so almost any operation is "
"potentially dangerous."
msgstr ""

#: ../../c-api/intro.rst:293
msgid ""
"A safe approach is to always use the generic operations (functions  whose"
" name begins with ``PyObject_``, ``PyNumber_``, ``PySequence_`` or "
"``PyMapping_``). These operations always increment the reference count of"
" the object they return. This leaves the caller with the responsibility "
"to call :c:func:`Py_DECREF` when they are done with the result; this soon"
" becomes second nature."
msgstr ""

#: ../../c-api/intro.rst:303
msgid "Reference Count Details"
msgstr ""

#: ../../c-api/intro.rst:305
msgid ""
"The reference count behavior of functions in the Python/C API is best  "
"explained in terms of *ownership of references*.  Ownership pertains to "
"references, never to objects (objects are not owned: they are always "
"shared).  \"Owning a reference\" means being responsible for calling "
"Py_DECREF on it when the reference is no longer needed.  Ownership can "
"also be transferred, meaning that the code that receives ownership of the"
" reference then becomes responsible for eventually decref'ing it by "
"calling :c:func:`Py_DECREF` or :c:func:`Py_XDECREF` when it's no longer "
"needed---or passing on this responsibility (usually to its caller). When "
"a function passes ownership of a reference on to its caller, the caller "
"is said to receive a *new* reference.  When no ownership is transferred, "
"the caller is said to *borrow* the reference. Nothing needs to be done "
"for a borrowed reference."
msgstr ""

#: ../../c-api/intro.rst:318
msgid ""
"Conversely, when a calling function passes in a reference to an  object, "
"there are two possibilities: the function *steals* a  reference to the "
"object, or it does not.  *Stealing a reference* means that when you pass "
"a reference to a function, that function assumes that it now owns that "
"reference, and you are not responsible for it any longer."
msgstr ""

#: ../../c-api/intro.rst:328
msgid ""
"Few functions steal references; the two notable exceptions are "
":c:func:`PyList_SetItem` and :c:func:`PyTuple_SetItem`, which  steal a "
"reference to the item (but not to the tuple or list into which the item "
"is put!).  These functions were designed to steal a reference because of "
"a common idiom for populating a tuple or list with newly created objects;"
" for example, the code to create the tuple ``(1, 2, \"three\")`` could "
"look like this (forgetting about error handling for the moment; a better "
"way to code this is shown below)::"
msgstr ""

#: ../../c-api/intro.rst:343
msgid ""
"Here, :c:func:`PyLong_FromLong` returns a new reference which is "
"immediately stolen by :c:func:`PyTuple_SetItem`.  When you want to keep "
"using an object although the reference to it will be stolen, use "
":c:func:`Py_INCREF` to grab another reference before calling the "
"reference-stealing function."
msgstr ""

#: ../../c-api/intro.rst:348
msgid ""
"Incidentally, :c:func:`PyTuple_SetItem` is the *only* way to set tuple "
"items; :c:func:`PySequence_SetItem` and :c:func:`PyObject_SetItem` refuse"
" to do this since tuples are an immutable data type.  You should only use"
" :c:func:`PyTuple_SetItem` for tuples that you are creating yourself."
msgstr ""

#: ../../c-api/intro.rst:353
msgid ""
"Equivalent code for populating a list can be written using "
":c:func:`PyList_New` and :c:func:`PyList_SetItem`."
msgstr ""

#: ../../c-api/intro.rst:356
msgid ""
"However, in practice, you will rarely use these ways of creating and "
"populating a tuple or list.  There's a generic function, "
":c:func:`Py_BuildValue`, that can create most common objects from C "
"values, directed by a :dfn:`format string`. For example, the above two "
"blocks of code could be replaced by the following (which also takes care "
"of the error checking)::"
msgstr ""

#: ../../c-api/intro.rst:367
msgid ""
"It is much more common to use :c:func:`PyObject_SetItem` and friends with"
" items whose references you are only borrowing, like arguments that were "
"passed in to the function you are writing.  In that case, their behaviour"
" regarding reference counts is much saner, since you don't have to "
"increment a reference count so you can give a reference away (\"have it "
"be stolen\").  For example, this function sets all items of a list "
"(actually, any mutable sequence) to a given item::"
msgstr ""

#: ../../c-api/intro.rst:397
msgid ""
"The situation is slightly different for function return values.   While "
"passing a reference to most functions does not change your  ownership "
"responsibilities for that reference, many functions that  return a "
"reference to an object give you ownership of the reference. The reason is"
" simple: in many cases, the returned object is created  on the fly, and "
"the reference you get is the only reference to the  object.  Therefore, "
"the generic functions that return object references, like "
":c:func:`PyObject_GetItem` and  :c:func:`PySequence_GetItem`, always "
"return a new reference (the caller becomes the owner of the reference)."
msgstr ""

#: ../../c-api/intro.rst:406
msgid ""
"It is important to realize that whether you own a reference returned  by "
"a function depends on which function you call only --- *the plumage* (the"
" type of the object passed as an argument to the function) *doesn't enter"
" into it!* Thus, if you  extract an item from a list using "
":c:func:`PyList_GetItem`, you don't own the reference --- but if you "
"obtain the same item from the same list using "
":c:func:`PySequence_GetItem` (which happens to take exactly the same "
"arguments), you do own a reference to the returned object."
msgstr ""

#: ../../c-api/intro.rst:418
msgid ""
"Here is an example of how you could write a function that computes the "
"sum of the items in a list of integers; once using  "
":c:func:`PyList_GetItem`, and once using :c:func:`PySequence_GetItem`. ::"
msgstr ""

#: ../../c-api/intro.rst:482
msgid "Types"
msgstr ""

#: ../../c-api/intro.rst:484
msgid ""
"There are few other data types that play a significant role in  the "
"Python/C API; most are simple C types such as :c:type:`int`,  "
":c:type:`long`, :c:type:`double` and :c:type:`char*`.  A few structure "
"types  are used to describe static tables used to list the functions "
"exported  by a module or the data attributes of a new object type, and "
"another is used to describe the value of a complex number.  These will  "
"be discussed together with the functions that use them."
msgstr ""

#: ../../c-api/intro.rst:496
msgid "Exceptions"
msgstr ""

#: ../../c-api/intro.rst:498
msgid ""
"The Python programmer only needs to deal with exceptions if specific  "
"error handling is required; unhandled exceptions are automatically  "
"propagated to the caller, then to the caller's caller, and so on, until "
"they reach the top-level interpreter, where they are reported to the  "
"user accompanied by a stack traceback."
msgstr ""

#: ../../c-api/intro.rst:506
msgid ""
"For C programmers, however, error checking always has to be explicit.  "
"All functions in the Python/C API can raise exceptions, unless an "
"explicit claim is made otherwise in a function's documentation.  In "
"general, when a function encounters an error, it sets an exception, "
"discards any object references that it owns, and returns an error "
"indicator.  If not documented otherwise, this indicator is either "
"``NULL`` or ``-1``, depending on the function's return type. A few "
"functions return a Boolean true/false result, with false indicating an "
"error.  Very few functions return no explicit error indicator or have an "
"ambiguous return value, and require explicit testing for errors with "
":c:func:`PyErr_Occurred`.  These exceptions are always explicitly "
"documented."
msgstr ""

#: ../../c-api/intro.rst:521
msgid ""
"Exception state is maintained in per-thread storage (this is  equivalent "
"to using global storage in an unthreaded application).  A  thread can be "
"in one of two states: an exception has occurred, or not. The function "
":c:func:`PyErr_Occurred` can be used to check for this: it returns a "
"borrowed reference to the exception type object when an exception has "
"occurred, and ``NULL`` otherwise.  There are a number of functions to set"
" the exception state: :c:func:`PyErr_SetString` is the most common "
"(though not the most general) function to set the exception state, and "
":c:func:`PyErr_Clear` clears the exception state."
msgstr ""

#: ../../c-api/intro.rst:531
msgid ""
"The full exception state consists of three objects (all of which can  be "
"``NULL``): the exception type, the corresponding exception  value, and "
"the traceback.  These have the same meanings as the Python result of "
"``sys.exc_info()``; however, they are not the same: the Python objects "
"represent the last exception being handled by a Python  :keyword:`try` "
"... :keyword:`except` statement, while the C level exception state only "
"exists while an exception is being passed on between C functions until it"
" reaches the Python bytecode interpreter's  main loop, which takes care "
"of transferring it to ``sys.exc_info()`` and friends."
msgstr ""

#: ../../c-api/intro.rst:543
msgid ""
"Note that starting with Python 1.5, the preferred, thread-safe way to "
"access the exception state from Python code is to call the function "
":func:`sys.exc_info`, which returns the per-thread exception state for "
"Python code.  Also, the semantics of both ways to access the exception "
"state have changed so that a function which catches an exception will "
"save and restore its thread's exception state so as to preserve the "
"exception state of its caller.  This prevents common bugs in exception "
"handling code caused by an innocent-looking function overwriting the "
"exception being handled; it also reduces the often unwanted lifetime "
"extension for objects that are referenced by the stack frames in the "
"traceback."
msgstr ""

#: ../../c-api/intro.rst:554
msgid ""
"As a general principle, a function that calls another function to  "
"perform some task should check whether the called function raised an  "
"exception, and if so, pass the exception state on to its caller.  It  "
"should discard any object references that it owns, and return an  error "
"indicator, but it should *not* set another exception --- that would "
"overwrite the exception that was just raised, and lose important "
"information about the exact cause of the error."
msgstr ""

#: ../../c-api/intro.rst:563
msgid ""
"A simple example of detecting exceptions and passing them on is shown in "
"the :c:func:`sum_sequence` example above.  It so happens that this "
"example doesn't need to clean up any owned references when it detects an "
"error.  The following example function shows some error cleanup.  First, "
"to remind you why you like Python, we show the equivalent Python code::"
msgstr ""

#: ../../c-api/intro.rst:578
msgid "Here is the corresponding C code, in all its glory::"
msgstr ""

#: ../../c-api/intro.rst:630
msgid ""
"This example represents an endorsed use of the ``goto`` statement  in C! "
"It illustrates the use of :c:func:`PyErr_ExceptionMatches` and "
":c:func:`PyErr_Clear` to handle specific exceptions, and the use of "
":c:func:`Py_XDECREF` to dispose of owned references that may be ``NULL`` "
"(note the ``'X'`` in the name; :c:func:`Py_DECREF` would crash when "
"confronted with a ``NULL`` reference).  It is important that the "
"variables used to hold owned references are initialized to ``NULL`` for "
"this to work; likewise, the proposed return value is initialized to "
"``-1`` (failure) and only set to success after the final call made is "
"successful."
msgstr ""

#: ../../c-api/intro.rst:644
msgid "Embedding Python"
msgstr ""

#: ../../c-api/intro.rst:646
msgid ""
"The one important task that only embedders (as opposed to extension "
"writers) of the Python interpreter have to worry about is the "
"initialization, and possibly the finalization, of the Python interpreter."
"  Most functionality of the interpreter can only be used after the "
"interpreter has been initialized."
msgstr ""

#: ../../c-api/intro.rst:659
msgid ""
"The basic initialization function is :c:func:`Py_Initialize`. This "
"initializes the table of loaded modules, and creates the fundamental "
"modules :mod:`builtins`, :mod:`__main__`, and :mod:`sys`.  It also "
"initializes the module search path (``sys.path``)."
msgstr ""

#: ../../c-api/intro.rst:666
msgid ""
":c:func:`Py_Initialize` does not set the \"script argument list\"  "
"(``sys.argv``). If this variable is needed by Python code that will be "
"executed later, it must be set explicitly with a call to  "
"``PySys_SetArgvEx(argc, argv, updatepath)`` after the call to "
":c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/intro.rst:671
msgid ""
"On most systems (in particular, on Unix and Windows, although the details"
" are slightly different), :c:func:`Py_Initialize` calculates the module "
"search path based upon its best guess for the location of the standard "
"Python interpreter executable, assuming that the Python library is found "
"in a fixed location relative to the Python interpreter executable.  In "
"particular, it looks for a directory named :file:`lib/python{X.Y}` "
"relative to the parent directory where the executable named "
":file:`python` is found on the shell command search path (the environment"
" variable :envvar:`PATH`)."
msgstr ""

#: ../../c-api/intro.rst:680
msgid ""
"For instance, if the Python executable is found in "
":file:`/usr/local/bin/python`, it will assume that the libraries are in "
":file:`/usr/local/lib/python{X.Y}`.  (In fact, this particular path is "
"also the \"fallback\" location, used when no executable file named "
":file:`python` is found along :envvar:`PATH`.)  The user can override "
"this behavior by setting the environment variable :envvar:`PYTHONHOME`, "
"or insert additional directories in front of the standard path by setting"
" :envvar:`PYTHONPATH`."
msgstr ""

#: ../../c-api/intro.rst:695
msgid ""
"The embedding application can steer the search by calling "
"``Py_SetProgramName(file)`` *before* calling  :c:func:`Py_Initialize`.  "
"Note that :envvar:`PYTHONHOME` still overrides this and "
":envvar:`PYTHONPATH` is still inserted in front of the standard path.  An"
" application that requires total control has to provide its own "
"implementation of :c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, "
":c:func:`Py_GetExecPrefix`, and :c:func:`Py_GetProgramFullPath` (all "
"defined in :file:`Modules/getpath.c`)."
msgstr ""

#: ../../c-api/intro.rst:705
msgid ""
"Sometimes, it is desirable to \"uninitialize\" Python.  For instance,  "
"the application may want to start over (make another call to "
":c:func:`Py_Initialize`) or the application is simply done with its  use "
"of Python and wants to free memory allocated by Python.  This can be "
"accomplished by calling :c:func:`Py_FinalizeEx`.  The function "
":c:func:`Py_IsInitialized` returns true if Python is currently in the "
"initialized state.  More information about these functions is given in a "
"later chapter. Notice that :c:func:`Py_FinalizeEx` does *not* free all "
"memory allocated by the Python interpreter, e.g. memory allocated by "
"extension modules currently cannot be released."
msgstr ""

#: ../../c-api/intro.rst:719
msgid "Debugging Builds"
msgstr ""

#: ../../c-api/intro.rst:721
msgid ""
"Python can be built with several macros to enable extra checks of the "
"interpreter and extension modules.  These checks tend to add a large "
"amount of overhead to the runtime so they are not enabled by default."
msgstr ""

#: ../../c-api/intro.rst:725
msgid ""
"A full list of the various types of debugging builds is in the file "
":file:`Misc/SpecialBuilds.txt` in the Python source distribution. Builds "
"are available that support tracing of reference counts, debugging the "
"memory allocator, or low-level profiling of the main interpreter loop.  "
"Only the most frequently-used builds will be described in the remainder "
"of this section."
msgstr ""

#: ../../c-api/intro.rst:731
msgid ""
"Compiling the interpreter with the :c:macro:`Py_DEBUG` macro defined "
"produces what is generally meant by \"a debug build\" of Python. "
":c:macro:`Py_DEBUG` is enabled in the Unix build by adding ``--with-"
"pydebug`` to the :file:`./configure` command.  It is also implied by the "
"presence of the not-Python-specific :c:macro:`_DEBUG` macro.  When "
":c:macro:`Py_DEBUG` is enabled in the Unix build, compiler optimization "
"is disabled."
msgstr ""

#: ../../c-api/intro.rst:738
msgid ""
"In addition to the reference count debugging described below, the "
"following extra checks are performed:"
msgstr ""

#: ../../c-api/intro.rst:741
msgid "Extra checks are added to the object allocator."
msgstr ""

#: ../../c-api/intro.rst:743
msgid "Extra checks are added to the parser and compiler."
msgstr ""

#: ../../c-api/intro.rst:745
msgid ""
"Downcasts from wide types to narrow types are checked for loss of "
"information."
msgstr ""

#: ../../c-api/intro.rst:747
msgid ""
"A number of assertions are added to the dictionary and set "
"implementations. In addition, the set object acquires a "
":meth:`test_c_api` method."
msgstr ""

#: ../../c-api/intro.rst:750
msgid "Sanity checks of the input arguments are added to frame creation."
msgstr ""

#: ../../c-api/intro.rst:752
msgid ""
"The storage for ints is initialized with a known invalid pattern to catch"
" reference to uninitialized digits."
msgstr ""

#: ../../c-api/intro.rst:755
msgid ""
"Low-level tracing and extra exception checking are added to the runtime "
"virtual machine."
msgstr ""

#: ../../c-api/intro.rst:758
msgid "Extra checks are added to the memory arena implementation."
msgstr ""

#: ../../c-api/intro.rst:760
msgid "Extra debugging is added to the thread module."
msgstr ""

#: ../../c-api/intro.rst:762
msgid "There may be additional checks not mentioned here."
msgstr ""

#: ../../c-api/intro.rst:764
msgid ""
"Defining :c:macro:`Py_TRACE_REFS` enables reference tracing.  When "
"defined, a circular doubly linked list of active objects is maintained by"
" adding two extra fields to every :c:type:`PyObject`.  Total allocations "
"are tracked as well.  Upon exit, all existing references are printed.  "
"(In interactive mode this happens after every statement run by the "
"interpreter.)  Implied by :c:macro:`Py_DEBUG`."
msgstr ""

#: ../../c-api/intro.rst:770
msgid ""
"Please refer to :file:`Misc/SpecialBuilds.txt` in the Python source "
"distribution for more detailed information."
msgstr ""

#: ../../c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr ""

#: ../../c-api/iter.rst:8
msgid "There are two functions specifically for working with iterators."
msgstr ""

#: ../../c-api/iter.rst:12
msgid "Return true if the object *o* supports the iterator protocol."
msgstr ""

#: ../../c-api/iter.rst:17
msgid ""
"Return the next value from the iteration *o*.  The object must be an "
"iterator (it is up to the caller to check this).  If there are no "
"remaining values, returns ``NULL`` with no exception set.  If an error "
"occurs while retrieving the item, returns ``NULL`` and passes along the "
"exception."
msgstr ""

#: ../../c-api/iter.rst:22
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""

#: ../../c-api/iterator.rst:6
msgid "Iterator Objects"
msgstr ""

#: ../../c-api/iterator.rst:8
msgid ""
"Python provides two general-purpose iterator objects.  The first, a "
"sequence iterator, works with an arbitrary sequence supporting the "
":meth:`__getitem__` method.  The second works with a callable object and "
"a sentinel value, calling the callable for each item in the sequence, and"
" ending the iteration when the sentinel value is returned."
msgstr ""

#: ../../c-api/iterator.rst:17
msgid ""
"Type object for iterator objects returned by :c:func:`PySeqIter_New` and "
"the one-argument form of the :func:`iter` built-in function for built-in "
"sequence types."
msgstr ""

#: ../../c-api/iterator.rst:24
msgid "Return true if the type of *op* is :c:data:`PySeqIter_Type`."
msgstr ""

#: ../../c-api/iterator.rst:29
msgid ""
"Return an iterator that works with a general sequence object, *seq*.  The"
" iteration ends when the sequence raises :exc:`IndexError` for the "
"subscripting operation."
msgstr ""

#: ../../c-api/iterator.rst:36
msgid ""
"Type object for iterator objects returned by :c:func:`PyCallIter_New` and"
" the two-argument form of the :func:`iter` built-in function."
msgstr ""

#: ../../c-api/iterator.rst:42
msgid "Return true if the type of *op* is :c:data:`PyCallIter_Type`."
msgstr ""

#: ../../c-api/iterator.rst:47
msgid ""
"Return a new iterator.  The first parameter, *callable*, can be any "
"Python callable object that can be called with no parameters; each call "
"to it should return the next item in the iteration.  When *callable* "
"returns a value equal to *sentinel*, the iteration will be terminated."
msgstr ""

#: ../../c-api/list.rst:6
msgid "List Objects"
msgstr ""

#: ../../c-api/list.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python list object."
msgstr ""

#: ../../c-api/list.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python list type. "
"This is the same object as :class:`list` in the Python layer."
msgstr ""

#: ../../c-api/list.rst:24
msgid ""
"Return true if *p* is a list object or an instance of a subtype of the "
"list type."
msgstr ""

#: ../../c-api/list.rst:30
msgid ""
"Return true if *p* is a list object, but not an instance of a subtype of "
"the list type."
msgstr ""

#: ../../c-api/list.rst:36
msgid "Return a new list of length *len* on success, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/list.rst:40
msgid ""
"If *len* is greater than zero, the returned list object's items are set "
"to ``NULL``.  Thus you cannot use abstract API functions such as "
":c:func:`PySequence_SetItem`  or expose the object to Python code before "
"setting all items to a real object with :c:func:`PyList_SetItem`."
msgstr ""

#: ../../c-api/list.rst:50
msgid ""
"Return the length of the list object in *list*; this is equivalent to "
"``len(list)`` on a list object."
msgstr ""

#: ../../c-api/list.rst:56
msgid "Macro form of :c:func:`PyList_Size` without error checking."
msgstr ""

#: ../../c-api/list.rst:61
msgid ""
"Return the object at position *index* in the list pointed to by *list*.  "
"The position must be non-negative; indexing from the end of the list is "
"not supported.  If *index* is out of bounds (<0 or >=len(list)), return "
"``NULL`` and set an :exc:`IndexError` exception."
msgstr ""

#: ../../c-api/list.rst:69
msgid "Macro form of :c:func:`PyList_GetItem` without error checking."
msgstr ""

#: ../../c-api/list.rst:74
msgid ""
"Set the item at index *index* in list to *item*.  Return ``0`` on "
"success. If *index* is out of bounds, return ``-1`` and set an "
":exc:`IndexError` exception."
msgstr ""

#: ../../c-api/list.rst:80
msgid ""
"This function \"steals\" a reference to *item* and discards a reference "
"to an item already in the list at the affected position."
msgstr ""

#: ../../c-api/list.rst:86
msgid ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous "
"content."
msgstr ""

#: ../../c-api/list.rst:91
msgid ""
"This macro \"steals\" a reference to *item*, and, unlike "
":c:func:`PyList_SetItem`, does *not* discard a reference to any item that"
" is being replaced; any reference in *list* at position *i* will be "
"leaked."
msgstr ""

#: ../../c-api/list.rst:99
msgid ""
"Insert the item *item* into list *list* in front of index *index*.  "
"Return ``0`` if successful; return ``-1`` and set an exception if "
"unsuccessful. Analogous to ``list.insert(index, item)``."
msgstr ""

#: ../../c-api/list.rst:106
msgid ""
"Append the object *item* at the end of list *list*. Return ``0`` if "
"successful; return ``-1`` and set an exception if unsuccessful.  "
"Analogous to ``list.append(item)``."
msgstr ""

#: ../../c-api/list.rst:113
msgid ""
"Return a list of the objects in *list* containing the objects *between* "
"*low* and *high*.  Return ``NULL`` and set an exception if unsuccessful."
"  Analogous to ``list[low:high]``.  Indexing from the end of the list is "
"not supported."
msgstr ""

#: ../../c-api/list.rst:120
msgid ""
"Set the slice of *list* between *low* and *high* to the contents of "
"*itemlist*.  Analogous to ``list[low:high] = itemlist``. The *itemlist* "
"may be ``NULL``, indicating the assignment of an empty list (slice "
"deletion). Return ``0`` on success, ``-1`` on failure.  Indexing from the"
" end of the list is not supported."
msgstr ""

#: ../../c-api/list.rst:129
msgid ""
"Sort the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is equivalent to ``list.sort()``."
msgstr ""

#: ../../c-api/list.rst:135
msgid ""
"Reverse the items of *list* in place.  Return ``0`` on success, ``-1`` on"
" failure.  This is the equivalent of ``list.reverse()``."
msgstr ""

#: ../../c-api/list.rst:143
msgid ""
"Return a new tuple object containing the contents of *list*; equivalent "
"to ``tuple(list)``."
msgstr ""

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr ""

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary "
"size."
msgstr ""

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which "
"cannot be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer "
"type. This is the same object as :class:`int` in the Python layer."
msgstr ""

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of "
":c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a "
"subtype of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on "
"failure."
msgstr ""

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``, when you create an int in that range"
" you actually just get back a reference to the existing object. So it "
"should be possible to change the value of ``1``.  I suspect the behaviour"
" of Python in this case is undefined. :-)"
msgstr ""

#: ../../c-api/long.rst:52
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned "
"long`, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:58
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`,"
" or ``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:64
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:70
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, "
"or ``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:76
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned "
"long long`, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:82
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, "
"or ``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:88
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is "
"non-``NULL``, *\\*pend* will point to the first character in *str* which "
"follows the representation of the number.  If *base* is ``0``, *str* is "
"interpreted using the :ref:`integers` definition; in this case, leading "
"zeros in a non-zero decimal number raises a :exc:`ValueError`. If *base* "
"is not ``0``, it must be between ``2`` and ``36``, inclusive.  Leading "
"spaces and single underscores after a base specifier and between digits "
"are ignored.  If there are no digits, :exc:`ValueError` will be raised."
msgstr ""

#: ../../c-api/long.rst:101
msgid "Convert a sequence of Unicode digits to a Python integer value."
msgstr ""

#: ../../c-api/long.rst:105
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyLong_FromUnicodeObject`."
msgstr ""

#: ../../c-api/long.rst:110
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python "
"integer value."
msgstr ""

#: ../../c-api/long.rst:118
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""

#: ../../c-api/long.rst:129 ../../c-api/long.rst:148
msgid ""
"Return a C :c:type:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` or "
":meth:`__int__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:134
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:type:`long`."
msgstr ""

#: ../../c-api/long.rst:137 ../../c-api/long.rst:158 ../../c-api/long.rst:180
#: ../../c-api/long.rst:201 ../../c-api/long.rst:224
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/long.rst:142 ../../c-api/long.rst:163 ../../c-api/long.rst:185
#: ../../c-api/long.rst:208 ../../c-api/long.rst:293 ../../c-api/long.rst:313
msgid "Using :meth:`__int__` is deprecated."
msgstr ""

#: ../../c-api/long.rst:153
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than "
":const:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:172 ../../c-api/long.rst:191
msgid ""
"Return a C :c:type:`long long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`__index__` "
"or :meth:`__int__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:177
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:type:`long long`."
msgstr ""

#: ../../c-api/long.rst:196
msgid ""
"If the value of *obj* is greater than :const:`PY_LLONG_MAX` or less than "
":const:`PY_LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, "
"respectively, and return ``-1``; otherwise, set *\\*overflow* to ``0``.  "
"If any other exception occurs set *\\*overflow* to ``0`` and return "
"``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:218
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:221
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`Py_ssize_t`."
msgstr ""

#: ../../c-api/long.rst:233
msgid ""
"Return a C :c:type:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:236
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`unsigned long`."
msgstr ""

#: ../../c-api/long.rst:239
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""

#: ../../c-api/long.rst:249
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be"
" an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:252
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`size_t`."
msgstr ""

#: ../../c-api/long.rst:255
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""

#: ../../c-api/long.rst:264
msgid ""
"Return a C :c:type:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:267
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for "
"an :c:type:`unsigned long long`."
msgstr ""

#: ../../c-api/long.rst:270
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred`"
" to disambiguate."
msgstr ""

#: ../../c-api/long.rst:273
msgid "A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""

#: ../../c-api/long.rst:279
msgid ""
"Return a C :c:type:`unsigned long` representation of *obj*.  If *obj* is "
"not an instance of :c:type:`PyLongObject`, first call its "
":meth:`__index__` or :meth:`__int__` method (if present) to convert it to"
" a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:284
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long`, "
"return the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:287
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""

#: ../../c-api/long.rst:299
msgid ""
"Return a C :c:type:`unsigned long long` representation of *obj*.  If "
"*obj* is not an instance of :c:type:`PyLongObject`, first call its "
":meth:`__index__` or :meth:`__int__` method (if present) to convert it to"
" a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:304
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long "
"long`, return the reduction of that value modulo ``PY_ULLONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:307
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use "
":c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/long.rst:319
msgid ""
"Return a C :c:type:`double` representation of *pylong*.  *pylong* must be"
" an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:322
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`double`."
msgstr ""

#: ../../c-api/long.rst:325
msgid "Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/long.rst:330
msgid ""
"Convert a Python integer *pylong* to a C :c:type:`void` pointer. If "
"*pylong* cannot be converted, an :exc:`OverflowError` will be raised.  "
"This is only assured to produce a usable :c:type:`void` pointer for "
"values created with :c:func:`PyLong_FromVoidPtr`."
msgstr ""

#: ../../c-api/long.rst:335
msgid "Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/mapping.rst:6
msgid "Mapping Protocol"
msgstr ""

#: ../../c-api/mapping.rst:8
msgid ""
"See also :c:func:`PyObject_GetItem`, :c:func:`PyObject_SetItem` and "
":c:func:`PyObject_DelItem`."
msgstr ""

#: ../../c-api/mapping.rst:14
msgid ""
"Return ``1`` if the object provides mapping protocol or supports slicing,"
" and ``0`` otherwise.  Note that it returns ``1`` for Python classes with"
" a :meth:`__getitem__` method since in general case it is impossible to "
"determine what type of keys it supports. This function always succeeds."
msgstr ""

#: ../../c-api/mapping.rst:25
msgid ""
"Returns the number of keys in object *o* on success, and ``-1`` on "
"failure. This is equivalent to the Python expression ``len(o)``."
msgstr ""

#: ../../c-api/mapping.rst:31
msgid ""
"Return element of *o* corresponding to the string *key* or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o[key]``. See "
"also :c:func:`PyObject_GetItem`."
msgstr ""

#: ../../c-api/mapping.rst:38
msgid ""
"Map the string *key* to the value *v* in object *o*.  Returns ``-1`` on "
"failure.  This is the equivalent of the Python statement ``o[key] = v``. "
"See also :c:func:`PyObject_SetItem`.  This function *does not* steal a "
"reference to *v*."
msgstr ""

#: ../../c-api/mapping.rst:46
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return "
"``-1`` on failure.  This is equivalent to the Python statement ``del "
"o[key]``. This is an alias of :c:func:`PyObject_DelItem`."
msgstr ""

#: ../../c-api/mapping.rst:53
msgid ""
"Remove the mapping for the string *key* from the object *o*.  Return "
"``-1`` on failure.  This is equivalent to the Python statement ``del "
"o[key]``."
msgstr ""

#: ../../c-api/mapping.rst:59 ../../c-api/mapping.rst:70
msgid ""
"Return ``1`` if the mapping object has the key *key* and ``0`` otherwise."
" This is equivalent to the Python expression ``key in o``. This function "
"always succeeds."
msgstr ""

#: ../../c-api/mapping.rst:63
msgid ""
"Note that exceptions which occur while calling the :meth:`__getitem__` "
"method will get suppressed. To get error reporting use "
":c:func:`PyObject_GetItem()` instead."
msgstr ""

#: ../../c-api/mapping.rst:74
msgid ""
"Note that exceptions which occur while calling the :meth:`__getitem__` "
"method and creating a temporary string object will get suppressed. To get"
" error reporting use :c:func:`PyMapping_GetItemString()` instead."
msgstr ""

#: ../../c-api/mapping.rst:81
msgid ""
"On success, return a list of the keys in object *o*.  On failure, return "
"``NULL``."
msgstr ""

#: ../../c-api/mapping.rst:84 ../../c-api/mapping.rst:93
#: ../../c-api/mapping.rst:102
msgid "Previously, the function returned a list or a tuple."
msgstr ""

#: ../../c-api/mapping.rst:90
msgid ""
"On success, return a list of the values in object *o*.  On failure, "
"return ``NULL``."
msgstr ""

#: ../../c-api/mapping.rst:99
msgid ""
"On success, return a list of the items in object *o*, where each item is "
"a tuple containing a key-value pair.  On failure, return ``NULL``."
msgstr ""

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr ""

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the "
"same data format as the :mod:`marshal` module.  There are functions to "
"write data into the serialization format, and additional functions that "
"can be used to read the data back.  Files used to store marshalled data "
"must be opened in binary mode."
msgstr ""

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr ""

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and "
"upon unmarshalling.  Version 2 uses a binary format for floating point "
"numbers. ``Py_MARSHAL_VERSION`` indicates the current file format "
"(currently 2)."
msgstr ""

#: ../../c-api/marshal.rst:24
msgid ""
"Marshal a :c:type:`long` integer, *value*, to *file*.  This will only "
"write the least-significant 32 bits of *value*; regardless of the size of"
" the native :c:type:`long` type.  *version* indicates the file format."
msgstr ""

#: ../../c-api/marshal.rst:31
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file"
" format."
msgstr ""

#: ../../c-api/marshal.rst:37
msgid ""
"Return a bytes object containing the marshalled representation of "
"*value*. *version* indicates the file format."
msgstr ""

#: ../../c-api/marshal.rst:41
msgid "The following functions allow marshalled values to be read back in."
msgstr ""

#: ../../c-api/marshal.rst:46
msgid ""
"Return a C :c:type:`long` from the data stream in a :c:type:`FILE*` "
"opened for reading.  Only a 32-bit value can be read in using this "
"function, regardless of the native size of :c:type:`long`."
msgstr ""

#: ../../c-api/marshal.rst:50 ../../c-api/marshal.rst:60
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr ""

#: ../../c-api/marshal.rst:56
msgid ""
"Return a C :c:type:`short` from the data stream in a :c:type:`FILE*` "
"opened for reading.  Only a 16-bit value can be read in using this "
"function, regardless of the native size of :c:type:`short`."
msgstr ""

#: ../../c-api/marshal.rst:66
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE*` opened "
"for reading."
msgstr ""

#: ../../c-api/marshal.rst:69 ../../c-api/marshal.rst:83
#: ../../c-api/marshal.rst:92
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, "
":exc:`ValueError` or :exc:`TypeError`) and returns ``NULL``."
msgstr ""

#: ../../c-api/marshal.rst:75
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE*` opened "
"for reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this "
"function assumes that no further objects will be read from the file, "
"allowing it to aggressively load file data into memory so that the de-"
"serialization can operate from data in memory rather than reading a byte "
"at a time from the file.  Only use these variant if you are certain that "
"you won't be reading anything else from the file."
msgstr ""

#: ../../c-api/marshal.rst:89
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr ""

#: ../../c-api/memory.rst:8
msgid "Memory Management"
msgstr ""

#: ../../c-api/memory.rst:17
msgid "Overview"
msgstr ""

#: ../../c-api/memory.rst:19
msgid ""
"Memory management in Python involves a private heap containing all Python"
" objects and data structures. The management of this private heap is "
"ensured internally by the *Python memory manager*.  The Python memory "
"manager has different components which deal with various dynamic storage "
"management aspects, like sharing, segmentation, preallocation or caching."
msgstr ""

#: ../../c-api/memory.rst:25
msgid ""
"At the lowest level, a raw memory allocator ensures that there is enough "
"room in the private heap for storing all Python-related data by "
"interacting with the memory manager of the operating system. On top of "
"the raw memory allocator, several object-specific allocators operate on "
"the same heap and implement distinct memory management policies adapted "
"to the peculiarities of every object type. For example, integer objects "
"are managed differently within the heap than strings, tuples or "
"dictionaries because integers imply different storage requirements and "
"speed/space tradeoffs. The Python memory manager thus delegates some of "
"the work to the object-specific allocators, but ensures that the latter "
"operate within the bounds of the private heap."
msgstr ""

#: ../../c-api/memory.rst:36
msgid ""
"It is important to understand that the management of the Python heap is "
"performed by the interpreter itself and that the user has no control over"
" it, even if they regularly manipulate object pointers to memory blocks "
"inside that heap.  The allocation of heap space for Python objects and "
"other internal buffers is performed on demand by the Python memory "
"manager through the Python/C API functions listed in this document."
msgstr ""

#: ../../c-api/memory.rst:49
msgid ""
"To avoid memory corruption, extension writers should never try to operate"
" on Python objects with the functions exported by the C library: "
":c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`."
"  This will result in  mixed calls between the C allocator and the Python"
" memory manager with fatal consequences, because they implement different"
" algorithms and operate on different heaps.  However, one may safely "
"allocate and release memory blocks with the C library allocator for "
"individual purposes, as shown in the following example::"
msgstr ""

#: ../../c-api/memory.rst:68
msgid ""
"In this example, the memory request for the I/O buffer is handled by the "
"C library allocator. The Python memory manager is involved only in the "
"allocation of the bytes object returned as a result."
msgstr ""

#: ../../c-api/memory.rst:72
msgid ""
"In most situations, however, it is recommended to allocate memory from "
"the Python heap specifically because the latter is under control of the "
"Python memory manager. For example, this is required when the interpreter"
" is extended with new object types written in C. Another reason for using"
" the Python heap is the desire to *inform* the Python memory manager "
"about the memory needs of the extension module. Even when the requested "
"memory is used exclusively for internal, highly-specific purposes, "
"delegating all memory requests to the Python memory manager causes the "
"interpreter to have a more accurate image of its memory footprint as a "
"whole. Consequently, under certain circumstances, the Python memory "
"manager may or may not trigger appropriate actions, like garbage "
"collection, memory compaction or other preventive procedures. Note that "
"by using the C library allocator as shown in the previous example, the "
"allocated memory for the I/O buffer escapes completely the Python memory "
"manager."
msgstr ""

#: ../../c-api/memory.rst:88
msgid ""
"The :envvar:`PYTHONMALLOC` environment variable can be used to configure "
"the memory allocators used by Python."
msgstr ""

#: ../../c-api/memory.rst:91
msgid ""
"The :envvar:`PYTHONMALLOCSTATS` environment variable can be used to print"
" statistics of the :ref:`pymalloc memory allocator <pymalloc>` every time"
" a new pymalloc object arena is created, and on shutdown."
msgstr ""

#: ../../c-api/memory.rst:97
msgid "Raw Memory Interface"
msgstr ""

#: ../../c-api/memory.rst:99
msgid ""
"The following function sets are wrappers to the system allocator. These "
"functions are thread-safe, the :term:`GIL <global interpreter lock>` does"
" not need to be held."
msgstr ""

#: ../../c-api/memory.rst:103
msgid ""
"The :ref:`default raw memory allocator <default-memory-allocators>` uses "
"the following functions: :c:func:`malloc`, :c:func:`calloc`, "
":c:func:`realloc` and :c:func:`free`; call ``malloc(1)`` (or ``calloc(1, "
"1)``) when requesting zero bytes."
msgstr ""

#: ../../c-api/memory.rst:112 ../../c-api/memory.rst:183
#: ../../c-api/memory.rst:285
msgid ""
"Allocates *n* bytes and returns a pointer of type :c:type:`void*` to the "
"allocated memory, or ``NULL`` if the request fails."
msgstr ""

#: ../../c-api/memory.rst:115
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if "
"possible, as if ``PyMem_RawMalloc(1)`` had been called instead. The "
"memory will not have been initialized in any way."
msgstr ""

#: ../../c-api/memory.rst:122 ../../c-api/memory.rst:193
#: ../../c-api/memory.rst:295
msgid ""
"Allocates *nelem* elements each whose size in bytes is *elsize* and "
"returns a pointer of type :c:type:`void*` to the allocated memory, or "
"``NULL`` if the request fails. The memory is initialized to zeros."
msgstr ""

#: ../../c-api/memory.rst:126
msgid ""
"Requesting zero elements or elements of size zero bytes returns a "
"distinct non-``NULL`` pointer if possible, as if ``PyMem_RawCalloc(1, "
"1)`` had been called instead."
msgstr ""

#: ../../c-api/memory.rst:135 ../../c-api/memory.rst:206
#: ../../c-api/memory.rst:308
msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents "
"will be unchanged to the minimum of the old and the new sizes."
msgstr ""

#: ../../c-api/memory.rst:138
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_RawMalloc(n)``; "
"else if *n* is equal to zero, the memory block is resized but is not "
"freed, and the returned pointer is non-``NULL``."
msgstr ""

#: ../../c-api/memory.rst:142
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to "
":c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or "
":c:func:`PyMem_RawCalloc`."
msgstr ""

#: ../../c-api/memory.rst:146
msgid ""
"If the request fails, :c:func:`PyMem_RawRealloc` returns ``NULL`` and *p*"
" remains a valid pointer to the previous memory area."
msgstr ""

#: ../../c-api/memory.rst:152
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned "
"by a previous call to :c:func:`PyMem_RawMalloc`, "
":c:func:`PyMem_RawRealloc` or :c:func:`PyMem_RawCalloc`.  Otherwise, or "
"if ``PyMem_RawFree(p)`` has been called before, undefined behavior "
"occurs."
msgstr ""

#: ../../c-api/memory.rst:157 ../../c-api/memory.rst:227
#: ../../c-api/memory.rst:329
msgid "If *p* is ``NULL``, no operation is performed."
msgstr ""

#: ../../c-api/memory.rst:163
msgid "Memory Interface"
msgstr ""

#: ../../c-api/memory.rst:165 ../../c-api/memory.rst:271
msgid ""
"The following function sets, modeled after the ANSI C standard, but "
"specifying behavior when requesting zero bytes, are available for "
"allocating and releasing memory from the Python heap."
msgstr ""

#: ../../c-api/memory.rst:169
msgid ""
"The :ref:`default memory allocator <default-memory-allocators>` uses the "
":ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

#: ../../c-api/memory.rst:174 ../../c-api/memory.rst:280
msgid ""
"The :term:`GIL <global interpreter lock>` must be held when using these "
"functions."
msgstr ""

#: ../../c-api/memory.rst:179
msgid "The default allocator is now pymalloc instead of system :c:func:`malloc`."
msgstr ""

#: ../../c-api/memory.rst:186
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if "
"possible, as if ``PyMem_Malloc(1)`` had been called instead. The memory "
"will not have been initialized in any way."
msgstr ""

#: ../../c-api/memory.rst:197
msgid ""
"Requesting zero elements or elements of size zero bytes returns a "
"distinct non-``NULL`` pointer if possible, as if ``PyMem_Calloc(1, 1)`` "
"had been called instead."
msgstr ""

#: ../../c-api/memory.rst:209
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_Malloc(n)``; else "
"if *n* is equal to zero, the memory block is resized but is not freed, "
"and the returned pointer is non-``NULL``."
msgstr ""

#: ../../c-api/memory.rst:213
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to "
":c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or "
":c:func:`PyMem_Calloc`."
msgstr ""

#: ../../c-api/memory.rst:216
msgid ""
"If the request fails, :c:func:`PyMem_Realloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""

#: ../../c-api/memory.rst:222
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned "
"by a previous call to :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or "
":c:func:`PyMem_Calloc`.  Otherwise, or if ``PyMem_Free(p)`` has been "
"called before, undefined behavior occurs."
msgstr ""

#: ../../c-api/memory.rst:229
msgid ""
"The following type-oriented macros are provided for convenience.  Note  "
"that *TYPE* refers to any C type."
msgstr ""

#: ../../c-api/memory.rst:235
msgid ""
"Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` "
"bytes of memory.  Returns a pointer cast to :c:type:`TYPE*`.  The memory "
"will not have been initialized in any way."
msgstr ""

#: ../../c-api/memory.rst:242
msgid ""
"Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n "
"* sizeof(TYPE))`` bytes.  Returns a pointer cast to :c:type:`TYPE*`. On "
"return, *p* will be a pointer to the new memory area, or ``NULL`` in the "
"event of failure."
msgstr ""

#: ../../c-api/memory.rst:247
msgid ""
"This is a C preprocessor macro; *p* is always reassigned.  Save the "
"original value of *p* to avoid losing memory when handling errors."
msgstr ""

#: ../../c-api/memory.rst:253
msgid "Same as :c:func:`PyMem_Free`."
msgstr ""

#: ../../c-api/memory.rst:255
msgid ""
"In addition, the following macro sets are provided for calling the Python"
" memory allocator directly, without involving the C API functions listed "
"above. However, note that their use does not preserve binary "
"compatibility across Python versions and is therefore deprecated in "
"extension modules."
msgstr ""

#: ../../c-api/memory.rst:260
msgid "``PyMem_MALLOC(size)``"
msgstr ""

#: ../../c-api/memory.rst:261
msgid "``PyMem_NEW(type, size)``"
msgstr ""

#: ../../c-api/memory.rst:262
msgid "``PyMem_REALLOC(ptr, size)``"
msgstr ""

#: ../../c-api/memory.rst:263
msgid "``PyMem_RESIZE(ptr, type, size)``"
msgstr ""

#: ../../c-api/memory.rst:264
msgid "``PyMem_FREE(ptr)``"
msgstr ""

#: ../../c-api/memory.rst:265
msgid "``PyMem_DEL(ptr)``"
msgstr ""

#: ../../c-api/memory.rst:269
msgid "Object allocators"
msgstr ""

#: ../../c-api/memory.rst:275
msgid ""
"The :ref:`default object allocator <default-memory-allocators>` uses the "
":ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

#: ../../c-api/memory.rst:288
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if "
"possible, as if ``PyObject_Malloc(1)`` had been called instead. The "
"memory will not have been initialized in any way."
msgstr ""

#: ../../c-api/memory.rst:299
msgid ""
"Requesting zero elements or elements of size zero bytes returns a "
"distinct non-``NULL`` pointer if possible, as if ``PyObject_Calloc(1, "
"1)`` had been called instead."
msgstr ""

#: ../../c-api/memory.rst:311
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyObject_Malloc(n)``; "
"else if *n* is equal to zero, the memory block is resized but is not "
"freed, and the returned pointer is non-``NULL``."
msgstr ""

#: ../../c-api/memory.rst:315
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to "
":c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or "
":c:func:`PyObject_Calloc`."
msgstr ""

#: ../../c-api/memory.rst:318
msgid ""
"If the request fails, :c:func:`PyObject_Realloc` returns ``NULL`` and *p*"
" remains a valid pointer to the previous memory area."
msgstr ""

#: ../../c-api/memory.rst:324
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned "
"by a previous call to :c:func:`PyObject_Malloc`, "
":c:func:`PyObject_Realloc` or :c:func:`PyObject_Calloc`.  Otherwise, or "
"if ``PyObject_Free(p)`` has been called before, undefined behavior "
"occurs."
msgstr ""

#: ../../c-api/memory.rst:335
msgid "Default Memory Allocators"
msgstr ""

#: ../../c-api/memory.rst:337
msgid "Default memory allocators:"
msgstr ""

#: ../../c-api/memory.rst:340
msgid "Configuration"
msgstr ""

#: ../../c-api/memory.rst:340
msgid "Name"
msgstr ""

#: ../../c-api/memory.rst:340
msgid "PyMem_RawMalloc"
msgstr ""

#: ../../c-api/memory.rst:340
msgid "PyMem_Malloc"
msgstr ""

#: ../../c-api/memory.rst:340
msgid "PyObject_Malloc"
msgstr ""

#: ../../c-api/memory.rst:342
msgid "Release build"
msgstr ""

#: ../../c-api/memory.rst:342
msgid "``\"pymalloc\"``"
msgstr ""

#: ../../c-api/memory.rst:342 ../../c-api/memory.rst:344
msgid "``malloc``"
msgstr ""

#: ../../c-api/memory.rst:342
msgid "``pymalloc``"
msgstr ""

#: ../../c-api/memory.rst:343
msgid "Debug build"
msgstr ""

#: ../../c-api/memory.rst:343
msgid "``\"pymalloc_debug\"``"
msgstr ""

#: ../../c-api/memory.rst:343 ../../c-api/memory.rst:345
msgid "``malloc`` + debug"
msgstr ""

#: ../../c-api/memory.rst:343
msgid "``pymalloc`` + debug"
msgstr ""

#: ../../c-api/memory.rst:344
msgid "Release build, without pymalloc"
msgstr ""

#: ../../c-api/memory.rst:344
msgid "``\"malloc\"``"
msgstr ""

#: ../../c-api/memory.rst:345
msgid "Debug build, without pymalloc"
msgstr ""

#: ../../c-api/memory.rst:345
msgid "``\"malloc_debug\"``"
msgstr ""

#: ../../c-api/memory.rst:348
msgid "Legend:"
msgstr ""

#: ../../c-api/memory.rst:350
msgid "Name: value for :envvar:`PYTHONMALLOC` environment variable"
msgstr ""

#: ../../c-api/memory.rst:351
msgid ""
"``malloc``: system allocators from the standard C library, C functions: "
":c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`"
msgstr ""

#: ../../c-api/memory.rst:353
msgid "``pymalloc``: :ref:`pymalloc memory allocator <pymalloc>`"
msgstr ""

#: ../../c-api/memory.rst:354
msgid "\"+ debug\": with debug hooks installed by :c:func:`PyMem_SetupDebugHooks`"
msgstr ""

#: ../../c-api/memory.rst:358
msgid "Customize Memory Allocators"
msgstr ""

#: ../../c-api/memory.rst:364
msgid ""
"Structure used to describe a memory block allocator. The structure has "
"four fields:"
msgstr ""

#: ../../c-api/memory.rst:368 ../../c-api/memory.rst:513
#: ../../c-api/structures.rst:139 ../../c-api/structures.rst:279
#: ../../c-api/structures.rst:345 ../../c-api/tuple.rst:151
#: ../../c-api/tuple.rst:174
msgid "Field"
msgstr ""

#: ../../c-api/memory.rst:370 ../../c-api/memory.rst:515
msgid "``void *ctx``"
msgstr ""

#: ../../c-api/memory.rst:370 ../../c-api/memory.rst:515
msgid "user context passed as first argument"
msgstr ""

#: ../../c-api/memory.rst:372
msgid "``void* malloc(void *ctx, size_t size)``"
msgstr ""

#: ../../c-api/memory.rst:372
msgid "allocate a memory block"
msgstr ""

#: ../../c-api/memory.rst:374
msgid "``void* calloc(void *ctx, size_t nelem, size_t elsize)``"
msgstr ""

#: ../../c-api/memory.rst:374
msgid "allocate a memory block initialized with zeros"
msgstr ""

#: ../../c-api/memory.rst:377
msgid "``void* realloc(void *ctx, void *ptr, size_t new_size)``"
msgstr ""

#: ../../c-api/memory.rst:377
msgid "allocate or resize a memory block"
msgstr ""

#: ../../c-api/memory.rst:379
msgid "``void free(void *ctx, void *ptr)``"
msgstr ""

#: ../../c-api/memory.rst:379
msgid "free a memory block"
msgstr ""

#: ../../c-api/memory.rst:382
msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to "
":c:type:`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""

#: ../../c-api/memory.rst:389
msgid "Enum used to identify an allocator domain. Domains:"
msgstr ""

#: ../../c-api/memory.rst:404
msgid ":c:func:`PyMem_Malloc`,"
msgstr ""

#: ../../c-api/memory.rst:405
msgid ":c:func:`PyMem_Realloc`"
msgstr ""

#: ../../c-api/memory.rst:406
msgid ":c:func:`PyMem_Calloc`"
msgstr ""

#: ../../c-api/memory.rst:407
msgid ":c:func:`PyMem_Free`"
msgstr ""

#: ../../c-api/memory.rst:413
msgid ":c:func:`PyObject_Malloc`"
msgstr ""

#: ../../c-api/memory.rst:414
msgid ":c:func:`PyObject_Realloc`"
msgstr ""

#: ../../c-api/memory.rst:415
msgid ":c:func:`PyObject_Calloc`"
msgstr ""

#: ../../c-api/memory.rst:416
msgid ":c:func:`PyObject_Free`"
msgstr ""

#: ../../c-api/memory.rst:420
msgid "Get the memory block allocator of the specified domain."
msgstr ""

#: ../../c-api/memory.rst:425
msgid "Set the memory block allocator of the specified domain."
msgstr ""

#: ../../c-api/memory.rst:427
msgid ""
"The new allocator must return a distinct non-``NULL`` pointer when "
"requesting zero bytes."
msgstr ""

#: ../../c-api/memory.rst:430
msgid ""
"For the :c:data:`PYMEM_DOMAIN_RAW` domain, the allocator must be thread-"
"safe: the :term:`GIL <global interpreter lock>` is not held when the "
"allocator is called."
msgstr ""

#: ../../c-api/memory.rst:434
msgid ""
"If the new allocator is not a hook (does not call the previous "
"allocator), the :c:func:`PyMem_SetupDebugHooks` function must be called "
"to reinstall the debug hooks on top on the new allocator."
msgstr ""

#: ../../c-api/memory.rst:441
msgid "Setup hooks to detect bugs in the Python memory allocator functions."
msgstr ""

#: ../../c-api/memory.rst:443
msgid ""
"Newly allocated memory is filled with the byte ``0xCD`` (``CLEANBYTE``), "
"freed memory is filled with the byte ``0xDD`` (``DEADBYTE``). Memory "
"blocks are surrounded by \"forbidden bytes\" (``FORBIDDENBYTE``: byte "
"``0xFD``)."
msgstr ""

#: ../../c-api/memory.rst:447
msgid "Runtime checks:"
msgstr ""

#: ../../c-api/memory.rst:449
msgid ""
"Detect API violations, ex: :c:func:`PyObject_Free` called on a buffer "
"allocated by :c:func:`PyMem_Malloc`"
msgstr ""

#: ../../c-api/memory.rst:451
msgid "Detect write before the start of the buffer (buffer underflow)"
msgstr ""

#: ../../c-api/memory.rst:452
msgid "Detect write after the end of the buffer (buffer overflow)"
msgstr ""

#: ../../c-api/memory.rst:453
msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when "
"allocator functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: "
":c:func:`PyObject_Malloc`) and :c:data:`PYMEM_DOMAIN_MEM` (ex: "
":c:func:`PyMem_Malloc`) domains are called"
msgstr ""

#: ../../c-api/memory.rst:458
msgid ""
"On error, the debug hooks use the :mod:`tracemalloc` module to get the "
"traceback where a memory block was allocated. The traceback is only "
"displayed if :mod:`tracemalloc` is tracing Python memory allocations and "
"the memory block was traced."
msgstr ""

#: ../../c-api/memory.rst:463
msgid ""
"These hooks are :ref:`installed by default <default-memory-allocators>` "
"if Python is compiled in debug mode. The :envvar:`PYTHONMALLOC` "
"environment variable can be used to install debug hooks on a Python "
"compiled in release mode."
msgstr ""

#: ../../c-api/memory.rst:468
msgid ""
"This function now also works on Python compiled in release mode. On "
"error, the debug hooks now use :mod:`tracemalloc` to get the traceback "
"where a memory block was allocated. The debug hooks now also check if the"
" GIL is held when functions of :c:data:`PYMEM_DOMAIN_OBJ` and "
":c:data:`PYMEM_DOMAIN_MEM` domains are called."
msgstr ""

#: ../../c-api/memory.rst:475
msgid ""
"Byte patterns ``0xCB`` (``CLEANBYTE``), ``0xDB`` (``DEADBYTE``) and "
"``0xFB`` (``FORBIDDENBYTE``) have been replaced with ``0xCD``, ``0xDD`` "
"and ``0xFD`` to use the same values than Windows CRT debug ``malloc()`` "
"and ``free()``."
msgstr ""

#: ../../c-api/memory.rst:485
msgid "The pymalloc allocator"
msgstr ""

#: ../../c-api/memory.rst:487
msgid ""
"Python has a *pymalloc* allocator optimized for small objects (smaller or"
" equal to 512 bytes) with a short lifetime. It uses memory mappings "
"called \"arenas\" with a fixed size of 256 KiB. It falls back to "
":c:func:`PyMem_RawMalloc` and :c:func:`PyMem_RawRealloc` for allocations "
"larger than 512 bytes."
msgstr ""

#: ../../c-api/memory.rst:492
msgid ""
"*pymalloc* is the :ref:`default allocator <default-memory-allocators>` of"
" the :c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) and "
":c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) domains."
msgstr ""

#: ../../c-api/memory.rst:496
msgid "The arena allocator uses the following functions:"
msgstr ""

#: ../../c-api/memory.rst:498
msgid ":c:func:`VirtualAlloc` and :c:func:`VirtualFree` on Windows,"
msgstr ""

#: ../../c-api/memory.rst:499
msgid ":c:func:`mmap` and :c:func:`munmap` if available,"
msgstr ""

#: ../../c-api/memory.rst:500
msgid ":c:func:`malloc` and :c:func:`free` otherwise."
msgstr ""

#: ../../c-api/memory.rst:503
msgid "Customize pymalloc Arena Allocator"
msgstr ""

#: ../../c-api/memory.rst:509
msgid ""
"Structure used to describe an arena allocator. The structure has three "
"fields:"
msgstr ""

#: ../../c-api/memory.rst:517
msgid "``void* alloc(void *ctx, size_t size)``"
msgstr ""

#: ../../c-api/memory.rst:517
msgid "allocate an arena of size bytes"
msgstr ""

#: ../../c-api/memory.rst:519
msgid "``void free(void *ctx, void *ptr, size_t size)``"
msgstr ""

#: ../../c-api/memory.rst:519
msgid "free an arena"
msgstr ""

#: ../../c-api/memory.rst:524
msgid "Get the arena allocator."
msgstr ""

#: ../../c-api/memory.rst:528
msgid "Set the arena allocator."
msgstr ""

#: ../../c-api/memory.rst:532
msgid "tracemalloc C API"
msgstr ""

#: ../../c-api/memory.rst:538
msgid "Track an allocated memory block in the :mod:`tracemalloc` module."
msgstr ""

#: ../../c-api/memory.rst:540
msgid ""
"Return ``0`` on success, return ``-1`` on error (failed to allocate "
"memory to store the trace). Return ``-2`` if tracemalloc is disabled."
msgstr ""

#: ../../c-api/memory.rst:543
msgid "If memory block is already tracked, update the existing trace."
msgstr ""

#: ../../c-api/memory.rst:547
msgid ""
"Untrack an allocated memory block in the :mod:`tracemalloc` module. Do "
"nothing if the block was not tracked."
msgstr ""

#: ../../c-api/memory.rst:550
msgid "Return ``-2`` if tracemalloc is disabled, otherwise return ``0``."
msgstr ""

#: ../../c-api/memory.rst:556 ../../c-api/typeobj.rst:2478
msgid "Examples"
msgstr ""

#: ../../c-api/memory.rst:558
msgid ""
"Here is the example from section :ref:`memoryoverview`, rewritten so that"
" the I/O buffer is allocated from the Python heap by using the first "
"function set::"
msgstr ""

#: ../../c-api/memory.rst:571
msgid "The same code using the type-oriented function set::"
msgstr ""

#: ../../c-api/memory.rst:583
msgid ""
"Note that in the two examples above, the buffer is always manipulated via"
" functions belonging to the same set. Indeed, it is required to use the "
"same memory API family for a given memory block, so that the risk of "
"mixing different allocators is reduced to a minimum. The following code "
"sequence contains two errors, one of which is labeled as *fatal* because "
"it mixes two different allocators operating on different heaps. ::"
msgstr ""

#: ../../c-api/memory.rst:598
msgid ""
"In addition to the functions aimed at handling raw memory blocks from the"
" Python heap, objects in Python are allocated and released with "
":c:func:`PyObject_New`, :c:func:`PyObject_NewVar` and "
":c:func:`PyObject_Del`."
msgstr ""

#: ../../c-api/memory.rst:602
msgid ""
"These will be explained in the next chapter on defining and implementing "
"new object types in C."
msgstr ""

#: ../../c-api/memoryview.rst:9
msgid "MemoryView objects"
msgstr ""

#: ../../c-api/memoryview.rst:11
msgid ""
"A :class:`memoryview` object exposes the C level :ref:`buffer interface "
"<bufferobjects>` as a Python object which can then be passed around like "
"any other object."
msgstr ""

#: ../../c-api/memoryview.rst:18
msgid ""
"Create a memoryview object from an object that provides the buffer "
"interface. If *obj* supports writable buffer exports, the memoryview "
"object will be read/write, otherwise it may be either read-only or "
"read/write at the discretion of the exporter."
msgstr ""

#: ../../c-api/memoryview.rst:25
msgid ""
"Create a memoryview object using *mem* as the underlying buffer. *flags* "
"can be one of :c:macro:`PyBUF_READ` or :c:macro:`PyBUF_WRITE`."
msgstr ""

#: ../../c-api/memoryview.rst:32
msgid ""
"Create a memoryview object wrapping the given buffer structure *view*. "
"For simple byte buffers, :c:func:`PyMemoryView_FromMemory` is the "
"preferred function."
msgstr ""

#: ../../c-api/memoryview.rst:38
msgid ""
"Create a memoryview object to a :term:`contiguous` chunk of memory (in "
"either 'C' or 'F'ortran *order*) from an object that defines the buffer "
"interface. If memory is contiguous, the memoryview object points to the "
"original memory. Otherwise, a copy is made and the memoryview points to a"
" new bytes object."
msgstr ""

#: ../../c-api/memoryview.rst:47
msgid ""
"Return true if the object *obj* is a memoryview object.  It is not "
"currently allowed to create subclasses of :class:`memoryview`."
msgstr ""

#: ../../c-api/memoryview.rst:53
msgid ""
"Return a pointer to the memoryview's private copy of the exporter's "
"buffer. *mview* **must** be a memoryview instance; this macro doesn't "
"check its type, you must do it yourself or you will risk crashes."
msgstr ""

#: ../../c-api/memoryview.rst:59
msgid ""
"Return either a pointer to the exporting object that the memoryview is "
"based on or ``NULL`` if the memoryview has been created by one of the "
"functions :c:func:`PyMemoryView_FromMemory` or "
":c:func:`PyMemoryView_FromBuffer`. *mview* **must** be a memoryview "
"instance."
msgstr ""

#: ../../c-api/method.rst:6
msgid "Instance Method Objects"
msgstr ""

#: ../../c-api/method.rst:10
msgid ""
"An instance method is a wrapper for a :c:data:`PyCFunction` and the new "
"way to bind a :c:data:`PyCFunction` to a class object. It replaces the "
"former call ``PyMethod_New(func, NULL, class)``."
msgstr ""

#: ../../c-api/method.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python instance "
"method type. It is not exposed to Python programs."
msgstr ""

#: ../../c-api/method.rst:23
msgid ""
"Return true if *o* is an instance method object (has type "
":c:data:`PyInstanceMethod_Type`).  The parameter must not be ``NULL``."
msgstr ""

#: ../../c-api/method.rst:29
msgid ""
"Return a new instance method object, with *func* being any callable "
"object *func* is the function that will be called when the instance "
"method is called."
msgstr ""

#: ../../c-api/method.rst:36
msgid "Return the function object associated with the instance method *im*."
msgstr ""

#: ../../c-api/method.rst:41
msgid ""
"Macro version of :c:func:`PyInstanceMethod_Function` which avoids error "
"checking."
msgstr ""

#: ../../c-api/method.rst:47
msgid "Method Objects"
msgstr ""

#: ../../c-api/method.rst:51
msgid ""
"Methods are bound function objects. Methods are always bound to an "
"instance of a user-defined class. Unbound methods (methods bound to a "
"class object) are no longer available."
msgstr ""

#: ../../c-api/method.rst:60
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python method "
"type.  This is exposed to Python programs as ``types.MethodType``."
msgstr ""

#: ../../c-api/method.rst:66
msgid ""
"Return true if *o* is a method object (has type :c:data:`PyMethod_Type`)."
"  The parameter must not be ``NULL``."
msgstr ""

#: ../../c-api/method.rst:72
msgid ""
"Return a new method object, with *func* being any callable object and "
"*self* the instance the method should be bound. *func* is the function "
"that will be called when the method is called. *self* must not be "
"``NULL``."
msgstr ""

#: ../../c-api/method.rst:79
msgid "Return the function object associated with the method *meth*."
msgstr ""

#: ../../c-api/method.rst:84
msgid "Macro version of :c:func:`PyMethod_Function` which avoids error checking."
msgstr ""

#: ../../c-api/method.rst:89
msgid "Return the instance associated with the method *meth*."
msgstr ""

#: ../../c-api/method.rst:94
msgid "Macro version of :c:func:`PyMethod_Self` which avoids error checking."
msgstr ""

#: ../../c-api/module.rst:6
msgid "Module Objects"
msgstr ""

#: ../../c-api/module.rst:15
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module "
"type.  This is exposed to Python programs as ``types.ModuleType``."
msgstr ""

#: ../../c-api/module.rst:21
msgid "Return true if *p* is a module object, or a subtype of a module object."
msgstr ""

#: ../../c-api/module.rst:26
msgid ""
"Return true if *p* is a module object, but not a subtype of "
":c:data:`PyModule_Type`."
msgstr ""

#: ../../c-api/module.rst:39
msgid ""
"Return a new module object with the :attr:`__name__` attribute set to "
"*name*. The module's :attr:`__name__`, :attr:`__doc__`, "
":attr:`__package__`, and :attr:`__loader__` attributes are filled in (all"
" but :attr:`__name__` are set to ``None``); the caller is responsible for"
" providing a :attr:`__file__` attribute."
msgstr ""

#: ../../c-api/module.rst:47
msgid ":attr:`__package__` and :attr:`__loader__` are set to ``None``."
msgstr ""

#: ../../c-api/module.rst:53
msgid ""
"Similar to :c:func:`PyModule_NewObject`, but the name is a UTF-8 encoded "
"string instead of a Unicode object."
msgstr ""

#: ../../c-api/module.rst:61
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`~object.__dict__` attribute of the "
"module object. If *module* is not a module object (or a subtype of a "
"module object), :exc:`SystemError` is raised and ``NULL`` is returned."
msgstr ""

#: ../../c-api/module.rst:66
msgid ""
"It is recommended extensions use other :c:func:`PyModule_\\*` and "
":c:func:`PyObject_\\*` functions rather than directly manipulate a "
"module's :attr:`~object.__dict__`."
msgstr ""

#: ../../c-api/module.rst:77
msgid ""
"Return *module*'s :attr:`__name__` value.  If the module does not provide"
" one, or if it is not a string, :exc:`SystemError` is raised and ``NULL``"
" is returned."
msgstr ""

#: ../../c-api/module.rst:85
msgid ""
"Similar to :c:func:`PyModule_GetNameObject` but return the name encoded "
"to ``'utf-8'``."
msgstr ""

#: ../../c-api/module.rst:90
msgid ""
"Return the \"state\" of the module, that is, a pointer to the block of "
"memory allocated at module creation time, or ``NULL``.  See "
":c:member:`PyModuleDef.m_size`."
msgstr ""

#: ../../c-api/module.rst:97
msgid ""
"Return a pointer to the :c:type:`PyModuleDef` struct from which the "
"module was created, or ``NULL`` if the module wasn't created from a "
"definition."
msgstr ""

#: ../../c-api/module.rst:107
msgid ""
"Return the name of the file from which *module* was loaded using "
"*module*'s :attr:`__file__` attribute.  If this is not defined, or if it "
"is not a unicode string, raise :exc:`SystemError` and return ``NULL``; "
"otherwise return a reference to a Unicode object."
msgstr ""

#: ../../c-api/module.rst:117
msgid ""
"Similar to :c:func:`PyModule_GetFilenameObject` but return the filename "
"encoded to 'utf-8'."
msgstr ""

#: ../../c-api/module.rst:120
msgid ""
":c:func:`PyModule_GetFilename` raises :c:type:`UnicodeEncodeError` on "
"unencodable filenames, use :c:func:`PyModule_GetFilenameObject` instead."
msgstr ""

#: ../../c-api/module.rst:128
msgid "Initializing C modules"
msgstr ""

#: ../../c-api/module.rst:130
msgid ""
"Modules objects are usually created from extension modules (shared "
"libraries which export an initialization function), or compiled-in "
"modules (where the initialization function is added using "
":c:func:`PyImport_AppendInittab`). See :ref:`building` or :ref"
":`extending-with-embedding` for details."
msgstr ""

#: ../../c-api/module.rst:135
msgid ""
"The initialization function can either pass a module definition instance "
"to :c:func:`PyModule_Create`, and return the resulting module object, or "
"request \"multi-phase initialization\" by returning the definition struct"
" itself."
msgstr ""

#: ../../c-api/module.rst:141
msgid ""
"The module definition struct, which holds all information needed to "
"create a module object. There is usually only one statically initialized "
"variable of this type for each module."
msgstr ""

#: ../../c-api/module.rst:147
msgid "Always initialize this member to :const:`PyModuleDef_HEAD_INIT`."
msgstr ""

#: ../../c-api/module.rst:151
msgid "Name for the new module."
msgstr ""

#: ../../c-api/module.rst:155
msgid ""
"Docstring for the module; usually a docstring variable created with "
":c:macro:`PyDoc_STRVAR` is used."
msgstr ""

#: ../../c-api/module.rst:160
msgid ""
"Module state may be kept in a per-module memory area that can be "
"retrieved with :c:func:`PyModule_GetState`, rather than in static "
"globals. This makes modules safe for use in multiple sub-interpreters."
msgstr ""

#: ../../c-api/module.rst:164
msgid ""
"This memory area is allocated based on *m_size* on module creation, and "
"freed when the module object is deallocated, after the :c:member:`m_free`"
" function has been called, if present."
msgstr ""

#: ../../c-api/module.rst:168
msgid ""
"Setting ``m_size`` to ``-1`` means that the module does not support sub-"
"interpreters, because it has global state."
msgstr ""

#: ../../c-api/module.rst:171
msgid ""
"Setting it to a non-negative value means that the module can be re-"
"initialized and specifies the additional amount of memory it requires for"
" its state. Non-negative ``m_size`` is required for multi-phase "
"initialization."
msgstr ""

#: ../../c-api/module.rst:176
msgid "See :PEP:`3121` for more details."
msgstr ""

#: ../../c-api/module.rst:180
msgid ""
"A pointer to a table of module-level functions, described by "
":c:type:`PyMethodDef` values.  Can be ``NULL`` if no functions are "
"present."
msgstr ""

#: ../../c-api/module.rst:185
msgid ""
"An array of slot definitions for multi-phase initialization, terminated "
"by a ``{0, NULL}`` entry. When using single-phase initialization, "
"*m_slots* must be ``NULL``."
msgstr ""

#: ../../c-api/module.rst:191
msgid ""
"Prior to version 3.5, this member was always set to ``NULL``, and was "
"defined as:"
msgstr ""

#: ../../c-api/module.rst:198
msgid ""
"A traversal function to call during GC traversal of the module object, or"
" ``NULL`` if not needed. This function may be called before module state "
"is allocated (:c:func:`PyModule_GetState()` may return `NULL`), and "
"before the :c:member:`Py_mod_exec` function is executed."
msgstr ""

#: ../../c-api/module.rst:205
msgid ""
"A clear function to call during GC clearing of the module object, or "
"``NULL`` if not needed. This function may be called before module state "
"is allocated (:c:func:`PyModule_GetState()` may return `NULL`), and "
"before the :c:member:`Py_mod_exec` function is executed."
msgstr ""

#: ../../c-api/module.rst:212
msgid ""
"A function to call during deallocation of the module object, or ``NULL`` "
"if not needed. This function may be called before module state is "
"allocated (:c:func:`PyModule_GetState()` may return `NULL`), and before "
"the :c:member:`Py_mod_exec` function is executed."
msgstr ""

#: ../../c-api/module.rst:218
msgid "Single-phase initialization"
msgstr ""

#: ../../c-api/module.rst:220
msgid ""
"The module initialization function may create and return the module "
"object directly. This is referred to as \"single-phase initialization\", "
"and uses one of the following two module creation functions:"
msgstr ""

#: ../../c-api/module.rst:226
msgid ""
"Create a new module object, given the definition in *def*.  This behaves "
"like :c:func:`PyModule_Create2` with *module_api_version* set to "
":const:`PYTHON_API_VERSION`."
msgstr ""

#: ../../c-api/module.rst:233
msgid ""
"Create a new module object, given the definition in *def*, assuming the "
"API version *module_api_version*.  If that version does not match the "
"version of the running interpreter, a :exc:`RuntimeWarning` is emitted."
msgstr ""

#: ../../c-api/module.rst:239
msgid ""
"Most uses of this function should be using :c:func:`PyModule_Create` "
"instead; only use this if you are sure you need it."
msgstr ""

#: ../../c-api/module.rst:242
msgid ""
"Before it is returned from in the initialization function, the resulting "
"module object is typically populated using functions like "
":c:func:`PyModule_AddObject`."
msgstr ""

#: ../../c-api/module.rst:248
msgid "Multi-phase initialization"
msgstr ""

#: ../../c-api/module.rst:250
msgid ""
"An alternate way to specify extensions is to request \"multi-phase "
"initialization\". Extension modules created this way behave more like "
"Python modules: the initialization is split between the *creation phase*,"
" when the module object is created, and the *execution phase*, when it is"
" populated. The distinction is similar to the :py:meth:`__new__` and "
":py:meth:`__init__` methods of classes."
msgstr ""

#: ../../c-api/module.rst:257
msgid ""
"Unlike modules created using single-phase initialization, these modules "
"are not singletons: if the *sys.modules* entry is removed and the module "
"is re-imported, a new module object is created, and the old module is "
"subject to normal garbage collection -- as with Python modules. By "
"default, multiple modules created from the same definition should be "
"independent: changes to one should not affect the others. This means that"
" all state should be specific to the module object (using e.g. using "
":c:func:`PyModule_GetState`), or its contents (such as the module's "
":attr:`__dict__` or individual classes created with "
":c:func:`PyType_FromSpec`)."
msgstr ""

#: ../../c-api/module.rst:267
msgid ""
"All modules created using multi-phase initialization are expected to "
"support :ref:`sub-interpreters <sub-interpreter-support>`. Making sure "
"multiple modules are independent is typically enough to achieve this."
msgstr ""

#: ../../c-api/module.rst:271
msgid ""
"To request multi-phase initialization, the initialization function "
"(PyInit_modulename) returns a :c:type:`PyModuleDef` instance with non-"
"empty :c:member:`~PyModuleDef.m_slots`. Before it is returned, the "
"``PyModuleDef`` instance must be initialized with the following function:"
msgstr ""

#: ../../c-api/module.rst:278
msgid ""
"Ensures a module definition is a properly initialized Python object that "
"correctly reports its type and reference count."
msgstr ""

#: ../../c-api/module.rst:281
msgid "Returns *def* cast to ``PyObject*``, or ``NULL`` if an error occurred."
msgstr ""

#: ../../c-api/module.rst:285
msgid ""
"The *m_slots* member of the module definition must point to an array of "
"``PyModuleDef_Slot`` structures:"
msgstr ""

#: ../../c-api/module.rst:292
msgid "A slot ID, chosen from the available values explained below."
msgstr ""

#: ../../c-api/module.rst:296
msgid "Value of the slot, whose meaning depends on the slot ID."
msgstr ""

#: ../../c-api/module.rst:300
msgid "The *m_slots* array must be terminated by a slot with id 0."
msgstr ""

#: ../../c-api/module.rst:302
msgid "The available slot types are:"
msgstr ""

#: ../../c-api/module.rst:306
msgid ""
"Specifies a function that is called to create the module object itself. "
"The *value* pointer of this slot must point to a function of the "
"signature:"
msgstr ""

#: ../../c-api/module.rst:311
msgid ""
"The function receives a :py:class:`~importlib.machinery.ModuleSpec` "
"instance, as defined in :PEP:`451`, and the module definition. It should "
"return a new module object, or set an error and return ``NULL``."
msgstr ""

#: ../../c-api/module.rst:316
msgid ""
"This function should be kept minimal. In particular, it should not call "
"arbitrary Python code, as trying to import the same module again may "
"result in an infinite loop."
msgstr ""

#: ../../c-api/module.rst:320
msgid ""
"Multiple ``Py_mod_create`` slots may not be specified in one module "
"definition."
msgstr ""

#: ../../c-api/module.rst:323
msgid ""
"If ``Py_mod_create`` is not specified, the import machinery will create a"
" normal module object using :c:func:`PyModule_New`. The name is taken "
"from *spec*, not the definition, to allow extension modules to "
"dynamically adjust to their place in the module hierarchy and be imported"
" under different names through symlinks, all while sharing a single "
"module definition."
msgstr ""

#: ../../c-api/module.rst:329
msgid ""
"There is no requirement for the returned object to be an instance of "
":c:type:`PyModule_Type`. Any type can be used, as long as it supports "
"setting and getting import-related attributes. However, only "
"``PyModule_Type`` instances may be returned if the ``PyModuleDef`` has "
"non-``NULL`` ``m_traverse``, ``m_clear``, ``m_free``; non-zero "
"``m_size``; or slots other than ``Py_mod_create``."
msgstr ""

#: ../../c-api/module.rst:338
msgid ""
"Specifies a function that is called to *execute* the module. This is "
"equivalent to executing the code of a Python module: typically, this "
"function adds classes and constants to the module. The signature of the "
"function is:"
msgstr ""

#: ../../c-api/module.rst:345
msgid ""
"If multiple ``Py_mod_exec`` slots are specified, they are processed in "
"the order they appear in the *m_slots* array."
msgstr ""

#: ../../c-api/module.rst:348
msgid "See :PEP:`489` for more details on multi-phase initialization."
msgstr ""

#: ../../c-api/module.rst:351
msgid "Low-level module creation functions"
msgstr ""

#: ../../c-api/module.rst:353
msgid ""
"The following functions are called under the hood when using multi-phase "
"initialization. They can be used directly, for example when creating "
"module objects dynamically. Note that both ``PyModule_FromDefAndSpec`` "
"and ``PyModule_ExecDef`` must be called to fully initialize a module."
msgstr ""

#: ../../c-api/module.rst:360
msgid ""
"Create a new module object, given the definition in *module* and the "
"ModuleSpec *spec*.  This behaves like :c:func:`PyModule_FromDefAndSpec2` "
"with *module_api_version* set to :const:`PYTHON_API_VERSION`."
msgstr ""

#: ../../c-api/module.rst:368
msgid ""
"Create a new module object, given the definition in *module* and the "
"ModuleSpec *spec*, assuming the API version *module_api_version*. If that"
" version does not match the version of the running interpreter, a "
":exc:`RuntimeWarning` is emitted."
msgstr ""

#: ../../c-api/module.rst:375
msgid ""
"Most uses of this function should be using "
":c:func:`PyModule_FromDefAndSpec` instead; only use this if you are sure "
"you need it."
msgstr ""

#: ../../c-api/module.rst:382
msgid "Process any execution slots (:c:data:`Py_mod_exec`) given in *def*."
msgstr ""

#: ../../c-api/module.rst:388
msgid ""
"Set the docstring for *module* to *docstring*. This function is called "
"automatically when creating a module from ``PyModuleDef``, using either "
"``PyModule_Create`` or ``PyModule_FromDefAndSpec``."
msgstr ""

#: ../../c-api/module.rst:397
msgid ""
"Add the functions from the ``NULL`` terminated *functions* array to "
"*module*. Refer to the :c:type:`PyMethodDef` documentation for details on"
" individual entries (due to the lack of a shared module namespace, module"
" level \"functions\" implemented in C typically receive the module as "
"their first parameter, making them similar to instance methods on Python "
"classes). This function is called automatically when creating a module "
"from ``PyModuleDef``, using either ``PyModule_Create`` or "
"``PyModule_FromDefAndSpec``."
msgstr ""

#: ../../c-api/module.rst:409
msgid "Support functions"
msgstr ""

#: ../../c-api/module.rst:411
msgid ""
"The module initialization function (if using single phase initialization)"
" or a function called from a module execution slot (if using multi-phase "
"initialization), can use the following functions to help initialize the "
"module state:"
msgstr ""

#: ../../c-api/module.rst:418
msgid ""
"Add an object to *module* as *name*.  This is a convenience function "
"which can be used from the module's initialization function.  This steals"
" a reference to *value* on success.  Return ``-1`` on error, ``0`` on "
"success."
msgstr ""

#: ../../c-api/module.rst:424
msgid ""
"Unlike other functions that steal references, ``PyModule_AddObject()`` "
"only decrements the reference count of *value* **on success**."
msgstr ""

#: ../../c-api/module.rst:427
msgid ""
"This means that its return value must be checked, and calling code must "
":c:func:`Py_DECREF` *value* manually on error. Example usage::"
msgstr ""

#: ../../c-api/module.rst:439
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function"
" can be used from the module's initialization function. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:446
msgid ""
"Add a string constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function.  The string "
"*value* must be ``NULL``-terminated.  Return ``-1`` on error, ``0`` on "
"success."
msgstr ""

#: ../../c-api/module.rst:453
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the "
"int constant *AF_INET* with the value of *AF_INET* to *module*. Return "
"``-1`` on error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:461
msgid "Add a string constant to *module*."
msgstr ""

#: ../../c-api/module.rst:465
msgid "Module lookup"
msgstr ""

#: ../../c-api/module.rst:467
msgid ""
"Single-phase initialization creates singleton modules that can be looked "
"up in the context of the current interpreter. This allows the module "
"object to be retrieved later with only a reference to the module "
"definition."
msgstr ""

#: ../../c-api/module.rst:471
msgid ""
"These functions will not work on modules created using multi-phase "
"initialization, since multiple such modules can be created from a single "
"definition."
msgstr ""

#: ../../c-api/module.rst:476
msgid ""
"Returns the module object that was created from *def* for the current "
"interpreter. This method requires that the module object has been "
"attached to the interpreter state with :c:func:`PyState_AddModule` "
"beforehand. In case the corresponding module object is not found or has "
"not been attached to the interpreter state yet, it returns ``NULL``."
msgstr ""

#: ../../c-api/module.rst:483
msgid ""
"Attaches the module object passed to the function to the interpreter "
"state. This allows the module object to be accessible via "
":c:func:`PyState_FindModule`."
msgstr ""

#: ../../c-api/module.rst:486
msgid "Only effective on modules created using single-phase initialization."
msgstr ""

#: ../../c-api/module.rst:488
msgid ""
"Python calls ``PyState_AddModule`` automatically after importing a "
"module, so it is unnecessary (but harmless) to call it from module "
"initialization code. An explicit call is needed only if the module's own "
"init code subsequently calls ``PyState_FindModule``. The function is "
"mainly intended for implementing alternative import mechanisms (either by"
" calling it directly, or by referring to its implementation for details "
"of the required state updates)."
msgstr ""

#: ../../c-api/module.rst:496
msgid "Return 0 on success or -1 on failure."
msgstr ""

#: ../../c-api/module.rst:502
msgid ""
"Removes the module object created from *def* from the interpreter state. "
"Return 0 on success or -1 on failure."
msgstr ""

#: ../../c-api/none.rst:6
msgid "The ``None`` Object"
msgstr ""

#: ../../c-api/none.rst:10
msgid ""
"Note that the :c:type:`PyTypeObject` for ``None`` is not directly exposed"
" in the Python/C API.  Since ``None`` is a singleton, testing for object "
"identity (using ``==`` in C) is sufficient. There is no "
":c:func:`PyNone_Check` function for the same reason."
msgstr ""

#: ../../c-api/none.rst:18
msgid ""
"The Python ``None`` object, denoting lack of value.  This object has no "
"methods. It needs to be treated just like any other object with respect "
"to reference counts."
msgstr ""

#: ../../c-api/none.rst:25
msgid ""
"Properly handle returning :c:data:`Py_None` from within a C function "
"(that is, increment the reference count of ``None`` and return it.)"
msgstr ""

#: ../../c-api/number.rst:6
msgid "Number Protocol"
msgstr ""

#: ../../c-api/number.rst:11
msgid ""
"Returns ``1`` if the object *o* provides numeric protocols, and false "
"otherwise. This function always succeeds."
msgstr ""

#: ../../c-api/number.rst:14
msgid "Returns ``1`` if *o* is an index integer."
msgstr ""

#: ../../c-api/number.rst:20
msgid ""
"Returns the result of adding *o1* and *o2*, or ``NULL`` on failure.  This"
" is the equivalent of the Python expression ``o1 + o2``."
msgstr ""

#: ../../c-api/number.rst:26
msgid ""
"Returns the result of subtracting *o2* from *o1*, or ``NULL`` on failure."
"  This is the equivalent of the Python expression ``o1 - o2``."
msgstr ""

#: ../../c-api/number.rst:32
msgid ""
"Returns the result of multiplying *o1* and *o2*, or ``NULL`` on failure."
"  This is the equivalent of the Python expression ``o1 * o2``."
msgstr ""

#: ../../c-api/number.rst:38
msgid ""
"Returns the result of matrix multiplication on *o1* and *o2*, or ``NULL``"
" on failure.  This is the equivalent of the Python expression ``o1 @ "
"o2``."
msgstr ""

#: ../../c-api/number.rst:46
msgid ""
"Return the floor of *o1* divided by *o2*, or ``NULL`` on failure.  This "
"is equivalent to the \"classic\" division of integers."
msgstr ""

#: ../../c-api/number.rst:52
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* "
"divided by *o2*, or ``NULL`` on failure.  The return value is "
"\"approximate\" because binary floating point numbers are approximate; it"
" is not possible to represent all real numbers in base two.  This "
"function can return a floating point value when passed two integers."
msgstr ""

#: ../../c-api/number.rst:61
#, python-format
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or ``NULL`` on failure.  "
"This is the equivalent of the Python expression ``o1 % o2``."
msgstr ""

#: ../../c-api/number.rst:69
msgid ""
"See the built-in function :func:`divmod`. Returns ``NULL`` on failure.  "
"This is the equivalent of the Python expression ``divmod(o1, o2)``."
msgstr ""

#: ../../c-api/number.rst:77
msgid ""
"See the built-in function :func:`pow`. Returns ``NULL`` on failure.  This"
" is the equivalent of the Python expression ``pow(o1, o2, o3)``, where "
"*o3* is optional. If *o3* is to be ignored, pass :c:data:`Py_None` in its"
" place (passing ``NULL`` for *o3* would cause an illegal memory access)."
msgstr ""

#: ../../c-api/number.rst:85
msgid ""
"Returns the negation of *o* on success, or ``NULL`` on failure. This is "
"the equivalent of the Python expression ``-o``."
msgstr ""

#: ../../c-api/number.rst:91
msgid ""
"Returns *o* on success, or ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``+o``."
msgstr ""

#: ../../c-api/number.rst:99
msgid ""
"Returns the absolute value of *o*, or ``NULL`` on failure.  This is the "
"equivalent of the Python expression ``abs(o)``."
msgstr ""

#: ../../c-api/number.rst:105
msgid ""
"Returns the bitwise negation of *o* on success, or ``NULL`` on failure.  "
"This is the equivalent of the Python expression ``~o``."
msgstr ""

#: ../../c-api/number.rst:111
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or ``NULL`` "
"on failure.  This is the equivalent of the Python expression ``o1 << "
"o2``."
msgstr ""

#: ../../c-api/number.rst:117
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or ``NULL``"
" on failure.  This is the equivalent of the Python expression ``o1 >> "
"o2``."
msgstr ""

#: ../../c-api/number.rst:123
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 & o2``."
msgstr ""

#: ../../c-api/number.rst:129
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or "
"``NULL`` on failure.  This is the equivalent of the Python expression "
"``o1 ^ o2``."
msgstr ""

#: ../../c-api/number.rst:135
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 | o2``."
msgstr ""

#: ../../c-api/number.rst:141
msgid ""
"Returns the result of adding *o1* and *o2*, or ``NULL`` on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 += o2``."
msgstr ""

#: ../../c-api/number.rst:148
msgid ""
"Returns the result of subtracting *o2* from *o1*, or ``NULL`` on failure."
"  The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 -= o2``."
msgstr ""

#: ../../c-api/number.rst:155
msgid ""
"Returns the result of multiplying *o1* and *o2*, or ``NULL`` on failure."
"  The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 *= o2``."
msgstr ""

#: ../../c-api/number.rst:162
msgid ""
"Returns the result of matrix multiplication on *o1* and *o2*, or ``NULL``"
" on failure.  The operation is done *in-place* when *o1* supports it.  "
"This is the equivalent of the Python statement ``o1 @= o2``."
msgstr ""

#: ../../c-api/number.rst:171
msgid ""
"Returns the mathematical floor of dividing *o1* by *o2*, or ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is"
" the equivalent of the Python statement ``o1 //= o2``."
msgstr ""

#: ../../c-api/number.rst:178
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* "
"divided by *o2*, or ``NULL`` on failure.  The return value is "
"\"approximate\" because binary floating point numbers are approximate; it"
" is not possible to represent all real numbers in base two.  This "
"function can return a floating point value when passed two integers.  The"
" operation is done *in-place* when *o1* supports it."
msgstr ""

#: ../../c-api/number.rst:187
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or ``NULL`` on failure.  "
"The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 %= o2``."
msgstr ""

#: ../../c-api/number.rst:196
msgid ""
"See the built-in function :func:`pow`. Returns ``NULL`` on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 **= o2`` when o3 is "
":c:data:`Py_None`, or an in-place variant of ``pow(o1, o2, o3)`` "
"otherwise. If *o3* is to be ignored, pass :c:data:`Py_None` in its place "
"(passing ``NULL`` for *o3* would cause an illegal memory access)."
msgstr ""

#: ../../c-api/number.rst:205
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or ``NULL`` "
"on failure.  The operation is done *in-place* when *o1* supports it.  "
"This is the equivalent of the Python statement ``o1 <<= o2``."
msgstr ""

#: ../../c-api/number.rst:212
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or ``NULL``"
" on failure.  The operation is done *in-place* when *o1* supports it.  "
"This is the equivalent of the Python statement ``o1 >>= o2``."
msgstr ""

#: ../../c-api/number.rst:219
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is"
" the equivalent of the Python statement ``o1 &= o2``."
msgstr ""

#: ../../c-api/number.rst:226
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or "
"``NULL`` on failure.  The operation is done *in-place* when *o1* supports"
" it.  This is the equivalent of the Python statement ``o1 ^= o2``."
msgstr ""

#: ../../c-api/number.rst:233
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or ``NULL`` on "
"failure.  The operation is done *in-place* when *o1* supports it.  This "
"is the equivalent of the Python statement ``o1 |= o2``."
msgstr ""

#: ../../c-api/number.rst:242
msgid ""
"Returns the *o* converted to an integer object on success, or ``NULL`` on"
" failure.  This is the equivalent of the Python expression ``int(o)``."
msgstr ""

#: ../../c-api/number.rst:250
msgid ""
"Returns the *o* converted to a float object on success, or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``float(o)``."
msgstr ""

#: ../../c-api/number.rst:256
msgid ""
"Returns the *o* converted to a Python int on success or ``NULL`` with a "
":exc:`TypeError` exception raised on failure."
msgstr ""

#: ../../c-api/number.rst:262
msgid ""
"Returns the integer *n* converted to base *base* as a string.  The *base*"
" argument must be one of 2, 8, 10, or 16.  For base 2, 8, or 16, the "
"returned string is prefixed with a base marker of ``'0b'``, ``'0o'``, or "
"``'0x'``, respectively.  If *n* is not a Python int, it is converted with"
" :c:func:`PyNumber_Index` first."
msgstr ""

#: ../../c-api/number.rst:271
msgid ""
"Returns *o* converted to a Py_ssize_t value if *o* can be interpreted as "
"an integer.  If the call fails, an exception is raised and ``-1`` is "
"returned."
msgstr ""

#: ../../c-api/number.rst:274
msgid ""
"If *o* can be converted to a Python int but the attempt to convert to a "
"Py_ssize_t value would raise an :exc:`OverflowError`, then the *exc* "
"argument is the type of exception that will be raised (usually "
":exc:`IndexError` or :exc:`OverflowError`).  If *exc* is ``NULL``, then "
"the exception is cleared and the value is clipped to ``PY_SSIZE_T_MIN`` "
"for a negative integer or ``PY_SSIZE_T_MAX`` for a positive integer."
msgstr ""

#: ../../c-api/number.rst:284
msgid ""
"Returns ``1`` if *o* is an index integer (has the nb_index slot of  the "
"tp_as_number structure filled in), and ``0`` otherwise. This function "
"always succeeds."
msgstr ""

#: ../../c-api/objbuffer.rst:4
msgid "Old Buffer Protocol"
msgstr ""

#: ../../c-api/objbuffer.rst:8
msgid ""
"These functions were part of the \"old buffer protocol\" API in Python 2."
" In Python 3, this protocol doesn't exist anymore but the functions are "
"still exposed to ease porting 2.x code.  They act as a compatibility "
"wrapper around the :ref:`new buffer protocol <bufferobjects>`, but they "
"don't give you control over the lifetime of the resources acquired when a"
" buffer is exported."
msgstr ""

#: ../../c-api/objbuffer.rst:15
msgid ""
"Therefore, it is recommended that you call :c:func:`PyObject_GetBuffer` "
"(or the ``y*`` or ``w*`` :ref:`format codes <arg-parsing>` with the "
":c:func:`PyArg_ParseTuple` family of functions) to get a buffer view over"
" an object, and :c:func:`PyBuffer_Release` when the buffer view can be "
"released."
msgstr ""

#: ../../c-api/objbuffer.rst:23
msgid ""
"Returns a pointer to a read-only memory location usable as character-"
"based input.  The *obj* argument must support the single-segment "
"character buffer interface.  On success, returns ``0``, sets *buffer* to "
"the memory location and *buffer_len* to the buffer length.  Returns "
"``-1`` and sets a :exc:`TypeError` on error."
msgstr ""

#: ../../c-api/objbuffer.rst:32
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary "
"data. The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory "
"location and *buffer_len* to the buffer length.  Returns ``-1`` and sets "
"a :exc:`TypeError` on error."
msgstr ""

#: ../../c-api/objbuffer.rst:41
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer "
"interface. Otherwise returns ``0``.  This function always succeeds."
msgstr ""

#: ../../c-api/objbuffer.rst:44
msgid ""
"Note that this function tries to get and release a buffer, and exceptions"
" which occur while calling corresponding functions will get suppressed. "
"To get error reporting use :c:func:`PyObject_GetBuffer()` instead."
msgstr ""

#: ../../c-api/objbuffer.rst:51
msgid ""
"Returns a pointer to a writable memory location.  The *obj* argument must"
" support the single-segment, character buffer interface.  On success, "
"returns ``0``, sets *buffer* to the memory location and *buffer_len* to "
"the buffer length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""

#: ../../c-api/object.rst:6
msgid "Object Protocol"
msgstr ""

#: ../../c-api/object.rst:11
msgid ""
"The ``NotImplemented`` singleton, used to signal that an operation is not"
" implemented for the given type combination."
msgstr ""

#: ../../c-api/object.rst:17
msgid ""
"Properly handle returning :c:data:`Py_NotImplemented` from within a C "
"function (that is, increment the reference count of NotImplemented and "
"return it)."
msgstr ""

#: ../../c-api/object.rst:24
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :const:`Py_PRINT_RAW`; if given, the :func:`str` "
"of the object is written instead of the :func:`repr`."
msgstr ""

#: ../../c-api/object.rst:32 ../../c-api/object.rst:43
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise."
"  This is equivalent to the Python expression ``hasattr(o, attr_name)``."
"  This function always succeeds."
msgstr ""

#: ../../c-api/object.rst:36
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and "
":meth:`__getattribute__` methods will get suppressed. To get error "
"reporting use :c:func:`PyObject_GetAttr()` instead."
msgstr ""

#: ../../c-api/object.rst:47
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and "
":meth:`__getattribute__` methods and creating a temporary string object "
"will get suppressed. To get error reporting use "
":c:func:`PyObject_GetAttrString()` instead."
msgstr ""

#: ../../c-api/object.rst:55
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure.  This is the "
"equivalent of the Python expression ``o.attr_name``."
msgstr ""

#: ../../c-api/object.rst:62
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure. This is the "
"equivalent of the Python expression ``o.attr_name``."
msgstr ""

#: ../../c-api/object.rst:69
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the "
"dictionary of classes in the object's MRO as well as an attribute in the "
"object's :attr:`~object.__dict__` (if present).  As outlined in "
":ref:`descriptors`, data descriptors take preference over instance "
"attributes, while non-data descriptors don't.  Otherwise, an "
":exc:`AttributeError` is raised."
msgstr ""

#: ../../c-api/object.rst:79 ../../c-api/object.rst:90
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Raise an exception and return ``-1`` on failure; return ``0`` "
"on success.  This is the equivalent of the Python statement ``o.attr_name"
" = v``."
msgstr ""

#: ../../c-api/object.rst:84
msgid ""
"If *v* is ``NULL``, the attribute is deleted, however this feature is "
"deprecated in favour of using :c:func:`PyObject_DelAttr`."
msgstr ""

#: ../../c-api/object.rst:95
msgid ""
"If *v* is ``NULL``, the attribute is deleted, however this feature is "
"deprecated in favour of using :c:func:`PyObject_DelAttrString`."
msgstr ""

#: ../../c-api/object.rst:101
msgid ""
"Generic attribute setter and deleter function that is meant to be put "
"into a type object's :c:member:`~PyTypeObject.tp_setattro` slot.  It "
"looks for a data descriptor in the dictionary of classes in the object's "
"MRO, and if found it takes preference over setting or deleting the "
"attribute in the instance dictionary. Otherwise, the attribute is set or "
"deleted in the object's :attr:`~object.__dict__` (if present). On "
"success, ``0`` is returned, otherwise an :exc:`AttributeError` is raised "
"and ``-1`` is returned."
msgstr ""

#: ../../c-api/object.rst:113 ../../c-api/object.rst:119
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del "
"o.attr_name``."
msgstr ""

#: ../../c-api/object.rst:125
msgid ""
"A generic implementation for the getter of a ``__dict__`` descriptor. It "
"creates the dictionary if necessary."
msgstr ""

#: ../../c-api/object.rst:133
msgid ""
"A generic implementation for the setter of a ``__dict__`` descriptor. "
"This implementation does not allow the dictionary to be deleted."
msgstr ""

#: ../../c-api/object.rst:141
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by "
"*opid*, which must be one of :const:`Py_LT`, :const:`Py_LE`, "
":const:`Py_EQ`, :const:`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, "
"corresponding to ``<``, ``<=``, ``==``, ``!=``, ``>``, or ``>=`` "
"respectively. This is the equivalent of the Python expression ``o1 op "
"o2``, where ``op`` is the operator corresponding to *opid*. Returns the "
"value of the comparison on success, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/object.rst:151
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by "
"*opid*, which must be one of :const:`Py_LT`, :const:`Py_LE`, "
":const:`Py_EQ`, :const:`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, "
"corresponding to ``<``, ``<=``, ``==``, ``!=``, ``>``, or ``>=`` "
"respectively. Returns ``-1`` on error, ``0`` if the result is false, "
"``1`` otherwise. This is the equivalent of the Python expression ``o1 op "
"o2``, where ``op`` is the operator corresponding to *opid*."
msgstr ""

#: ../../c-api/object.rst:160
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :const:`Py_EQ` and ``0`` for :const:`Py_NE`."
msgstr ""

#: ../../c-api/object.rst:167
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``repr(o)``.  Called by the :func:`repr` built-"
"in function."
msgstr ""

#: ../../c-api/object.rst:171 ../../c-api/object.rst:195
#: ../../c-api/veryhigh.rst:345
msgid ""
"This function now includes a debug assertion to help ensure that it does "
"not silently discard an active exception."
msgstr ""

#: ../../c-api/object.rst:179
msgid ""
"As :c:func:`PyObject_Repr`, compute a string representation of object "
"*o*, but escape the non-ASCII characters in the string returned by "
":c:func:`PyObject_Repr` with ``\\x``, ``\\u`` or ``\\U`` escapes.  This "
"generates a string similar to that returned by :c:func:`PyObject_Repr` in"
" Python 2. Called by the :func:`ascii` built-in function."
msgstr ""

#: ../../c-api/object.rst:190
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``str(o)``.  Called by the :func:`str` built-in "
"function and, therefore, by the :func:`print` function."
msgstr ""

#: ../../c-api/object.rst:203
msgid ""
"Compute a bytes representation of object *o*.  ``NULL`` is returned on "
"failure and a bytes object on success.  This is equivalent to the Python "
"expression ``bytes(o)``, when *o* is not an integer.  Unlike "
"``bytes(o)``, a TypeError is raised when *o* is an integer instead of a "
"zero-initialized bytes object."
msgstr ""

#: ../../c-api/object.rst:212
msgid ""
"Return ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise return ``0``.  In case of an error, return ``-1``."
msgstr ""

#: ../../c-api/object.rst:215 ../../c-api/object.rst:234
msgid ""
"If *cls* is a tuple, the check will be done against every entry in *cls*."
" The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``."
msgstr ""

#: ../../c-api/object.rst:219
msgid ""
"If *cls* has a :meth:`~class.__subclasscheck__` method, it will be called"
" to determine the subclass status as described in :pep:`3119`.  "
"Otherwise, *derived* is a subclass of *cls* if it is a direct or indirect"
" subclass, i.e. contained in ``cls.__mro__``."
msgstr ""

#: ../../c-api/object.rst:224
msgid ""
"Normally only class objects, i.e. instances of :class:`type` or a derived"
" class, are considered classes.  However, objects can override this by "
"having a :attr:`__bases__` attribute (which must be a tuple of base "
"classes)."
msgstr ""

#: ../../c-api/object.rst:231
msgid ""
"Return ``1`` if *inst* is an instance of the class *cls* or a subclass of"
" *cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception."
msgstr ""

#: ../../c-api/object.rst:238
msgid ""
"If *cls* has a :meth:`~class.__instancecheck__` method, it will be called"
" to determine the subclass status as described in :pep:`3119`.  "
"Otherwise, *inst* is an instance of *cls* if its class is a subclass of "
"*cls*."
msgstr ""

#: ../../c-api/object.rst:242
msgid ""
"An instance *inst* can override what is considered its class by having a "
":attr:`__class__` attribute."
msgstr ""

#: ../../c-api/object.rst:245
msgid ""
"An object *cls* can override if it is considered a class, and what its "
"base classes are, by having a :attr:`__bases__` attribute (which must be "
"a tuple of base classes)."
msgstr ""

#: ../../c-api/object.rst:252
msgid ""
"Determine if the object *o* is callable.  Return ``1`` if the object is "
"callable and ``0`` otherwise.  This function always succeeds."
msgstr ""

#: ../../c-api/object.rst:258
msgid ""
"Call a callable Python object *callable*, with arguments given by the "
"tuple *args*, and named arguments given by the dictionary *kwargs*."
msgstr ""

#: ../../c-api/object.rst:261
msgid ""
"*args* must not be ``NULL``, use an empty tuple if no arguments are "
"needed. If no named arguments are needed, *kwargs* can be ``NULL``."
msgstr ""

#: ../../c-api/object.rst:264 ../../c-api/object.rst:276
#: ../../c-api/object.rst:288 ../../c-api/object.rst:308
#: ../../c-api/object.rst:327 ../../c-api/object.rst:341
#: ../../c-api/object.rst:365
msgid ""
"Return the result of the call on success, or raise an exception and "
"return ``NULL`` on failure."
msgstr ""

#: ../../c-api/object.rst:267
msgid ""
"This is the equivalent of the Python expression: ``callable(*args, "
"**kwargs)``."
msgstr ""

#: ../../c-api/object.rst:273
msgid ""
"Call a callable Python object *callable*, with arguments given by the "
"tuple *args*.  If no arguments are needed, then *args* can be ``NULL``."
msgstr ""

#: ../../c-api/object.rst:279 ../../c-api/object.rst:291
msgid "This is the equivalent of the Python expression: ``callable(*args)``."
msgstr ""

#: ../../c-api/object.rst:284
msgid ""
"Call a callable Python object *callable*, with a variable number of C "
"arguments. The C arguments are described using a :c:func:`Py_BuildValue` "
"style format string.  The format can be ``NULL``, indicating that no "
"arguments are provided."
msgstr ""

#: ../../c-api/object.rst:293
msgid ""
"Note that if you only pass :c:type:`PyObject *` args, "
":c:func:`PyObject_CallFunctionObjArgs` is a faster alternative."
msgstr ""

#: ../../c-api/object.rst:296
msgid "The type of *format* was changed from ``char *``."
msgstr ""

#: ../../c-api/object.rst:302
msgid ""
"Call the method named *name* of object *obj* with a variable number of C "
"arguments.  The C arguments are described by a :c:func:`Py_BuildValue` "
"format string that should  produce a tuple."
msgstr ""

#: ../../c-api/object.rst:306
msgid "The format can be ``NULL``, indicating that no arguments are provided."
msgstr ""

#: ../../c-api/object.rst:311
msgid ""
"This is the equivalent of the Python expression: ``obj.name(arg1, arg2, "
"...)``."
msgstr ""

#: ../../c-api/object.rst:314
msgid ""
"Note that if you only pass :c:type:`PyObject *` args, "
":c:func:`PyObject_CallMethodObjArgs` is a faster alternative."
msgstr ""

#: ../../c-api/object.rst:317
msgid "The types of *name* and *format* were changed from ``char *``."
msgstr ""

#: ../../c-api/object.rst:323
msgid ""
"Call a callable Python object *callable*, with a variable number of "
":c:type:`PyObject*` arguments.  The arguments are provided as a variable "
"number of parameters followed by ``NULL``."
msgstr ""

#: ../../c-api/object.rst:330
msgid ""
"This is the equivalent of the Python expression: ``callable(arg1, arg2, "
"...)``."
msgstr ""

#: ../../c-api/object.rst:336
msgid ""
"Calls a method of the Python object *obj*, where the name of the method "
"is given as a Python string object in *name*.  It is called with a "
"variable number of :c:type:`PyObject*` arguments.  The arguments are "
"provided as a variable number of parameters followed by ``NULL``."
msgstr ""

#: ../../c-api/object.rst:347
msgid ""
"Call a callable Python object *callable*, using :c:data:`vectorcall "
"<PyTypeObject.tp_vectorcall_offset>` if possible."
msgstr ""

#: ../../c-api/object.rst:350
msgid "*args* is a C array with the positional arguments."
msgstr ""

#: ../../c-api/object.rst:352
msgid ""
"*nargsf* is the number of positional arguments plus optionally the flag "
":const:`PY_VECTORCALL_ARGUMENTS_OFFSET` (see below). To get actual number"
" of arguments, use :c:func:`PyVectorcall_NARGS(nargsf) "
"<PyVectorcall_NARGS>`."
msgstr ""

#: ../../c-api/object.rst:357
msgid ""
"*kwnames* can be either ``NULL`` (no keyword arguments) or a tuple of "
"keyword names. In the latter case, the values of the keyword arguments "
"are stored in *args* after the positional arguments. The number of "
"keyword arguments does not influence *nargsf*."
msgstr ""

#: ../../c-api/object.rst:362
msgid ""
"*kwnames* must contain only objects of type ``str`` (not a subclass), and"
" all keys must be unique."
msgstr ""

#: ../../c-api/object.rst:368
msgid ""
"This uses the vectorcall protocol if the callable supports it; otherwise,"
" the arguments are converted to use :c:member:`~PyTypeObject.tp_call`."
msgstr ""

#: ../../c-api/object.rst:374 ../../c-api/object.rst:416
msgid ""
"This function is provisional and expected to become public in Python 3.9,"
" with a different name and, possibly, changed semantics. If you use the "
"function, plan for updating your code for Python 3.9."
msgstr ""

#: ../../c-api/object.rst:382
msgid ""
"If set in a vectorcall *nargsf* argument, the callee is allowed to "
"temporarily change ``args[-1]``. In other words, *args* points to "
"argument 1 (not 0) in the allocated vector. The callee must restore the "
"value of ``args[-1]`` before returning."
msgstr ""

#: ../../c-api/object.rst:387
msgid ""
"Whenever they can do so cheaply (without additional allocation), callers "
"are encouraged to use :const:`PY_VECTORCALL_ARGUMENTS_OFFSET`. Doing so "
"will allow callables such as bound methods to make their onward calls "
"(which include a prepended *self* argument) cheaply."
msgstr ""

#: ../../c-api/object.rst:396
msgid ""
"Given a vectorcall *nargsf* argument, return the actual number of "
"arguments. Currently equivalent to ``nargsf & "
"~PY_VECTORCALL_ARGUMENTS_OFFSET``."
msgstr ""

#: ../../c-api/object.rst:404
msgid ""
"Same as :c:func:`_PyObject_Vectorcall` except that the keyword arguments "
"are passed as a dictionary in *kwdict*. This may be ``NULL`` if there are"
" no keyword arguments."
msgstr ""

#: ../../c-api/object.rst:408
msgid ""
"For callables supporting :c:data:`vectorcall "
"<PyTypeObject.tp_vectorcall_offset>`, the arguments are internally "
"converted to the vectorcall convention. Therefore, this function adds "
"some overhead compared to :c:func:`_PyObject_Vectorcall`. It should only "
"be used if the caller already has a dictionary ready to use."
msgstr ""

#: ../../c-api/object.rst:427
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""

#: ../../c-api/object.rst:430
msgid ""
"The return type is now Py_hash_t.  This is a signed integer the same size"
" as Py_ssize_t."
msgstr ""

#: ../../c-api/object.rst:437
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not hashable and "
"return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the "
"interpreter that it is not hashable."
msgstr ""

#: ../../c-api/object.rst:445
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On"
" failure, return ``-1``."
msgstr ""

#: ../../c-api/object.rst:452
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr ""

#: ../../c-api/object.rst:461
msgid ""
"When *o* is non-``NULL``, returns a type object corresponding to the "
"object type of object *o*. On failure, raises :exc:`SystemError` and "
"returns ``NULL``.  This is equivalent to the Python expression "
"``type(o)``. This function increments the reference count of the return "
"value. There's really no reason to use this function instead of the "
"common expression ``o->ob_type``, which returns a pointer of type "
":c:type:`PyTypeObject*`, except when the incremented reference count is "
"needed."
msgstr ""

#: ../../c-api/object.rst:472
msgid ""
"Return true if the object *o* is of type *type* or a subtype of *type*.  "
"Both parameters must be non-``NULL``."
msgstr ""

#: ../../c-api/object.rst:481
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On "
"error, ``-1`` is returned.  This is the equivalent to the Python "
"expression ``len(o)``."
msgstr ""

#: ../../c-api/object.rst:488
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`~object.__length_hint__`, "
"and finally return the default value. On error return ``-1``. This is the"
" equivalent to the Python expression ``operator.length_hint(o, "
"default)``."
msgstr ""

#: ../../c-api/object.rst:498
msgid ""
"Return element of *o* corresponding to the object *key* or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""

#: ../../c-api/object.rst:504
msgid ""
"Map the object *key* to the value *v*.  Raise an exception and return "
"``-1`` on failure; return ``0`` on success.  This is the equivalent of "
"the Python statement ``o[key] = v``.  This function *does not* steal a "
"reference to *v*."
msgstr ""

#: ../../c-api/object.rst:512
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return "
"``-1`` on failure.  This is equivalent to the Python statement ``del "
"o[key]``."
msgstr ""

#: ../../c-api/object.rst:518
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"``NULL`` if there was an error.  If the argument is ``NULL``, this is "
"like the Python ``dir()``, returning the names of the current locals; in "
"this case, if no execution frame is active then ``NULL`` is returned but "
":c:func:`PyErr_Occurred` will return false."
msgstr ""

#: ../../c-api/object.rst:527
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new"
" iterator for the object argument, or the object  itself if the object is"
" already an iterator.  Raises :exc:`TypeError` and returns ``NULL`` if "
"the object cannot be iterated."
msgstr ""

#: ../../c-api/objimpl.rst:7
msgid "Object Implementation Support"
msgstr ""

#: ../../c-api/objimpl.rst:9
msgid ""
"This chapter describes the functions, types, and macros used when "
"defining new object types."
msgstr ""

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr ""

#: ../../c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of "
"Python objects."
msgstr ""

#: ../../c-api/refcounting.rst:16
msgid ""
"Increment the reference count for object *o*.  The object must not be "
"``NULL``; if you aren't sure that it isn't ``NULL``, use "
":c:func:`Py_XINCREF`."
msgstr ""

#: ../../c-api/refcounting.rst:22
msgid ""
"Increment the reference count for object *o*.  The object may be "
"``NULL``, in which case the macro has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:28
msgid ""
"Decrement the reference count for object *o*.  The object must not be "
"``NULL``; if you aren't sure that it isn't ``NULL``, use "
":c:func:`Py_XDECREF`.  If the reference count reaches zero, the object's "
"type's deallocation function (which must not be ``NULL``) is invoked."
msgstr ""

#: ../../c-api/refcounting.rst:35
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked "
"(e.g. when a class instance with a :meth:`__del__` method is "
"deallocated).  While exceptions in such code are not propagated, the "
"executed code has free access to all Python global variables.  This means"
" that any object that is reachable from a global variable should be in a "
"consistent state before :c:func:`Py_DECREF` is invoked.  For example, "
"code to delete an object from a list should copy a reference to the "
"deleted object in a temporary variable, update the list data structure, "
"and then call :c:func:`Py_DECREF` for the temporary variable."
msgstr ""

#: ../../c-api/refcounting.rst:47
msgid ""
"Decrement the reference count for object *o*.  The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is "
"the same as for :c:func:`Py_DECREF`, and the same warning applies."
msgstr ""

#: ../../c-api/refcounting.rst:54
msgid ""
"Decrement the reference count for object *o*.  The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is "
"the same as for :c:func:`Py_DECREF`, except that the argument is also set"
" to ``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with "
"respect to the object passed because the macro carefully uses a temporary"
" variable and sets the argument to ``NULL`` before decrementing its "
"reference count."
msgstr ""

#: ../../c-api/refcounting.rst:61
msgid ""
"It is a good idea to use this macro whenever decrementing the reference "
"count of an object that might be traversed during garbage collection."
msgstr ""

#: ../../c-api/refcounting.rst:65
msgid ""
"The following functions are for runtime dynamic embedding of Python: "
"``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject *o)``. They are simply "
"exported function versions of :c:func:`Py_XINCREF` and "
":c:func:`Py_XDECREF`, respectively."
msgstr ""

#: ../../c-api/refcounting.rst:70
msgid ""
"The following functions or macros are only for use within the interpreter"
" core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, "
":c:func:`_Py_NewReference`, as well as the global variable "
":c:data:`_Py_RefTotal`."
msgstr ""

#: ../../c-api/reflection.rst:6
msgid "Reflection"
msgstr ""

#: ../../c-api/reflection.rst:10
msgid ""
"Return a dictionary of the builtins in the current execution frame, or "
"the interpreter of the thread state if no frame is currently executing."
msgstr ""

#: ../../c-api/reflection.rst:16
msgid ""
"Return a dictionary of the local variables in the current execution "
"frame, or ``NULL`` if no frame is currently executing."
msgstr ""

#: ../../c-api/reflection.rst:22
msgid ""
"Return a dictionary of the global variables in the current execution "
"frame, or ``NULL`` if no frame is currently executing."
msgstr ""

#: ../../c-api/reflection.rst:28
msgid ""
"Return the current thread state's frame, which is ``NULL`` if no frame is"
" currently executing."
msgstr ""

#: ../../c-api/reflection.rst:34
msgid "Return the line number that *frame* is currently executing."
msgstr ""

#: ../../c-api/reflection.rst:39
msgid ""
"Return the name of *func* if it is a function, class or instance object, "
"else the name of *func*\\s type."
msgstr ""

#: ../../c-api/reflection.rst:45
msgid ""
"Return a description string, depending on the type of *func*. Return "
"values include \"()\" for functions and methods, \" constructor\", \" "
"instance\", and \" object\".  Concatenated with the result of "
":c:func:`PyEval_GetFuncName`, the result will be a description of *func*."
msgstr ""

#: ../../c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr ""

#: ../../c-api/sequence.rst:11
msgid ""
"Return ``1`` if the object provides sequence protocol, and ``0`` "
"otherwise. Note that it returns ``1`` for Python classes with a "
":meth:`__getitem__` method unless they are :class:`dict` subclasses since"
" in general case it is impossible to determine what the type of keys it "
"supports.  This function always succeeds."
msgstr ""

#: ../../c-api/sequence.rst:23
msgid ""
"Returns the number of objects in sequence *o* on success, and ``-1`` on "
"failure.  This is equivalent to the Python expression ``len(o)``."
msgstr ""

#: ../../c-api/sequence.rst:29
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""

#: ../../c-api/sequence.rst:35
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  This is the equivalent of the Python expression ``o"
" * count``."
msgstr ""

#: ../../c-api/sequence.rst:41
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is"
" the equivalent of the Python expression ``o1 += o2``."
msgstr ""

#: ../../c-api/sequence.rst:48
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  The operation is done *in-place* when *o* supports "
"it.  This is the equivalent of the Python expression ``o *= count``."
msgstr ""

#: ../../c-api/sequence.rst:55
msgid ""
"Return the *i*\\ th element of *o*, or ``NULL`` on failure. This is the "
"equivalent of the Python expression ``o[i]``."
msgstr ""

#: ../../c-api/sequence.rst:61
msgid ""
"Return the slice of sequence object *o* between *i1* and *i2*, or "
"``NULL`` on failure. This is the equivalent of the Python expression "
"``o[i1:i2]``."
msgstr ""

#: ../../c-api/sequence.rst:67
msgid ""
"Assign object *v* to the *i*\\ th element of *o*.  Raise an exception and"
" return ``-1`` on failure; return ``0`` on success.  This is the "
"equivalent of the Python statement ``o[i] = v``.  This function *does "
"not* steal a reference to *v*."
msgstr ""

#: ../../c-api/sequence.rst:72
msgid ""
"If *v* is ``NULL``, the element is deleted, however this feature is "
"deprecated in favour of using :c:func:`PySequence_DelItem`."
msgstr ""

#: ../../c-api/sequence.rst:78
msgid ""
"Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  "
"This is the equivalent of the Python statement ``del o[i]``."
msgstr ""

#: ../../c-api/sequence.rst:84
msgid ""
"Assign the sequence object *v* to the slice in sequence object *o* from "
"*i1* to *i2*.  This is the equivalent of the Python statement ``o[i1:i2] "
"= v``."
msgstr ""

#: ../../c-api/sequence.rst:90
msgid ""
"Delete the slice in sequence object *o* from *i1* to *i2*.  Returns "
"``-1`` on failure.  This is the equivalent of the Python statement ``del "
"o[i1:i2]``."
msgstr ""

#: ../../c-api/sequence.rst:96
msgid ""
"Return the number of occurrences of *value* in *o*, that is, return the "
"number of keys for which ``o[key] == value``.  On failure, return ``-1``."
"  This is equivalent to the Python expression ``o.count(value)``."
msgstr ""

#: ../../c-api/sequence.rst:103
msgid ""
"Determine if *o* contains *value*.  If an item in *o* is equal to "
"*value*, return ``1``, otherwise return ``0``. On error, return ``-1``.  "
"This is equivalent to the Python expression ``value in o``."
msgstr ""

#: ../../c-api/sequence.rst:110
msgid ""
"Return the first index *i* for which ``o[i] == value``.  On error, return"
" ``-1``.    This is equivalent to the Python expression "
"``o.index(value)``."
msgstr ""

#: ../../c-api/sequence.rst:116
msgid ""
"Return a list object with the same contents as the sequence or iterable "
"*o*, or ``NULL`` on failure.  The returned list is guaranteed to be new."
"  This is equivalent to the Python expression ``list(o)``."
msgstr ""

#: ../../c-api/sequence.rst:125
msgid ""
"Return a tuple object with the same contents as the sequence or iterable "
"*o*, or ``NULL`` on failure.  If *o* is a tuple, a new reference will be "
"returned, otherwise a tuple will be constructed with the appropriate "
"contents.  This is equivalent to the Python expression ``tuple(o)``."
msgstr ""

#: ../../c-api/sequence.rst:133
msgid ""
"Return the sequence or iterable *o* as an object usable by the other "
"``PySequence_Fast*`` family of functions. If the object is not a sequence"
" or iterable, raises :exc:`TypeError` with *m* as the message text. "
"Returns ``NULL`` on failure."
msgstr ""

#: ../../c-api/sequence.rst:138
msgid ""
"The ``PySequence_Fast*`` functions are thus named because they assume *o*"
" is a :c:type:`PyTupleObject` or a :c:type:`PyListObject` and access the "
"data fields of *o* directly."
msgstr ""

#: ../../c-api/sequence.rst:142
msgid ""
"As a CPython implementation detail, if *o* is already a sequence or list,"
" it will be returned."
msgstr ""

#: ../../c-api/sequence.rst:148
msgid ""
"Returns the length of *o*, assuming that *o* was returned by "
":c:func:`PySequence_Fast` and that *o* is not ``NULL``.  The size can "
"also be gotten by calling :c:func:`PySequence_Size` on *o*, but "
":c:func:`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is"
" a list or tuple."
msgstr ""

#: ../../c-api/sequence.rst:157
msgid ""
"Return the *i*\\ th element of *o*, assuming that *o* was returned by "
":c:func:`PySequence_Fast`, *o* is not ``NULL``, and that *i* is within "
"bounds."
msgstr ""

#: ../../c-api/sequence.rst:163
msgid ""
"Return the underlying array of PyObject pointers.  Assumes that *o* was "
"returned by :c:func:`PySequence_Fast` and *o* is not ``NULL``."
msgstr ""

#: ../../c-api/sequence.rst:166
msgid ""
"Note, if a list gets resized, the reallocation may relocate the items "
"array. So, only use the underlying array pointer in contexts where the "
"sequence cannot change."
msgstr ""

#: ../../c-api/sequence.rst:173
msgid ""
"Return the *i*\\ th element of *o* or ``NULL`` on failure. Faster form of"
" :c:func:`PySequence_GetItem` but without checking that "
":c:func:`PySequence_Check` on *o* is true and without adjustment for "
"negative indices."
msgstr ""

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr ""

#: ../../c-api/set.rst:15
msgid ""
"This section details the public API for :class:`set` and "
":class:`frozenset` objects.  Any functionality not listed below is best "
"accessed using the either the abstract object protocol (including "
":c:func:`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, "
":c:func:`PyObject_Hash`, :c:func:`PyObject_Repr`, "
":c:func:`PyObject_IsTrue`, :c:func:`PyObject_Print`, and "
":c:func:`PyObject_GetIter`) or the abstract number protocol (including "
":c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, "
":c:func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, "
":c:func:`PyNumber_InPlaceAnd`, :c:func:`PyNumber_InPlaceSubtract`, "
":c:func:`PyNumber_InPlaceOr`, and :c:func:`PyNumber_InPlaceXor`)."
msgstr ""

#: ../../c-api/set.rst:29
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a "
":c:type:`PyDictObject` in that it is a fixed size for small sets (much "
"like tuple storage) and will point to a separate, variable sized block of"
" memory for medium and large sized sets (much like list storage). None of"
" the fields of this structure should be considered public and are subject"
" to change.  All access should be done through the documented API rather "
"than by manipulating the values in the structure."
msgstr ""

#: ../../c-api/set.rst:40
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python "
":class:`set` type."
msgstr ""

#: ../../c-api/set.rst:46
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python "
":class:`frozenset` type."
msgstr ""

#: ../../c-api/set.rst:49
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""

#: ../../c-api/set.rst:55
msgid "Return true if *p* is a :class:`set` object or an instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:59
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype."
msgstr ""

#: ../../c-api/set.rst:64
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object,"
" or an instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` "
"object but not an instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:76
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of "
"a subtype."
msgstr ""

#: ../../c-api/set.rst:82
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*."
"  The *iterable* may be ``NULL`` to create a new empty set.  Return the "
"new set on success or ``NULL`` on failure.  Raise :exc:`TypeError` if "
"*iterable* is not actually iterable.  The constructor is also useful for "
"copying a set (``c=set(s)``)."
msgstr ""

#: ../../c-api/set.rst:91
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be ``NULL`` to create a new empty "
"frozenset.  Return the new set on success or ``NULL`` on failure.  Raise "
":exc:`TypeError` if *iterable* is not actually iterable."
msgstr ""

#: ../../c-api/set.rst:97
msgid ""
"The following functions and macros are available for instances of "
":class:`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""

#: ../../c-api/set.rst:105
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. "
"Equivalent to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if "
"*anyset* is not a :class:`set`, :class:`frozenset`, or an instance of a "
"subtype."
msgstr ""

#: ../../c-api/set.rst:112
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr ""

#: ../../c-api/set.rst:117
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`__contains__` method, this "
"function does not automatically convert unhashable sets into temporary "
"frozensets.  Raise a :exc:`TypeError` if the *key* is unhashable. Raise "
":exc:`PyExc_SystemError` if *anyset* is not a :class:`set`, "
":class:`frozenset`, or an instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:126
msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset`"
" instances (like :c:func:`PyTuple_SetItem` it can be used to fill-in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return ``0`` on success or ``-1`` on failure. Raise a :exc:`TypeError` if"
" the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room "
"to grow.  Raise a :exc:`SystemError` if *set* is not an instance of "
":class:`set` or its subtype."
msgstr ""

#: ../../c-api/set.rst:135
msgid ""
"The following functions are available for instances of :class:`set` or "
"its subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""

#: ../../c-api/set.rst:141
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), "
"and ``-1`` if an error is encountered.  Does not raise :exc:`KeyError` "
"for missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  "
"Unlike the Python :meth:`~set.discard` method, this function does not "
"automatically convert unhashable sets into temporary frozensets. Raise "
":exc:`PyExc_SystemError` if *set* is not an instance of :class:`set` or "
"its subtype."
msgstr ""

#: ../../c-api/set.rst:151
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes "
"the object from the *set*.  Return ``NULL`` on failure.  Raise "
":exc:`KeyError` if the set is empty. Raise a :exc:`SystemError` if *set* "
"is not an instance of :class:`set` or its subtype."
msgstr ""

#: ../../c-api/set.rst:159
msgid "Empty an existing set of all elements."
msgstr ""

#: ../../c-api/slice.rst:6
msgid "Slice Objects"
msgstr ""

#: ../../c-api/slice.rst:11
msgid ""
"The type object for slice objects.  This is the same as :class:`slice` in"
" the Python layer."
msgstr ""

#: ../../c-api/slice.rst:17
msgid "Return true if *ob* is a slice object; *ob* must not be ``NULL``."
msgstr ""

#: ../../c-api/slice.rst:22
msgid ""
"Return a new slice object with the given values.  The *start*, *stop*, "
"and *step* parameters are used as the values of the slice object "
"attributes of the same names.  Any of the values may be ``NULL``, in "
"which case the ``None`` will be used for the corresponding attribute.  "
"Return ``NULL`` if the new object could not be allocated."
msgstr ""

#: ../../c-api/slice.rst:31
msgid ""
"Retrieve the start, stop and step indices from the slice object *slice*, "
"assuming a sequence of length *length*. Treats indices greater than "
"*length* as errors."
msgstr ""

#: ../../c-api/slice.rst:35
msgid ""
"Returns ``0`` on success and ``-1`` on error with no exception set "
"(unless one of the indices was not :const:`None` and failed to be "
"converted to an integer, in which case ``-1`` is returned with an "
"exception set)."
msgstr ""

#: ../../c-api/slice.rst:39
msgid "You probably do not want to use this function."
msgstr ""

#: ../../c-api/slice.rst:41 ../../c-api/slice.rst:72
msgid ""
"The parameter type for the *slice* parameter was ``PySliceObject*`` "
"before."
msgstr ""

#: ../../c-api/slice.rst:48
msgid ""
"Usable replacement for :c:func:`PySlice_GetIndices`.  Retrieve the start,"
" stop, and step indices from the slice object *slice* assuming a sequence"
" of length *length*, and store the length of the slice in *slicelength*."
"  Out of bounds indices are clipped in a manner consistent with the "
"handling of normal slices."
msgstr ""

#: ../../c-api/slice.rst:54
msgid "Returns ``0`` on success and ``-1`` on error with exception set."
msgstr ""

#: ../../c-api/slice.rst:57
msgid ""
"This function is considered not safe for resizable sequences. Its "
"invocation should be replaced by a combination of "
":c:func:`PySlice_Unpack` and :c:func:`PySlice_AdjustIndices` where ::"
msgstr ""

#: ../../c-api/slice.rst:65
msgid "is replaced by ::"
msgstr ""

#: ../../c-api/slice.rst:76
msgid ""
"If ``Py_LIMITED_API`` is not set or set to the value between "
"``0x03050400`` and ``0x03060000`` (not including) or ``0x03060100`` or "
"higher :c:func:`!PySlice_GetIndicesEx` is implemented as a macro using "
":c:func:`!PySlice_Unpack` and :c:func:`!PySlice_AdjustIndices`. Arguments"
" *start*, *stop* and *step* are evaluated more than once."
msgstr ""

#: ../../c-api/slice.rst:83
msgid ""
"If ``Py_LIMITED_API`` is set to the value less than ``0x03050400`` or "
"between ``0x03060000`` and ``0x03060100`` (not including) "
":c:func:`!PySlice_GetIndicesEx` is a deprecated function."
msgstr ""

#: ../../c-api/slice.rst:91
msgid ""
"Extract the start, stop and step data members from a slice object as C "
"integers.  Silently reduce values larger than ``PY_SSIZE_T_MAX`` to "
"``PY_SSIZE_T_MAX``, silently boost the start and stop values less than "
"``PY_SSIZE_T_MIN`` to ``PY_SSIZE_T_MIN``, and silently boost the step "
"values less than ``-PY_SSIZE_T_MAX`` to ``-PY_SSIZE_T_MAX``."
msgstr ""

#: ../../c-api/slice.rst:97
msgid "Return ``-1`` on error, ``0`` on success."
msgstr ""

#: ../../c-api/slice.rst:104
msgid ""
"Adjust start/end slice indices assuming a sequence of the specified "
"length. Out of bounds indices are clipped in a manner consistent with the"
" handling of normal slices."
msgstr ""

#: ../../c-api/slice.rst:108
msgid ""
"Return the length of the slice.  Always successful.  Doesn't call Python "
"code."
msgstr ""

#: ../../c-api/slice.rst:115
msgid "Ellipsis Object"
msgstr ""

#: ../../c-api/slice.rst:120
msgid ""
"The Python ``Ellipsis`` object.  This object has no methods.  It needs to"
" be treated just like any other object with respect to reference counts."
"  Like :c:data:`Py_None` it is a singleton object."
msgstr ""

#: ../../c-api/stable.rst:7
msgid "Stable Application Binary Interface"
msgstr ""

#: ../../c-api/stable.rst:9
msgid ""
"Traditionally, the C API of Python will change with every release.  Most "
"changes will be source-compatible, typically by only adding API, rather "
"than changing existing API or removing API (although some interfaces do "
"get removed after being deprecated first)."
msgstr ""

#: ../../c-api/stable.rst:14
msgid ""
"Unfortunately, the API compatibility does not extend to binary "
"compatibility (the ABI). The reason is primarily the evolution of struct "
"definitions, where addition of a new field, or changing the type of a "
"field, might not break the API, but can break the ABI.  As a consequence,"
" extension modules need to be recompiled for every Python release "
"(although an exception is possible on Unix when none of the affected "
"interfaces are used). In addition, on Windows, extension modules link "
"with a specific pythonXY.dll and need to be recompiled to link with a "
"newer one."
msgstr ""

#: ../../c-api/stable.rst:23
msgid ""
"Since Python 3.2, a subset of the API has been declared to guarantee a "
"stable ABI. Extension modules wishing to use this API (called \"limited "
"API\") need to define ``Py_LIMITED_API``. A number of interpreter details"
" then become hidden from the extension module; in return, a module is "
"built that works on any 3.x version (x>=2) without recompilation."
msgstr ""

#: ../../c-api/stable.rst:29
msgid ""
"In some cases, the stable ABI needs to be extended with new functions. "
"Extension modules wishing to use these new APIs need to set "
"``Py_LIMITED_API`` to the ``PY_VERSION_HEX`` value (see "
":ref:`apiabiversion`) of the minimum Python version they want to support "
"(e.g. ``0x03030000`` for Python 3.3). Such modules will work on all "
"subsequent Python releases, but fail to load (because of missing symbols)"
" on the older releases."
msgstr ""

#: ../../c-api/stable.rst:36
msgid ""
"As of Python 3.2, the set of functions available to the limited API is "
"documented in :pep:`384`.  In the C API documentation, API elements that "
"are not part of the limited API are marked as \"Not part of the limited "
"API.\""
msgstr ""

#: ../../c-api/structures.rst:6
msgid "Common Object Structures"
msgstr ""

#: ../../c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition "
"of object types for Python.  This section describes these structures and "
"how they are used."
msgstr ""

#: ../../c-api/structures.rst:12
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are "
"represented by the :c:type:`PyObject` and :c:type:`PyVarObject` types, "
"which are defined, in turn, by the expansions of some macros also used, "
"whether directly or indirectly, in the definition of all other Python "
"objects."
msgstr ""

#: ../../c-api/structures.rst:21
msgid ""
"All object types are extensions of this type.  This is a type which "
"contains the information Python needs to treat a pointer to an object as "
"an object.  In a normal \"release\" build, it contains only the object's "
"reference count and a pointer to the corresponding type object. Nothing "
"is actually declared to be a :c:type:`PyObject`, but every pointer to a "
"Python object can be cast to a :c:type:`PyObject*`.  Access to the "
"members must be done by using the macros :c:macro:`Py_REFCNT` and "
":c:macro:`Py_TYPE`."
msgstr ""

#: ../../c-api/structures.rst:33
msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API. Access to the "
"members must be done by using the macros :c:macro:`Py_REFCNT`, "
":c:macro:`Py_TYPE`, and :c:macro:`Py_SIZE`."
msgstr ""

#: ../../c-api/structures.rst:42
msgid ""
"This is a macro used when declaring new types which represent objects "
"without a varying length.  The PyObject_HEAD macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:47
msgid "See documentation of :c:type:`PyObject` above."
msgstr ""

#: ../../c-api/structures.rst:52
msgid ""
"This is a macro used when declaring new types which represent objects "
"with a length that varies from instance to instance. The "
"PyObject_VAR_HEAD macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:58
msgid "See documentation of :c:type:`PyVarObject` above."
msgstr ""

#: ../../c-api/structures.rst:63
msgid ""
"This macro is used to access the :attr:`ob_type` member of a Python "
"object. It expands to::"
msgstr ""

#: ../../c-api/structures.rst:71
msgid ""
"This macro is used to access the :attr:`ob_refcnt` member of a Python "
"object. It expands to::"
msgstr ""

#: ../../c-api/structures.rst:80
msgid ""
"This macro is used to access the :attr:`ob_size` member of a Python "
"object. It expands to::"
msgstr ""

#: ../../c-api/structures.rst:88
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyObject` type.  This macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:97
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyVarObject` type, including the :attr:`ob_size` field. This "
"macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:107
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:type:`PyObject*` parameters and return"
" one such value.  If the return value is ``NULL``, an exception shall "
"have been set.  If not ``NULL``, the return value is interpreted as the "
"return value of the function as exposed in Python.  The function must "
"return a new reference."
msgstr ""

#: ../../c-api/structures.rst:117
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_VARARGS | METH_KEYWORDS`."
msgstr ""

#: ../../c-api/structures.rst:123
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_FASTCALL`."
msgstr ""

#: ../../c-api/structures.rst:129
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_FASTCALL | METH_KEYWORDS`."
msgstr ""

#: ../../c-api/structures.rst:135
msgid ""
"Structure used to describe a method of an extension type.  This structure"
" has four fields:"
msgstr ""

#: ../../c-api/structures.rst:139 ../../c-api/structures.rst:279
#: ../../c-api/structures.rst:345 ../../c-api/tuple.rst:151
#: ../../c-api/tuple.rst:174
msgid "C Type"
msgstr ""

#: ../../c-api/structures.rst:141
msgid ":attr:`ml_name`"
msgstr ""

#: ../../c-api/structures.rst:141 ../../c-api/structures.rst:149
#: ../../c-api/structures.rst:281 ../../c-api/structures.rst:294
#: ../../c-api/structures.rst:310 ../../c-api/structures.rst:347
#: ../../c-api/structures.rst:355
msgid "const char \\*"
msgstr ""

#: ../../c-api/structures.rst:141
msgid "name of the method"
msgstr ""

#: ../../c-api/structures.rst:143
msgid ":attr:`ml_meth`"
msgstr ""

#: ../../c-api/structures.rst:143
msgid "PyCFunction"
msgstr ""

#: ../../c-api/structures.rst:143
msgid "pointer to the C implementation"
msgstr ""

#: ../../c-api/structures.rst:146
msgid ":attr:`ml_flags`"
msgstr ""

#: ../../c-api/structures.rst:146
msgid "flag bits indicating how the call should be constructed"
msgstr ""

#: ../../c-api/structures.rst:149
msgid ":attr:`ml_doc`"
msgstr ""

#: ../../c-api/structures.rst:149 ../../c-api/structures.rst:294
msgid "points to the contents of the docstring"
msgstr ""

#: ../../c-api/structures.rst:153
msgid ""
"The :attr:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:type:`PyObject*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a"
" cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:type:`PyObject*`, it is common that the method "
"implementation uses the specific C type of the *self* object."
msgstr ""

#: ../../c-api/structures.rst:160
msgid ""
"The :attr:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention."
msgstr ""

#: ../../c-api/structures.rst:164
msgid ""
"There are four basic calling conventions for positional arguments and two"
" of them can be combined with :const:`METH_KEYWORDS` to support also "
"keyword arguments.  So there are a total of 6 calling conventions:"
msgstr ""

#: ../../c-api/structures.rst:170
msgid ""
"This is the typical calling convention, where the methods have the type "
":c:type:`PyCFunction`. The function expects two :c:type:`PyObject*` "
"values. The first one is the *self* object for methods; for module "
"functions, it is the module object.  The second parameter (often called "
"*args*) is a tuple object representing all arguments. This parameter is "
"typically processed using :c:func:`PyArg_ParseTuple` or "
":c:func:`PyArg_UnpackTuple`."
msgstr ""

#: ../../c-api/structures.rst:180
msgid ""
"Methods with these flags must be of type "
":c:type:`PyCFunctionWithKeywords`. The function expects three parameters:"
" *self*, *args*, *kwargs* where *kwargs* is a dictionary of all the "
"keyword arguments or possibly ``NULL`` if there are no keyword arguments."
"  The parameters are typically processed using "
":c:func:`PyArg_ParseTupleAndKeywords`."
msgstr ""

#: ../../c-api/structures.rst:189
msgid ""
"Fast calling convention supporting only positional arguments. The methods"
" have the type :c:type:`_PyCFunctionFast`. The first parameter is *self*,"
" the second parameter is a C array of :c:type:`PyObject*` values "
"indicating the arguments and the third parameter is the number of "
"arguments (the length of the array)."
msgstr ""

#: ../../c-api/structures.rst:195 ../../c-api/structures.rst:210
msgid "This is not part of the :ref:`limited API <stable>`."
msgstr ""

#: ../../c-api/structures.rst:202
msgid ""
"Extension of :const:`METH_FASTCALL` supporting also keyword arguments, "
"with methods of type :c:type:`_PyCFunctionFastWithKeywords`. Keyword "
"arguments are passed the same way as in the vectorcall protocol: there is"
" an additional fourth :c:type:`PyObject*` parameter which is a tuple "
"representing the names of the keyword arguments or possibly ``NULL`` if "
"there are no keywords.  The values of the keyword arguments are stored in"
" the *args* array, after the positional arguments."
msgstr ""

#: ../../c-api/structures.rst:217
msgid ""
"Methods without parameters don't need to check whether arguments are "
"given if they are listed with the :const:`METH_NOARGS` flag.  They need "
"to be of type :c:type:`PyCFunction`.  The first parameter is typically "
"named *self* and will hold a reference to the module or object instance."
"  In all cases the second parameter will be ``NULL``."
msgstr ""

#: ../../c-api/structures.rst:226
msgid ""
"Methods with a single object argument can be listed with the "
":const:`METH_O` flag, instead of invoking :c:func:`PyArg_ParseTuple` with"
" a ``\"O\"`` argument. They have the type :c:type:`PyCFunction`, with the"
" *self* parameter, and a :c:type:`PyObject*` parameter representing the "
"single argument."
msgstr ""

#: ../../c-api/structures.rst:232
msgid ""
"These two constants are not used to indicate the calling convention but "
"the binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for"
" any given method."
msgstr ""

#: ../../c-api/structures.rst:242
msgid ""
"The method will be passed the type object as the first parameter rather "
"than an instance of the type.  This is used to create *class methods*, "
"similar to what is created when using the :func:`classmethod` built-in "
"function."
msgstr ""

#: ../../c-api/structures.rst:252
msgid ""
"The method will be passed ``NULL`` as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar "
"to what is created when using the :func:`staticmethod` built-in function."
msgstr ""

#: ../../c-api/structures.rst:256
msgid ""
"One other constant controls whether a method is loaded in place of "
"another definition with the same method name."
msgstr ""

#: ../../c-api/structures.rst:262
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named "
":meth:`__contains__` and preclude the loading of a corresponding "
"PyCFunction with the same name.  With the flag defined, the PyCFunction "
"will be loaded in place of the wrapper object and will co-exist with the "
"slot.  This is helpful because calls to PyCFunctions are optimized more "
"than wrapper object calls."
msgstr ""

#: ../../c-api/structures.rst:275
msgid ""
"Structure which describes an attribute of a type which corresponds to a C"
" struct member.  Its fields are:"
msgstr ""

#: ../../c-api/structures.rst:281
msgid ":attr:`name`"
msgstr ""

#: ../../c-api/structures.rst:281
msgid "name of the member"
msgstr ""

#: ../../c-api/structures.rst:283
msgid ":attr:`!type`"
msgstr ""

#: ../../c-api/structures.rst:283
msgid "the type of the member in the C struct"
msgstr ""

#: ../../c-api/structures.rst:286
msgid ":attr:`offset`"
msgstr ""

#: ../../c-api/structures.rst:286
msgid "the offset in bytes that the member is located on the type's object struct"
msgstr ""

#: ../../c-api/structures.rst:290
msgid ":attr:`flags`"
msgstr ""

#: ../../c-api/structures.rst:290
msgid "flag bits indicating if the field should be read-only or writable"
msgstr ""

#: ../../c-api/structures.rst:294
msgid ":attr:`doc`"
msgstr ""

#: ../../c-api/structures.rst:298
msgid ""
":attr:`!type` can be one of many ``T_`` macros corresponding to various C"
" types.  When the member is accessed in Python, it will be converted to "
"the equivalent Python type."
msgstr ""

#: ../../c-api/structures.rst:303
msgid "Macro name"
msgstr ""

#: ../../c-api/structures.rst:303
msgid "C type"
msgstr ""

#: ../../c-api/structures.rst:305
msgid "T_SHORT"
msgstr ""

#: ../../c-api/structures.rst:305
msgid "short"
msgstr ""

#: ../../c-api/structures.rst:306
msgid "T_INT"
msgstr ""

#: ../../c-api/structures.rst:307
msgid "T_LONG"
msgstr ""

#: ../../c-api/structures.rst:308
msgid "T_FLOAT"
msgstr ""

#: ../../c-api/structures.rst:308
msgid "float"
msgstr ""

#: ../../c-api/structures.rst:309
msgid "T_DOUBLE"
msgstr ""

#: ../../c-api/structures.rst:309
msgid "double"
msgstr ""

#: ../../c-api/structures.rst:310
msgid "T_STRING"
msgstr ""

#: ../../c-api/structures.rst:311
msgid "T_OBJECT"
msgstr ""

#: ../../c-api/structures.rst:311 ../../c-api/structures.rst:312
msgid "PyObject \\*"
msgstr ""

#: ../../c-api/structures.rst:312
msgid "T_OBJECT_EX"
msgstr ""

#: ../../c-api/structures.rst:313
msgid "T_CHAR"
msgstr ""

#: ../../c-api/structures.rst:313 ../../c-api/structures.rst:314
#: ../../c-api/structures.rst:319
msgid "char"
msgstr ""

#: ../../c-api/structures.rst:314
msgid "T_BYTE"
msgstr ""

#: ../../c-api/structures.rst:315
msgid "T_UBYTE"
msgstr ""

#: ../../c-api/structures.rst:315
msgid "unsigned char"
msgstr ""

#: ../../c-api/structures.rst:316
msgid "T_UINT"
msgstr ""

#: ../../c-api/structures.rst:317
msgid "T_USHORT"
msgstr ""

#: ../../c-api/structures.rst:317
msgid "unsigned short"
msgstr ""

#: ../../c-api/structures.rst:318
msgid "T_ULONG"
msgstr ""

#: ../../c-api/structures.rst:319
msgid "T_BOOL"
msgstr ""

#: ../../c-api/structures.rst:320
msgid "T_LONGLONG"
msgstr ""

#: ../../c-api/structures.rst:320 ../../c-api/unicode.rst:479
#: ../../c-api/unicode.rst:482
msgid "long long"
msgstr ""

#: ../../c-api/structures.rst:321
msgid "T_ULONGLONG"
msgstr ""

#: ../../c-api/structures.rst:321 ../../c-api/unicode.rst:485
msgid "unsigned long long"
msgstr ""

#: ../../c-api/structures.rst:322
msgid "T_PYSSIZET"
msgstr ""

#: ../../c-api/structures.rst:325
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that "
":c:macro:`T_OBJECT` returns ``None`` if the member is ``NULL`` and "
":c:macro:`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use "
":c:macro:`T_OBJECT_EX` over :c:macro:`T_OBJECT` because "
":c:macro:`T_OBJECT_EX` handles use of the :keyword:`del` statement on "
"that attribute more correctly than :c:macro:`T_OBJECT`."
msgstr ""

#: ../../c-api/structures.rst:332
msgid ""
":attr:`flags` can be ``0`` for write and read access or "
":c:macro:`READONLY` for read-only access.  Using :c:macro:`T_STRING` for "
":attr:`type` implies :c:macro:`READONLY`.  :c:macro:`T_STRING` data is "
"interpreted as UTF-8. Only :c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX`"
" members can be deleted.  (They are set to ``NULL``)."
msgstr ""

#: ../../c-api/structures.rst:341
msgid ""
"Structure to define property-like access for a type. See also description"
" of the :c:member:`PyTypeObject.tp_getset` slot."
msgstr ""

#: ../../c-api/structures.rst:347
msgid "name"
msgstr ""

#: ../../c-api/structures.rst:347
msgid "attribute name"
msgstr ""

#: ../../c-api/structures.rst:349
msgid "get"
msgstr ""

#: ../../c-api/structures.rst:349
msgid "getter"
msgstr ""

#: ../../c-api/structures.rst:349
msgid "C Function to get the attribute"
msgstr ""

#: ../../c-api/structures.rst:351
msgid "set"
msgstr ""

#: ../../c-api/structures.rst:351
msgid "setter"
msgstr ""

#: ../../c-api/structures.rst:351
msgid ""
"optional C function to set or delete the attribute, if omitted the "
"attribute is readonly"
msgstr ""

#: ../../c-api/structures.rst:355
msgid "doc"
msgstr ""

#: ../../c-api/structures.rst:355
msgid "optional docstring"
msgstr ""

#: ../../c-api/structures.rst:357
msgid "closure"
msgstr ""

#: ../../c-api/structures.rst:357
msgid "void \\*"
msgstr ""

#: ../../c-api/structures.rst:357
msgid "optional function pointer, providing additional data for getter and setter"
msgstr ""

#: ../../c-api/structures.rst:362
msgid ""
"The ``get`` function takes one :c:type:`PyObject*` parameter (the "
"instance) and a function pointer (the associated ``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:367
msgid ""
"It should return a new reference on success or ``NULL`` with a set "
"exception on failure."
msgstr ""

#: ../../c-api/structures.rst:370
msgid ""
"``set`` functions take two :c:type:`PyObject*` parameters (the instance "
"and the value to be set) and a function pointer (the associated "
"``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:375
msgid ""
"In case the attribute should be deleted the second parameter is ``NULL``."
" Should return ``0`` on success or ``-1`` with a set exception on "
"failure."
msgstr ""

#: ../../c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr ""

#: ../../c-api/sys.rst:10
msgid ""
"Return the file system representation for *path*. If the object is a "
":class:`str` or :class:`bytes` object, then its reference count is "
"incremented. If the object implements the :class:`os.PathLike` interface,"
" then :meth:`~os.PathLike.__fspath__` is returned as long as it is a "
":class:`str` or :class:`bytes` object. Otherwise :exc:`TypeError` is "
"raised and ``NULL`` is returned."
msgstr ""

#: ../../c-api/sys.rst:22
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* "
"is deemed interactive.  This is the case for files for which "
"``isatty(fileno(fp))`` is true.  If the global flag "
":c:data:`Py_InteractiveFlag` is true, this function also returns true if "
"the *filename* pointer is ``NULL`` or if the name is equal to one of the "
"strings ``'<stdin>'`` or ``'???'``."
msgstr ""

#: ../../c-api/sys.rst:31
msgid ""
"Function to prepare some internal state before a process fork.  This "
"should be called before calling :c:func:`fork` or any similar function "
"that clones the current process. Only available on systems where "
":c:func:`fork` is defined."
msgstr ""

#: ../../c-api/sys.rst:37
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" "
"thread <fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-"
"interpreter-support>`).  The same is true for ``PyOS_BeforeFork()``."
msgstr ""

#: ../../c-api/sys.rst:47
msgid ""
"Function to update some internal state after a process fork.  This should"
" be called from the parent process after calling :c:func:`fork` or any "
"similar function that clones the current process, regardless of whether "
"process cloning was successful. Only available on systems where "
":c:func:`fork` is defined."
msgstr ""

#: ../../c-api/sys.rst:54
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" "
"thread <fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-"
"interpreter-support>`).  The same is true for "
"``PyOS_AfterFork_Parent()``."
msgstr ""

#: ../../c-api/sys.rst:64
msgid ""
"Function to update internal interpreter state after a process fork. This "
"must be called from the child process after calling :c:func:`fork`, or "
"any similar function that clones the current process, if there is any "
"chance the process will call back into the Python interpreter. Only "
"available on systems where :c:func:`fork` is defined."
msgstr ""

#: ../../c-api/sys.rst:71
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" "
"thread <fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-"
"interpreter-support>`).  The same is true for ``PyOS_AfterFork_Child()``."
msgstr ""

#: ../../c-api/sys.rst:79
msgid ""
":func:`os.register_at_fork` allows registering custom Python functions to"
" be called by :c:func:`PyOS_BeforeFork()`, "
":c:func:`PyOS_AfterFork_Parent` and  :c:func:`PyOS_AfterFork_Child`."
msgstr ""

#: ../../c-api/sys.rst:86
msgid ""
"Function to update some internal state after a process fork; this should "
"be called in the new process if the Python interpreter will continue to "
"be used. If a new executable is loaded into the new process, this "
"function does not need to be called."
msgstr ""

#: ../../c-api/sys.rst:91
msgid "This function is superseded by :c:func:`PyOS_AfterFork_Child()`."
msgstr ""

#: ../../c-api/sys.rst:97
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :const:`USE_STACKCHECK` is "
"defined (currently on Windows using the Microsoft Visual C++ compiler).  "
":const:`USE_STACKCHECK` will be defined automatically; you should never "
"change the definition in your own code."
msgstr ""

#: ../../c-api/sys.rst:106
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper"
" around either :c:func:`sigaction` or :c:func:`signal`.  Do not call "
"those functions directly! :c:type:`PyOS_sighandler_t` is a typedef alias "
"for :c:type:`void (\\*)(int)`."
msgstr ""

#: ../../c-api/sys.rst:114
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`sigaction` or "
":c:func:`signal`.  Do not call those functions directly!  "
":c:type:`PyOS_sighandler_t` is a typedef alias for :c:type:`void "
"(\\*)(int)`."
msgstr ""

#: ../../c-api/sys.rst:121
msgid ""
"Decode a byte string from the locale encoding with the "
":ref:`surrogateescape error handler <surrogateescape>`: undecodable bytes"
" are decoded as characters in range U+DC80..U+DCFF. If a byte sequence "
"can be decoded as a surrogate character, escape the bytes using the "
"surrogateescape error handler instead of decoding them."
msgstr ""

#: ../../c-api/sys.rst:127 ../../c-api/sys.rst:173
msgid "Encoding, highest priority to lowest priority:"
msgstr ""

#: ../../c-api/sys.rst:129 ../../c-api/sys.rst:175
msgid "``UTF-8`` on macOS, Android, and VxWorks;"
msgstr ""

#: ../../c-api/sys.rst:130 ../../c-api/sys.rst:176
msgid "``UTF-8`` on Windows if :c:data:`Py_LegacyWindowsFSEncodingFlag` is zero;"
msgstr ""

#: ../../c-api/sys.rst:131 ../../c-api/sys.rst:177
msgid "``UTF-8`` if the Python UTF-8 mode is enabled;"
msgstr ""

#: ../../c-api/sys.rst:132 ../../c-api/sys.rst:178
msgid ""
"``ASCII`` if the ``LC_CTYPE`` locale is ``\"C\"``, "
"``nl_langinfo(CODESET)`` returns the ``ASCII`` encoding (or an alias), "
"and :c:func:`mbstowcs` and :c:func:`wcstombs` functions uses the "
"``ISO-8859-1`` encoding."
msgstr ""

#: ../../c-api/sys.rst:136 ../../c-api/sys.rst:182
msgid "the current locale encoding."
msgstr ""

#: ../../c-api/sys.rst:138
msgid ""
"Return a pointer to a newly allocated wide character string, use "
":c:func:`PyMem_RawFree` to free the memory. If size is not ``NULL``, "
"write the number of wide characters excluding the null character into "
"``*size``"
msgstr ""

#: ../../c-api/sys.rst:142
msgid ""
"Return ``NULL`` on decoding error or memory allocation error. If *size* "
"is not ``NULL``, ``*size`` is set to ``(size_t)-1`` on memory error or "
"set to ``(size_t)-2`` on decoding error."
msgstr ""

#: ../../c-api/sys.rst:146
msgid ""
"Decoding errors should never happen, unless there is a bug in the C "
"library."
msgstr ""

#: ../../c-api/sys.rst:149
msgid ""
"Use the :c:func:`Py_EncodeLocale` function to encode the character string"
" back to a byte string."
msgstr ""

#: ../../c-api/sys.rst:154
msgid ""
"The :c:func:`PyUnicode_DecodeFSDefaultAndSize` and "
":c:func:`PyUnicode_DecodeLocaleAndSize` functions."
msgstr ""

#: ../../c-api/sys.rst:159 ../../c-api/sys.rst:203
msgid "The function now uses the UTF-8 encoding in the UTF-8 mode."
msgstr ""

#: ../../c-api/sys.rst:162 ../../c-api/sys.rst:206
msgid ""
"The function now uses the UTF-8 encoding on Windows if "
":c:data:`Py_LegacyWindowsFSEncodingFlag` is zero;"
msgstr ""

#: ../../c-api/sys.rst:169
msgid ""
"Encode a wide character string to the locale encoding with the "
":ref:`surrogateescape error handler <surrogateescape>`: surrogate "
"characters in the range U+DC80..U+DCFF are converted to bytes 0x80..0xFF."
msgstr ""

#: ../../c-api/sys.rst:184
msgid "The function uses the UTF-8 encoding in the Python UTF-8 mode."
msgstr ""

#: ../../c-api/sys.rst:186
msgid ""
"Return a pointer to a newly allocated byte string, use "
":c:func:`PyMem_Free` to free the memory. Return ``NULL`` on encoding "
"error or memory allocation error"
msgstr ""

#: ../../c-api/sys.rst:190
msgid ""
"If error_pos is not ``NULL``, ``*error_pos`` is set to ``(size_t)-1`` on "
"success,  or set to the index of the invalid character on encoding error."
msgstr ""

#: ../../c-api/sys.rst:193
msgid ""
"Use the :c:func:`Py_DecodeLocale` function to decode the bytes string "
"back to a wide character string."
msgstr ""

#: ../../c-api/sys.rst:198
msgid ""
"The :c:func:`PyUnicode_EncodeFSDefault` and "
":c:func:`PyUnicode_EncodeLocale` functions."
msgstr ""

#: ../../c-api/sys.rst:214
msgid "System Functions"
msgstr ""

#: ../../c-api/sys.rst:216
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal "
"thread state structure."
msgstr ""

#: ../../c-api/sys.rst:222
msgid ""
"Return the object *name* from the :mod:`sys` module or ``NULL`` if it "
"does not exist, without setting an exception."
msgstr ""

#: ../../c-api/sys.rst:227
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is ``NULL``, in "
"which case *name* is deleted from the sys module. Returns ``0`` on "
"success, ``-1`` on error."
msgstr ""

#: ../../c-api/sys.rst:233
msgid ""
"Reset :data:`sys.warnoptions` to an empty list. This function may be "
"called prior to :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/sys.rst:238
msgid ""
"Append *s* to :data:`sys.warnoptions`. This function must be called prior"
" to :c:func:`Py_Initialize` in order to affect the warnings filter list."
msgstr ""

#: ../../c-api/sys.rst:243
msgid "Append *unicode* to :data:`sys.warnoptions`."
msgstr ""

#: ../../c-api/sys.rst:245
msgid ""
"Note: this function is not currently usable from outside the CPython "
"implementation, as it must be called prior to the implicit import of "
":mod:`warnings` in :c:func:`Py_Initialize` to be effective, but can't be "
"called until enough of the runtime has been initialized to permit the "
"creation of Unicode objects."
msgstr ""

#: ../../c-api/sys.rst:253
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which "
"should be a list of paths separated with the platform's search path "
"delimiter (``:`` on Unix, ``;`` on Windows)."
msgstr ""

#: ../../c-api/sys.rst:259
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""

#: ../../c-api/sys.rst:262
#, python-format
msgid ""
"*format* should limit the total size of the formatted output string to "
"1000 bytes or less -- after 1000 bytes, the output string is truncated. "
"In particular, this means that no unrestricted \"%s\" formats should "
"occur; these should be limited using \"%.<N>s\" where <N> is a decimal "
"number calculated so that <N> plus the maximum size of other formatted "
"text does not exceed 1000 bytes.  Also watch out for \"%f\", which can "
"print hundreds of digits for very large numbers."
msgstr ""

#: ../../c-api/sys.rst:270
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted "
"message is written to the real (C level) *stdout*."
msgstr ""

#: ../../c-api/sys.rst:275
msgid ""
"As :c:func:`PySys_WriteStdout`, but write to :data:`sys.stderr` or "
"*stderr* instead."
msgstr ""

#: ../../c-api/sys.rst:280
msgid ""
"Function similar to PySys_WriteStdout() but format the message using "
":c:func:`PyUnicode_FromFormatV` and don't truncate the message to an "
"arbitrary length."
msgstr ""

#: ../../c-api/sys.rst:288
msgid ""
"As :c:func:`PySys_FormatStdout`, but write to :data:`sys.stderr` or "
"*stderr* instead."
msgstr ""

#: ../../c-api/sys.rst:295
msgid ""
"Parse *s* as a set of :option:`-X` options and add them to the current "
"options mapping as returned by :c:func:`PySys_GetXOptions`. This function"
" may be called prior to :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/sys.rst:303
msgid ""
"Return the current dictionary of :option:`-X` options, similarly to "
":data:`sys._xoptions`.  On error, ``NULL`` is returned and an exception "
"is set."
msgstr ""

#: ../../c-api/sys.rst:312
msgid ""
"Raise an auditing event with any active hooks. Return zero for success "
"and non-zero with an exception set on failure."
msgstr ""

#: ../../c-api/sys.rst:315
msgid ""
"If any hooks have been added, *format* and other arguments will be used "
"to construct a tuple to pass. Apart from ``N``, the same format "
"characters as used in :c:func:`Py_BuildValue` are available. If the built"
" value is not a tuple, it will be added into a single-element tuple. (The"
" ``N`` format option consumes a reference, but since there is no way to "
"know whether arguments to this function will be consumed, using it may "
"cause reference leaks.)"
msgstr ""

#: ../../c-api/sys.rst:323
msgid ""
"Note that ``#`` format characters should always be treated as "
"``Py_ssize_t``, regardless of whether ``PY_SSIZE_T_CLEAN`` was defined."
msgstr ""

#: ../../c-api/sys.rst:326
msgid ":func:`sys.audit` performs the same function from Python code."
msgstr ""

#: ../../c-api/sys.rst:332
msgid ""
"Require ``Py_ssize_t`` for ``#`` format characters. Previously, an "
"unavoidable deprecation warning was raised."
msgstr ""

#: ../../c-api/sys.rst:338
msgid ""
"Append the callable *hook* to the list of active auditing hooks. Return "
"zero for success and non-zero on failure. If the runtime has been "
"initialized, also set an error on failure. Hooks added through this API "
"are called for all interpreters created by the runtime."
msgstr ""

#: ../../c-api/sys.rst:348
msgid ""
"This function is safe to call before :c:func:`Py_Initialize`. When called"
" after runtime initialization, existing audit hooks are notified and may "
"silently abort the operation by raising an error subclassed from "
":class:`Exception` (other errors will not be silenced)."
msgstr ""

#: ../../c-api/sys.rst:353
msgid ""
"The hook function is of type :c:type:`int (*)(const char *event, PyObject"
" *args, void *userData)`, where *args* is guaranteed to be a "
":c:type:`PyTupleObject`. The hook function is always called with the GIL "
"held by the Python interpreter that raised the event."
msgstr ""

#: ../../c-api/sys.rst:358
msgid ""
"See :pep:`578` for a detailed description of auditing.  Functions in the "
"runtime and standard library that raise events are listed in the "
":ref:`audit events table <audit-events>`. Details are in each function's "
"documentation."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.addaudithook`` with no "
"arguments."
msgstr ""

#: ../../c-api/sys.rst:365
msgid ""
"If the interpreter is initialized, this function raises a auditing event "
"``sys.addaudithook`` with no arguments. If any existing hooks raise an "
"exception derived from :class:`Exception`, the new hook will not be added"
" and the exception is cleared. As a result, callers cannot assume that "
"their hook has been added unless they control all existing hooks."
msgstr ""

#: ../../c-api/sys.rst:377
msgid "Process Control"
msgstr ""

#: ../../c-api/sys.rst:384
msgid ""
"Print a fatal error message and kill the process.  No cleanup is "
"performed. This function should only be invoked when a condition is "
"detected that would make it dangerous to continue using the Python "
"interpreter; e.g., when the object administration appears to be "
"corrupted.  On Unix, the standard C library function :c:func:`abort` is "
"called which will attempt to produce a :file:`core` file."
msgstr ""

#: ../../c-api/sys.rst:398
msgid ""
"Exit the current process.  This calls :c:func:`Py_FinalizeEx` and then "
"calls the standard C library function ``exit(status)``.  If "
":c:func:`Py_FinalizeEx` indicates an error, the exit status is set to "
"120."
msgstr ""

#: ../../c-api/sys.rst:402
msgid "Errors from finalization no longer ignored."
msgstr ""

#: ../../c-api/sys.rst:412
msgid ""
"Register a cleanup function to be called by :c:func:`Py_FinalizeEx`.  The"
" cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on "
"failure, it returns ``-1``.  The cleanup function registered last is "
"called first. Each cleanup function will be called at most once.  Since "
"Python's internal finalization will have completed before the cleanup "
"function, no Python APIs should be called by *func*."
msgstr ""

#: ../../c-api/tuple.rst:6
msgid "Tuple Objects"
msgstr ""

#: ../../c-api/tuple.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python tuple object."
msgstr ""

#: ../../c-api/tuple.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python tuple type;"
" it is the same object as :class:`tuple` in the Python layer."
msgstr ""

#: ../../c-api/tuple.rst:24
msgid ""
"Return true if *p* is a tuple object or an instance of a subtype of the "
"tuple type."
msgstr ""

#: ../../c-api/tuple.rst:30
msgid ""
"Return true if *p* is a tuple object, but not an instance of a subtype of"
" the tuple type."
msgstr ""

#: ../../c-api/tuple.rst:36
msgid "Return a new tuple object of size *len*, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/tuple.rst:41
msgid ""
"Return a new tuple object of size *n*, or ``NULL`` on failure. The tuple "
"values are initialized to the subsequent *n* C arguments pointing to "
"Python objects. ``PyTuple_Pack(2, a, b)`` is equivalent to "
"``Py_BuildValue(\"(OO)\", a, b)``."
msgstr ""

#: ../../c-api/tuple.rst:48
msgid "Take a pointer to a tuple object, and return the size of that tuple."
msgstr ""

#: ../../c-api/tuple.rst:53
msgid ""
"Return the size of the tuple *p*, which must be non-``NULL`` and point to"
" a tuple; no error checking is performed."
msgstr ""

#: ../../c-api/tuple.rst:59
msgid ""
"Return the object at position *pos* in the tuple pointed to by *p*.  If "
"*pos* is out of bounds, return ``NULL`` and set an :exc:`IndexError` "
"exception."
msgstr ""

#: ../../c-api/tuple.rst:65
msgid "Like :c:func:`PyTuple_GetItem`, but does no checking of its arguments."
msgstr ""

#: ../../c-api/tuple.rst:70
msgid ""
"Return the slice of the tuple pointed to by *p* between *low* and *high*,"
" or ``NULL`` on failure.  This is the equivalent of the Python expression"
" ``p[low:high]``.  Indexing from the end of the list is not supported."
msgstr ""

#: ../../c-api/tuple.rst:77
msgid ""
"Insert a reference to object *o* at position *pos* of the tuple pointed "
"to by *p*.  Return ``0`` on success.  If *pos* is out of bounds, return "
"``-1`` and set an :exc:`IndexError` exception."
msgstr ""

#: ../../c-api/tuple.rst:83
msgid ""
"This function \"steals\" a reference to *o* and discards a reference to "
"an item already in the tuple at the affected position."
msgstr ""

#: ../../c-api/tuple.rst:89
msgid ""
"Like :c:func:`PyTuple_SetItem`, but does no error checking, and should "
"*only* be used to fill in brand new tuples."
msgstr ""

#: ../../c-api/tuple.rst:94
msgid ""
"This macro \"steals\" a reference to *o*, and, unlike "
":c:func:`PyTuple_SetItem`, does *not* discard a reference to any item "
"that is being replaced; any reference in the tuple at position *pos* will"
" be leaked."
msgstr ""

#: ../../c-api/tuple.rst:102
msgid ""
"Can be used to resize a tuple.  *newsize* will be the new length of the "
"tuple. Because tuples are *supposed* to be immutable, this should only be"
" used if there is only one reference to the object.  Do *not* use this if"
" the tuple may already be known to some other part of the code.  The "
"tuple will always grow or shrink at the end.  Think of this as destroying"
" the old tuple and creating a new one, only more efficiently.  Returns "
"``0`` on success. Client code should never assume that the resulting "
"value of ``*p`` will be the same as before calling this function. If the "
"object referenced by ``*p`` is replaced, the original ``*p`` is "
"destroyed.  On failure, returns ``-1`` and sets ``*p`` to ``NULL``, and "
"raises :exc:`MemoryError` or :exc:`SystemError`."
msgstr ""

#: ../../c-api/tuple.rst:120
msgid "Struct Sequence Objects"
msgstr ""

#: ../../c-api/tuple.rst:122
msgid ""
"Struct sequence objects are the C equivalent of "
":func:`~collections.namedtuple` objects, i.e. a sequence whose items can "
"also be accessed through attributes. To create a struct sequence, you "
"first have to create a specific struct sequence type."
msgstr ""

#: ../../c-api/tuple.rst:129
msgid ""
"Create a new struct sequence type from the data in *desc*, described "
"below. Instances of the resulting type can be created with "
":c:func:`PyStructSequence_New`."
msgstr ""

#: ../../c-api/tuple.rst:135
msgid "Initializes a struct sequence type *type* from *desc* in place."
msgstr ""

#: ../../c-api/tuple.rst:140
msgid ""
"The same as ``PyStructSequence_InitType``, but returns ``0`` on success "
"and ``-1`` on failure."
msgstr ""

#: ../../c-api/tuple.rst:148
msgid "Contains the meta information of a struct sequence type to create."
msgstr ""

#: ../../c-api/tuple.rst:153 ../../c-api/tuple.rst:176
msgid "``name``"
msgstr ""

#: ../../c-api/tuple.rst:153 ../../c-api/tuple.rst:155
#: ../../c-api/tuple.rst:176 ../../c-api/tuple.rst:181
msgid "``const char *``"
msgstr ""

#: ../../c-api/tuple.rst:153
msgid "name of the struct sequence type"
msgstr ""

#: ../../c-api/tuple.rst:155 ../../c-api/tuple.rst:181
msgid "``doc``"
msgstr ""

#: ../../c-api/tuple.rst:155
msgid "pointer to docstring for the type or ``NULL`` to omit"
msgstr ""

#: ../../c-api/tuple.rst:158
msgid "``fields``"
msgstr ""

#: ../../c-api/tuple.rst:158
msgid "``PyStructSequence_Field *``"
msgstr ""

#: ../../c-api/tuple.rst:158
msgid "pointer to ``NULL``-terminated array with field names of the new type"
msgstr ""

#: ../../c-api/tuple.rst:161
msgid "``n_in_sequence``"
msgstr ""

#: ../../c-api/tuple.rst:161
msgid "``int``"
msgstr ""

#: ../../c-api/tuple.rst:161
msgid "number of fields visible to the Python side (if used as tuple)"
msgstr ""

#: ../../c-api/tuple.rst:168
msgid ""
"Describes a field of a struct sequence. As a struct sequence is modeled "
"as a tuple, all fields are typed as :c:type:`PyObject*`.  The index in "
"the :attr:`fields` array of the :c:type:`PyStructSequence_Desc` "
"determines which field of the struct sequence is described."
msgstr ""

#: ../../c-api/tuple.rst:176
msgid ""
"name for the field or ``NULL`` to end the list of named fields, set to "
":c:data:`PyStructSequence_UnnamedField` to leave unnamed"
msgstr ""

#: ../../c-api/tuple.rst:181
msgid "field docstring or ``NULL`` to omit"
msgstr ""

#: ../../c-api/tuple.rst:187
msgid "Special value for a field name to leave it unnamed."
msgstr ""

#: ../../c-api/tuple.rst:192
msgid ""
"Creates an instance of *type*, which must have been created with "
":c:func:`PyStructSequence_NewType`."
msgstr ""

#: ../../c-api/tuple.rst:198
msgid ""
"Return the object at position *pos* in the struct sequence pointed to by "
"*p*. No bounds checking is performed."
msgstr ""

#: ../../c-api/tuple.rst:204
msgid "Macro equivalent of :c:func:`PyStructSequence_GetItem`."
msgstr ""

#: ../../c-api/tuple.rst:209
msgid ""
"Sets the field at index *pos* of the struct sequence *p* to value *o*.  "
"Like :c:func:`PyTuple_SET_ITEM`, this should only be used to fill in "
"brand new instances."
msgstr ""

#: ../../c-api/tuple.rst:215 ../../c-api/tuple.rst:224
msgid "This function \"steals\" a reference to *o*."
msgstr ""

#: ../../c-api/tuple.rst:220
msgid "Macro equivalent of :c:func:`PyStructSequence_SetItem`."
msgstr ""

#: ../../c-api/type.rst:6 ../../c-api/typeobj.rst:6
msgid "Type Objects"
msgstr ""

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr ""

#: ../../c-api/type.rst:24
msgid ""
"Return true if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return false in all other "
"cases."
msgstr ""

#: ../../c-api/type.rst:30
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""

#: ../../c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""

#: ../../c-api/type.rst:40
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual"
" flag bits are guaranteed to be stable across Python releases, but access"
" to :c:member:`~PyTypeObject.tp_flags` itself is not part of the limited "
"API."
msgstr ""

#: ../../c-api/type.rst:47
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr ""

#: ../../c-api/type.rst:53
msgid ""
"Invalidate the internal lookup cache for the type and all of its "
"subtypes.  This function must be called after any manual modification of "
"the attributes or base classes of the type."
msgstr ""

#: ../../c-api/type.rst:60
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""

#: ../../c-api/type.rst:66
msgid ""
"Return true if the type object includes support for the cycle detector; "
"this tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""

#: ../../c-api/type.rst:72
msgid "Return true if *a* is a subtype of *b*."
msgstr ""

#: ../../c-api/type.rst:74
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~class.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that "
":func:`issubclass` would do."
msgstr ""

#: ../../c-api/type.rst:82
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type"
" object.  Use Python's default memory allocation mechanism to allocate a "
"new instance and initialize all its contents to ``NULL``."
msgstr ""

#: ../../c-api/type.rst:88
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""

#: ../../c-api/type.rst:93
msgid ""
"Finalize a type object.  This should be called on all type objects to "
"finish their initialization.  This function is responsible for adding "
"inherited slots from a type's base class.  Return ``0`` on success, or "
"return ``-1`` and sets an exception on error."
msgstr ""

#: ../../c-api/type.rst:100
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast "
"the result pointer into the appropriate function type."
msgstr ""

#: ../../c-api/type.rst:106
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* "
"argument."
msgstr ""

#: ../../c-api/type.rst:108
msgid "An exception is raised if *type* is not a heap type."
msgstr ""

#: ../../c-api/type.rst:114
msgid "Creating Heap-Allocated Types"
msgstr ""

#: ../../c-api/type.rst:116
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""

#: ../../c-api/type.rst:121
msgid ""
"Creates and returns a heap type object from the *spec* "
"(:const:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""

#: ../../c-api/type.rst:124
msgid ""
"If *bases* is a tuple, the created heap type contains all types contained"
" in it as base types."
msgstr ""

#: ../../c-api/type.rst:127
msgid ""
"If *bases* is ``NULL``, the *Py_tp_bases* slot is used instead. If that "
"also is ``NULL``, the *Py_tp_base* slot is used instead. If that also is "
"``NULL``, the new type derives from :class:`object`."
msgstr ""

#: ../../c-api/type.rst:131
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr ""

#: ../../c-api/type.rst:137
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr ""

#: ../../c-api/type.rst:141
msgid "Structure defining a type's behavior."
msgstr ""

#: ../../c-api/type.rst:145
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""

#: ../../c-api/type.rst:150
msgid ""
"Size of the instance in bytes, used to set "
":c:member:`PyTypeObject.tp_basicsize` and "
":c:member:`PyTypeObject.tp_itemsize`."
msgstr ""

#: ../../c-api/type.rst:156
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""

#: ../../c-api/type.rst:158
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""

#: ../../c-api/type.rst:163
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot"
" value ``{0, NULL}``."
msgstr ""

#: ../../c-api/type.rst:168
msgid ""
"Structure defining optional functionality of a type, containing a slot ID"
" and a value pointer."
msgstr ""

#: ../../c-api/type.rst:173
msgid "A slot ID."
msgstr ""

#: ../../c-api/type.rst:175
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""

#: ../../c-api/type.rst:181
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ""

#: ../../c-api/type.rst:182
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr ""

#: ../../c-api/type.rst:183
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""

#: ../../c-api/type.rst:185
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and "
":c:type:`PyType_Slot`:"
msgstr ""

#: ../../c-api/type.rst:187 ../../c-api/typeobj.rst:113
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ""

#: ../../c-api/type.rst:188
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ""

#: ../../c-api/type.rst:189
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ""

#: ../../c-api/type.rst:190
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ""

#: ../../c-api/type.rst:191
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ""

#: ../../c-api/type.rst:192
msgid ":c:member:`~PyTypeObject.tp_print`"
msgstr ""

#: ../../c-api/type.rst:193 ../../c-api/typeobj.rst:99
msgid ":c:member:`~PyTypeObject.tp_weaklistoffset`"
msgstr ""

#: ../../c-api/type.rst:194 ../../c-api/typeobj.rst:120
msgid ":c:member:`~PyTypeObject.tp_dictoffset`"
msgstr ""

#: ../../c-api/type.rst:195 ../../c-api/typeobj.rst:325
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ""

#: ../../c-api/type.rst:196 ../../c-api/typeobj.rst:327
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ""

#: ../../c-api/type.rst:198
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic "
"on some platforms. To avoid issues, use the *bases* argument of "
":py:func:`PyType_FromSpecWithBases` instead."
msgstr ""

#: ../../c-api/type.rst:205
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""

#: ../../c-api/type.rst:208
msgid "May not be ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:8
msgid ""
"Perhaps one of the most important structures of the Python object system "
"is the structure that defines a new type: the :c:type:`PyTypeObject` "
"structure.  Type objects can be handled using any of the "
":c:func:`PyObject_\\*` or :c:func:`PyType_\\*` functions, but do not "
"offer much that's interesting to most Python applications. These objects "
"are fundamental to how objects behave, so they are very important to the "
"interpreter itself and to any extension module that implements new types."
msgstr ""

#: ../../c-api/typeobj.rst:16
msgid ""
"Type objects are fairly large compared to most of the standard types. The"
" reason for the size is that each type object stores a large number of "
"values, mostly C function pointers, each of which implements a small part"
" of the type's functionality.  The fields of the type object are examined"
" in detail in this section.  The fields will be described in the order in"
" which they occur in the structure."
msgstr ""

#: ../../c-api/typeobj.rst:23
msgid ""
"In addition to the following quick reference, the :ref:`typedef-examples`"
" section provides at-a-glance insight into the meaning and use of "
":c:type:`PyTypeObject`."
msgstr ""

#: ../../c-api/typeobj.rst:29
msgid "Quick Reference"
msgstr ""

#: ../../c-api/typeobj.rst:34
msgid "\"tp slots\""
msgstr ""

#: ../../c-api/typeobj.rst:40
msgid "PyTypeObject Slot [#slots]_"
msgstr ""

#: ../../c-api/typeobj.rst:40 ../../c-api/typeobj.rst:200
msgid ":ref:`Type <slot-typedefs-table>`"
msgstr ""

#: ../../c-api/typeobj.rst:40
msgid "special methods/attrs"
msgstr ""

#: ../../c-api/typeobj.rst:40
msgid "Info [#cols]_"
msgstr ""

#: ../../c-api/typeobj.rst:42
msgid "O"
msgstr ""

#: ../../c-api/typeobj.rst:42
msgid "T"
msgstr ""

#: ../../c-api/typeobj.rst:42
msgid "D"
msgstr ""

#: ../../c-api/typeobj.rst:42
msgid "I"
msgstr ""

#: ../../c-api/typeobj.rst:44
msgid "<R> :c:member:`~PyTypeObject.tp_name`"
msgstr ""

#: ../../c-api/typeobj.rst ../../c-api/typeobj.rst:44
#: ../../c-api/typeobj.rst:86
msgid "const char *"
msgstr ""

#: ../../c-api/typeobj.rst:44
msgid "__name__"
msgstr ""

#: ../../c-api/typeobj.rst:44 ../../c-api/typeobj.rst:46
#: ../../c-api/typeobj.rst:48 ../../c-api/typeobj.rst:50
#: ../../c-api/typeobj.rst:62 ../../c-api/typeobj.rst:70
#: ../../c-api/typeobj.rst:72 ../../c-api/typeobj.rst:74
#: ../../c-api/typeobj.rst:76 ../../c-api/typeobj.rst:79
#: ../../c-api/typeobj.rst:84 ../../c-api/typeobj.rst:86
#: ../../c-api/typeobj.rst:88 ../../c-api/typeobj.rst:90
#: ../../c-api/typeobj.rst:92 ../../c-api/typeobj.rst:99
#: ../../c-api/typeobj.rst:101 ../../c-api/typeobj.rst:103
#: ../../c-api/typeobj.rst:105 ../../c-api/typeobj.rst:107
#: ../../c-api/typeobj.rst:109 ../../c-api/typeobj.rst:111
#: ../../c-api/typeobj.rst:115 ../../c-api/typeobj.rst:117
#: ../../c-api/typeobj.rst:120 ../../c-api/typeobj.rst:122
#: ../../c-api/typeobj.rst:124 ../../c-api/typeobj.rst:126
#: ../../c-api/typeobj.rst:128 ../../c-api/typeobj.rst:130
#: ../../c-api/typeobj.rst:146
msgid "X"
msgstr ""

#: ../../c-api/typeobj.rst:46
msgid ":c:member:`~PyTypeObject.tp_basicsize`"
msgstr ""

#: ../../c-api/typeobj.rst:48
msgid ":c:member:`~PyTypeObject.tp_itemsize`"
msgstr ""

#: ../../c-api/typeobj.rst:50
msgid ":c:member:`~PyTypeObject.tp_dealloc`"
msgstr ""

#: ../../c-api/typeobj.rst:50 ../../c-api/typeobj.rst:142
#: ../../c-api/typeobj.rst:146 ../../c-api/typeobj.rst:343
msgid ":c:type:`destructor`"
msgstr ""

#: ../../c-api/typeobj.rst:52
msgid ":c:member:`~PyTypeObject.tp_vectorcall_offset`"
msgstr ""

#: ../../c-api/typeobj.rst:52 ../../c-api/typeobj.rst:84
#: ../../c-api/typeobj.rst:99 ../../c-api/typeobj.rst:113
#: ../../c-api/typeobj.rst:120 ../../c-api/typeobj.rst:124
#: ../../c-api/typeobj.rst:126 ../../c-api/typeobj.rst:128
msgid "?"
msgstr ""

#: ../../c-api/typeobj.rst:54
msgid "(:c:member:`~PyTypeObject.tp_getattr`)"
msgstr ""

#: ../../c-api/typeobj.rst:54 ../../c-api/typeobj.rst:367
msgid ":c:type:`getattrfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:54 ../../c-api/typeobj.rst:76
msgid "__getattribute__, __getattr__"
msgstr ""

#: ../../c-api/typeobj.rst:54 ../../c-api/typeobj.rst:57
#: ../../c-api/typeobj.rst:70 ../../c-api/typeobj.rst:76
#: ../../c-api/typeobj.rst:79 ../../c-api/typeobj.rst:88
#: ../../c-api/typeobj.rst:90 ../../c-api/typeobj.rst:92
msgid "G"
msgstr ""

#: ../../c-api/typeobj.rst:57
msgid "(:c:member:`~PyTypeObject.tp_setattr`)"
msgstr ""

#: ../../c-api/typeobj.rst:57 ../../c-api/typeobj.rst:372
msgid ":c:type:`setattrfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:57 ../../c-api/typeobj.rst:79
msgid "__setattr__, __delattr__"
msgstr ""

#: ../../c-api/typeobj.rst:60
msgid ":c:member:`~PyTypeObject.tp_as_async`"
msgstr ""

#: ../../c-api/typeobj.rst:60
msgid ":c:type:`PyAsyncMethods` *"
msgstr ""

#: ../../c-api/typeobj.rst:60 ../../c-api/typeobj.rst:64
#: ../../c-api/typeobj.rst:66 ../../c-api/typeobj.rst:68
msgid ":ref:`sub-slots`"
msgstr ""

#: ../../c-api/typeobj.rst:60 ../../c-api/typeobj.rst:64
#: ../../c-api/typeobj.rst:66 ../../c-api/typeobj.rst:68
#: ../../c-api/typeobj.rst:82
msgid "%"
msgstr ""

#: ../../c-api/typeobj.rst:62
msgid ":c:member:`~PyTypeObject.tp_repr`"
msgstr ""

#: ../../c-api/typeobj.rst:62 ../../c-api/typeobj.rst:74
#: ../../c-api/typeobj.rst:365
msgid ":c:type:`reprfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:62
msgid "__repr__"
msgstr ""

#: ../../c-api/typeobj.rst:64
msgid ":c:member:`~PyTypeObject.tp_as_number`"
msgstr ""

#: ../../c-api/typeobj.rst:64
msgid ":c:type:`PyNumberMethods` *"
msgstr ""

#: ../../c-api/typeobj.rst:66
msgid ":c:member:`~PyTypeObject.tp_as_sequence`"
msgstr ""

#: ../../c-api/typeobj.rst:66
msgid ":c:type:`PySequenceMethods` *"
msgstr ""

#: ../../c-api/typeobj.rst:68
msgid ":c:member:`~PyTypeObject.tp_as_mapping`"
msgstr ""

#: ../../c-api/typeobj.rst:68
msgid ":c:type:`PyMappingMethods` *"
msgstr ""

#: ../../c-api/typeobj.rst:70
msgid ":c:member:`~PyTypeObject.tp_hash`"
msgstr ""

#: ../../c-api/typeobj.rst:70 ../../c-api/typeobj.rst:401
msgid ":c:type:`hashfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:70
msgid "__hash__"
msgstr ""

#: ../../c-api/typeobj.rst:72
msgid ":c:member:`~PyTypeObject.tp_call`"
msgstr ""

#: ../../c-api/typeobj.rst:72 ../../c-api/typeobj.rst:234
#: ../../c-api/typeobj.rst:237 ../../c-api/typeobj.rst:437
msgid ":c:type:`ternaryfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:72
msgid "__call__"
msgstr ""

#: ../../c-api/typeobj.rst:74
msgid ":c:member:`~PyTypeObject.tp_str`"
msgstr ""

#: ../../c-api/typeobj.rst:74
msgid "__str__"
msgstr ""

#: ../../c-api/typeobj.rst:76
msgid ":c:member:`~PyTypeObject.tp_getattro`"
msgstr ""

#: ../../c-api/typeobj.rst:76 ../../c-api/typeobj.rst:378
msgid ":c:type:`getattrofunc`"
msgstr ""

#: ../../c-api/typeobj.rst:79
msgid ":c:member:`~PyTypeObject.tp_setattro`"
msgstr ""

#: ../../c-api/typeobj.rst:79 ../../c-api/typeobj.rst:383
msgid ":c:type:`setattrofunc`"
msgstr ""

#: ../../c-api/typeobj.rst:82
msgid ":c:member:`~PyTypeObject.tp_as_buffer`"
msgstr ""

#: ../../c-api/typeobj.rst:82
msgid ":c:type:`PyBufferProcs` *"
msgstr ""

#: ../../c-api/typeobj.rst:84
msgid ":c:member:`~PyTypeObject.tp_flags`"
msgstr ""

#: ../../c-api/typeobj.rst:86
msgid ":c:member:`~PyTypeObject.tp_doc`"
msgstr ""

#: ../../c-api/typeobj.rst:86
msgid "__doc__"
msgstr ""

#: ../../c-api/typeobj.rst:88
msgid ":c:member:`~PyTypeObject.tp_traverse`"
msgstr ""

#: ../../c-api/typeobj.rst:88 ../../c-api/typeobj.rst:347
msgid ":c:type:`traverseproc`"
msgstr ""

#: ../../c-api/typeobj.rst:90
msgid ":c:member:`~PyTypeObject.tp_clear`"
msgstr ""

#: ../../c-api/typeobj.rst:90 ../../c-api/typeobj.rst:130
#: ../../c-api/typeobj.rst:245 ../../c-api/typeobj.rst:426
msgid ":c:type:`inquiry`"
msgstr ""

#: ../../c-api/typeobj.rst:92
msgid ":c:member:`~PyTypeObject.tp_richcompare`"
msgstr ""

#: ../../c-api/typeobj.rst:92 ../../c-api/typeobj.rst:403
msgid ":c:type:`richcmpfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:92
msgid "__lt__, __le__, __eq__, __ne__, __gt__, __ge__"
msgstr ""

#: ../../c-api/typeobj.rst:101
msgid ":c:member:`~PyTypeObject.tp_iter`"
msgstr ""

#: ../../c-api/typeobj.rst:101 ../../c-api/typeobj.rst:409
msgid ":c:type:`getiterfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:101
msgid "__iter__"
msgstr ""

#: ../../c-api/typeobj.rst:103
msgid ":c:member:`~PyTypeObject.tp_iternext`"
msgstr ""

#: ../../c-api/typeobj.rst:103 ../../c-api/typeobj.rst:411
msgid ":c:type:`iternextfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:103
msgid "__next__"
msgstr ""

#: ../../c-api/typeobj.rst:105
msgid ":c:member:`~PyTypeObject.tp_methods`"
msgstr ""

#: ../../c-api/typeobj.rst:105
msgid ":c:type:`PyMethodDef` []"
msgstr ""

#: ../../c-api/typeobj.rst:107
msgid ":c:member:`~PyTypeObject.tp_members`"
msgstr ""

#: ../../c-api/typeobj.rst:107
msgid ":c:type:`PyMemberDef` []"
msgstr ""

#: ../../c-api/typeobj.rst:109
msgid ":c:member:`~PyTypeObject.tp_getset`"
msgstr ""

#: ../../c-api/typeobj.rst:109
msgid ":c:type:`PyGetSetDef` []"
msgstr ""

#: ../../c-api/typeobj.rst:111
msgid ":c:member:`~PyTypeObject.tp_base`"
msgstr ""

#: ../../c-api/typeobj.rst ../../c-api/typeobj.rst:111
msgid ":c:type:`PyTypeObject` *"
msgstr ""

#: ../../c-api/typeobj.rst:111
msgid "__base__"
msgstr ""

#: ../../c-api/typeobj.rst ../../c-api/typeobj.rst:113
#: ../../c-api/typeobj.rst:132 ../../c-api/typeobj.rst:134
#: ../../c-api/typeobj.rst:136 ../../c-api/typeobj.rst:138
#: ../../c-api/typeobj.rst:140 ../../c-api/typeobj.rst:338
#: ../../c-api/typeobj.rst:353 ../../c-api/typeobj.rst:365
#: ../../c-api/typeobj.rst:367 ../../c-api/typeobj.rst:378
#: ../../c-api/typeobj.rst:389 ../../c-api/typeobj.rst:401
#: ../../c-api/typeobj.rst:403 ../../c-api/typeobj.rst:409
#: ../../c-api/typeobj.rst:411 ../../c-api/typeobj.rst:413
#: ../../c-api/typeobj.rst:428 ../../c-api/typeobj.rst:432
#: ../../c-api/typeobj.rst:437 ../../c-api/typeobj.rst:443
msgid ":c:type:`PyObject` *"
msgstr ""

#: ../../c-api/typeobj.rst:113
msgid "__dict__"
msgstr ""

#: ../../c-api/typeobj.rst:115
msgid ":c:member:`~PyTypeObject.tp_descr_get`"
msgstr ""

#: ../../c-api/typeobj.rst:115 ../../c-api/typeobj.rst:389
msgid ":c:type:`descrgetfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:115
msgid "__get__"
msgstr ""

#: ../../c-api/typeobj.rst:117
msgid ":c:member:`~PyTypeObject.tp_descr_set`"
msgstr ""

#: ../../c-api/typeobj.rst:117 ../../c-api/typeobj.rst:395
msgid ":c:type:`descrsetfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:117
msgid "__set__, __delete__"
msgstr ""

#: ../../c-api/typeobj.rst:122
msgid ":c:member:`~PyTypeObject.tp_init`"
msgstr ""

#: ../../c-api/typeobj.rst:122 ../../c-api/typeobj.rst:359
msgid ":c:type:`initproc`"
msgstr ""

#: ../../c-api/typeobj.rst:122
msgid "__init__"
msgstr ""

#: ../../c-api/typeobj.rst:124
msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ""

#: ../../c-api/typeobj.rst:124 ../../c-api/typeobj.rst:338
msgid ":c:type:`allocfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:126
msgid ":c:member:`~PyTypeObject.tp_new`"
msgstr ""

#: ../../c-api/typeobj.rst:126 ../../c-api/typeobj.rst:353
msgid ":c:type:`newfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:126
msgid "__new__"
msgstr ""

#: ../../c-api/typeobj.rst:128
msgid ":c:member:`~PyTypeObject.tp_free`"
msgstr ""

#: ../../c-api/typeobj.rst:128 ../../c-api/typeobj.rst:345
msgid ":c:type:`freefunc`"
msgstr ""

#: ../../c-api/typeobj.rst:130
msgid ":c:member:`~PyTypeObject.tp_is_gc`"
msgstr ""

#: ../../c-api/typeobj.rst:132
msgid "<:c:member:`~PyTypeObject.tp_bases`>"
msgstr ""

#: ../../c-api/typeobj.rst:132
msgid "__bases__"
msgstr ""

#: ../../c-api/typeobj.rst:132 ../../c-api/typeobj.rst:134
msgid "~"
msgstr ""

#: ../../c-api/typeobj.rst:134
msgid "<:c:member:`~PyTypeObject.tp_mro`>"
msgstr ""

#: ../../c-api/typeobj.rst:134
msgid "__mro__"
msgstr ""

#: ../../c-api/typeobj.rst:136
msgid "[:c:member:`~PyTypeObject.tp_cache`]"
msgstr ""

#: ../../c-api/typeobj.rst:138
msgid "[:c:member:`~PyTypeObject.tp_subclasses`]"
msgstr ""

#: ../../c-api/typeobj.rst:138
msgid "__subclasses__"
msgstr ""

#: ../../c-api/typeobj.rst:140
msgid "[:c:member:`~PyTypeObject.tp_weaklist`]"
msgstr ""

#: ../../c-api/typeobj.rst:142
msgid "(:c:member:`~PyTypeObject.tp_del`)"
msgstr ""

#: ../../c-api/typeobj.rst:144
msgid "[:c:member:`~PyTypeObject.tp_version_tag`]"
msgstr ""

#: ../../c-api/typeobj.rst:146
msgid ":c:member:`~PyTypeObject.tp_finalize`"
msgstr ""

#: ../../c-api/typeobj.rst:146
msgid "__del__"
msgstr ""

#: ../../c-api/typeobj.rst:149
msgid ""
"If :const:`COUNT_ALLOCS` is defined then the following (internal-only) "
"fields exist as well:"
msgstr ""

#: ../../c-api/typeobj.rst:152
msgid ":c:member:`~PyTypeObject.tp_allocs`"
msgstr ""

#: ../../c-api/typeobj.rst:153
msgid ":c:member:`~PyTypeObject.tp_frees`"
msgstr ""

#: ../../c-api/typeobj.rst:154
msgid ":c:member:`~PyTypeObject.tp_maxalloc`"
msgstr ""

#: ../../c-api/typeobj.rst:155
msgid ":c:member:`~PyTypeObject.tp_prev`"
msgstr ""

#: ../../c-api/typeobj.rst:156
msgid ":c:member:`~PyTypeObject.tp_next`"
msgstr ""

#: ../../c-api/typeobj.rst:159
msgid ""
"A slot name in parentheses indicates it is (effectively) deprecated. "
"Names in angle brackets should be treated as read-only. Names in square "
"brackets are for internal use only. \"<R>\" (as a prefix) means the field"
" is required (must be non-``NULL``)."
msgstr ""

#: ../../c-api/typeobj.rst:163
msgid "Columns:"
msgstr ""

#: ../../c-api/typeobj.rst:165
msgid "**\"O\"**:  set on :c:type:`PyBaseObject_Type`"
msgstr ""

#: ../../c-api/typeobj.rst:167
msgid "**\"T\"**:  set on :c:type:`PyType_Type`"
msgstr ""

#: ../../c-api/typeobj.rst:169
msgid "**\"D\"**:  default (if slot is set to ``NULL``)"
msgstr ""

#: ../../c-api/typeobj.rst:179
msgid "**\"I\"**:  inheritance"
msgstr ""

#: ../../c-api/typeobj.rst:188
msgid ""
"Note that some slots are effectively inherited through the normal "
"attribute lookup chain."
msgstr ""

#: ../../c-api/typeobj.rst:194
msgid "sub-slots"
msgstr ""

#: ../../c-api/typeobj.rst:200
msgid "Slot"
msgstr ""

#: ../../c-api/typeobj.rst:200
msgid "special methods"
msgstr ""

#: ../../c-api/typeobj.rst:203
msgid ":c:member:`~PyAsyncMethods.am_await`"
msgstr ""

#: ../../c-api/typeobj.rst:203 ../../c-api/typeobj.rst:205
#: ../../c-api/typeobj.rst:207 ../../c-api/typeobj.rst:239
#: ../../c-api/typeobj.rst:241 ../../c-api/typeobj.rst:243
#: ../../c-api/typeobj.rst:247 ../../c-api/typeobj.rst:274
#: ../../c-api/typeobj.rst:278 ../../c-api/typeobj.rst:288
#: ../../c-api/typeobj.rst:428
msgid ":c:type:`unaryfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:203
msgid "__await__"
msgstr ""

#: ../../c-api/typeobj.rst:205
msgid ":c:member:`~PyAsyncMethods.am_aiter`"
msgstr ""

#: ../../c-api/typeobj.rst:205
msgid "__aiter__"
msgstr ""

#: ../../c-api/typeobj.rst:207
msgid ":c:member:`~PyAsyncMethods.am_anext`"
msgstr ""

#: ../../c-api/typeobj.rst:207
msgid "__anext__"
msgstr ""

#: ../../c-api/typeobj.rst:211
msgid ":c:member:`~PyNumberMethods.nb_add`"
msgstr ""

#: ../../c-api/typeobj.rst:211 ../../c-api/typeobj.rst:214
#: ../../c-api/typeobj.rst:216 ../../c-api/typeobj.rst:219
#: ../../c-api/typeobj.rst:221 ../../c-api/typeobj.rst:224
#: ../../c-api/typeobj.rst:226 ../../c-api/typeobj.rst:229
#: ../../c-api/typeobj.rst:231 ../../c-api/typeobj.rst:249
#: ../../c-api/typeobj.rst:252 ../../c-api/typeobj.rst:254
#: ../../c-api/typeobj.rst:257 ../../c-api/typeobj.rst:259
#: ../../c-api/typeobj.rst:262 ../../c-api/typeobj.rst:264
#: ../../c-api/typeobj.rst:267 ../../c-api/typeobj.rst:269
#: ../../c-api/typeobj.rst:272 ../../c-api/typeobj.rst:280
#: ../../c-api/typeobj.rst:282 ../../c-api/typeobj.rst:284
#: ../../c-api/typeobj.rst:286 ../../c-api/typeobj.rst:290
#: ../../c-api/typeobj.rst:293 ../../c-api/typeobj.rst:299
#: ../../c-api/typeobj.rst:308 ../../c-api/typeobj.rst:319
#: ../../c-api/typeobj.rst:432
msgid ":c:type:`binaryfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:211
msgid "__add__ __radd__"
msgstr ""

#: ../../c-api/typeobj.rst:214
msgid ":c:member:`~PyNumberMethods.nb_inplace_add`"
msgstr ""

#: ../../c-api/typeobj.rst:214 ../../c-api/typeobj.rst:319
msgid "__iadd__"
msgstr ""

#: ../../c-api/typeobj.rst:216
msgid ":c:member:`~PyNumberMethods.nb_subtract`"
msgstr ""

#: ../../c-api/typeobj.rst:216
msgid "__sub__ __rsub__"
msgstr ""

#: ../../c-api/typeobj.rst:219
msgid ":c:member:`~PyNumberMethods.nb_inplace_subtract`"
msgstr ""

#: ../../c-api/typeobj.rst:219
msgid "__sub__"
msgstr ""

#: ../../c-api/typeobj.rst:221
msgid ":c:member:`~PyNumberMethods.nb_multiply`"
msgstr ""

#: ../../c-api/typeobj.rst:221
msgid "__mul__ __rmul__"
msgstr ""

#: ../../c-api/typeobj.rst:224
msgid ":c:member:`~PyNumberMethods.nb_inplace_multiply`"
msgstr ""

#: ../../c-api/typeobj.rst:224 ../../c-api/typeobj.rst:310
msgid "__mul__"
msgstr ""

#: ../../c-api/typeobj.rst:226
msgid ":c:member:`~PyNumberMethods.nb_remainder`"
msgstr ""

#: ../../c-api/typeobj.rst:226
msgid "__mod__ __rmod__"
msgstr ""

#: ../../c-api/typeobj.rst:229
msgid ":c:member:`~PyNumberMethods.nb_inplace_remainder`"
msgstr ""

#: ../../c-api/typeobj.rst:229
msgid "__mod__"
msgstr ""

#: ../../c-api/typeobj.rst:231
msgid ":c:member:`~PyNumberMethods.nb_divmod`"
msgstr ""

#: ../../c-api/typeobj.rst:231
msgid "__divmod__ __rdivmod__"
msgstr ""

#: ../../c-api/typeobj.rst:234
msgid ":c:member:`~PyNumberMethods.nb_power`"
msgstr ""

#: ../../c-api/typeobj.rst:234
msgid "__pow__ __rpow__"
msgstr ""

#: ../../c-api/typeobj.rst:237
msgid ":c:member:`~PyNumberMethods.nb_inplace_power`"
msgstr ""

#: ../../c-api/typeobj.rst:237
msgid "__pow__"
msgstr ""

#: ../../c-api/typeobj.rst:239
msgid ":c:member:`~PyNumberMethods.nb_negative`"
msgstr ""

#: ../../c-api/typeobj.rst:239
msgid "__neg__"
msgstr ""

#: ../../c-api/typeobj.rst:241
msgid ":c:member:`~PyNumberMethods.nb_positive`"
msgstr ""

#: ../../c-api/typeobj.rst:241
msgid "__pos__"
msgstr ""

#: ../../c-api/typeobj.rst:243
msgid ":c:member:`~PyNumberMethods.nb_absolute`"
msgstr ""

#: ../../c-api/typeobj.rst:243
msgid "__abs__"
msgstr ""

#: ../../c-api/typeobj.rst:245
msgid ":c:member:`~PyNumberMethods.nb_bool`"
msgstr ""

#: ../../c-api/typeobj.rst:245
msgid "__bool__"
msgstr ""

#: ../../c-api/typeobj.rst:247
msgid ":c:member:`~PyNumberMethods.nb_invert`"
msgstr ""

#: ../../c-api/typeobj.rst:247
msgid "__invert__"
msgstr ""

#: ../../c-api/typeobj.rst:249
msgid ":c:member:`~PyNumberMethods.nb_lshift`"
msgstr ""

#: ../../c-api/typeobj.rst:249
msgid "__lshift__ __rlshift__"
msgstr ""

#: ../../c-api/typeobj.rst:252
msgid ":c:member:`~PyNumberMethods.nb_inplace_lshift`"
msgstr ""

#: ../../c-api/typeobj.rst:252
msgid "__lshift__"
msgstr ""

#: ../../c-api/typeobj.rst:254
msgid ":c:member:`~PyNumberMethods.nb_rshift`"
msgstr ""

#: ../../c-api/typeobj.rst:254
msgid "__rshift__ __rrshift__"
msgstr ""

#: ../../c-api/typeobj.rst:257
msgid ":c:member:`~PyNumberMethods.nb_inplace_rshift`"
msgstr ""

#: ../../c-api/typeobj.rst:257
msgid "__rshift__"
msgstr ""

#: ../../c-api/typeobj.rst:259
msgid ":c:member:`~PyNumberMethods.nb_and`"
msgstr ""

#: ../../c-api/typeobj.rst:259
msgid "__and__ __rand__"
msgstr ""

#: ../../c-api/typeobj.rst:262
msgid ":c:member:`~PyNumberMethods.nb_inplace_and`"
msgstr ""

#: ../../c-api/typeobj.rst:262
msgid "__and__"
msgstr ""

#: ../../c-api/typeobj.rst:264
msgid ":c:member:`~PyNumberMethods.nb_xor`"
msgstr ""

#: ../../c-api/typeobj.rst:264
msgid "__xor__ __rxor__"
msgstr ""

#: ../../c-api/typeobj.rst:267
msgid ":c:member:`~PyNumberMethods.nb_inplace_xor`"
msgstr ""

#: ../../c-api/typeobj.rst:267
msgid "__xor__"
msgstr ""

#: ../../c-api/typeobj.rst:269
msgid ":c:member:`~PyNumberMethods.nb_or`"
msgstr ""

#: ../../c-api/typeobj.rst:269
msgid "__or__ __ror__"
msgstr ""

#: ../../c-api/typeobj.rst:272
msgid ":c:member:`~PyNumberMethods.nb_inplace_or`"
msgstr ""

#: ../../c-api/typeobj.rst:272
msgid "__or__"
msgstr ""

#: ../../c-api/typeobj.rst:274
msgid ":c:member:`~PyNumberMethods.nb_int`"
msgstr ""

#: ../../c-api/typeobj.rst:274
msgid "__int__"
msgstr ""

#: ../../c-api/typeobj.rst:276
msgid ":c:member:`~PyNumberMethods.nb_reserved`"
msgstr ""

#: ../../c-api/typeobj.rst ../../c-api/typeobj.rst:276
#: ../../c-api/typeobj.rst:343 ../../c-api/typeobj.rst:345
#: ../../c-api/typeobj.rst:426
msgid "void *"
msgstr ""

#: ../../c-api/typeobj.rst:278
msgid ":c:member:`~PyNumberMethods.nb_float`"
msgstr ""

#: ../../c-api/typeobj.rst:278
msgid "__float__"
msgstr ""

#: ../../c-api/typeobj.rst:280
msgid ":c:member:`~PyNumberMethods.nb_floor_divide`"
msgstr ""

#: ../../c-api/typeobj.rst:280 ../../c-api/typeobj.rst:282
msgid "__floordiv__"
msgstr ""

#: ../../c-api/typeobj.rst:282
msgid ":c:member:`~PyNumberMethods.nb_inplace_floor_divide`"
msgstr ""

#: ../../c-api/typeobj.rst:284
msgid ":c:member:`~PyNumberMethods.nb_true_divide`"
msgstr ""

#: ../../c-api/typeobj.rst:284 ../../c-api/typeobj.rst:286
msgid "__truediv__"
msgstr ""

#: ../../c-api/typeobj.rst:286
msgid ":c:member:`~PyNumberMethods.nb_inplace_true_divide`"
msgstr ""

#: ../../c-api/typeobj.rst:288
msgid ":c:member:`~PyNumberMethods.nb_index`"
msgstr ""

#: ../../c-api/typeobj.rst:288
msgid "__index__"
msgstr ""

#: ../../c-api/typeobj.rst:290
msgid ":c:member:`~PyNumberMethods.nb_matrix_multiply`"
msgstr ""

#: ../../c-api/typeobj.rst:290
msgid "__matmul__ __rmatmul__"
msgstr ""

#: ../../c-api/typeobj.rst:293
msgid ":c:member:`~PyNumberMethods.nb_inplace_matrix_multiply`"
msgstr ""

#: ../../c-api/typeobj.rst:293
msgid "__matmul__"
msgstr ""

#: ../../c-api/typeobj.rst:297
msgid ":c:member:`~PyMappingMethods.mp_length`"
msgstr ""

#: ../../c-api/typeobj.rst:297 ../../c-api/typeobj.rst:306
#: ../../c-api/typeobj.rst:413
msgid ":c:type:`lenfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:297 ../../c-api/typeobj.rst:306
msgid "__len__"
msgstr ""

#: ../../c-api/typeobj.rst:299
msgid ":c:member:`~PyMappingMethods.mp_subscript`"
msgstr ""

#: ../../c-api/typeobj.rst:299 ../../c-api/typeobj.rst:312
msgid "__getitem__"
msgstr ""

#: ../../c-api/typeobj.rst:301
msgid ":c:member:`~PyMappingMethods.mp_ass_subscript`"
msgstr ""

#: ../../c-api/typeobj.rst:301 ../../c-api/typeobj.rst:458
msgid ":c:type:`objobjargproc`"
msgstr ""

#: ../../c-api/typeobj.rst:301
msgid "__setitem__, __delitem__"
msgstr ""

#: ../../c-api/typeobj.rst:306
msgid ":c:member:`~PySequenceMethods.sq_length`"
msgstr ""

#: ../../c-api/typeobj.rst:308
msgid ":c:member:`~PySequenceMethods.sq_concat`"
msgstr ""

#: ../../c-api/typeobj.rst:308
msgid "__add__"
msgstr ""

#: ../../c-api/typeobj.rst:310
msgid ":c:member:`~PySequenceMethods.sq_repeat`"
msgstr ""

#: ../../c-api/typeobj.rst:310 ../../c-api/typeobj.rst:312
#: ../../c-api/typeobj.rst:321 ../../c-api/typeobj.rst:443
msgid ":c:type:`ssizeargfunc`"
msgstr ""

#: ../../c-api/typeobj.rst:312
msgid ":c:member:`~PySequenceMethods.sq_item`"
msgstr ""

#: ../../c-api/typeobj.rst:314
msgid ":c:member:`~PySequenceMethods.sq_ass_item`"
msgstr ""

#: ../../c-api/typeobj.rst:314 ../../c-api/typeobj.rst:448
msgid ":c:type:`ssizeobjargproc`"
msgstr ""

#: ../../c-api/typeobj.rst:314
msgid "__setitem__ __delitem__"
msgstr ""

#: ../../c-api/typeobj.rst:317
msgid ":c:member:`~PySequenceMethods.sq_contains`"
msgstr ""

#: ../../c-api/typeobj.rst:317 ../../c-api/typeobj.rst:453
msgid ":c:type:`objobjproc`"
msgstr ""

#: ../../c-api/typeobj.rst:317
msgid "__contains__"
msgstr ""

#: ../../c-api/typeobj.rst:319
msgid ":c:member:`~PySequenceMethods.sq_inplace_concat`"
msgstr ""

#: ../../c-api/typeobj.rst:321
msgid ":c:member:`~PySequenceMethods.sq_inplace_repeat`"
msgstr ""

#: ../../c-api/typeobj.rst:321
msgid "__imul__"
msgstr ""

#: ../../c-api/typeobj.rst:325
msgid ":c:func:`getbufferproc`"
msgstr ""

#: ../../c-api/typeobj.rst:327
msgid ":c:func:`releasebufferproc`"
msgstr ""

#: ../../c-api/typeobj.rst:333
msgid "slot typedefs"
msgstr ""

#: ../../c-api/typeobj.rst:336
msgid "typedef"
msgstr ""

#: ../../c-api/typeobj.rst:336
msgid "Parameter Types"
msgstr ""

#: ../../c-api/typeobj.rst:336
msgid "Return Type"
msgstr ""

#: ../../c-api/typeobj.rst:343 ../../c-api/typeobj.rst:345
#: ../../c-api/typeobj.rst:421
msgid "void"
msgstr ""

#: ../../c-api/typeobj.rst
msgid ":c:type:`visitproc`"
msgstr ""

#: ../../c-api/typeobj.rst:401
msgid "Py_hash_t"
msgstr ""

#: ../../c-api/typeobj.rst:415
msgid ":c:type:`getbufferproc`"
msgstr ""

#: ../../c-api/typeobj.rst
msgid ":c:type:`Py_buffer` *"
msgstr ""

#: ../../c-api/typeobj.rst:421
msgid ":c:type:`releasebufferproc`"
msgstr ""

#: ../../c-api/typeobj.rst:465
msgid "See :ref:`slot-typedefs` below for more detail."
msgstr ""

#: ../../c-api/typeobj.rst:469
msgid "PyTypeObject Definition"
msgstr ""

#: ../../c-api/typeobj.rst:471
msgid ""
"The structure definition for :c:type:`PyTypeObject` can be found in "
":file:`Include/object.h`.  For convenience of reference, this repeats the"
" definition found there:"
msgstr ""

#: ../../c-api/typeobj.rst:481
msgid "PyObject Slots"
msgstr ""

#: ../../c-api/typeobj.rst:483
msgid ""
"The type object structure extends the :c:type:`PyVarObject` structure. "
"The :attr:`ob_size` field is used for dynamic types (created by  "
":func:`type_new`, usually called from a class statement). Note that "
":c:data:`PyType_Type` (the metatype) initializes "
":c:member:`~PyTypeObject.tp_itemsize`, which means that its instances "
"(i.e. type objects) *must* have the :attr:`ob_size` field."
msgstr ""

#: ../../c-api/typeobj.rst:493
msgid ""
"These fields are only present when the macro ``Py_TRACE_REFS`` is "
"defined. Their initialization to ``NULL`` is taken care of by the "
"``PyObject_HEAD_INIT`` macro.  For statically allocated objects, these "
"fields always remain ``NULL``. For dynamically allocated objects, these "
"two fields are used to link the object into a doubly-linked list of *all*"
" live objects on the heap.  This could be used for various debugging "
"purposes; currently the only use is to print the objects that are still "
"alive at the end of a run when the environment variable "
":envvar:`PYTHONDUMPREFS` is set."
msgstr ""

#: ../../c-api/typeobj.rst:502 ../../c-api/typeobj.rst:515
#: ../../c-api/typeobj.rst:538 ../../c-api/typeobj.rst:551
#: ../../c-api/typeobj.rst:593 ../../c-api/typeobj.rst:636
#: ../../c-api/typeobj.rst:682 ../../c-api/typeobj.rst:738
#: ../../c-api/typeobj.rst:757 ../../c-api/typeobj.rst:774
#: ../../c-api/typeobj.rst:792 ../../c-api/typeobj.rst:816
#: ../../c-api/typeobj.rst:833 ../../c-api/typeobj.rst:845
#: ../../c-api/typeobj.rst:857 ../../c-api/typeobj.rst:890
#: ../../c-api/typeobj.rst:908 ../../c-api/typeobj.rst:928
#: ../../c-api/typeobj.rst:949 ../../c-api/typeobj.rst:975
#: ../../c-api/typeobj.rst:994 ../../c-api/typeobj.rst:1010
#: ../../c-api/typeobj.rst:1047 ../../c-api/typeobj.rst:1058
#: ../../c-api/typeobj.rst:1068 ../../c-api/typeobj.rst:1078
#: ../../c-api/typeobj.rst:1092 ../../c-api/typeobj.rst:1111
#: ../../c-api/typeobj.rst:1134 ../../c-api/typeobj.rst:1179
#: ../../c-api/typeobj.rst:1203 ../../c-api/typeobj.rst:1257
#: ../../c-api/typeobj.rst:1318 ../../c-api/typeobj.rst:1377
#: ../../c-api/typeobj.rst:1407 ../../c-api/typeobj.rst:1439
#: ../../c-api/typeobj.rst:1462 ../../c-api/typeobj.rst:1475
#: ../../c-api/typeobj.rst:1490 ../../c-api/typeobj.rst:1504
#: ../../c-api/typeobj.rst:1534 ../../c-api/typeobj.rst:1554
#: ../../c-api/typeobj.rst:1580 ../../c-api/typeobj.rst:1598
#: ../../c-api/typeobj.rst:1638 ../../c-api/typeobj.rst:1689
#: ../../c-api/typeobj.rst:1706 ../../c-api/typeobj.rst:1744
#: ../../c-api/typeobj.rst:1765 ../../c-api/typeobj.rst:1797
#: ../../c-api/typeobj.rst:1814 ../../c-api/typeobj.rst:1825
#: ../../c-api/typeobj.rst:1835 ../../c-api/typeobj.rst:1844
#: ../../c-api/typeobj.rst:1854 ../../c-api/typeobj.rst:1868
#: ../../c-api/typeobj.rst:1906
msgid "**Inheritance:**"
msgstr ""

#: ../../c-api/typeobj.rst:504
msgid "These fields are not inherited by subtypes."
msgstr ""

#: ../../c-api/typeobj.rst:509
msgid ""
"This is the type object's reference count, initialized to ``1`` by the "
"``PyObject_HEAD_INIT`` macro.  Note that for statically allocated type "
"objects, the type's instances (objects whose :attr:`ob_type` points back "
"to the type) do *not* count as references.  But for dynamically allocated"
" type objects, the instances *do* count as references."
msgstr ""

#: ../../c-api/typeobj.rst:517 ../../c-api/typeobj.rst:553
#: ../../c-api/typeobj.rst:595
msgid "This field is not inherited by subtypes."
msgstr ""

#: ../../c-api/typeobj.rst:522
msgid ""
"This is the type's type, in other words its metatype.  It is initialized "
"by the argument to the ``PyObject_HEAD_INIT`` macro, and its value should"
" normally be ``&PyType_Type``.  However, for dynamically loadable "
"extension modules that must be usable on Windows (at least), the compiler"
" complains that this is not a valid initializer.  Therefore, the "
"convention is to pass ``NULL`` to the ``PyObject_HEAD_INIT`` macro and to"
" initialize this field explicitly at the start of the module's "
"initialization function, before doing anything else.  This is typically "
"done like this::"
msgstr ""

#: ../../c-api/typeobj.rst:533
msgid ""
"This should be done before any instances of the type are created. "
":c:func:`PyType_Ready` checks if :attr:`ob_type` is ``NULL``, and if so, "
"initializes it to the :attr:`ob_type` field of the base class. "
":c:func:`PyType_Ready` will not change this field if it is non-zero."
msgstr ""

#: ../../c-api/typeobj.rst:540 ../../c-api/typeobj.rst:684
#: ../../c-api/typeobj.rst:818 ../../c-api/typeobj.rst:910
#: ../../c-api/typeobj.rst:930 ../../c-api/typeobj.rst:1441
#: ../../c-api/typeobj.rst:1464 ../../c-api/typeobj.rst:1582
#: ../../c-api/typeobj.rst:1600 ../../c-api/typeobj.rst:1691
#: ../../c-api/typeobj.rst:1799 ../../c-api/typeobj.rst:1908
msgid "This field is inherited by subtypes."
msgstr ""

#: ../../c-api/typeobj.rst:544
msgid "PyVarObject Slots"
msgstr ""

#: ../../c-api/typeobj.rst:548
msgid ""
"For statically allocated type objects, this should be initialized to "
"zero.  For dynamically allocated type objects, this field has a special "
"internal meaning."
msgstr ""

#: ../../c-api/typeobj.rst:557
msgid "PyTypeObject Slots"
msgstr ""

#: ../../c-api/typeobj.rst:559
msgid ""
"Each slot has a section describing inheritance.  If "
":c:func:`PyType_Ready` may set a value when the field is set to ``NULL`` "
"then there will also be a \"Default\" section.  (Note that many fields "
"set on :c:type:`PyBaseObject_Type` and :c:type:`PyType_Type` effectively "
"act as defaults.)"
msgstr ""

#: ../../c-api/typeobj.rst:566
msgid ""
"Pointer to a NUL-terminated string containing the name of the type. For "
"types that are accessible as module globals, the string should be the "
"full module name, followed by a dot, followed by the type name; for "
"built-in types, it should be just the type name.  If the module is a "
"submodule of a package, the full package name is part of the full module "
"name.  For example, a type named :class:`T` defined in module :mod:`M` in"
" subpackage :mod:`Q` in package :mod:`P` should have the "
":c:member:`~PyTypeObject.tp_name` initializer ``\"P.Q.M.T\"``."
msgstr ""

#: ../../c-api/typeobj.rst:574
msgid ""
"For dynamically allocated type objects, this should just be the type "
"name, and the module name explicitly stored in the type dict as the value"
" for key ``'__module__'``."
msgstr ""

#: ../../c-api/typeobj.rst:578
msgid ""
"For statically allocated type objects, the tp_name field should contain a"
" dot. Everything before the last dot is made accessible as the "
":attr:`__module__` attribute, and everything after the last dot is made "
"accessible as the :attr:`~definition.__name__` attribute."
msgstr ""

#: ../../c-api/typeobj.rst:583
msgid ""
"If no dot is present, the entire :c:member:`~PyTypeObject.tp_name` field "
"is made accessible as the :attr:`~definition.__name__` attribute, and the"
" :attr:`__module__` attribute is undefined (unless explicitly set in the "
"dictionary, as explained above).  This means your type will be impossible"
" to pickle.  Additionally, it will not be listed in module documentations"
" created with pydoc."
msgstr ""

#: ../../c-api/typeobj.rst:589
msgid ""
"This field must not be ``NULL``.  It is the only required field in "
":c:func:`PyTypeObject` (other than potentially "
":c:member:`~PyTypeObject.tp_itemsize`)."
msgstr ""

#: ../../c-api/typeobj.rst:601
msgid "These fields allow calculating the size in bytes of instances of the type."
msgstr ""

#: ../../c-api/typeobj.rst:603
msgid ""
"There are two kinds of types: types with fixed-length instances have a "
"zero :c:member:`~PyTypeObject.tp_itemsize` field, types with variable-"
"length instances have a non-zero :c:member:`~PyTypeObject.tp_itemsize` "
"field.  For a type with fixed-length instances, all instances have the "
"same size, given in :c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../../c-api/typeobj.rst:608
msgid ""
"For a type with variable-length instances, the instances must have an "
":attr:`ob_size` field, and the instance size is "
":c:member:`~PyTypeObject.tp_basicsize` plus N times "
":c:member:`~PyTypeObject.tp_itemsize`, where N is the \"length\" of the "
"object.  The value of N is typically stored in the instance's "
":attr:`ob_size` field.  There are exceptions:  for example, ints use a "
"negative :attr:`ob_size` to indicate a negative number, and N is "
"``abs(ob_size)`` there.  Also, the presence of an :attr:`ob_size` field "
"in the instance layout doesn't mean that the instance structure is "
"variable-length (for example, the structure for the list type has fixed-"
"length instances, yet those instances have a meaningful :attr:`ob_size` "
"field)."
msgstr ""

#: ../../c-api/typeobj.rst:619
msgid ""
"The basic size includes the fields in the instance declared by the macro "
":c:macro:`PyObject_HEAD` or :c:macro:`PyObject_VAR_HEAD` (whichever is "
"used to declare the instance struct) and this in turn includes the "
":attr:`_ob_prev` and :attr:`_ob_next` fields if they are present.  This "
"means that the only correct way to get an initializer for the "
":c:member:`~PyTypeObject.tp_basicsize` is to use the ``sizeof`` operator "
"on the struct used to declare the instance layout. The basic size does "
"not include the GC header size."
msgstr ""

#: ../../c-api/typeobj.rst:627
msgid ""
"A note about alignment: if the variable items require a particular "
"alignment, this should be taken care of by the value of "
":c:member:`~PyTypeObject.tp_basicsize`.  Example: suppose a type "
"implements an array of ``double``. :c:member:`~PyTypeObject.tp_itemsize` "
"is ``sizeof(double)``. It is the programmer's responsibility that "
":c:member:`~PyTypeObject.tp_basicsize` is a multiple of "
"``sizeof(double)`` (assuming this is the alignment requirement for "
"``double``)."
msgstr ""

#: ../../c-api/typeobj.rst:634
msgid ""
"For any type with variable-length instances, this field must not be "
"``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:638
msgid ""
"These fields are inherited separately by subtypes.  If the base type has "
"a non-zero :c:member:`~PyTypeObject.tp_itemsize`, it is generally not "
"safe to set :c:member:`~PyTypeObject.tp_itemsize` to a different non-zero"
" value in a subtype (though this depends on the implementation of the "
"base type)."
msgstr ""

#: ../../c-api/typeobj.rst:646
msgid ""
"A pointer to the instance destructor function.  This function must be "
"defined unless the type guarantees that its instances will never be "
"deallocated (as is the case for the singletons ``None`` and "
"``Ellipsis``).  The function signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:652
msgid ""
"The destructor function is called by the :c:func:`Py_DECREF` and "
":c:func:`Py_XDECREF` macros when the new reference count is zero.  At "
"this point, the instance is still in existence, but there are no "
"references to it.  The destructor function should free all references "
"which the instance owns, free all memory buffers owned by the instance "
"(using the freeing function corresponding to the allocation function used"
" to allocate the buffer), and call the type's "
":c:member:`~PyTypeObject.tp_free` function.  If the type is not "
"subtypable (doesn't have the :const:`Py_TPFLAGS_BASETYPE` flag bit set), "
"it is permissible to call the object deallocator directly instead of via "
":c:member:`~PyTypeObject.tp_free`.  The object deallocator should be the "
"one used to allocate the instance; this is normally "
":c:func:`PyObject_Del` if the instance was allocated using "
":c:func:`PyObject_New` or :c:func:`PyObject_VarNew`, or "
":c:func:`PyObject_GC_Del` if the instance was allocated using "
":c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar`."
msgstr ""

#: ../../c-api/typeobj.rst:667
msgid ""
"Finally, if the type is heap allocated (:const:`Py_TPFLAGS_HEAPTYPE`), "
"the deallocator should decrement the reference count for its type object "
"after calling the type deallocator. In order to avoid dangling pointers, "
"the recommended way to achieve this is:"
msgstr ""

#: ../../c-api/typeobj.rst:689
msgid ""
"An optional offset to a per-instance function that implements calling the"
" object using the *vectorcall* protocol, a more efficient alternative of "
"the simpler :c:member:`~PyTypeObject.tp_call`."
msgstr ""

#: ../../c-api/typeobj.rst:693
msgid ""
"This field is only used if the flag :const:`_Py_TPFLAGS_HAVE_VECTORCALL` "
"is set. If so, this must be a positive integer containing the offset in "
"the instance of a :c:type:`vectorcallfunc` pointer. The signature is the "
"same as for :c:func:`_PyObject_Vectorcall`::"
msgstr ""

#: ../../c-api/typeobj.rst:700
msgid ""
"The *vectorcallfunc* pointer may be zero, in which case the instance "
"behaves as if :const:`_Py_TPFLAGS_HAVE_VECTORCALL` was not set: calling "
"the instance falls back to :c:member:`~PyTypeObject.tp_call`."
msgstr ""

#: ../../c-api/typeobj.rst:704
msgid ""
"Any class that sets ``_Py_TPFLAGS_HAVE_VECTORCALL`` must also set "
":c:member:`~PyTypeObject.tp_call` and make sure its behaviour is "
"consistent with the *vectorcallfunc* function. This can be done by "
"setting *tp_call* to ``PyVectorcall_Call``:"
msgstr ""

#: ../../c-api/typeobj.rst:711
msgid ""
"Call *callable*'s *vectorcallfunc* with positional and keyword arguments "
"given in a tuple and dict, respectively."
msgstr ""

#: ../../c-api/typeobj.rst:714
msgid ""
"This function is intended to be used in the ``tp_call`` slot. It does not"
" fall back to ``tp_call`` and it currently does not check the "
"``_Py_TPFLAGS_HAVE_VECTORCALL`` flag. To call an object, use one of the "
":c:func:`PyObject_Call <PyObject_Call>` functions instead."
msgstr ""

#: ../../c-api/typeobj.rst:722
msgid ""
"It is not recommended for :ref:`heap types <heap-types>` to implement the"
" vectorcall protocol. When a user sets ``__call__`` in Python code, only "
"``tp_call`` is updated, possibly making it inconsistent with the "
"vectorcall function."
msgstr ""

#: ../../c-api/typeobj.rst:729
msgid ""
"The semantics of the ``tp_vectorcall_offset`` slot are provisional and "
"expected to be finalized in Python 3.9. If you use vectorcall, plan for "
"updating your code for Python 3.9."
msgstr ""

#: ../../c-api/typeobj.rst:735
msgid ""
"This slot was used for print formatting in Python 2.x. In Python 3.0 to "
"3.7, it was reserved and named ``tp_print``."
msgstr ""

#: ../../c-api/typeobj.rst:740
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_call`: a subtype inherits "
":c:member:`~PyTypeObject.tp_vectorcall_offset` from its base type when "
"the subtype’s :c:member:`~PyTypeObject.tp_call` is ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:745
msgid ""
"Note that `heap types`_ (including subclasses defined in Python) do not "
"inherit the :const:`_Py_TPFLAGS_HAVE_VECTORCALL` flag."
msgstr ""

#: ../../c-api/typeobj.rst:751
msgid "An optional pointer to the get-attribute-string function."
msgstr ""

#: ../../c-api/typeobj.rst:753
msgid ""
"This field is deprecated.  When it is defined, it should point to a "
"function that acts the same as the :c:member:`~PyTypeObject.tp_getattro` "
"function, but taking a C string instead of a Python string object to give"
" the attribute name."
msgstr ""

#: ../../c-api/typeobj.rst:759 ../../c-api/typeobj.rst:951
msgid "Group: :attr:`tp_getattr`, :attr:`tp_getattro`"
msgstr ""

#: ../../c-api/typeobj.rst:761
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_getattro`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` are both ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:768 ../../c-api/typeobj.rst:964
msgid "An optional pointer to the function for setting and deleting attributes."
msgstr ""

#: ../../c-api/typeobj.rst:770
msgid ""
"This field is deprecated.  When it is defined, it should point to a "
"function that acts the same as the :c:member:`~PyTypeObject.tp_setattro` "
"function, but taking a C string instead of a Python string object to give"
" the attribute name."
msgstr ""

#: ../../c-api/typeobj.rst:776 ../../c-api/typeobj.rst:977
msgid "Group: :attr:`tp_setattr`, :attr:`tp_setattro`"
msgstr ""

#: ../../c-api/typeobj.rst:778
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_setattro`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` are both ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:785
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement :term:`awaitable` and :term:`asynchronous "
"iterator` protocols at the C-level.  See :ref:`async-structs` for "
"details."
msgstr ""

#: ../../c-api/typeobj.rst:789
msgid "Formerly known as ``tp_compare`` and ``tp_reserved``."
msgstr ""

#: ../../c-api/typeobj.rst:794
msgid ""
"The :c:member:`~PyTypeObject.tp_as_async` field is not inherited, but the"
" contained fields are inherited individually."
msgstr ""

#: ../../c-api/typeobj.rst:802
msgid ""
"An optional pointer to a function that implements the built-in function "
":func:`repr`."
msgstr ""

#: ../../c-api/typeobj.rst:805
msgid "The signature is the same as for :c:func:`PyObject_Repr`::"
msgstr ""

#: ../../c-api/typeobj.rst:809
msgid ""
"The function must return a string or a Unicode object.  Ideally, this "
"function should return a string that, when passed to :func:`eval`, given "
"a suitable environment, returns an object with the same value.  If this "
"is not feasible, it should return a string starting with ``'<'`` and "
"ending with ``'>'`` from which both the type and the value of the object "
"can be deduced."
msgstr ""

#: ../../c-api/typeobj.rst:820 ../../c-api/typeobj.rst:932
#: ../../c-api/typeobj.rst:957 ../../c-api/typeobj.rst:983
#: ../../c-api/typeobj.rst:1025 ../../c-api/typeobj.rst:1386
#: ../../c-api/typeobj.rst:1538 ../../c-api/typeobj.rst:1559
#: ../../c-api/typeobj.rst:1657 ../../c-api/typeobj.rst:1693
#: ../../c-api/typeobj.rst:1711 ../../c-api/typeobj.rst:1749
#: ../../c-api/typeobj.rst:1770 ../../c-api/typeobj.rst:1801
msgid "**Default:**"
msgstr ""

#: ../../c-api/typeobj.rst:822
#, python-format
msgid ""
"When this field is not set, a string of the form ``<%s object at %p>`` is"
" returned, where ``%s`` is replaced by the type name, and ``%p`` by the "
"object's memory address."
msgstr ""

#: ../../c-api/typeobj.rst:829
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the number protocol.  These fields are documented"
" in :ref:`number-structs`."
msgstr ""

#: ../../c-api/typeobj.rst:835
msgid ""
"The :c:member:`~PyTypeObject.tp_as_number` field is not inherited, but "
"the contained fields are inherited individually."
msgstr ""

#: ../../c-api/typeobj.rst:841
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the sequence protocol.  These fields are "
"documented in :ref:`sequence-structs`."
msgstr ""

#: ../../c-api/typeobj.rst:847
msgid ""
"The :c:member:`~PyTypeObject.tp_as_sequence` field is not inherited, but "
"the contained fields are inherited individually."
msgstr ""

#: ../../c-api/typeobj.rst:853
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the mapping protocol.  These fields are "
"documented in :ref:`mapping-structs`."
msgstr ""

#: ../../c-api/typeobj.rst:859
msgid ""
"The :c:member:`~PyTypeObject.tp_as_mapping` field is not inherited, but "
"the contained fields are inherited individually."
msgstr ""

#: ../../c-api/typeobj.rst:867
msgid ""
"An optional pointer to a function that implements the built-in function "
":func:`hash`."
msgstr ""

#: ../../c-api/typeobj.rst:870
msgid "The signature is the same as for :c:func:`PyObject_Hash`::"
msgstr ""

#: ../../c-api/typeobj.rst:874
msgid ""
"The value ``-1`` should not be returned as a normal return value; when an"
" error occurs during the computation of the hash value, the function "
"should set an exception and return ``-1``."
msgstr ""

#: ../../c-api/typeobj.rst:878
msgid ""
"When this field is not set (*and* :attr:`tp_richcompare` is not set), an "
"attempt to take the hash of the object raises :exc:`TypeError`. This is "
"the same as setting it to :c:func:`PyObject_HashNotImplemented`."
msgstr ""

#: ../../c-api/typeobj.rst:882
msgid ""
"This field can be set explicitly to :c:func:`PyObject_HashNotImplemented`"
" to block inheritance of the hash method from a parent type. This is "
"interpreted as the equivalent of ``__hash__ = None`` at the Python level,"
" causing ``isinstance(o, collections.Hashable)`` to correctly return "
"``False``. Note that the converse is also true - setting ``__hash__ = "
"None`` on a class at the Python level will result in the ``tp_hash`` slot"
" being set to :c:func:`PyObject_HashNotImplemented`."
msgstr ""

#: ../../c-api/typeobj.rst:892 ../../c-api/typeobj.rst:1379
msgid "Group: :attr:`tp_hash`, :attr:`tp_richcompare`"
msgstr ""

#: ../../c-api/typeobj.rst:894
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_richcompare`: a subtype inherits both of "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash`, when the subtype's "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash` are both ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:902
msgid ""
"An optional pointer to a function that implements calling the object.  "
"This should be ``NULL`` if the object is not callable.  The signature is "
"the same as for :c:func:`PyObject_Call`::"
msgstr ""

#: ../../c-api/typeobj.rst:915
msgid ""
"An optional pointer to a function that implements the built-in operation "
":func:`str`.  (Note that :class:`str` is a type now, and :func:`str` "
"calls the constructor for that type.  This constructor calls "
":c:func:`PyObject_Str` to do the actual work, and :c:func:`PyObject_Str` "
"will call this handler.)"
msgstr ""

#: ../../c-api/typeobj.rst:920
msgid "The signature is the same as for :c:func:`PyObject_Str`::"
msgstr ""

#: ../../c-api/typeobj.rst:924
msgid ""
"The function must return a string or a Unicode object.  It should be a "
"\"friendly\" string representation of the object, as this is the "
"representation that will be used, among other things, by the "
":func:`print` function."
msgstr ""

#: ../../c-api/typeobj.rst:934
msgid ""
"When this field is not set, :c:func:`PyObject_Repr` is called to return a"
" string representation."
msgstr ""

#: ../../c-api/typeobj.rst:940
msgid "An optional pointer to the get-attribute function."
msgstr ""

#: ../../c-api/typeobj.rst:942
msgid "The signature is the same as for :c:func:`PyObject_GetAttr`::"
msgstr ""

#: ../../c-api/typeobj.rst:946
msgid ""
"It is usually convenient to set this field to "
":c:func:`PyObject_GenericGetAttr`, which implements the normal way of "
"looking for object attributes."
msgstr ""

#: ../../c-api/typeobj.rst:953
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_getattr`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` are both ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:959
msgid ":c:type:`PyBaseObject_Type` uses :c:func:`PyObject_GenericGetAttr`."
msgstr ""

#: ../../c-api/typeobj.rst:966
msgid "The signature is the same as for :c:func:`PyObject_SetAttr`::"
msgstr ""

#: ../../c-api/typeobj.rst:970
msgid ""
"In addition, setting *value* to ``NULL`` to delete an attribute must be "
"supported.  It is usually convenient to set this field to "
":c:func:`PyObject_GenericSetAttr`, which implements the normal way of "
"setting object attributes."
msgstr ""

#: ../../c-api/typeobj.rst:979
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_setattr`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` are both ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:985
msgid ":c:type:`PyBaseObject_Type` uses :c:func:`PyObject_GenericSetAttr`."
msgstr ""

#: ../../c-api/typeobj.rst:990
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the buffer interface.  These fields are "
"documented in :ref:`buffer-structs`."
msgstr ""

#: ../../c-api/typeobj.rst:996
msgid ""
"The :c:member:`~PyTypeObject.tp_as_buffer` field is not inherited, but "
"the contained fields are inherited individually."
msgstr ""

#: ../../c-api/typeobj.rst:1002
msgid ""
"This field is a bit mask of various flags.  Some flags indicate variant "
"semantics for certain situations; others are used to indicate that "
"certain fields in the type object (or in the extension structures "
"referenced via :c:member:`~PyTypeObject.tp_as_number`, "
":c:member:`~PyTypeObject.tp_as_sequence`, "
":c:member:`~PyTypeObject.tp_as_mapping`, and "
":c:member:`~PyTypeObject.tp_as_buffer`) that were historically not always"
" present are valid; if such a flag bit is clear, the type fields it "
"guards must not be accessed and must be considered to have a zero or "
"``NULL`` value instead."
msgstr ""

#: ../../c-api/typeobj.rst:1012
msgid ""
"Inheritance of this field is complicated.  Most flag bits are inherited "
"individually, i.e. if the base type has a flag bit set, the subtype "
"inherits this flag bit.  The flag bits that pertain to extension "
"structures are strictly inherited if the extension structure is "
"inherited, i.e. the base type's value of the flag bit is copied into the "
"subtype together with a pointer to the extension structure.  The "
":const:`Py_TPFLAGS_HAVE_GC` flag bit is inherited together with the "
":c:member:`~PyTypeObject.tp_traverse` and "
":c:member:`~PyTypeObject.tp_clear` fields, i.e. if the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the subtype and the "
":c:member:`~PyTypeObject.tp_traverse` and "
":c:member:`~PyTypeObject.tp_clear` fields in the subtype exist and have "
"``NULL`` values."
msgstr ""

#: ../../c-api/typeobj.rst:1027
msgid ""
":c:type:`PyBaseObject_Type` uses ``Py_TPFLAGS_DEFAULT | "
"Py_TPFLAGS_BASETYPE``."
msgstr ""

#: ../../c-api/typeobj.rst:1030
msgid "**Bit Masks:**"
msgstr ""

#: ../../c-api/typeobj.rst:1032
msgid ""
"The following bit masks are currently defined; these can be ORed together"
" using the ``|`` operator to form the value of the "
":c:member:`~PyTypeObject.tp_flags` field.  The macro "
":c:func:`PyType_HasFeature` takes a type and a flags value, *tp* and *f*,"
" and checks whether ``tp->tp_flags & f`` is non-zero."
msgstr ""

#: ../../c-api/typeobj.rst:1039
msgid ""
"This bit is set when the type object itself is allocated on the heap, for"
" example, types created dynamically using :c:func:`PyType_FromSpec`.  In "
"this case, the :attr:`ob_type` field of its instances is considered a "
"reference to the type, and the type object is INCREF'ed when a new "
"instance is created, and DECREF'ed when an instance is destroyed (this "
"does not apply to instances of subtypes; only the type referenced by the "
"instance's ob_type gets INCREF'ed or DECREF'ed)."
msgstr ""

#: ../../c-api/typeobj.rst:1049 ../../c-api/typeobj.rst:1060
#: ../../c-api/typeobj.rst:1070 ../../c-api/typeobj.rst:1080
#: ../../c-api/typeobj.rst:1113
msgid "???"
msgstr ""

#: ../../c-api/typeobj.rst:1054
msgid ""
"This bit is set when the type can be used as the base type of another "
"type.  If this bit is clear, the type cannot be subtyped (similar to a "
"\"final\" class in Java)."
msgstr ""

#: ../../c-api/typeobj.rst:1065
msgid ""
"This bit is set when the type object has been fully initialized by "
":c:func:`PyType_Ready`."
msgstr ""

#: ../../c-api/typeobj.rst:1075
msgid ""
"This bit is set while :c:func:`PyType_Ready` is in the process of "
"initializing the type object."
msgstr ""

#: ../../c-api/typeobj.rst:1085
msgid ""
"This bit is set when the object supports garbage collection.  If this bit"
" is set, instances must be created using :c:func:`PyObject_GC_New` and "
"destroyed using :c:func:`PyObject_GC_Del`.  More information in section "
":ref:`supporting-cycle-detection`.  This bit also implies that the GC-"
"related fields :c:member:`~PyTypeObject.tp_traverse` and "
":c:member:`~PyTypeObject.tp_clear` are present in the type object."
msgstr ""

#: ../../c-api/typeobj.rst:1094 ../../c-api/typeobj.rst:1259
#: ../../c-api/typeobj.rst:1320
msgid "Group: :const:`Py_TPFLAGS_HAVE_GC`, :attr:`tp_traverse`, :attr:`tp_clear`"
msgstr ""

#: ../../c-api/typeobj.rst:1096
msgid ""
"The :const:`Py_TPFLAGS_HAVE_GC` flag bit is inherited together with the "
":attr:`tp_traverse` and :attr:`tp_clear` fields, i.e.  if the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the subtype and the "
":attr:`tp_traverse` and :attr:`tp_clear` fields in the subtype exist and "
"have ``NULL`` values."
msgstr ""

#: ../../c-api/typeobj.rst:1106
msgid ""
"This is a bitmask of all the bits that pertain to the existence of "
"certain fields in the type object and its extension structures. "
"Currently, it includes the following bits: "
":const:`Py_TPFLAGS_HAVE_STACKLESS_EXTENSION`, "
":const:`Py_TPFLAGS_HAVE_VERSION_TAG`."
msgstr ""

#: ../../c-api/typeobj.rst:1118
msgid "This bit indicates that objects behave like unbound methods."
msgstr ""

#: ../../c-api/typeobj.rst:1120
msgid "If this flag is set for ``type(meth)``, then:"
msgstr ""

#: ../../c-api/typeobj.rst:1122
msgid ""
"``meth.__get__(obj, cls)(*args, **kwds)`` (with ``obj`` not None) must be"
" equivalent to ``meth(obj, *args, **kwds)``."
msgstr ""

#: ../../c-api/typeobj.rst:1125
msgid ""
"``meth.__get__(None, cls)(*args, **kwds)`` must be equivalent to "
"``meth(*args, **kwds)``."
msgstr ""

#: ../../c-api/typeobj.rst:1128
msgid ""
"This flag enables an optimization for typical method calls like "
"``obj.meth()``: it avoids creating a temporary \"bound method\" object "
"for ``obj.meth``."
msgstr ""

#: ../../c-api/typeobj.rst:1136
msgid ""
"This flag is never inherited by heap types. For extension types, it is "
"inherited whenever :c:member:`~PyTypeObject.tp_descr_get` is inherited."
msgstr ""

#: ../../c-api/typeobj.rst:1153
msgid ""
"These flags are used by functions such as :c:func:`PyLong_Check` to "
"quickly determine if a type is a subclass of a built-in type; such "
"specific checks are faster than a generic check, like "
":c:func:`PyObject_IsInstance`. Custom types that inherit from built-ins "
"should have their :c:member:`~PyTypeObject.tp_flags` set appropriately, "
"or the code that interacts with such types will behave differently "
"depending on what kind of check is used."
msgstr ""

#: ../../c-api/typeobj.rst:1164
msgid ""
"This bit is set when the :c:member:`~PyTypeObject.tp_finalize` slot is "
"present in the type structure."
msgstr ""

#: ../../c-api/typeobj.rst:1169
msgid ""
"This flag isn't necessary anymore, as the interpreter assumes the "
":c:member:`~PyTypeObject.tp_finalize` slot is always present in the type "
"structure."
msgstr ""

#: ../../c-api/typeobj.rst:1176
msgid ""
"This bit is set when the class implements the vectorcall protocol. See "
":c:member:`~PyTypeObject.tp_vectorcall_offset` for details."
msgstr ""

#: ../../c-api/typeobj.rst:1181
msgid ""
"This bit is set on *static* subtypes if ``tp_flags`` is not overridden: a"
" subtype inherits ``_Py_TPFLAGS_HAVE_VECTORCALL`` from its base type when"
" the subtype’s :c:member:`~PyTypeObject.tp_call` is ``NULL`` and the "
"subtype's ``Py_TPFLAGS_HEAPTYPE`` is not set."
msgstr ""

#: ../../c-api/typeobj.rst:1186
msgid "`Heap types`_ do not inherit ``_Py_TPFLAGS_HAVE_VECTORCALL``."
msgstr ""

#: ../../c-api/typeobj.rst:1190
msgid ""
"This flag is provisional and expected to become public in Python 3.9, "
"with a different name and, possibly, changed semantics. If you use "
"vectorcall, plan for updating your code for Python 3.9."
msgstr ""

#: ../../c-api/typeobj.rst:1199
msgid ""
"An optional pointer to a NUL-terminated C string giving the docstring for"
" this type object.  This is exposed as the :attr:`__doc__` attribute on "
"the type and instances of the type."
msgstr ""

#: ../../c-api/typeobj.rst:1205
msgid "This field is *not* inherited by subtypes."
msgstr ""

#: ../../c-api/typeobj.rst:1210
msgid ""
"An optional pointer to a traversal function for the garbage collector.  "
"This is only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  "
"The signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1215 ../../c-api/typeobj.rst:1315
msgid ""
"More information about Python's garbage collection scheme can be found in"
" section :ref:`supporting-cycle-detection`."
msgstr ""

#: ../../c-api/typeobj.rst:1218
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` pointer is used by the garbage "
"collector to detect reference cycles. A typical implementation of a "
":c:member:`~PyTypeObject.tp_traverse` function simply calls "
":c:func:`Py_VISIT` on each of the instance's members that are Python "
"objects that the instance owns. For example, this is function "
":c:func:`local_traverse` from the :mod:`_thread` extension module::"
msgstr ""

#: ../../c-api/typeobj.rst:1233
msgid ""
"Note that :c:func:`Py_VISIT` is called only on those members that can "
"participate in reference cycles.  Although there is also a ``self->key`` "
"member, it can only be ``NULL`` or a Python string and therefore cannot "
"be part of a reference cycle."
msgstr ""

#: ../../c-api/typeobj.rst:1237
msgid ""
"On the other hand, even if you know a member can never be part of a "
"cycle, as a debugging aid you may want to visit it anyway just so the "
":mod:`gc` module's :func:`~gc.get_referents` function will include it."
msgstr ""

#: ../../c-api/typeobj.rst:1242
msgid ""
"When implementing :c:member:`~PyTypeObject.tp_traverse`, only the members"
" that the instance *owns* (by having strong references to them) must be "
"visited. For instance, if an object supports weak references via the "
":c:member:`~PyTypeObject.tp_weaklist` slot, the pointer supporting the "
"linked list (what *tp_weaklist* points to) must **not** be visited as the"
" instance does not directly own the weak references to itself (the "
"weakreference list is there to support the weak reference machinery, but "
"the instance has no strong reference to the elements inside it, as they "
"are allowed to be removed even if the instance is still alive)."
msgstr ""

#: ../../c-api/typeobj.rst:1253
msgid ""
"Note that :c:func:`Py_VISIT` requires the *visit* and *arg* parameters to"
" :c:func:`local_traverse` to have these specific names; don't name them "
"just anything."
msgstr ""

#: ../../c-api/typeobj.rst:1261
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_clear` and the :const:`Py_TPFLAGS_HAVE_GC` "
"flag bit: the flag bit, :c:member:`~PyTypeObject.tp_traverse`, and "
":c:member:`~PyTypeObject.tp_clear` are all inherited from the base type "
"if they are all zero in the subtype."
msgstr ""

#: ../../c-api/typeobj.rst:1269
msgid ""
"An optional pointer to a clear function for the garbage collector. This "
"is only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  The "
"signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1274
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` member function is used to break "
"reference cycles in cyclic garbage detected by the garbage collector.  "
"Taken together, all :c:member:`~PyTypeObject.tp_clear` functions in the "
"system must combine to break all reference cycles.  This is subtle, and "
"if in any doubt supply a :c:member:`~PyTypeObject.tp_clear` function.  "
"For example, the tuple type does not implement a "
":c:member:`~PyTypeObject.tp_clear` function, because it's possible to "
"prove that no reference cycle can be composed entirely of tuples. "
"Therefore the :c:member:`~PyTypeObject.tp_clear` functions of other types"
" must be sufficient to break any cycle containing a tuple.  This isn't "
"immediately obvious, and there's rarely a good reason to avoid "
"implementing :c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../../c-api/typeobj.rst:1284
msgid ""
"Implementations of :c:member:`~PyTypeObject.tp_clear` should drop the "
"instance's references to those of its members that may be Python objects,"
" and set its pointers to those members to ``NULL``, as in the following "
"example::"
msgstr ""

#: ../../c-api/typeobj.rst:1298
msgid ""
"The :c:func:`Py_CLEAR` macro should be used, because clearing references "
"is delicate:  the reference to the contained object must not be "
"decremented until after the pointer to the contained object is set to "
"``NULL``.  This is because decrementing the reference count may cause the"
" contained object to become trash, triggering a chain of reclamation "
"activity that may include invoking arbitrary Python code (due to "
"finalizers, or weakref callbacks, associated with the contained object). "
"If it's possible for such code to reference *self* again, it's important "
"that the pointer to the contained object be ``NULL`` at that time, so "
"that *self* knows the contained object can no longer be used.  The "
":c:func:`Py_CLEAR` macro performs the operations in a safe order."
msgstr ""

#: ../../c-api/typeobj.rst:1309
msgid ""
"Because the goal of :c:member:`~PyTypeObject.tp_clear` functions is to "
"break reference cycles, it's not necessary to clear contained objects "
"like Python strings or Python integers, which can't participate in "
"reference cycles. On the other hand, it may be convenient to clear all "
"contained Python objects, and write the type's "
":c:member:`~PyTypeObject.tp_dealloc` function to invoke "
":c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../../c-api/typeobj.rst:1322
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_traverse` and the :const:`Py_TPFLAGS_HAVE_GC`"
" flag bit: the flag bit, :c:member:`~PyTypeObject.tp_traverse`, and "
":c:member:`~PyTypeObject.tp_clear` are all inherited from the base type "
"if they are all zero in the subtype."
msgstr ""

#: ../../c-api/typeobj.rst:1330
msgid "An optional pointer to the rich comparison function, whose signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1334
msgid ""
"The first parameter is guaranteed to be an instance of the type that is "
"defined by :c:type:`PyTypeObject`."
msgstr ""

#: ../../c-api/typeobj.rst:1337
msgid ""
"The function should return the result of the comparison (usually "
"``Py_True`` or ``Py_False``).  If the comparison is undefined, it must "
"return ``Py_NotImplemented``, if another error occurred it must return "
"``NULL`` and set an exception condition."
msgstr ""

#: ../../c-api/typeobj.rst:1342
msgid ""
"The following constants are defined to be used as the third argument for "
":c:member:`~PyTypeObject.tp_richcompare` and for "
":c:func:`PyObject_RichCompare`:"
msgstr ""

#: ../../c-api/typeobj.rst:1346
msgid "Constant"
msgstr ""

#: ../../c-api/typeobj.rst:1346
msgid "Comparison"
msgstr ""

#: ../../c-api/typeobj.rst:1348
msgid ":const:`Py_LT`"
msgstr ""

#: ../../c-api/typeobj.rst:1348
msgid "``<``"
msgstr ""

#: ../../c-api/typeobj.rst:1350
msgid ":const:`Py_LE`"
msgstr ""

#: ../../c-api/typeobj.rst:1350
msgid "``<=``"
msgstr ""

#: ../../c-api/typeobj.rst:1352
msgid ":const:`Py_EQ`"
msgstr ""

#: ../../c-api/typeobj.rst:1352
msgid "``==``"
msgstr ""

#: ../../c-api/typeobj.rst:1354
msgid ":const:`Py_NE`"
msgstr ""

#: ../../c-api/typeobj.rst:1354
msgid "``!=``"
msgstr ""

#: ../../c-api/typeobj.rst:1356
msgid ":const:`Py_GT`"
msgstr ""

#: ../../c-api/typeobj.rst:1356
msgid "``>``"
msgstr ""

#: ../../c-api/typeobj.rst:1358
msgid ":const:`Py_GE`"
msgstr ""

#: ../../c-api/typeobj.rst:1358
msgid "``>=``"
msgstr ""

#: ../../c-api/typeobj.rst:1361
msgid "The following macro is defined to ease writing rich comparison functions:"
msgstr ""

#: ../../c-api/typeobj.rst:1365
msgid ""
"Return ``Py_True`` or ``Py_False`` from the function, depending on the "
"result of a comparison. VAL_A and VAL_B must be orderable by C comparison"
" operators (for example, they may be C ints or floats). The third "
"argument specifies the requested operation, as for "
":c:func:`PyObject_RichCompare`."
msgstr ""

#: ../../c-api/typeobj.rst:1371
msgid "The return value's reference count is properly incremented."
msgstr ""

#: ../../c-api/typeobj.rst:1373
msgid "On error, sets an exception and returns ``NULL`` from the function."
msgstr ""

#: ../../c-api/typeobj.rst:1381
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_hash`: a subtype inherits "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash` when the subtype's "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash` are both ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:1388
msgid ""
":c:type:`PyBaseObject_Type` provides a :attr:`tp_richcompare` "
"implementation, which may be inherited.  However, if only :attr:`tp_hash`"
" is defined, not even the inherited function is used and instances of the"
" type will not be able to participate in any comparisons."
msgstr ""

#: ../../c-api/typeobj.rst:1397
msgid ""
"If the instances of this type are weakly referenceable, this field is "
"greater than zero and contains the offset in the instance structure of "
"the weak reference list head (ignoring the GC header, if present); this "
"offset is used by :c:func:`PyObject_ClearWeakRefs` and the "
":c:func:`PyWeakref_\\*` functions.  The instance structure needs to "
"include a field of type :c:type:`PyObject*` which is initialized to "
"``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:1404
msgid ""
"Do not confuse this field with :c:member:`~PyTypeObject.tp_weaklist`; "
"that is the list head for weak references to the type object itself."
msgstr ""

#: ../../c-api/typeobj.rst:1409
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype uses a "
"different weak reference list head than the base type.  Since the list "
"head is always found via :c:member:`~PyTypeObject.tp_weaklistoffset`, "
"this should not be a problem."
msgstr ""

#: ../../c-api/typeobj.rst:1414
msgid ""
"When a type defined by a class statement has no :attr:`~object.__slots__`"
" declaration, and none of its base types are weakly referenceable, the "
"type is made weakly referenceable by adding a weak reference list head "
"slot to the instance layout and setting the "
":c:member:`~PyTypeObject.tp_weaklistoffset` of that slot's offset."
msgstr ""

#: ../../c-api/typeobj.rst:1419
msgid ""
"When a type's :attr:`__slots__` declaration contains a slot named "
":attr:`__weakref__`, that slot becomes the weak reference list head for "
"instances of the type, and the slot's offset is stored in the type's "
":c:member:`~PyTypeObject.tp_weaklistoffset`."
msgstr ""

#: ../../c-api/typeobj.rst:1424
msgid ""
"When a type's :attr:`__slots__` declaration does not contain a slot named"
" :attr:`__weakref__`, the type inherits its "
":c:member:`~PyTypeObject.tp_weaklistoffset` from its base type."
msgstr ""

#: ../../c-api/typeobj.rst:1431
msgid ""
"An optional pointer to a function that returns an iterator for the "
"object.  Its presence normally signals that the instances of this type "
"are iterable (although sequences may be iterable without this function)."
msgstr ""

#: ../../c-api/typeobj.rst:1435
msgid "This function has the same signature as :c:func:`PyObject_GetIter`::"
msgstr ""

#: ../../c-api/typeobj.rst:1446
msgid ""
"An optional pointer to a function that returns the next item in an "
"iterator. The signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1451
msgid ""
"When the iterator is exhausted, it must return ``NULL``; a "
":exc:`StopIteration` exception may or may not be set.  When another error"
" occurs, it must return ``NULL`` too.  Its presence signals that the "
"instances of this type are iterators."
msgstr ""

#: ../../c-api/typeobj.rst:1456
msgid ""
"Iterator types should also define the :c:member:`~PyTypeObject.tp_iter` "
"function, and that function should return the iterator instance itself "
"(not a new iterator instance)."
msgstr ""

#: ../../c-api/typeobj.rst:1460
msgid "This function has the same signature as :c:func:`PyIter_Next`."
msgstr ""

#: ../../c-api/typeobj.rst:1469
msgid ""
"An optional pointer to a static ``NULL``-terminated array of "
":c:type:`PyMethodDef` structures, declaring regular methods of this type."
msgstr ""

#: ../../c-api/typeobj.rst:1472
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :c:member:`~PyTypeObject.tp_dict` below) containing a method "
"descriptor."
msgstr ""

#: ../../c-api/typeobj.rst:1477
msgid ""
"This field is not inherited by subtypes (methods are inherited through a "
"different mechanism)."
msgstr ""

#: ../../c-api/typeobj.rst:1483
msgid ""
"An optional pointer to a static ``NULL``-terminated array of "
":c:type:`PyMemberDef` structures, declaring regular data members (fields "
"or slots) of instances of this type."
msgstr ""

#: ../../c-api/typeobj.rst:1487
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :c:member:`~PyTypeObject.tp_dict` below) containing a member "
"descriptor."
msgstr ""

#: ../../c-api/typeobj.rst:1492
msgid ""
"This field is not inherited by subtypes (members are inherited through a "
"different mechanism)."
msgstr ""

#: ../../c-api/typeobj.rst:1498
msgid ""
"An optional pointer to a static ``NULL``-terminated array of "
":c:type:`PyGetSetDef` structures, declaring computed attributes of "
"instances of this type."
msgstr ""

#: ../../c-api/typeobj.rst:1501
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :c:member:`~PyTypeObject.tp_dict` below) containing a getset "
"descriptor."
msgstr ""

#: ../../c-api/typeobj.rst:1506
msgid ""
"This field is not inherited by subtypes (computed attributes are "
"inherited through a different mechanism)."
msgstr ""

#: ../../c-api/typeobj.rst:1512
msgid ""
"An optional pointer to a base type from which type properties are "
"inherited.  At this level, only single inheritance is supported; multiple"
" inheritance require dynamically creating a type object by calling the "
"metatype."
msgstr ""

#: ../../c-api/typeobj.rst:1520
msgid ""
"Slot initialization is subject to the rules of initializing globals. C99 "
"requires the initializers to be \"address constants\".  Function "
"designators like :c:func:`PyType_GenericNew`, with implicit conversion to"
" a pointer, are valid C99 address constants."
msgstr ""

#: ../../c-api/typeobj.rst:1525
msgid ""
"However, the unary '&' operator applied to a non-static variable like "
":c:func:`PyBaseObject_Type` is not required to produce an address "
"constant.  Compilers may support this (gcc does), MSVC does not. Both "
"compilers are strictly standard conforming in this particular behavior."
msgstr ""

#: ../../c-api/typeobj.rst:1531
msgid ""
"Consequently, :c:member:`~PyTypeObject.tp_base` should be set in the "
"extension module's init function."
msgstr ""

#: ../../c-api/typeobj.rst:1536
msgid "This field is not inherited by subtypes (obviously)."
msgstr ""

#: ../../c-api/typeobj.rst:1540
msgid ""
"This field defaults to ``&PyBaseObject_Type`` (which to Python "
"programmers is known as the type :class:`object`)."
msgstr ""

#: ../../c-api/typeobj.rst:1546
msgid "The type's dictionary is stored here by :c:func:`PyType_Ready`."
msgstr ""

#: ../../c-api/typeobj.rst:1548
msgid ""
"This field should normally be initialized to ``NULL`` before PyType_Ready"
" is called; it may also be initialized to a dictionary containing initial"
" attributes for the type.  Once :c:func:`PyType_Ready` has initialized "
"the type, extra attributes for the type may be added to this dictionary "
"only if they don't correspond to overloaded operations (like "
":meth:`__add__`)."
msgstr ""

#: ../../c-api/typeobj.rst:1556
msgid ""
"This field is not inherited by subtypes (though the attributes defined in"
" here are inherited through a different mechanism)."
msgstr ""

#: ../../c-api/typeobj.rst:1561
msgid ""
"If this field is ``NULL``, :c:func:`PyType_Ready` will assign a new "
"dictionary to it."
msgstr ""

#: ../../c-api/typeobj.rst:1566
msgid ""
"It is not safe to use :c:func:`PyDict_SetItem` on or otherwise modify "
":c:member:`~PyTypeObject.tp_dict` with the dictionary C-API."
msgstr ""

#: ../../c-api/typeobj.rst:1572
msgid "An optional pointer to a \"descriptor get\" function."
msgstr ""

#: ../../c-api/typeobj.rst:1574 ../../c-api/typeobj.rst:1590
#: ../../c-api/typeobj.rst:1672 ../../c-api/typeobj.rst:1702
#: ../../c-api/typeobj.rst:1726
msgid "The function signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1587
msgid ""
"An optional pointer to a function for setting and deleting a descriptor's"
" value."
msgstr ""

#: ../../c-api/typeobj.rst:1594
msgid "The *value* argument is set to ``NULL`` to delete the value."
msgstr ""

#: ../../c-api/typeobj.rst:1605
msgid ""
"If the instances of this type have a dictionary containing instance "
"variables, this field is non-zero and contains the offset in the "
"instances of the type of the instance variable dictionary; this offset is"
" used by :c:func:`PyObject_GenericGetAttr`."
msgstr ""

#: ../../c-api/typeobj.rst:1610
msgid ""
"Do not confuse this field with :c:member:`~PyTypeObject.tp_dict`; that is"
" the dictionary for attributes of the type object itself."
msgstr ""

#: ../../c-api/typeobj.rst:1613
msgid ""
"If the value of this field is greater than zero, it specifies the offset "
"from the start of the instance structure.  If the value is less than "
"zero, it specifies the offset from the *end* of the instance structure.  "
"A negative offset is more expensive to use, and should only be used when "
"the instance structure contains a variable-length part.  This is used for"
" example to add an instance variable dictionary to subtypes of "
":class:`str` or :class:`tuple`. Note that the "
":c:member:`~PyTypeObject.tp_basicsize` field should account for the "
"dictionary added to the end in that case, even though the dictionary is "
"not included in the basic object layout.  On a system with a pointer size"
" of 4 bytes, :c:member:`~PyTypeObject.tp_dictoffset` should be set to "
"``-4`` to indicate that the dictionary is at the very end of the "
"structure."
msgstr ""

#: ../../c-api/typeobj.rst:1625
msgid ""
"The real dictionary offset in an instance can be computed from a negative"
" :c:member:`~PyTypeObject.tp_dictoffset` as follows::"
msgstr ""

#: ../../c-api/typeobj.rst:1632
msgid ""
"where :c:member:`~PyTypeObject.tp_basicsize`, "
":c:member:`~PyTypeObject.tp_itemsize` and "
":c:member:`~PyTypeObject.tp_dictoffset` are taken from the type object, "
"and :attr:`ob_size` is taken from the instance.  The absolute value is "
"taken because ints use the sign of :attr:`ob_size` to store the sign of "
"the number.  (There's never a need to do this calculation yourself; it is"
" done for you by :c:func:`_PyObject_GetDictPtr`.)"
msgstr ""

#: ../../c-api/typeobj.rst:1640
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype instances "
"store the dictionary at a difference offset than the base type.  Since "
"the dictionary is always found via "
":c:member:`~PyTypeObject.tp_dictoffset`, this should not be a problem."
msgstr ""

#: ../../c-api/typeobj.rst:1645
msgid ""
"When a type defined by a class statement has no :attr:`~object.__slots__`"
" declaration, and none of its base types has an instance variable "
"dictionary, a dictionary slot is added to the instance layout and the "
":c:member:`~PyTypeObject.tp_dictoffset` is set to that slot's offset."
msgstr ""

#: ../../c-api/typeobj.rst:1650
msgid ""
"When a type defined by a class statement has a :attr:`__slots__` "
"declaration, the type inherits its "
":c:member:`~PyTypeObject.tp_dictoffset` from its base type."
msgstr ""

#: ../../c-api/typeobj.rst:1653
msgid ""
"(Adding a slot named :attr:`~object.__dict__` to the :attr:`__slots__` "
"declaration does not have the expected effect, it just causes confusion."
"  Maybe this should be added as a feature just like :attr:`__weakref__` "
"though.)"
msgstr ""

#: ../../c-api/typeobj.rst:1659
msgid ""
"This slot has no default.  For static types, if the field is ``NULL`` "
"then no :attr:`__dict__` gets created for instances."
msgstr ""

#: ../../c-api/typeobj.rst:1665
msgid "An optional pointer to an instance initialization function."
msgstr ""

#: ../../c-api/typeobj.rst:1667
msgid ""
"This function corresponds to the :meth:`__init__` method of classes.  "
"Like :meth:`__init__`, it is possible to create an instance without "
"calling :meth:`__init__`, and it is possible to reinitialize an instance "
"by calling its :meth:`__init__` method again."
msgstr ""

#: ../../c-api/typeobj.rst:1676
msgid ""
"The self argument is the instance to be initialized; the *args* and "
"*kwds* arguments represent positional and keyword arguments of the call "
"to :meth:`__init__`."
msgstr ""

#: ../../c-api/typeobj.rst:1680
msgid ""
"The :c:member:`~PyTypeObject.tp_init` function, if not ``NULL``, is "
"called when an instance is created normally by calling its type, after "
"the type's :c:member:`~PyTypeObject.tp_new` function has returned an "
"instance of the type.  If the :c:member:`~PyTypeObject.tp_new` function "
"returns an instance of some other type that is not a subtype of the "
"original type, no :c:member:`~PyTypeObject.tp_init` function is called; "
"if :c:member:`~PyTypeObject.tp_new` returns an instance of a subtype of "
"the original type, the subtype's :c:member:`~PyTypeObject.tp_init` is "
"called."
msgstr ""

#: ../../c-api/typeobj.rst:1687
msgid "Returns ``0`` on success, ``-1`` and sets an exception on error."
msgstr ""

#: ../../c-api/typeobj.rst:1695
msgid "For static types this field does not have a default."
msgstr ""

#: ../../c-api/typeobj.rst:1700
msgid "An optional pointer to an instance allocation function."
msgstr ""

#: ../../c-api/typeobj.rst:1708
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement)."
msgstr ""

#: ../../c-api/typeobj.rst:1713
msgid ""
"For dynamic subtypes, this field is always set to "
":c:func:`PyType_GenericAlloc`, to force a standard heap allocation "
"strategy."
msgstr ""

#: ../../c-api/typeobj.rst:1717
msgid ""
"For static subtypes, :c:type:`PyBaseObject_Type` uses "
":c:func:`PyType_GenericAlloc`.  That is the recommended value for all "
"statically defined types."
msgstr ""

#: ../../c-api/typeobj.rst:1724
msgid "An optional pointer to an instance creation function."
msgstr ""

#: ../../c-api/typeobj.rst:1730
msgid ""
"The subtype argument is the type of the object being created; the *args* "
"and *kwds* arguments represent positional and keyword arguments of the "
"call to the type.  Note that subtype doesn't have to equal the type whose"
" :c:member:`~PyTypeObject.tp_new` function is called; it may be a subtype"
" of that type (but not an unrelated type)."
msgstr ""

#: ../../c-api/typeobj.rst:1736
msgid ""
"The :c:member:`~PyTypeObject.tp_new` function should call "
"``subtype->tp_alloc(subtype, nitems)`` to allocate space for the object, "
"and then do only as much further initialization as is absolutely "
"necessary.  Initialization that can safely be ignored or repeated should "
"be placed in the :c:member:`~PyTypeObject.tp_init` handler.  A good rule "
"of thumb is that for immutable types, all initialization should take "
"place in :c:member:`~PyTypeObject.tp_new`, while for mutable types, most "
"initialization should be deferred to :c:member:`~PyTypeObject.tp_init`."
msgstr ""

#: ../../c-api/typeobj.rst:1746
msgid ""
"This field is inherited by subtypes, except it is not inherited by static"
" types whose :c:member:`~PyTypeObject.tp_base` is ``NULL`` or "
"``&PyBaseObject_Type``."
msgstr ""

#: ../../c-api/typeobj.rst:1751
msgid ""
"For static types this field has no default.  This means if the slot is "
"defined as ``NULL``, the type cannot be called to create new instances; "
"presumably there is some other way to create instances, like a factory "
"function."
msgstr ""

#: ../../c-api/typeobj.rst:1759
msgid ""
"An optional pointer to an instance deallocation function.  Its signature "
"is::"
msgstr ""

#: ../../c-api/typeobj.rst:1763
msgid ""
"An initializer that is compatible with this signature is "
":c:func:`PyObject_Free`."
msgstr ""

#: ../../c-api/typeobj.rst:1767
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement)"
msgstr ""

#: ../../c-api/typeobj.rst:1772
msgid ""
"In dynamic subtypes, this field is set to a deallocator suitable to match"
" :c:func:`PyType_GenericAlloc` and the value of the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit."
msgstr ""

#: ../../c-api/typeobj.rst:1776
msgid "For static subtypes, :c:type:`PyBaseObject_Type` uses PyObject_Del."
msgstr ""

#: ../../c-api/typeobj.rst:1781
msgid "An optional pointer to a function called by the garbage collector."
msgstr ""

#: ../../c-api/typeobj.rst:1783
msgid ""
"The garbage collector needs to know whether a particular object is "
"collectible or not.  Normally, it is sufficient to look at the object's "
"type's :c:member:`~PyTypeObject.tp_flags` field, and check the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit.  But some types have a mixture of "
"statically and dynamically allocated instances, and the statically "
"allocated instances are not collectible.  Such types should define this "
"function; it should return ``1`` for a collectible instance, and ``0`` "
"for a non-collectible instance. The signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1793
msgid ""
"(The only example of this are types themselves.  The metatype, "
":c:data:`PyType_Type`, defines this function to distinguish between "
"statically and dynamically allocated types.)"
msgstr ""

#: ../../c-api/typeobj.rst:1803
msgid ""
"This slot has no default.  If this field is ``NULL``, "
":const:`Py_TPFLAGS_HAVE_GC` is used as the functional equivalent."
msgstr ""

#: ../../c-api/typeobj.rst:1809
msgid "Tuple of base types."
msgstr ""

#: ../../c-api/typeobj.rst:1811
msgid ""
"This is set for types created by a class statement.  It should be "
"``NULL`` for statically defined types."
msgstr ""

#: ../../c-api/typeobj.rst:1816 ../../c-api/typeobj.rst:1837
#: ../../c-api/typeobj.rst:1846 ../../c-api/typeobj.rst:1856
#: ../../c-api/typeobj.rst:1870
msgid "This field is not inherited."
msgstr ""

#: ../../c-api/typeobj.rst:1821
msgid ""
"Tuple containing the expanded set of base types, starting with the type "
"itself and ending with :class:`object`, in Method Resolution Order."
msgstr ""

#: ../../c-api/typeobj.rst:1827
msgid ""
"This field is not inherited; it is calculated fresh by "
":c:func:`PyType_Ready`."
msgstr ""

#: ../../c-api/typeobj.rst:1833
msgid "Unused.  Internal use only."
msgstr ""

#: ../../c-api/typeobj.rst:1842
msgid "List of weak references to subclasses.  Internal use only."
msgstr ""

#: ../../c-api/typeobj.rst:1851
msgid ""
"Weak reference list head, for weak references to this type object.  Not "
"inherited.  Internal use only."
msgstr ""

#: ../../c-api/typeobj.rst:1861
msgid ""
"This field is deprecated.  Use :c:member:`~PyTypeObject.tp_finalize` "
"instead."
msgstr ""

#: ../../c-api/typeobj.rst:1866
msgid "Used to index into the method cache.  Internal use only."
msgstr ""

#: ../../c-api/typeobj.rst:1875
msgid ""
"An optional pointer to an instance finalization function.  Its signature "
"is::"
msgstr ""

#: ../../c-api/typeobj.rst:1879
msgid ""
"If :c:member:`~PyTypeObject.tp_finalize` is set, the interpreter calls it"
" once when finalizing an instance.  It is called either from the garbage "
"collector (if the instance is part of an isolated reference cycle) or "
"just before the object is deallocated.  Either way, it is guaranteed to "
"be called before attempting to break reference cycles, ensuring that it "
"finds the object in a sane state."
msgstr ""

#: ../../c-api/typeobj.rst:1886
msgid ""
":c:member:`~PyTypeObject.tp_finalize` should not mutate the current "
"exception status; therefore, a recommended way to write a non-trivial "
"finalizer is::"
msgstr ""

#: ../../c-api/typeobj.rst:1903
msgid ""
"For this field to be taken into account (even through inheritance), you "
"must also set the :const:`Py_TPFLAGS_HAVE_FINALIZE` flags bit."
msgstr ""

#: ../../c-api/typeobj.rst:1912
msgid "\"Safe object finalization\" (:pep:`442`)"
msgstr ""

#: ../../c-api/typeobj.rst:1915
msgid ""
"The remaining fields are only defined if the feature test macro "
":const:`COUNT_ALLOCS` is defined, and are for internal use only. They are"
" documented here for completeness.  None of these fields are inherited by"
" subtypes."
msgstr ""

#: ../../c-api/typeobj.rst:1922
msgid "Number of allocations."
msgstr ""

#: ../../c-api/typeobj.rst:1926
msgid "Number of frees."
msgstr ""

#: ../../c-api/typeobj.rst:1930
msgid "Maximum simultaneously allocated objects."
msgstr ""

#: ../../c-api/typeobj.rst:1934
msgid ""
"Pointer to the previous type object with a non-zero "
":c:member:`~PyTypeObject.tp_allocs` field."
msgstr ""

#: ../../c-api/typeobj.rst:1938
msgid ""
"Pointer to the next type object with a non-zero "
":c:member:`~PyTypeObject.tp_allocs` field."
msgstr ""

#: ../../c-api/typeobj.rst:1940
msgid ""
"Also, note that, in a garbage collected Python, "
":c:member:`~PyTypeObject.tp_dealloc` may be called from any Python "
"thread, not just the thread which created the object (if the object "
"becomes part of a refcount cycle, that cycle might be collected by a "
"garbage collection on any thread).  This is not a problem for Python API "
"calls, since the thread on which tp_dealloc is called will own the Global"
" Interpreter Lock (GIL). However, if the object being destroyed in turn "
"destroys objects from some other C or C++ library, care should be taken "
"to ensure that destroying those objects on the thread which called "
"tp_dealloc will not violate any assumptions of the library."
msgstr ""

#: ../../c-api/typeobj.rst:1954
msgid "Heap Types"
msgstr ""

#: ../../c-api/typeobj.rst:1956
msgid ""
"Traditionally, types defined in C code are *static*, that is, a static "
":c:type:`PyTypeObject` structure is defined directly in code and "
"initialized using :c:func:`PyType_Ready`."
msgstr ""

#: ../../c-api/typeobj.rst:1960
msgid ""
"This results in types that are limited relative to types defined in "
"Python:"
msgstr ""

#: ../../c-api/typeobj.rst:1962
msgid ""
"Static types are limited to one base, i.e. they cannot use multiple "
"inheritance."
msgstr ""

#: ../../c-api/typeobj.rst:1964
msgid ""
"Static type objects (but not necessarily their instances) are immutable. "
"It is not possible to add or modify the type object's attributes from "
"Python."
msgstr ""

#: ../../c-api/typeobj.rst:1966
msgid ""
"Static type objects are shared across :ref:`sub-interpreters <sub-"
"interpreter-support>`, so they should not include any subinterpreter-"
"specific state."
msgstr ""

#: ../../c-api/typeobj.rst:1970
msgid ""
"Also, since :c:type:`PyTypeObject` is not part of the :ref:`stable ABI "
"<stable>`, any extension modules using static types must be compiled for "
"a specific Python minor version."
msgstr ""

#: ../../c-api/typeobj.rst:1974
msgid ""
"An alternative to static types is *heap-allocated types*, or *heap types*"
" for short, which correspond closely to classes created by Python's "
"``class`` statement."
msgstr ""

#: ../../c-api/typeobj.rst:1978
msgid ""
"This is done by filling a :c:type:`PyType_Spec` structure and calling "
":c:func:`PyType_FromSpecWithBases`."
msgstr ""

#: ../../c-api/typeobj.rst:1985
msgid "Number Object Structures"
msgstr ""

#: ../../c-api/typeobj.rst:1992
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the number protocol.  Each function is used by the function of "
"similar name documented in the :ref:`number` section."
msgstr ""

#: ../../c-api/typeobj.rst:1998 ../../c-api/typeobj.rst:2322
msgid "Here is the structure definition::"
msgstr ""

#: ../../c-api/typeobj.rst:2045
msgid ""
"Binary and ternary functions must check the type of all their operands, "
"and implement the necessary conversions (at least one of the operands is "
"an instance of the defined type).  If the operation is not defined for "
"the given operands, binary and ternary functions must return "
"``Py_NotImplemented``, if another error occurred they must return "
"``NULL`` and set an exception."
msgstr ""

#: ../../c-api/typeobj.rst:2054
msgid ""
"The :c:data:`nb_reserved` field should always be ``NULL``.  It was "
"previously called :c:data:`nb_long`, and was renamed in Python 3.0.1."
msgstr ""

#: ../../c-api/typeobj.rst:2099
msgid "Mapping Object Structures"
msgstr ""

#: ../../c-api/typeobj.rst:2106
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the mapping protocol.  It has three members:"
msgstr ""

#: ../../c-api/typeobj.rst:2111
msgid ""
"This function is used by :c:func:`PyMapping_Size` and "
":c:func:`PyObject_Size`, and has the same signature.  This slot may be "
"set to ``NULL`` if the object has no defined length."
msgstr ""

#: ../../c-api/typeobj.rst:2117
msgid ""
"This function is used by :c:func:`PyObject_GetItem` and "
":c:func:`PySequence_GetSlice`, and has the same signature as "
":c:func:`!PyObject_GetItem`.  This slot must be filled for the "
":c:func:`PyMapping_Check` function to return ``1``, it can be ``NULL`` "
"otherwise."
msgstr ""

#: ../../c-api/typeobj.rst:2125
msgid ""
"This function is used by :c:func:`PyObject_SetItem`, "
":c:func:`PyObject_DelItem`, :c:func:`PyObject_SetSlice` and "
":c:func:`PyObject_DelSlice`.  It has the same signature as "
":c:func:`!PyObject_SetItem`, but *v* can also be set to ``NULL`` to "
"delete an item.  If this slot is ``NULL``, the object does not support "
"item assignment and deletion."
msgstr ""

#: ../../c-api/typeobj.rst:2136
msgid "Sequence Object Structures"
msgstr ""

#: ../../c-api/typeobj.rst:2143
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the sequence protocol."
msgstr ""

#: ../../c-api/typeobj.rst:2148
msgid ""
"This function is used by :c:func:`PySequence_Size` and "
":c:func:`PyObject_Size`, and has the same signature.  It is also used for"
" handling negative indices via the :c:member:`~PySequenceMethods.sq_item`"
" and the :c:member:`~PySequenceMethods.sq_ass_item` slots."
msgstr ""

#: ../../c-api/typeobj.rst:2155
msgid ""
"This function is used by :c:func:`PySequence_Concat` and has the same "
"signature.  It is also used by the ``+`` operator, after trying the "
"numeric addition via the :c:member:`~PyNumberMethods.nb_add` slot."
msgstr ""

#: ../../c-api/typeobj.rst:2161
msgid ""
"This function is used by :c:func:`PySequence_Repeat` and has the same "
"signature.  It is also used by the ``*`` operator, after trying numeric "
"multiplication via the :c:member:`~PyNumberMethods.nb_multiply` slot."
msgstr ""

#: ../../c-api/typeobj.rst:2167
msgid ""
"This function is used by :c:func:`PySequence_GetItem` and has the same "
"signature.  It is also used by :c:func:`PyObject_GetItem`, after trying "
"the subscription via the :c:member:`~PyMappingMethods.mp_subscript` slot."
" This slot must be filled for the :c:func:`PySequence_Check` function to "
"return ``1``, it can be ``NULL`` otherwise."
msgstr ""

#: ../../c-api/typeobj.rst:2173
msgid ""
"Negative indexes are handled as follows: if the :attr:`sq_length` slot is"
" filled, it is called and the sequence length is used to compute a "
"positive index which is passed to :attr:`sq_item`.  If :attr:`sq_length` "
"is ``NULL``, the index is passed as is to the function."
msgstr ""

#: ../../c-api/typeobj.rst:2180
msgid ""
"This function is used by :c:func:`PySequence_SetItem` and has the same "
"signature.  It is also used by :c:func:`PyObject_SetItem` and "
":c:func:`PyObject_DelItem`, after trying the item assignment and deletion"
" via the :c:member:`~PyMappingMethods.mp_ass_subscript` slot. This slot "
"may be left to ``NULL`` if the object does not support item assignment "
"and deletion."
msgstr ""

#: ../../c-api/typeobj.rst:2189
msgid ""
"This function may be used by :c:func:`PySequence_Contains` and has the "
"same signature.  This slot may be left to ``NULL``, in this case "
":c:func:`!PySequence_Contains` simply traverses the sequence until it "
"finds a match."
msgstr ""

#: ../../c-api/typeobj.rst:2196
msgid ""
"This function is used by :c:func:`PySequence_InPlaceConcat` and has the "
"same signature.  It should modify its first operand, and return it.  This"
" slot may be left to ``NULL``, in this case "
":c:func:`!PySequence_InPlaceConcat` will fall back to "
":c:func:`PySequence_Concat`.  It is also used by the augmented assignment"
" ``+=``, after trying numeric in-place addition via the "
":c:member:`~PyNumberMethods.nb_inplace_add` slot."
msgstr ""

#: ../../c-api/typeobj.rst:2205
msgid ""
"This function is used by :c:func:`PySequence_InPlaceRepeat` and has the "
"same signature.  It should modify its first operand, and return it.  This"
" slot may be left to ``NULL``, in this case "
":c:func:`!PySequence_InPlaceRepeat` will fall back to "
":c:func:`PySequence_Repeat`.  It is also used by the augmented assignment"
" ``*=``, after trying numeric in-place multiplication via the "
":c:member:`~PyNumberMethods.nb_inplace_multiply` slot."
msgstr ""

#: ../../c-api/typeobj.rst:2216
msgid "Buffer Object Structures"
msgstr ""

#: ../../c-api/typeobj.rst:2224
msgid ""
"This structure holds pointers to the functions required by the "
":ref:`Buffer protocol <bufferobjects>`. The protocol defines how an "
"exporter object can expose its internal data to consumer objects."
msgstr ""

#: ../../c-api/typeobj.rst:2230 ../../c-api/typeobj.rst:2279
#: ../../c-api/typeobj.rst:2332 ../../c-api/typeobj.rst:2343
#: ../../c-api/typeobj.rst:2354
msgid "The signature of this function is::"
msgstr ""

#: ../../c-api/typeobj.rst:2234
msgid ""
"Handle a request to *exporter* to fill in *view* as specified by *flags*."
" Except for point (3), an implementation of this function MUST take these"
" steps:"
msgstr ""

#: ../../c-api/typeobj.rst:2238
msgid ""
"Check if the request can be met. If not, raise "
":c:data:`PyExc_BufferError`, set :c:data:`view->obj` to ``NULL`` and "
"return ``-1``."
msgstr ""

#: ../../c-api/typeobj.rst:2241
msgid "Fill in the requested fields."
msgstr ""

#: ../../c-api/typeobj.rst:2243
msgid "Increment an internal counter for the number of exports."
msgstr ""

#: ../../c-api/typeobj.rst:2245
msgid "Set :c:data:`view->obj` to *exporter* and increment :c:data:`view->obj`."
msgstr ""

#: ../../c-api/typeobj.rst:2247
msgid "Return ``0``."
msgstr ""

#: ../../c-api/typeobj.rst:2249
msgid ""
"If *exporter* is part of a chain or tree of buffer providers, two main "
"schemes can be used:"
msgstr ""

#: ../../c-api/typeobj.rst:2252
msgid ""
"Re-export: Each member of the tree acts as the exporting object and sets "
":c:data:`view->obj` to a new reference to itself."
msgstr ""

#: ../../c-api/typeobj.rst:2255
msgid ""
"Redirect: The buffer request is redirected to the root object of the "
"tree. Here, :c:data:`view->obj` will be a new reference to the root "
"object."
msgstr ""

#: ../../c-api/typeobj.rst:2259
msgid ""
"The individual fields of *view* are described in section :ref:`Buffer "
"structure <buffer-structure>`, the rules how an exporter must react to "
"specific requests are in section :ref:`Buffer request types <buffer-"
"request-types>`."
msgstr ""

#: ../../c-api/typeobj.rst:2264
msgid ""
"All memory pointed to in the :c:type:`Py_buffer` structure belongs to the"
" exporter and must remain valid until there are no consumers left. "
":c:member:`~Py_buffer.format`, :c:member:`~Py_buffer.shape`, "
":c:member:`~Py_buffer.strides`, :c:member:`~Py_buffer.suboffsets` and "
":c:member:`~Py_buffer.internal` are read-only for the consumer."
msgstr ""

#: ../../c-api/typeobj.rst:2271
msgid ""
":c:func:`PyBuffer_FillInfo` provides an easy way of exposing a simple "
"bytes buffer while dealing correctly with all request types."
msgstr ""

#: ../../c-api/typeobj.rst:2274
msgid ""
":c:func:`PyObject_GetBuffer` is the interface for the consumer that wraps"
" this function."
msgstr ""

#: ../../c-api/typeobj.rst:2283
msgid ""
"Handle a request to release the resources of the buffer. If no resources "
"need to be released, :c:member:`PyBufferProcs.bf_releasebuffer` may be "
"``NULL``. Otherwise, a standard implementation of this function will take"
" these optional steps:"
msgstr ""

#: ../../c-api/typeobj.rst:2288
msgid "Decrement an internal counter for the number of exports."
msgstr ""

#: ../../c-api/typeobj.rst:2290
msgid "If the counter is ``0``, free all memory associated with *view*."
msgstr ""

#: ../../c-api/typeobj.rst:2292
msgid ""
"The exporter MUST use the :c:member:`~Py_buffer.internal` field to keep "
"track of buffer-specific resources. This field is guaranteed to remain "
"constant, while a consumer MAY pass a copy of the original buffer as the "
"*view* argument."
msgstr ""

#: ../../c-api/typeobj.rst:2298
msgid ""
"This function MUST NOT decrement :c:data:`view->obj`, since that is done "
"automatically in :c:func:`PyBuffer_Release` (this scheme is useful for "
"breaking reference cycles)."
msgstr ""

#: ../../c-api/typeobj.rst:2303
msgid ""
":c:func:`PyBuffer_Release` is the interface for the consumer that wraps "
"this function."
msgstr ""

#: ../../c-api/typeobj.rst:2311
msgid "Async Object Structures"
msgstr ""

#: ../../c-api/typeobj.rst:2319
msgid ""
"This structure holds pointers to the functions required to implement "
":term:`awaitable` and :term:`asynchronous iterator` objects."
msgstr ""

#: ../../c-api/typeobj.rst:2336
msgid ""
"The returned object must be an iterator, i.e. :c:func:`PyIter_Check` must"
" return ``1`` for it."
msgstr ""

#: ../../c-api/typeobj.rst:2339
msgid "This slot may be set to ``NULL`` if an object is not an :term:`awaitable`."
msgstr ""

#: ../../c-api/typeobj.rst:2347
msgid ""
"Must return an :term:`awaitable` object.  See :meth:`__anext__` for "
"details."
msgstr ""

#: ../../c-api/typeobj.rst:2349
msgid ""
"This slot may be set to ``NULL`` if an object does not implement "
"asynchronous iteration protocol."
msgstr ""

#: ../../c-api/typeobj.rst:2358
msgid ""
"Must return an :term:`awaitable` object.  See :meth:`__anext__` for "
"details. This slot may be set to ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:2365
msgid "Slot Type typedefs"
msgstr ""

#: ../../c-api/typeobj.rst:2369
msgid ""
"The purpose of this function is to separate memory allocation from memory"
" initialization.  It should return a pointer to a block of memory of "
"adequate length for the instance, suitably aligned, and initialized to "
"zeros, but with :attr:`ob_refcnt` set to ``1`` and :attr:`ob_type` set to"
" the type argument.  If the type's :c:member:`~PyTypeObject.tp_itemsize` "
"is non-zero, the object's :attr:`ob_size` field should be initialized to "
"*nitems* and the length of the allocated memory block should be "
"``tp_basicsize + nitems*tp_itemsize``, rounded up to a multiple of "
"``sizeof(void*)``; otherwise, *nitems* is not used and the length of the "
"block should be :c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../../c-api/typeobj.rst:2379
msgid ""
"This function should not do any other instance initialization, not even "
"to allocate additional memory; that should be done by "
":c:member:`~PyTypeObject.tp_new`."
msgstr ""

#: ../../c-api/typeobj.rst:2386
msgid "See :c:member:`~PyTypeObject.tp_vectorcall_offset`."
msgstr ""

#: ../../c-api/typeobj.rst:2388
msgid ""
"Arguments to ``vectorcallfunc`` are the same as for "
":c:func:`_PyObject_Vectorcall`."
msgstr ""

#: ../../c-api/typeobj.rst:2394
msgid "See :c:member:`~PyTypeObject.tp_free`."
msgstr ""

#: ../../c-api/typeobj.rst:2398
msgid "See :c:member:`~PyTypeObject.tp_new`."
msgstr ""

#: ../../c-api/typeobj.rst:2402
msgid "See :c:member:`~PyTypeObject.tp_init`."
msgstr ""

#: ../../c-api/typeobj.rst:2406
msgid "See :c:member:`~PyTypeObject.tp_repr`."
msgstr ""

#: ../../c-api/typeobj.rst:2410 ../../c-api/typeobj.rst:2419
msgid "Return the value of the named attribute for the object."
msgstr ""

#: ../../c-api/typeobj.rst:2414 ../../c-api/typeobj.rst:2425
msgid ""
"Set the value of the named attribute for the object. The value argument "
"is set to ``NULL`` to delete the attribute."
msgstr ""

#: ../../c-api/typeobj.rst:2421
msgid "See :c:member:`~PyTypeObject.tp_getattro`."
msgstr ""

#: ../../c-api/typeobj.rst:2428
msgid "See :c:member:`~PyTypeObject.tp_setattro`."
msgstr ""

#: ../../c-api/typeobj.rst:2432
msgid "See :c:member:`~PyTypeObject.tp_descrget`."
msgstr ""

#: ../../c-api/typeobj.rst:2436
msgid "See :c:member:`~PyTypeObject.tp_descrset`."
msgstr ""

#: ../../c-api/typeobj.rst:2440
msgid "See :c:member:`~PyTypeObject.tp_hash`."
msgstr ""

#: ../../c-api/typeobj.rst:2444
msgid "See :c:member:`~PyTypeObject.tp_richcompare`."
msgstr ""

#: ../../c-api/typeobj.rst:2448
msgid "See :c:member:`~PyTypeObject.tp_iter`."
msgstr ""

#: ../../c-api/typeobj.rst:2452
msgid "See :c:member:`~PyTypeObject.tp_iternext`."
msgstr ""

#: ../../c-api/typeobj.rst:2480
msgid ""
"The following are simple examples of Python type definitions.  They "
"include common usage you may encounter.  Some demonstrate tricky corner "
"cases.  For more examples, practical info, and a tutorial, see :ref"
":`defining-new-types` and :ref:`new-types-topics`."
msgstr ""

#: ../../c-api/typeobj.rst:2485
msgid "A basic static type::"
msgstr ""

#: ../../c-api/typeobj.rst:2502
msgid ""
"You may also find older code (especially in the CPython code base) with a"
" more verbose initializer::"
msgstr ""

#: ../../c-api/typeobj.rst:2546
msgid "A type that supports weakrefs, instance dicts, and hashing::"
msgstr ""

#: ../../c-api/typeobj.rst:2573
msgid ""
"A str subclass that cannot be subclassed and cannot be called to create "
"instances (e.g. uses a separate factory func)::"
msgstr ""

#: ../../c-api/typeobj.rst:2592
msgid "The simplest static type (with fixed-length instances)::"
msgstr ""

#: ../../c-api/typeobj.rst:2603
msgid "The simplest static type (with variable-length instances)::"
msgstr ""

#: ../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr ""

#: ../../c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr ""

#: ../../c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling "
"the complete range of Unicode characters while staying memory efficient."
"  There are special cases for strings where all code points are below "
"128, 256, or 65536; otherwise, code points must be below 1114112 (which "
"is the full Unicode range)."
msgstr ""

#: ../../c-api/unicode.rst:20
msgid ""
":c:type:`Py_UNICODE*` and UTF-8 representations are created on demand and"
" cached in the Unicode object.  The :c:type:`Py_UNICODE*` representation "
"is deprecated and inefficient."
msgstr ""

#: ../../c-api/unicode.rst:24
msgid ""
"Due to the transition between the old APIs and the new APIs, Unicode "
"objects can internally be in two states depending on how they were "
"created:"
msgstr ""

#: ../../c-api/unicode.rst:27
msgid ""
"\"canonical\" Unicode objects are all objects created by a non-deprecated"
" Unicode API.  They use the most efficient representation allowed by the "
"implementation."
msgstr ""

#: ../../c-api/unicode.rst:31
msgid ""
"\"legacy\" Unicode objects have been created through one of the "
"deprecated APIs (typically :c:func:`PyUnicode_FromUnicode`) and only bear"
" the :c:type:`Py_UNICODE*` representation; you will have to call "
":c:func:`PyUnicode_READY` on them before calling any other API."
msgstr ""

#: ../../c-api/unicode.rst:37
msgid ""
"The \"legacy\" Unicode object will be removed in Python 3.12 with "
"deprecated APIs. All Unicode objects will be \"canonical\" since then. "
"See :pep:`623` for more information."
msgstr ""

#: ../../c-api/unicode.rst:43
msgid "Unicode Type"
msgstr ""

#: ../../c-api/unicode.rst:45
msgid ""
"These are the basic Unicode object types used for the Unicode "
"implementation in Python:"
msgstr ""

#: ../../c-api/unicode.rst:52
msgid ""
"These types are typedefs for unsigned integer types wide enough to "
"contain characters of 32 bits, 16 bits and 8 bits, respectively.  When "
"dealing with single Unicode characters, use :c:type:`Py_UCS4`."
msgstr ""

#: ../../c-api/unicode.rst:61
msgid ""
"This is a typedef of :c:type:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr ""

#: ../../c-api/unicode.rst:64
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending "
"on whether you selected a \"narrow\" or \"wide\" Unicode version of "
"Python at build time."
msgstr ""

#: ../../c-api/unicode.rst:74
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  "
"In almost all cases, they shouldn't be used directly, since all API "
"functions that deal with Unicode objects take and return "
":c:type:`PyObject` pointers."
msgstr ""

#: ../../c-api/unicode.rst:83
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode "
"type.  It is exposed to Python code as ``str``."
msgstr ""

#: ../../c-api/unicode.rst:87
msgid ""
"The following APIs are really C macros and can be used to do fast checks "
"and to access internal read-only data of Unicode objects:"
msgstr ""

#: ../../c-api/unicode.rst:92
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype."
msgstr ""

#: ../../c-api/unicode.rst:98
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of"
" a subtype."
msgstr ""

#: ../../c-api/unicode.rst:104
msgid ""
"Ensure the string object *o* is in the \"canonical\" representation.  "
"This is required before using any of the access macros described below."
msgstr ""

#: ../../c-api/unicode.rst:109
msgid ""
"Returns ``0`` on success and ``-1`` with an exception set on failure, "
"which in particular happens if memory allocation fails."
msgstr ""

#: ../../c-api/unicode.rst:115
msgid "This API will be removed with :c:func:`PyUnicode_FromUnicode`."
msgstr ""

#: ../../c-api/unicode.rst:120
msgid ""
"Return the length of the Unicode string, in code points.  *o* has to be a"
" Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:130
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or "
"UCS4 integer types for direct character access.  No checks are performed "
"if the canonical representation has the correct character size; use "
":c:func:`PyUnicode_KIND` to select the right macro.  Make sure "
":c:func:`PyUnicode_READY` has been called before accessing this."
msgstr ""

#: ../../c-api/unicode.rst:144
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr ""

#: ../../c-api/unicode.rst:149
msgid "``PyUnicode_WCHAR_KIND`` is deprecated."
msgstr ""

#: ../../c-api/unicode.rst:154
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  *o*"
" has to be a Unicode object in the \"canonical\" representation (not "
"checked)."
msgstr ""

#: ../../c-api/unicode.rst:165
msgid ""
"Return a void pointer to the raw Unicode buffer.  *o* has to be a Unicode"
" object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:174
msgid ""
"Write into a canonical representation *data* (as obtained with "
":c:func:`PyUnicode_DATA`).  This macro does not do any sanity checks and "
"is intended for usage in loops.  The caller should cache the *kind* value"
" and *data* pointer as obtained from other macro calls.  *index* is the "
"index in the string (starts at 0) and *value* is the new code point value"
" which should be written to that location."
msgstr ""

#: ../../c-api/unicode.rst:186
msgid ""
"Read a code point from a canonical representation *data* (as obtained "
"with :c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""

#: ../../c-api/unicode.rst:194
msgid ""
"Read a character from a Unicode object *o*, which must be in the "
"\"canonical\" representation.  This is less efficient than "
":c:func:`PyUnicode_READ` if you do multiple consecutive reads."
msgstr ""

#: ../../c-api/unicode.rst:203
msgid ""
"Return the maximum code point that is suitable for creating another "
"string based on *o*, which must be in the \"canonical\" representation.  "
"This is always an approximation but more efficient than iterating over "
"the string."
msgstr ""

#: ../../c-api/unicode.rst:217
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in"
" code units (this includes surrogate pairs as 2 units).  *o* has to be a "
"Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:223 ../../c-api/unicode.rst:233
#: ../../c-api/unicode.rst:767
msgid ""
"Part of the old-style Unicode API, please migrate to using "
":c:func:`PyUnicode_GET_LENGTH`."
msgstr ""

#: ../../c-api/unicode.rst:228
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation in "
"bytes.  *o* has to be a Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:239
msgid ""
"Return a pointer to a :c:type:`Py_UNICODE` representation of the object."
"  The returned buffer is always terminated with an extra null code point."
"  It may also contain embedded null code points, which would cause the "
"string to be truncated when used in most C functions.  The ``AS_DATA`` "
"form casts the pointer to :c:type:`const char *`.  The *o* argument has "
"to be a Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:246
msgid ""
"This macro is now inefficient -- because in many cases the "
":c:type:`Py_UNICODE` representation does not exist and needs to be "
"created -- and can fail (return ``NULL`` with an exception set).  Try to "
"port the code to use the new :c:func:`PyUnicode_nBYTE_DATA` macros or use"
" :c:func:`PyUnicode_WRITE` or :c:func:`PyUnicode_READ`."
msgstr ""

#: ../../c-api/unicode.rst:255
msgid ""
"Part of the old-style Unicode API, please migrate to using the "
":c:func:`PyUnicode_nBYTE_DATA` family of macros."
msgstr ""

#: ../../c-api/unicode.rst:259
msgid "Unicode Character Properties"
msgstr ""

#: ../../c-api/unicode.rst:261
msgid ""
"Unicode provides many different character properties. The most often "
"needed ones are available through these macros which are mapped to C "
"functions depending on the Python configuration."
msgstr ""

#: ../../c-api/unicode.rst:268
msgid "Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr ""

#: ../../c-api/unicode.rst:273
msgid "Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr ""

#: ../../c-api/unicode.rst:278
msgid "Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr ""

#: ../../c-api/unicode.rst:283
msgid "Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr ""

#: ../../c-api/unicode.rst:288
msgid "Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr ""

#: ../../c-api/unicode.rst:293
msgid "Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr ""

#: ../../c-api/unicode.rst:298
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr ""

#: ../../c-api/unicode.rst:303
msgid "Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr ""

#: ../../c-api/unicode.rst:308
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic "
"character."
msgstr ""

#: ../../c-api/unicode.rst:313
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric "
"character."
msgstr ""

#: ../../c-api/unicode.rst:318
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character."
" Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII "
"space (0x20) which is considered printable.  (Note that printable "
"characters in this context are those which should not be escaped when "
":func:`repr` is invoked on a string. It has no bearing on the handling of"
" strings written to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: ../../c-api/unicode.rst:327
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

#: ../../c-api/unicode.rst:332
msgid "Return the character *ch* converted to lower case."
msgstr ""

#: ../../c-api/unicode.rst:334 ../../c-api/unicode.rst:342
#: ../../c-api/unicode.rst:350
msgid "This function uses simple case mappings."
msgstr ""

#: ../../c-api/unicode.rst:340
msgid "Return the character *ch* converted to upper case."
msgstr ""

#: ../../c-api/unicode.rst:348
msgid "Return the character *ch* converted to title case."
msgstr ""

#: ../../c-api/unicode.rst:356
msgid ""
"Return the character *ch* converted to a decimal positive integer.  "
"Return ``-1`` if this is not possible.  This macro does not raise "
"exceptions."
msgstr ""

#: ../../c-api/unicode.rst:362
msgid ""
"Return the character *ch* converted to a single digit integer. Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:368
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this "
"is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:372
msgid "These APIs can be used to work with surrogates:"
msgstr ""

#: ../../c-api/unicode.rst:376
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr ""

#: ../../c-api/unicode.rst:380
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr ""

#: ../../c-api/unicode.rst:384
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr ""

#: ../../c-api/unicode.rst:388
msgid ""
"Join two surrogate characters and return a single Py_UCS4 value. *high* "
"and *low* are respectively the leading and trailing surrogates in a "
"surrogate pair."
msgstr ""

#: ../../c-api/unicode.rst:394
msgid "Creating and accessing Unicode strings"
msgstr ""

#: ../../c-api/unicode.rst:396
msgid ""
"To create Unicode objects and access their basic sequence properties, use"
" these APIs:"
msgstr ""

#: ../../c-api/unicode.rst:401
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded"
" up to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""

#: ../../c-api/unicode.rst:405
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""

#: ../../c-api/unicode.rst:414
msgid ""
"Create a new Unicode object with the given *kind* (possible values are "
":c:macro:`PyUnicode_1BYTE_KIND` etc., as returned by "
":c:func:`PyUnicode_KIND`).  The *buffer* must point to an array of *size*"
" units of 1, 2 or 4 bytes per character, as given by the kind."
msgstr ""

#: ../../c-api/unicode.rst:424
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. If the buffer is not ``NULL``, the return value might be a shared"
" object, i.e. modification of the data is not allowed."
msgstr ""

#: ../../c-api/unicode.rst:429
msgid ""
"If *u* is ``NULL``, this function behaves like "
":c:func:`PyUnicode_FromUnicode` with the buffer set to ``NULL``.  This "
"usage is deprecated in favor of :c:func:`PyUnicode_New`, and will be "
"removed in Python 3.12."
msgstr ""

#: ../../c-api/unicode.rst:436
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer "
"*u*."
msgstr ""

#: ../../c-api/unicode.rst:442
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number "
"of arguments, calculate the size of the resulting Python Unicode string "
"and return a string with the values formatted into it.  The variable "
"arguments must be C types and must correspond exactly to the format "
"characters in the *format* ASCII-encoded string. The following format "
"characters are allowed:"
msgstr ""

#: ../../c-api/unicode.rst:461
msgid "A single character, represented as a C int."
msgstr ""

#: ../../c-api/unicode.rst:473
#, python-format
msgid ":attr:`%li`"
msgstr ""

#: ../../c-api/unicode.rst:473
#, python-format
msgid "Equivalent to ``printf(\"%li\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:479
msgid ":attr:`%lld`"
msgstr ""

#: ../../c-api/unicode.rst:479
msgid "Equivalent to ``printf(\"%lld\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:482
msgid ":attr:`%lli`"
msgstr ""

#: ../../c-api/unicode.rst:482
msgid "Equivalent to ``printf(\"%lli\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:485
msgid ":attr:`%llu`"
msgstr ""

#: ../../c-api/unicode.rst:485
msgid "Equivalent to ``printf(\"%llu\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:491
msgid ":attr:`%zi`"
msgstr ""

#: ../../c-api/unicode.rst:491
msgid "Equivalent to ``printf(\"%zi\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:514
msgid ":attr:`%A`"
msgstr ""

#: ../../c-api/unicode.rst:514 ../../c-api/unicode.rst:517
#: ../../c-api/unicode.rst:526 ../../c-api/unicode.rst:529
msgid "PyObject\\*"
msgstr ""

#: ../../c-api/unicode.rst:514
msgid "The result of calling :func:`ascii`."
msgstr ""

#: ../../c-api/unicode.rst:517
msgid ":attr:`%U`"
msgstr ""

#: ../../c-api/unicode.rst:517
msgid "A Unicode object."
msgstr ""

#: ../../c-api/unicode.rst:519
msgid ":attr:`%V`"
msgstr ""

#: ../../c-api/unicode.rst:519
msgid "PyObject\\*, const char\\*"
msgstr ""

#: ../../c-api/unicode.rst:519
msgid ""
"A Unicode object (which may be ``NULL``) and a null-terminated C "
"character array as a second parameter (which will be used, if the first "
"parameter is ``NULL``)."
msgstr ""

#: ../../c-api/unicode.rst:526
msgid ":attr:`%S`"
msgstr ""

#: ../../c-api/unicode.rst:526
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ""

#: ../../c-api/unicode.rst:529
msgid ":attr:`%R`"
msgstr ""

#: ../../c-api/unicode.rst:529
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ""

#: ../../c-api/unicode.rst:533
msgid ""
"An unrecognized format character causes all the rest of the format string"
" to be copied as-is to the result string, and any extra arguments "
"discarded."
msgstr ""

#: ../../c-api/unicode.rst:537
#, python-format
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes for ``\"%s\"`` and ``\"%V\"``"
" (if the ``PyObject*`` argument is ``NULL``), and a number of characters "
"for ``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the"
" ``PyObject*`` argument is not ``NULL``)."
msgstr ""

#: ../../c-api/unicode.rst:543
msgid ""
"For integer specifiers (d, u, ld, li, lu, lld, lli, llu, zd, zi, zu, i, "
"x): the 0-conversion flag has effect even when a precision is given."
msgstr ""

#: ../../c-api/unicode.rst:546
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:549
#, python-format
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:552
#, python-format
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, "
"``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:559
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly "
"two arguments."
msgstr ""

#: ../../c-api/unicode.rst:566
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr ""

#: ../../c-api/unicode.rst:568
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and "
"using the error handling defined by *errors*. Both can be ``NULL`` to "
"have the interface use the default values (see :ref:`builtincodecs` for "
"details)."
msgstr ""

#: ../../c-api/unicode.rst:574
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to"
" be set."
msgstr ""

#: ../../c-api/unicode.rst:577
msgid ""
"The API returns ``NULL`` if there was an error.  The caller is "
"responsible for decref'ing the returned objects."
msgstr ""

#: ../../c-api/unicode.rst:583
msgid "Return the length of the Unicode object, in code points."
msgstr ""

#: ../../c-api/unicode.rst:594
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to "
":c:func:`memcpy` if possible.  Returns ``-1`` and sets an exception on "
"error, otherwise returns the number of copied characters."
msgstr ""

#: ../../c-api/unicode.rst:605
msgid ""
"Fill a string with a character: write *fill_char* into "
"``unicode[start:start+length]``."
msgstr ""

#: ../../c-api/unicode.rst:608
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if "
"the string has more than 1 reference."
msgstr ""

#: ../../c-api/unicode.rst:611
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr ""

#: ../../c-api/unicode.rst:620
msgid ""
"Write a character to a string.  The string must have been created through"
" :c:func:`PyUnicode_New`.  Since Unicode strings are supposed to be "
"immutable, the string must not be shared, or have been hashed yet."
msgstr ""

#: ../../c-api/unicode.rst:624
msgid ""
"This function checks that *unicode* is a Unicode object, that the index "
"is not out of bounds, and that the object can be modified safely (i.e. "
"that it its reference count is one)."
msgstr ""

#: ../../c-api/unicode.rst:633
msgid ""
"Read a character from a string.  This function checks that *unicode* is a"
" Unicode object and the index is not out of bounds, in contrast to the "
"macro version :c:func:`PyUnicode_READ_CHAR`."
msgstr ""

#: ../../c-api/unicode.rst:643
msgid ""
"Return a substring of *str*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported."
msgstr ""

#: ../../c-api/unicode.rst:652
msgid ""
"Copy the string *u* into a UCS4 buffer, including a null character, if "
"*copy_null* is set.  Returns ``NULL`` and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length "
"of *u*).  *buffer* is returned on success."
msgstr ""

#: ../../c-api/unicode.rst:662
msgid ""
"Copy the string *u* into a new UCS4 buffer that is allocated using "
":c:func:`PyMem_Malloc`.  If this fails, ``NULL`` is returned with a "
":exc:`MemoryError` set.  The returned buffer always has an extra null "
"code point appended."
msgstr ""

#: ../../c-api/unicode.rst:671
msgid "Deprecated Py_UNICODE APIs"
msgstr ""

#: ../../c-api/unicode.rst:675
msgid ""
"These API functions are deprecated with the implementation of :pep:`393`."
" Extension modules can continue using them, as they will not be removed "
"in Python 3.x, but need to be aware that their use can now cause "
"performance and memory hits."
msgstr ""

#: ../../c-api/unicode.rst:682
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size."
" *u* may be ``NULL`` which causes the contents to be undefined. It is the"
" user's responsibility to fill in the needed data.  The buffer is copied "
"into the new object."
msgstr ""

#: ../../c-api/unicode.rst:687
msgid ""
"If the buffer is not ``NULL``, the return value might be a shared object."
" Therefore, modification of the resulting Unicode object is only allowed "
"when *u* is ``NULL``."
msgstr ""

#: ../../c-api/unicode.rst:691
msgid ""
"If the buffer is ``NULL``, :c:func:`PyUnicode_READY` must be called once "
"the string content has been filled before using any of the access macros "
"such as :c:func:`PyUnicode_KIND`."
msgstr ""

#: ../../c-api/unicode.rst:698
msgid ""
"Part of the old-style Unicode API, please migrate to using "
":c:func:`PyUnicode_FromKindAndData`, :c:func:`PyUnicode_FromWideChar`, or"
" :c:func:`PyUnicode_New`."
msgstr ""

#: ../../c-api/unicode.rst:703
msgid ""
"Return a read-only pointer to the Unicode object's internal "
":c:type:`Py_UNICODE` buffer, or ``NULL`` on error. This will create the "
":c:type:`Py_UNICODE*` representation of the object if it is not yet "
"available. The buffer is always terminated with an extra null code point."
" Note that the resulting :c:type:`Py_UNICODE` string may also contain "
"embedded null code points, which would cause the string to be truncated "
"when used in most C functions."
msgstr ""

#: ../../c-api/unicode.rst:715 ../../c-api/unicode.rst:743
msgid ""
"Part of the old-style Unicode API, please migrate to using "
":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsWideChar`, "
":c:func:`PyUnicode_ReadChar` or similar new APIs."
msgstr ""

#: ../../c-api/unicode.rst:721
msgid ""
"Create a Unicode object by replacing all decimal digits in "
":c:type:`Py_UNICODE` buffer of the given *size* by ASCII digits 0--9 "
"according to their decimal value.  Return ``NULL`` if an exception "
"occurs."
msgstr ""

#: ../../c-api/unicode.rst:727
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`Py_UNICODE_TODECIMAL`."
msgstr ""

#: ../../c-api/unicode.rst:732
msgid ""
"Like :c:func:`PyUnicode_AsUnicode`, but also saves the "
":c:func:`Py_UNICODE` array length (excluding the extra null terminator) "
"in *size*. Note that the resulting :c:type:`Py_UNICODE*` string may "
"contain embedded null code points, which would cause the string to be "
"truncated when used in most C functions."
msgstr ""

#: ../../c-api/unicode.rst:748
msgid ""
"Create a copy of a Unicode string ending with a null code point. Return "
"``NULL`` and raise a :exc:`MemoryError` exception on memory allocation "
"failure, otherwise return a new allocated buffer (use "
":c:func:`PyMem_Free` to free the buffer). Note that the resulting "
":c:type:`Py_UNICODE*` string may contain embedded null code points, which"
" would cause the string to be truncated when used in most C functions."
msgstr ""

#: ../../c-api/unicode.rst:757
msgid ""
"Please migrate to using :c:func:`PyUnicode_AsUCS4Copy` or similar new "
"APIs."
msgstr ""

#: ../../c-api/unicode.rst:762
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in"
" code units (this includes surrogate pairs as 2 units)."
msgstr ""

#: ../../c-api/unicode.rst:772
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), "
"return the reference with incremented refcount."
msgstr ""

#: ../../c-api/unicode.rst:776
msgid "Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr ""

#: ../../c-api/unicode.rst:780
msgid "Locale Encoding"
msgstr ""

#: ../../c-api/unicode.rst:782
msgid ""
"The current locale encoding can be used to decode text from the operating"
" system."
msgstr ""

#: ../../c-api/unicode.rst:789
msgid ""
"Decode a string from UTF-8 on Android and VxWorks, or from the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The decoder uses"
" ``\"strict\"`` error handler if *errors* is ``NULL``.  *str* must end "
"with a null character but cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:796
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from "
":c:data:`Py_FileSystemDefaultEncoding` (the locale encoding read at "
"Python startup)."
msgstr ""

#: ../../c-api/unicode.rst:800 ../../c-api/unicode.rst:836
msgid "This function ignores the Python UTF-8 mode."
msgstr ""

#: ../../c-api/unicode.rst:804 ../../c-api/unicode.rst:908
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:808
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, "
":c:func:`Py_DecodeLocale` was used for the ``surrogateescape``, and the "
"current locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:817
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the "
"string length using :c:func:`strlen`."
msgstr ""

#: ../../c-api/unicode.rst:825
msgid ""
"Encode a Unicode object to UTF-8 on Android and VxWorks, or to the "
"current locale encoding on other platforms. The supported error handlers "
"are ``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The encoder "
"uses ``\"strict\"`` error handler if *errors* is ``NULL``. Return a "
":class:`bytes` object. *unicode* cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:832
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to "
":c:data:`Py_FileSystemDefaultEncoding` (the locale encoding read at "
"Python startup)."
msgstr ""

#: ../../c-api/unicode.rst:840 ../../c-api/unicode.rst:944
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:844
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, "
":c:func:`Py_EncodeLocale` was used for the ``surrogateescape``, and the "
"current locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:853
msgid "File System Encoding"
msgstr ""

#: ../../c-api/unicode.rst:855
msgid ""
"To encode and decode file names and other environment strings, "
":c:data:`Py_FileSystemDefaultEncoding` should be used as the encoding, "
"and :c:data:`Py_FileSystemDefaultEncodeErrors` should be used as the "
"error handler (:pep:`383` and :pep:`529`). To encode file names to "
":class:`bytes` during argument parsing, the ``\"O&\"`` converter should "
"be used, passing :c:func:`PyUnicode_FSConverter` as the conversion "
"function:"
msgstr ""

#: ../../c-api/unicode.rst:864
msgid ""
"ParseTuple converter: encode :class:`str` objects -- obtained directly or"
" through the :class:`os.PathLike` interface -- to :class:`bytes` using "
":c:func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output "
"as-is. *result* must be a :c:type:`PyBytesObject*` which must be released"
" when it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:872 ../../c-api/unicode.rst:889
msgid "Accepts a :term:`path-like object`."
msgstr ""

#: ../../c-api/unicode.rst:875
msgid ""
"To decode file names to :class:`str` during argument parsing, the "
"``\"O&\"`` converter should be used, passing "
":c:func:`PyUnicode_FSDecoder` as the conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:881
msgid ""
"ParseTuple converter: decode :class:`bytes` objects -- obtained either "
"directly or indirectly through the :class:`os.PathLike` interface -- to "
":class:`str` using :c:func:`PyUnicode_DecodeFSDefaultAndSize`; "
":class:`str` objects are output as-is. *result* must be a "
":c:type:`PyUnicodeObject*` which must be released when it is no longer "
"used."
msgstr ""

#: ../../c-api/unicode.rst:895
msgid ""
"Decode a string using :c:data:`Py_FileSystemDefaultEncoding` and the "
":c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../../c-api/unicode.rst:898 ../../c-api/unicode.rst:919
#: ../../c-api/unicode.rst:935
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""

#: ../../c-api/unicode.rst:901
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the"
" locale encoding and cannot be modified later. If you need to decode a "
"string from the current locale encoding, use "
":c:func:`PyUnicode_DecodeLocaleAndSize`."
msgstr ""

#: ../../c-api/unicode.rst:910 ../../c-api/unicode.rst:924
#: ../../c-api/unicode.rst:948
msgid "Use :c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../../c-api/unicode.rst:916
msgid ""
"Decode a null-terminated string using "
":c:data:`Py_FileSystemDefaultEncoding` and the "
":c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../../c-api/unicode.rst:922
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string "
"length."
msgstr ""

#: ../../c-api/unicode.rst:930
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with "
"the :c:data:`Py_FileSystemDefaultEncodeErrors` error handler, and return "
":class:`bytes`. Note that the resulting :class:`bytes` object may contain"
" null bytes."
msgstr ""

#: ../../c-api/unicode.rst:938
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the"
" locale encoding and cannot be modified later. If you need to encode a "
"string to the current locale encoding, use "
":c:func:`PyUnicode_EncodeLocale`."
msgstr ""

#: ../../c-api/unicode.rst:952
msgid "wchar_t Support"
msgstr ""

#: ../../c-api/unicode.rst:954
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

#: ../../c-api/unicode.rst:958
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *w* of the "
"given *size*. Passing ``-1`` as the *size* indicates that the function "
"must itself compute the length, using wcslen. Return ``NULL`` on failure."
msgstr ""

#: ../../c-api/unicode.rst:966
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *w*.  "
"At most *size* :c:type:`wchar_t` characters are copied (excluding a "
"possibly trailing null termination character).  Return the number of "
":c:type:`wchar_t` characters copied or ``-1`` in case of an error.  Note "
"that the resulting :c:type:`wchar_t*` string may or may not be null-"
"terminated.  It is the responsibility of the caller to make sure that the"
" :c:type:`wchar_t*` string is null-terminated in case this is required by"
" the application. Also, note that the :c:type:`wchar_t*` string might "
"contain null characters, which would cause the string to be truncated "
"when used with most C functions."
msgstr ""

#: ../../c-api/unicode.rst:979
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not ``NULL``, write the "
"number of wide characters (excluding the trailing null termination "
"character) into *\\*size*. Note that the resulting :c:type:`wchar_t` "
"string might contain null characters, which would cause the string to be "
"truncated when used with most C functions. If *size* is ``NULL`` and the "
":c:type:`wchar_t*` string contains null characters a :exc:`ValueError` is"
" raised."
msgstr ""

#: ../../c-api/unicode.rst:987
msgid ""
"Returns a buffer allocated by :c:func:`PyMem_Alloc` (use "
":c:func:`PyMem_Free` to free it) on success. On error, returns ``NULL`` "
"and *\\*size* is undefined. Raises a :exc:`MemoryError` if memory "
"allocation is failed."
msgstr ""

#: ../../c-api/unicode.rst:994
msgid ""
"Raises a :exc:`ValueError` if *size* is ``NULL`` and the "
":c:type:`wchar_t*` string contains null characters."
msgstr ""

#: ../../c-api/unicode.rst:1002
msgid "Built-in Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1004
msgid ""
"Python provides a set of built-in codecs which are written in C for "
"speed. All of these codecs are directly usable via the following "
"functions."
msgstr ""

#: ../../c-api/unicode.rst:1007
msgid ""
"Many of the following APIs take two arguments encoding and errors, and "
"they have the same semantics as the ones of the built-in :func:`str` "
"string object constructor."
msgstr ""

#: ../../c-api/unicode.rst:1011
msgid ""
"Setting encoding to ``NULL`` causes the default encoding to be used which"
" is ASCII.  The file system calls should use "
":c:func:`PyUnicode_FSConverter` for encoding file names. This uses the "
"variable :c:data:`Py_FileSystemDefaultEncoding` internally. This variable"
" should be treated as read-only: on some systems, it will be a pointer to"
" a static string, on others, it will change at run-time (such as when the"
" application invokes setlocale)."
msgstr ""

#: ../../c-api/unicode.rst:1019
msgid ""
"Error handling is set by errors which may also be set to ``NULL`` meaning"
" to use the default handling defined for the codec.  Default error "
"handling for all built-in codecs is \"strict\" (:exc:`ValueError` is "
"raised)."
msgstr ""

#: ../../c-api/unicode.rst:1023
msgid ""
"The codecs all use a similar interface.  Only deviation from the "
"following generic ones are documented for simplicity."
msgstr ""

#: ../../c-api/unicode.rst:1028
msgid "Generic Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1030
msgid "These are the generic codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1036
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string "
"*s*. *encoding* and *errors* have the same meaning as the parameters of "
"the same name in the :func:`str` built-in function.  The codec to be used"
" is looked up using the Python codec registry.  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1046
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the "
"same name in the Unicode :meth:`~str.encode` method. The codec to be used"
" is looked up using the Python codec registry. Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1056
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* and return"
" a Python bytes object.  *encoding* and *errors* have the same meaning as"
" the parameters of the same name in the Unicode :meth:`~str.encode` "
"method.  The codec to be used is looked up using the Python codec "
"registry.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1064 ../../c-api/unicode.rst:1321
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1068
msgid "UTF-8 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1070
msgid "These are the UTF-8 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1075
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded "
"string *s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1082
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF8`. If"
" *consumed* is not ``NULL``, trailing incomplete UTF-8 byte sequences "
"will not be treated as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1090
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes"
" object.  Error handling is \"strict\".  Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1097
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store "
"the size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be ``NULL``; in this case no size will be stored.  The "
"returned buffer always has an extra null byte appended (not included in "
"*size*), regardless of whether there are any other null code points."
msgstr ""

#: ../../c-api/unicode.rst:1103
msgid ""
"In the case of an error, ``NULL`` is returned with an exception set and "
"no *size* is stored."
msgstr ""

#: ../../c-api/unicode.rst:1106
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object,"
" and subsequent calls will return a pointer to the same buffer.  The "
"caller is not responsible for deallocating the buffer."
msgstr ""

#: ../../c-api/unicode.rst:1112 ../../c-api/unicode.rst:1122
msgid "The return type is now ``const char *`` rather of ``char *``."
msgstr ""

#: ../../c-api/unicode.rst:1118
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""

#: ../../c-api/unicode.rst:1128
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* using "
"UTF-8 and return a Python bytes object.  Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1135
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUTF8String`, :c:func:`PyUnicode_AsUTF8AndSize` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1139
msgid "UTF-32 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1141
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1147
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the "
"error handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1151 ../../c-api/unicode.rst:1224
msgid ""
"If *byteorder* is non-``NULL``, the decoder starts decoding using the "
"given byte order::"
msgstr ""

#: ../../c-api/unicode.rst:1158
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are"
" a byte order mark (BOM), the decoder switches to this byte order and the"
" BOM is not copied into the resulting Unicode string.  If ``*byteorder`` "
"is ``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

#: ../../c-api/unicode.rst:1163 ../../c-api/unicode.rst:1237
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the "
"end of input data."
msgstr ""

#: ../../c-api/unicode.rst:1166 ../../c-api/unicode.rst:1240
msgid "If *byteorder* is ``NULL``, the codec starts in native order mode."
msgstr ""

#: ../../c-api/unicode.rst:1168 ../../c-api/unicode.rst:1204
#: ../../c-api/unicode.rst:1242 ../../c-api/unicode.rst:1279
msgid "Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1174
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF32`. "
"If *consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF32Stateful` "
"will not treat trailing incomplete UTF-32 byte sequences (such as a "
"number of bytes not divisible by four) as an error. Those bytes will not "
"be decoded and the number of bytes that have been decoded will be stored "
"in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1183
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte "
"order. The string always starts with a BOM mark.  Error handling is "
"\"strict\". Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1191
msgid ""
"Return a Python bytes object holding the UTF-32 encoded value of the "
"Unicode data in *s*.  Output is written according to the following byte "
"order::"
msgstr ""

#: ../../c-api/unicode.rst:1198 ../../c-api/unicode.rst:1272
msgid ""
"If byteorder is ``0``, the output string will always start with the "
"Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is "
"prepended."
msgstr ""

#: ../../c-api/unicode.rst:1201
msgid ""
"If ``Py_UNICODE_WIDE`` is not defined, surrogate pairs will be output as "
"a single code point."
msgstr ""

#: ../../c-api/unicode.rst:1208
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUTF32String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1212
msgid "UTF-16 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1214
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1220
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the "
"error handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1231
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are "
"a byte order mark (BOM), the decoder switches to this byte order and the "
"BOM is not copied into the resulting Unicode string.  If ``*byteorder`` "
"is ``-1`` or ``1``, any byte order mark is copied to the output (where it"
" will result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

#: ../../c-api/unicode.rst:1248
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF16`. "
"If *consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF16Stateful` "
"will not treat trailing incomplete UTF-16 byte sequences (such as an odd "
"number of bytes or a split surrogate pair) as an error. Those bytes will "
"not be decoded and the number of bytes that have been decoded will be "
"stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1257
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte "
"order. The string always starts with a BOM mark.  Error handling is "
"\"strict\". Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1265
msgid ""
"Return a Python bytes object holding the UTF-16 encoded value of the "
"Unicode data in *s*.  Output is written according to the following byte "
"order::"
msgstr ""

#: ../../c-api/unicode.rst:1275
msgid ""
"If ``Py_UNICODE_WIDE`` is defined, a single :c:type:`Py_UNICODE` value "
"may get represented as a surrogate pair. If it is not defined, each "
":c:type:`Py_UNICODE` values is interpreted as a UCS-2 character."
msgstr ""

#: ../../c-api/unicode.rst:1283
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUTF16String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1287
msgid "UTF-7 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1289
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1294
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded "
"string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1301
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF7`.  "
"If *consumed* is not ``NULL``, trailing incomplete UTF-7 base-64 sections"
" will not be treated as an error.  Those bytes will not be decoded and "
"the number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1310
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given size using UTF-7 and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised"
" by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1314
msgid ""
"If *base64SetO* is nonzero, \"Set O\" (punctuation that has no otherwise "
"special meaning) will be encoded in base-64.  If *base64WhiteSpace* is "
"nonzero, whitespace will be encoded in base-64.  Both are set to zero for"
" the Python \"utf-7\" codec."
msgstr ""

#: ../../c-api/unicode.rst:1325
msgid "Unicode-Escape Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1327
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1333
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: ../../c-api/unicode.rst:1339
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1346
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Unicode-"
"Escape and return a bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1351
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUnicodeEscapeString`."
msgstr ""

#: ../../c-api/unicode.rst:1355
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1357
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1363
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-"
"Escape encoded string *s*.  Return ``NULL`` if an exception was raised by"
" the codec."
msgstr ""

#: ../../c-api/unicode.rst:1369
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as"
" a bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1377
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Raw-"
"Unicode-Escape and return a bytes object.  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1383
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsRawUnicodeEscapeString` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1387
msgid "Latin-1 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1389
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during "
"encoding."
msgstr ""

#: ../../c-api/unicode.rst:1395
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1401
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1408
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Latin-1 "
"and return a Python bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1415
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsLatin1String` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1419
msgid "ASCII Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1421
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: ../../c-api/unicode.rst:1427
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded "
"string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1433
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes"
" object.  Error handling is \"strict\".  Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1440
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using ASCII "
"and return a Python bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1447
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsASCIIString` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1451
msgid "Character Map Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1453
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mapping "
"to encode and decode characters.  The mapping objects provided must "
"support the :meth:`__getitem__` mapping interface; dictionaries and "
"sequences work well."
msgstr ""

#: ../../c-api/unicode.rst:1459
msgid "These are the mapping codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1464
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string "
"*s* using the given *mapping* object.  Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1468
msgid ""
"If *mapping* is ``NULL``, Latin-1 decoding will be applied.  Else "
"*mapping* must map bytes ordinals (integers in the range from 0 to 255) "
"to Unicode strings, integers (which are then interpreted as Unicode "
"ordinals) or ``None``.  Unmapped data bytes -- ones which cause a "
":exc:`LookupError`, as well as ones which get mapped to ``None``, "
"``0xFFFE`` or ``'\\ufffe'``, are treated as undefined mappings and cause "
"an error."
msgstr ""

#: ../../c-api/unicode.rst:1479
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as a bytes object.  Error handling is \"strict\".  Return ``NULL``"
" if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1483
msgid ""
"The *mapping* object must map Unicode ordinal integers to bytes objects, "
"integers in the range from 0 to 255 or ``None``.  Unmapped character "
"ordinals (ones which cause a :exc:`LookupError`) as well as mapped to "
"``None`` are treated as \"undefined mapping\" and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1492
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using the "
"given *mapping* object and return the result as a bytes object.  Return "
"``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1499
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsCharmapString` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1502
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: ../../c-api/unicode.rst:1506
msgid ""
"Translate a string by applying a character mapping table to it and return"
" the resulting Unicode object. Return ``NULL`` if an exception was raised"
" by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1510
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: ../../c-api/unicode.rst:1513
msgid ""
"Mapping tables need only provide the :meth:`__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-"
"is."
msgstr ""

#: ../../c-api/unicode.rst:1517
msgid ""
"*errors* has the usual meaning for codecs. It may be ``NULL`` which "
"indicates to use the default error handling."
msgstr ""

#: ../../c-api/unicode.rst:1524
msgid ""
"Translate a :c:type:`Py_UNICODE` buffer of the given *size* by applying a"
" character *mapping* table to it and return the resulting Unicode object."
" Return ``NULL`` when an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1531
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_Translate`. or :ref:`generic codec based API <codec-"
"registry>`"
msgstr ""

#: ../../c-api/unicode.rst:1535
msgid "MBCS codecs for Windows"
msgstr ""

#: ../../c-api/unicode.rst:1537
msgid ""
"These are the MBCS codec APIs. They are currently only available on "
"Windows and use the Win32 MBCS converters to implement the conversions.  "
"Note that MBCS (or DBCS) is a class of encodings, not just one.  The "
"target encoding is defined by the user settings on the machine running "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1544
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded "
"string *s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1551
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeMBCS`. If"
" *consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeMBCSStateful` will "
"not decode trailing lead byte and the number of bytes that have been "
"decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1559
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1566
msgid ""
"Encode the Unicode object using the specified code page and return a "
"Python bytes object.  Return ``NULL`` if an exception was raised by the "
"codec. Use :c:data:`CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: ../../c-api/unicode.rst:1575
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using MBCS and"
" return a Python bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1582
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsMBCSString`, :c:func:`PyUnicode_EncodeCodePage` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1586
msgid "Methods & Slots"
msgstr ""

#: ../../c-api/unicode.rst:1592
msgid "Methods and Slot Functions"
msgstr ""

#: ../../c-api/unicode.rst:1594
msgid ""
"The following APIs are capable of handling Unicode objects and strings on"
" input (we refer to them as strings in the descriptions) and return "
"Unicode objects or integers as appropriate."
msgstr ""

#: ../../c-api/unicode.rst:1598
msgid "They all return ``NULL`` or ``-1`` if an exception occurs."
msgstr ""

#: ../../c-api/unicode.rst:1603
msgid "Concat two strings giving a new Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1608
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is ``NULL``, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  "
"If negative, no limit is set.  Separators are not included in the "
"resulting list."
msgstr ""

#: ../../c-api/unicode.rst:1616
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode "
"strings. CRLF is considered to be one line break.  If *keepend* is ``0``,"
" the Line break characters are not included in the resulting strings."
msgstr ""

#: ../../c-api/unicode.rst:1623
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1630
msgid ""
"Return ``1`` if *substr* matches ``str[start:end]`` at the given tail end"
" (*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` "
"a suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1638
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the "
"given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index "
"of the first match; a value of ``-1`` indicates that no match was found, "
"and ``-2`` indicates that an error occurred and an exception has been "
"set."
msgstr ""

#: ../../c-api/unicode.rst:1648
msgid ""
"Return the first position of the character *ch* in ``str[start:end]`` "
"using the given *direction* (*direction* == ``1`` means to do a forward "
"search, *direction* == ``-1`` a backward search).  The return value is "
"the index of the first match; a value of ``-1`` indicates that no match "
"was found, and ``-2`` indicates that an error occurred and an exception "
"has been set."
msgstr ""

#: ../../c-api/unicode.rst:1656
msgid "*start* and *end* are now adjusted to behave like ``str[start:end]``."
msgstr ""

#: ../../c-api/unicode.rst:1663
msgid ""
"Return the number of non-overlapping occurrences of *substr* in "
"``str[start:end]``.  Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1670
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with "
"*replstr* and return the resulting Unicode object. *maxcount* == ``-1`` "
"means replace all occurrences."
msgstr ""

#: ../../c-api/unicode.rst:1677
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal,"
" and greater than, respectively."
msgstr ""

#: ../../c-api/unicode.rst:1680
msgid ""
"This function returns ``-1`` upon failure, so one should call "
":c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/unicode.rst:1686
msgid ""
"Compare a Unicode object, *uni*, with *string* and return ``-1``, ``0``, "
"``1`` for less than, equal, and greater than, respectively. It is best to"
" pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""

#: ../../c-api/unicode.rst:1691
msgid "This function does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:1696
msgid "Rich compare two Unicode strings and return one of the following:"
msgstr ""

#: ../../c-api/unicode.rst:1698
msgid "``NULL`` in case an exception was raised"
msgstr ""

#: ../../c-api/unicode.rst:1699
msgid ":const:`Py_True` or :const:`Py_False` for successful comparisons"
msgstr ""

#: ../../c-api/unicode.rst:1700
msgid ":const:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: ../../c-api/unicode.rst:1702
msgid ""
"Possible values for *op* are :const:`Py_GT`, :const:`Py_GE`, "
":const:`Py_EQ`, :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE`."
msgstr ""

#: ../../c-api/unicode.rst:1708
msgid ""
"Return a new string object from *format* and *args*; this is analogous to"
" ``format % args``."
msgstr ""

#: ../../c-api/unicode.rst:1714
msgid ""
"Check whether *element* is contained in *container* and return true or "
"false accordingly."
msgstr ""

#: ../../c-api/unicode.rst:1717
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is "
"returned if there was an error."
msgstr ""

#: ../../c-api/unicode.rst:1723
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the "
"address of a pointer variable pointing to a Python Unicode string object."
"  If there is an existing interned string that is the same as "
"*\\*string*, it sets *\\*string* to it (decrementing the reference count "
"of the old string object and incrementing the reference count of the "
"interned string object), otherwise it leaves *\\*string* alone and "
"interns it (incrementing its reference count). (Clarification: even "
"though there is a lot of talk about reference counts, think of this "
"function as reference-count-neutral; you own the object after the call if"
" and only if you owned it before the call.)"
msgstr ""

#: ../../c-api/unicode.rst:1736
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and "
":c:func:`PyUnicode_InternInPlace`, returning either a new Unicode string "
"object that has been interned, or a new (\"owned\") reference to an "
"earlier interned string object with the same value."
msgstr ""

#: ../../c-api/utilities.rst:7
msgid "Utilities"
msgstr ""

#: ../../c-api/utilities.rst:9
msgid ""
"The functions in this chapter perform various utility tasks, ranging from"
" helping C code be more portable across platforms, using Python modules "
"from C, and parsing function arguments and constructing Python values "
"from C values."
msgstr ""

#: ../../c-api/veryhigh.rst:8
msgid "The Very High Level Layer"
msgstr ""

#: ../../c-api/veryhigh.rst:10
msgid ""
"The functions in this chapter will let you execute Python source code "
"given in a file or a buffer, but they will not let you interact in a more"
" detailed way with the interpreter."
msgstr ""

#: ../../c-api/veryhigh.rst:14
msgid ""
"Several of these functions accept a start symbol from the grammar as a "
"parameter.  The available start symbols are :const:`Py_eval_input`, "
":const:`Py_file_input`, and :const:`Py_single_input`.  These are "
"described following the functions which accept them as parameters."
msgstr ""

#: ../../c-api/veryhigh.rst:19
msgid ""
"Note also that several of these functions take :c:type:`FILE*` "
"parameters.  One particular issue which needs to be handled carefully is "
"that the :c:type:`FILE` structure for different C libraries can be "
"different and incompatible.  Under Windows (at least), it is possible for"
" dynamically linked extensions to actually use different libraries, so "
"care should be taken that :c:type:`FILE*` parameters are only passed to "
"these functions if it is certain that they were created by the same "
"library that the Python runtime is using."
msgstr ""

#: ../../c-api/veryhigh.rst:30
msgid ""
"The main program for the standard interpreter.  This is made available "
"for programs which embed Python.  The *argc* and *argv* parameters should"
" be prepared exactly as those which are passed to a C program's "
":c:func:`main` function (converted to wchar_t according to the user's "
"locale).  It is important to note that the argument list may be modified "
"(but the contents of the strings pointed to by the argument list are "
"not). The return value will be ``0`` if the interpreter exits normally "
"(i.e., without an exception), ``1`` if the interpreter exits due to an "
"exception, or ``2`` if the parameter list does not represent a valid "
"Python command line."
msgstr ""

#: ../../c-api/veryhigh.rst:40
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

#: ../../c-api/veryhigh.rst:47
msgid "Similar to :c:func:`Py_Main` but *argv* is an array of bytes strings."
msgstr ""

#: ../../c-api/veryhigh.rst:54
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:60
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *closeit* argument set to ``0``."
msgstr ""

#: ../../c-api/veryhigh.rst:66
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *flags* argument set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:72
msgid ""
"If *fp* refers to a file associated with an interactive device (console "
"or terminal input or Unix pseudo-terminal), return the value of "
":c:func:`PyRun_InteractiveLoop`, otherwise return the result of "
":c:func:`PyRun_SimpleFile`.  *filename* is decoded from the filesystem "
"encoding (:func:`sys.getfilesystemencoding`).  If *filename* is ``NULL``,"
" this function uses ``\"???\"`` as the filename."
msgstr ""

#: ../../c-api/veryhigh.rst:82
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleStringFlags` "
"below, leaving the :c:type:`PyCompilerFlags`\\* argument set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:88
msgid ""
"Executes the Python source code from *command* in the :mod:`__main__` "
"module according to the *flags* argument. If :mod:`__main__` does not "
"already exist, it is created.  Returns ``0`` on success or ``-1`` if an "
"exception was raised.  If there was an error, there is no way to get the "
"exception information. For the meaning of *flags*, see below."
msgstr ""

#: ../../c-api/veryhigh.rst:94
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``-1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

#: ../../c-api/veryhigh.rst:101
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` "
"below, leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:107
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` "
"below, leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:113
msgid ""
"Similar to :c:func:`PyRun_SimpleStringFlags`, but the Python source code "
"is read from *fp* instead of an in-memory string. *filename* should be "
"the name of the file, it is decoded from the filesystem encoding "
"(:func:`sys.getfilesystemencoding`).  If *closeit* is true, the file is "
"closed before PyRun_SimpleFileExFlags returns."
msgstr ""

#: ../../c-api/veryhigh.rst:120
msgid ""
"On Windows, *fp* should be opened as binary mode (e.g. ``fopen(filename, "
"\"rb\")``. Otherwise, Python may not handle script file with LF line "
"ending correctly."
msgstr ""

#: ../../c-api/veryhigh.rst:126
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveOneFlags` "
"below, leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:132
msgid ""
"Read and execute a single statement from a file associated with an "
"interactive device according to the *flags* argument.  The user will be "
"prompted using ``sys.ps1`` and ``sys.ps2``.  *filename* is decoded from "
"the filesystem encoding (:func:`sys.getfilesystemencoding`)."
msgstr ""

#: ../../c-api/veryhigh.rst:137
msgid ""
"Returns ``0`` when the input was executed successfully, ``-1`` if there "
"was an exception, or an error code from the :file:`errcode.h` include "
"file distributed as part of Python if there was a parse error.  (Note "
"that :file:`errcode.h` is not included by :file:`Python.h`, so must be "
"included specifically if needed.)"
msgstr ""

#: ../../c-api/veryhigh.rst:146
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveLoopFlags` "
"below, leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:152
msgid ""
"Read and execute statements from a file associated with an interactive "
"device until EOF is reached.  The user will be prompted using ``sys.ps1``"
" and ``sys.ps2``.  *filename* is decoded from the filesystem encoding "
"(:func:`sys.getfilesystemencoding`).  Returns ``0`` at EOF or a negative "
"number upon failure."
msgstr ""

#: ../../c-api/veryhigh.rst:161
msgid ""
"Can be set to point to a function with the prototype ``int func(void)``."
"  The function will be called when Python's interpreter prompt is about "
"to become idle and wait for user input from the terminal.  The return "
"value is ignored.  Overriding this hook can be used to integrate the "
"interpreter's prompt with other event loops, as done in the "
":file:`Modules/_tkinter.c` in the Python source code."
msgstr ""

#: ../../c-api/veryhigh.rst:172
msgid ""
"Can be set to point to a function with the prototype ``char *func(FILE "
"*stdin, FILE *stdout, char *prompt)``, overriding the default function "
"used to read a single line of input at the interpreter's prompt.  The "
"function is expected to output the string *prompt* if it's not ``NULL``, "
"and then read a line of input from the provided standard input file, "
"returning the resulting string.  For example, The :mod:`readline` module "
"sets this hook to provide line-editing and tab-completion features."
msgstr ""

#: ../../c-api/veryhigh.rst:181
msgid ""
"The result must be a string allocated by :c:func:`PyMem_RawMalloc` or "
":c:func:`PyMem_RawRealloc`, or ``NULL`` if an error occurred."
msgstr ""

#: ../../c-api/veryhigh.rst:184
msgid ""
"The result must be allocated by :c:func:`PyMem_RawMalloc` or "
":c:func:`PyMem_RawRealloc`, instead of being allocated by "
":c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`."
msgstr ""

#: ../../c-api/veryhigh.rst:192
msgid ""
"This is a simplified interface to "
":c:func:`PyParser_SimpleParseStringFlagsFilename` below, leaving  "
"*filename* set to ``NULL`` and *flags* set to ``0``."
msgstr ""

#: ../../c-api/veryhigh.rst:199
msgid ""
"This is a simplified interface to "
":c:func:`PyParser_SimpleParseStringFlagsFilename` below, leaving  "
"*filename* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:206
msgid ""
"Parse Python source code from *str* using the start token *start* "
"according to the *flags* argument.  The result can be used to create a "
"code object which can be evaluated efficiently. This is useful if a code "
"fragment must be evaluated many times. *filename* is decoded from the "
"filesystem encoding (:func:`sys.getfilesystemencoding`)."
msgstr ""

#: ../../c-api/veryhigh.rst:215
msgid ""
"This is a simplified interface to :c:func:`PyParser_SimpleParseFileFlags`"
" below, leaving *flags* set to ``0``."
msgstr ""

#: ../../c-api/veryhigh.rst:221
msgid ""
"Similar to :c:func:`PyParser_SimpleParseStringFlagsFilename`, but the "
"Python source code is read from *fp* instead of an in-memory string."
msgstr ""

#: ../../c-api/veryhigh.rst:227
msgid ""
"This is a simplified interface to :c:func:`PyRun_StringFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:233
msgid ""
"Execute Python source code from *str* in the context specified by the "
"objects *globals* and *locals* with the compiler flags specified by "
"*flags*.  *globals* must be a dictionary; *locals* can be any object that"
" implements the mapping protocol.  The parameter *start* specifies the "
"start token that should be used to parse the source code."
msgstr ""

#: ../../c-api/veryhigh.rst:239
msgid ""
"Returns the result of executing the code as a Python object, or ``NULL`` "
"if an exception was raised."
msgstr ""

#: ../../c-api/veryhigh.rst:245
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:251
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:257
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, "
"leaving *closeit* set to ``0``."
msgstr ""

#: ../../c-api/veryhigh.rst:263
msgid ""
"Similar to :c:func:`PyRun_StringFlags`, but the Python source code is "
"read from *fp* instead of an in-memory string. *filename* should be the "
"name of the file, it is decoded from the filesystem encoding "
"(:func:`sys.getfilesystemencoding`). If *closeit* is true, the file is "
"closed before :c:func:`PyRun_FileExFlags` returns."
msgstr ""

#: ../../c-api/veryhigh.rst:272
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:278
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringExFlags` "
"below, with *optimize* set to ``-1``."
msgstr ""

#: ../../c-api/veryhigh.rst:284
msgid ""
"Parse and compile the Python source code in *str*, returning the "
"resulting code object.  The start token is given by *start*; this can be "
"used to constrain the code which can be compiled and should be "
":const:`Py_eval_input`, :const:`Py_file_input`, or "
":const:`Py_single_input`.  The filename specified by *filename* is used "
"to construct the code object and may appear in tracebacks or "
":exc:`SyntaxError` exception messages.  This returns ``NULL`` if the code"
" cannot be parsed or compiled."
msgstr ""

#: ../../c-api/veryhigh.rst:292
msgid ""
"The integer *optimize* specifies the optimization level of the compiler; "
"a value of ``-1`` selects the optimization level of the interpreter as "
"given by :option:`-O` options.  Explicit levels are ``0`` (no "
"optimization; ``__debug__`` is true), ``1`` (asserts are removed, "
"``__debug__`` is false) or ``2`` (docstrings are removed too)."
msgstr ""

#: ../../c-api/veryhigh.rst:303
msgid ""
"Like :c:func:`Py_CompileStringObject`, but *filename* is a byte string "
"decoded from the filesystem encoding (:func:`os.fsdecode`)."
msgstr ""

#: ../../c-api/veryhigh.rst:310
msgid ""
"This is a simplified interface to :c:func:`PyEval_EvalCodeEx`, with just "
"the code object, and global and local variables.  The other arguments are"
" set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:317
msgid ""
"Evaluate a precompiled code object, given a particular environment for "
"its evaluation.  This environment consists of a dictionary of global "
"variables, a mapping object of local variables, arrays of arguments, "
"keywords and defaults, a dictionary of default values for :ref:`keyword-"
"only <keyword-only_parameter>` arguments and a closure tuple of cells."
msgstr ""

#: ../../c-api/veryhigh.rst:326
msgid ""
"The C structure of the objects used to describe frame objects. The fields"
" of this type are subject to change at any time."
msgstr ""

#: ../../c-api/veryhigh.rst:332
msgid ""
"Evaluate an execution frame.  This is a simplified interface to "
":c:func:`PyEval_EvalFrameEx`, for backward compatibility."
msgstr ""

#: ../../c-api/veryhigh.rst:338
msgid ""
"This is the main, unvarnished function of Python interpretation.  The "
"code object associated with the execution frame *f* is executed, "
"interpreting bytecode and executing calls as needed.  The additional "
"*throwflag* parameter can mostly be ignored - if true, then it causes an "
"exception to immediately be thrown; this is used for the "
":meth:`~generator.throw` methods of generator objects."
msgstr ""

#: ../../c-api/veryhigh.rst:352
msgid ""
"This function changes the flags of the current evaluation frame, and "
"returns true on success, false on failure."
msgstr ""

#: ../../c-api/veryhigh.rst:360
msgid ""
"The start symbol from the Python grammar for isolated expressions; for "
"use with :c:func:`Py_CompileString`."
msgstr ""

#: ../../c-api/veryhigh.rst:368
msgid ""
"The start symbol from the Python grammar for sequences of statements as "
"read from a file or other source; for use with "
":c:func:`Py_CompileString`.  This is the symbol to use when compiling "
"arbitrarily long Python source code."
msgstr ""

#: ../../c-api/veryhigh.rst:377
msgid ""
"The start symbol from the Python grammar for a single statement; for use "
"with :c:func:`Py_CompileString`. This is the symbol used for the "
"interactive interpreter loop."
msgstr ""

#: ../../c-api/veryhigh.rst:384
msgid ""
"This is the structure used to hold compiler flags.  In cases where code "
"is only being compiled, it is passed as ``int flags``, and in cases where"
" code is being executed, it is passed as ``PyCompilerFlags *flags``.  In "
"this case, ``from __future__ import`` can modify *flags*."
msgstr ""

#: ../../c-api/veryhigh.rst:389
msgid ""
"Whenever ``PyCompilerFlags *flags`` is ``NULL``, :attr:`cf_flags` is "
"treated as equal to ``0``, and any modification due to ``from __future__ "
"import`` is discarded."
msgstr ""

#: ../../c-api/veryhigh.rst:395
msgid "Compiler flags."
msgstr ""

#: ../../c-api/veryhigh.rst:399
msgid ""
"*cf_feature_version* is the minor Python version. It should be "
"initialized to ``PY_MINOR_VERSION``."
msgstr ""

#: ../../c-api/veryhigh.rst:402
msgid ""
"The field is ignored by default, it is used if and only if "
"``PyCF_ONLY_AST`` flag is set in *cf_flags*."
msgstr ""

#: ../../c-api/veryhigh.rst:405
msgid "Added *cf_feature_version* field."
msgstr ""

#: ../../c-api/veryhigh.rst:411
msgid ""
"This bit can be set in *flags* to cause division operator ``/`` to be "
"interpreted as \"true division\" according to :pep:`238`."
msgstr ""

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr ""

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The "
"first is a simple reference object, and the second acts as a proxy for "
"the original object as much as it can."
msgstr ""

#: ../../c-api/weakref.rst:16
msgid "Return true if *ob* is either a reference or proxy object."
msgstr ""

#: ../../c-api/weakref.rst:21
msgid "Return true if *ob* is a reference object."
msgstr ""

#: ../../c-api/weakref.rst:26
msgid "Return true if *ob* is a proxy object."
msgstr ""

#: ../../c-api/weakref.rst:31
msgid ""
"Return a weak reference object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing reference object may be returned.  The second parameter, "
"*callback*, can be a callable object that receives notification when *ob*"
" is garbage collected; it should accept a single parameter, which will be"
" the weak reference object itself. *callback* may also be ``None`` or "
"``NULL``.  If *ob* is not a weakly-referencable object, or if *callback* "
"is not callable, ``None``, or ``NULL``, this will return ``NULL`` and "
"raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:43
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will "
"always return a new reference, but is not guaranteed to create a new "
"object; an existing proxy object may be returned.  The second parameter, "
"*callback*, can be a callable object that receives notification when *ob*"
" is garbage collected; it should accept a single parameter, which will be"
" the weak reference object itself. *callback* may also be ``None`` or "
"``NULL``.  If *ob* is not a weakly-referencable object, or if *callback* "
"is not callable, ``None``, or ``NULL``, this will return ``NULL`` and "
"raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:55
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the "
"referent is no longer live, returns :const:`Py_None`."
msgstr ""

#: ../../c-api/weakref.rst:60
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using "
"it."
msgstr ""

#: ../../c-api/weakref.rst:68
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that"
" does no error checking."
msgstr ""


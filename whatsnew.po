# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-06 17:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../whatsnew/2.0.rst:3
msgid "What's New in Python 2.0"
msgstr ""

#: ../../whatsnew/2.0.rst ../../whatsnew/2.1.rst ../../whatsnew/2.2.rst
#: ../../whatsnew/2.3.rst ../../whatsnew/2.4.rst ../../whatsnew/2.5.rst
#: ../../whatsnew/2.6.rst ../../whatsnew/2.7.rst ../../whatsnew/3.0.rst
#: ../../whatsnew/3.1.rst ../../whatsnew/3.2.rst ../../whatsnew/3.4.rst
msgid "Author"
msgstr ""

#: ../../whatsnew/2.0.rst:5
msgid "A.M. Kuchling and Moshe Zadka"
msgstr ""

#: ../../whatsnew/2.0.rst:13 ../../whatsnew/2.1.rst:13
#: ../../whatsnew/2.2.rst:13
msgid "Introduction"
msgstr ""

#: ../../whatsnew/2.0.rst:15
msgid ""
"A new release of Python, version 2.0, was released on October 16, 2000. "
"This article covers the exciting new features in 2.0, highlights some "
"other useful changes, and points out a few incompatible changes that may "
"require rewriting code."
msgstr ""

#: ../../whatsnew/2.0.rst:20
msgid ""
"Python's development never completely stops between releases, and a "
"steady flow of bug fixes and improvements are always being submitted. A "
"host of minor fixes, a few optimizations, additional docstrings, and "
"better error messages went into 2.0; to list them all would be "
"impossible, but they're certainly significant. Consult the publicly-"
"available CVS logs if you want to see the full list.  This progress is "
"due to the five developers working for  PythonLabs are now getting paid "
"to spend their days fixing bugs, and also due to the improved "
"communication resulting  from moving to SourceForge."
msgstr ""

#: ../../whatsnew/2.0.rst:33
msgid "What About Python 1.6?"
msgstr ""

#: ../../whatsnew/2.0.rst:35
msgid ""
"Python 1.6 can be thought of as the Contractual Obligations Python "
"release. After the core development team left CNRI in May 2000, CNRI "
"requested that a 1.6 release be created, containing all the work on "
"Python that had been performed at CNRI.  Python 1.6 therefore represents "
"the state of the CVS tree as of May 2000, with the most significant new "
"feature being Unicode support.  Development continued after May, of "
"course, so the 1.6 tree received a few fixes to ensure that it's forward-"
"compatible with Python 2.0.  1.6 is therefore part of Python's evolution,"
" and not a side branch."
msgstr ""

#: ../../whatsnew/2.0.rst:44
msgid ""
"So, should you take much interest in Python 1.6?  Probably not.  The "
"1.6final and 2.0beta1 releases were made on the same day (September 5, "
"2000), the plan being to finalize Python 2.0 within a month or so.  If "
"you have applications to maintain, there seems little point in breaking "
"things by moving to 1.6, fixing them, and then having another round of "
"breakage within a month by moving to 2.0; you're better off just going "
"straight to 2.0.  Most of the really interesting features described in "
"this document are only in 2.0, because a lot of work was done between May"
" and September."
msgstr ""

#: ../../whatsnew/2.0.rst:57
msgid "New Development Process"
msgstr ""

#: ../../whatsnew/2.0.rst:59
msgid ""
"The most important change in Python 2.0 may not be to the code at all, "
"but to how Python is developed: in May 2000 the Python developers began "
"using the tools made available by SourceForge for storing  source code, "
"tracking bug reports, and managing the queue of patch submissions.  To "
"report bugs or submit patches for Python 2.0, use the bug tracking and "
"patch manager tools available from Python's project page, located at "
"https://sourceforge.net/projects/python/."
msgstr ""

#: ../../whatsnew/2.0.rst:66
msgid ""
"The most important of the services now hosted at SourceForge is the "
"Python CVS tree, the version-controlled repository containing the source "
"code for Python. Previously, there were roughly 7 or so people who had "
"write access to the CVS tree, and all patches had to be inspected and "
"checked in by one of the people on this short list. Obviously, this "
"wasn't very scalable.  By moving the CVS tree to SourceForge, it became "
"possible to grant write access to more people; as of September 2000 there"
" were 27 people able to check in changes, a fourfold increase.  This "
"makes possible large-scale changes that wouldn't be attempted if they'd "
"have to be filtered through the small group of core developers.  For "
"example, one day Peter Schneider-Kamp took it into his head to drop K&R C"
" compatibility and convert the C source for Python to ANSI C. After "
"getting approval on the python-dev mailing list, he launched into a "
"flurry of checkins that lasted about a week, other developers joined in "
"to help, and the job was done.  If there were only 5 people with write "
"access, probably that task would have been viewed as \"nice, but not "
"worth the time and effort needed\" and it would never have gotten done."
msgstr ""

#: ../../whatsnew/2.0.rst:83
msgid ""
"The shift to using SourceForge's services has resulted in a remarkable "
"increase in the speed of development.  Patches now get submitted, "
"commented on, revised by people other than the original submitter, and "
"bounced back and forth between people until the patch is deemed worth "
"checking in.  Bugs are tracked in one central location and can be "
"assigned to a specific person for fixing, and we can count the number of "
"open bugs to measure progress.  This didn't come without a cost: "
"developers now have more e-mail to deal with, more mailing lists to "
"follow, and special tools had to be written for the new environment. For "
"example, SourceForge sends default patch and bug notification e-mail "
"messages that are completely unhelpful, so Ka-Ping Yee wrote an HTML "
"screen-scraper that sends more useful messages."
msgstr ""

#: ../../whatsnew/2.0.rst:95
msgid ""
"The ease of adding code caused a few initial growing pains, such as code "
"was checked in before it was ready or without getting clear agreement "
"from the developer group.  The approval process that has emerged is "
"somewhat similar to that used by the Apache group. Developers can vote "
"+1, +0, -0, or -1 on a patch; +1 and -1 denote acceptance or rejection, "
"while +0 and -0 mean the developer is mostly indifferent to the change, "
"though with a slight positive or negative slant.  The most significant "
"change from the Apache model is that the voting is essentially advisory, "
"letting Guido van Rossum, who has Benevolent Dictator For Life status, "
"know what the general opinion is. He can still ignore the result of a "
"vote, and approve or reject a change even if the community disagrees with"
" him."
msgstr ""

#: ../../whatsnew/2.0.rst:106
msgid ""
"Producing an actual patch is the last step in adding a new feature, and "
"is usually easy compared to the earlier task of coming up with a good "
"design. Discussions of new features can often explode into lengthy "
"mailing list threads, making the discussion hard to follow, and no one "
"can read every posting to python-dev.  Therefore, a relatively formal "
"process has been set up to write Python Enhancement Proposals (PEPs), "
"modelled on the Internet RFC process.  PEPs are draft documents that "
"describe a proposed new feature, and are continually revised until the "
"community reaches a consensus, either accepting or rejecting the "
"proposal.  Quoting from the introduction to :pep:`1`, \"PEP Purpose and "
"Guidelines\":"
msgstr ""

#: ../../whatsnew/2.0.rst:120
msgid ""
"PEP stands for Python Enhancement Proposal.  A PEP is a design document "
"providing information to the Python community, or describing a new "
"feature for Python.  The PEP should provide a concise technical "
"specification of the feature and a rationale for the feature."
msgstr ""

#: ../../whatsnew/2.0.rst:125
msgid ""
"We intend PEPs to be the primary mechanisms for proposing new features, "
"for collecting community input on an issue, and for documenting the "
"design decisions that have gone into Python.  The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""

#: ../../whatsnew/2.0.rst:130
msgid ""
"Read the rest of :pep:`1` for the details of the PEP editorial process, "
"style, and format.  PEPs are kept in the Python CVS tree on SourceForge, "
"though they're not part of the Python 2.0 distribution, and are also "
"available in HTML form from https://www.python.org/dev/peps/.  As of "
"September 2000, there are 25 PEPS, ranging from :pep:`201`, \"Lockstep "
"Iteration\", to PEP 225, \"Elementwise/Objectwise Operators\"."
msgstr ""

#: ../../whatsnew/2.0.rst:141 ../../whatsnew/3.2.rst:2417
msgid "Unicode"
msgstr ""

#: ../../whatsnew/2.0.rst:143
msgid ""
"The largest new feature in Python 2.0 is a new fundamental data type: "
"Unicode strings.  Unicode uses 16-bit numbers to represent characters "
"instead of the 8-bit number used by ASCII, meaning that 65,536 distinct "
"characters can be supported."
msgstr ""

#: ../../whatsnew/2.0.rst:148
msgid ""
"The final interface for Unicode support was arrived at through countless "
"often-stormy discussions on the python-dev mailing list, and mostly "
"implemented by Marc-Andr√© Lemburg, based on a Unicode string type "
"implementation by Fredrik Lundh.  A detailed explanation of the interface"
" was written up as :pep:`100`, \"Python Unicode Integration\". This "
"article will simply cover the most significant points about the Unicode "
"interfaces."
msgstr ""

#: ../../whatsnew/2.0.rst:155
msgid ""
"In Python source code, Unicode strings are written as ``u\"string\"``.  "
"Arbitrary Unicode characters can be written using a new escape sequence, "
"``\\uHHHH``, where *HHHH* is a 4-digit hexadecimal number from 0000 to "
"FFFF.  The existing ``\\xHHHH`` escape sequence can also be used, and "
"octal escapes can be used for characters up to U+01FF, which is "
"represented by ``\\777``."
msgstr ""

#: ../../whatsnew/2.0.rst:161
msgid ""
"Unicode strings, just like regular strings, are an immutable sequence "
"type. They can be indexed and sliced, but not modified in place. Unicode "
"strings have an ``encode( [encoding] )`` method that returns an 8-bit "
"string in the desired encoding.  Encodings are named by strings, such as "
"``'ascii'``, ``'utf-8'``, ``'iso-8859-1'``, or whatever.  A codec API is "
"defined for implementing and registering new encodings that are then "
"available throughout a Python program. If an encoding isn't specified, "
"the default encoding is usually 7-bit ASCII, though it can be changed for"
" your Python installation by calling the "
"``sys.setdefaultencoding(encoding)`` function in a customized version of "
":file:`site.py`."
msgstr ""

#: ../../whatsnew/2.0.rst:172
msgid ""
"Combining 8-bit and Unicode strings always coerces to Unicode, using the "
"default ASCII encoding; the result of ``'a' + u'bc'`` is ``u'abc'``."
msgstr ""

#: ../../whatsnew/2.0.rst:175
msgid ""
"New built-in functions have been added, and existing built-ins modified "
"to support Unicode:"
msgstr ""

#: ../../whatsnew/2.0.rst:178
msgid ""
"``unichr(ch)`` returns a Unicode string 1 character long, containing the "
"character *ch*."
msgstr ""

#: ../../whatsnew/2.0.rst:181
msgid ""
"``ord(u)``, where *u* is a 1-character regular or Unicode string, returns"
" the number of the character as an integer."
msgstr ""

#: ../../whatsnew/2.0.rst:184
msgid ""
"``unicode(string [, encoding]  [, errors] )`` creates a Unicode string "
"from an 8-bit string.  ``encoding`` is a string naming the encoding to "
"use. The ``errors`` parameter specifies the treatment of characters that "
"are invalid for the current encoding; passing ``'strict'`` as the value "
"causes an exception to be raised on any encoding error, while "
"``'ignore'`` causes errors to be silently ignored and ``'replace'`` uses "
"U+FFFD, the official replacement character, in case of any problems."
msgstr ""

#: ../../whatsnew/2.0.rst:192
msgid ""
"The ``exec`` statement, and various built-ins such as ``eval()``, "
"``getattr()``, and ``setattr()`` will also accept Unicode strings as well"
" as regular strings.  (It's possible that the process of fixing this "
"missed some built-ins; if you find a built-in function that accepts "
"strings but doesn't accept Unicode strings at all, please report it as a "
"bug.)"
msgstr ""

#: ../../whatsnew/2.0.rst:198
msgid ""
"A new module, :mod:`unicodedata`, provides an interface to Unicode "
"character properties.  For example, ``unicodedata.category(u'A')`` "
"returns the 2-character string 'Lu', the 'L' denoting it's a letter, and "
"'u' meaning that it's uppercase. "
"``unicodedata.bidirectional(u'\\u0660')`` returns 'AN', meaning that "
"U+0660 is an Arabic number."
msgstr ""

#: ../../whatsnew/2.0.rst:204
msgid ""
"The :mod:`codecs` module contains functions to look up existing encodings"
" and register new ones.  Unless you want to implement a new encoding, "
"you'll most often use the ``codecs.lookup(encoding)`` function, which "
"returns a 4-element tuple: ``(encode_func, decode_func, stream_reader, "
"stream_writer)``."
msgstr ""

#: ../../whatsnew/2.0.rst:209
msgid ""
"*encode_func* is a function that takes a Unicode string, and returns a "
"2-tuple ``(string, length)``.  *string* is an 8-bit string containing a "
"portion (perhaps all) of the Unicode string converted into the given "
"encoding, and *length* tells you how much of the Unicode string was "
"converted."
msgstr ""

#: ../../whatsnew/2.0.rst:214
msgid ""
"*decode_func* is the opposite of *encode_func*, taking an 8-bit string "
"and returning a 2-tuple ``(ustring, length)``, consisting of the "
"resulting Unicode string *ustring* and the integer *length* telling how "
"much of the 8-bit string was consumed."
msgstr ""

#: ../../whatsnew/2.0.rst:219
msgid ""
"*stream_reader* is a class that supports decoding input from a stream. "
"*stream_reader(file_obj)* returns an object that supports the "
":meth:`read`, :meth:`readline`, and :meth:`readlines` methods.  These "
"methods will all translate from the given encoding and return Unicode "
"strings."
msgstr ""

#: ../../whatsnew/2.0.rst:224
msgid ""
"*stream_writer*, similarly, is a class that supports encoding output to a"
" stream.  *stream_writer(file_obj)* returns an object that supports the "
":meth:`write` and :meth:`writelines` methods.  These methods expect "
"Unicode strings, translating them to the given encoding on output."
msgstr ""

#: ../../whatsnew/2.0.rst:229
msgid ""
"For example, the following code writes a Unicode string into a file,  "
"encoding it as UTF-8::"
msgstr ""

#: ../../whatsnew/2.0.rst:243
msgid "The following code would then read UTF-8 input from the file::"
msgstr ""

#: ../../whatsnew/2.0.rst:249
msgid ""
"Unicode-aware regular expressions are available through the :mod:`re` "
"module, which has a new underlying implementation called SRE written by "
"Fredrik Lundh of Secret Labs AB."
msgstr ""

#: ../../whatsnew/2.0.rst:253
msgid ""
"A ``-U`` command line option was added which causes the Python compiler "
"to interpret all string literals as Unicode string literals. This is "
"intended to be used in testing and future-proofing your Python code, "
"since some future version of Python may drop support for 8-bit strings "
"and provide only Unicode strings."
msgstr ""

#: ../../whatsnew/2.0.rst:262
msgid "List Comprehensions"
msgstr ""

#: ../../whatsnew/2.0.rst:264
msgid ""
"Lists are a workhorse data type in Python, and many programs manipulate a"
" list at some point.  Two common operations on lists are to loop over "
"them, and either pick out the elements that meet a certain criterion, or "
"apply some function to each element.  For example, given a list of "
"strings, you might want to pull out all the strings containing a given "
"substring, or strip off trailing whitespace from each line."
msgstr ""

#: ../../whatsnew/2.0.rst:271
msgid ""
"The existing :func:`map` and :func:`filter` functions can be used for "
"this purpose, but they require a function as one of their arguments.  "
"This is fine if there's an existing built-in function that can be passed "
"directly, but if there isn't, you have to create a little function to do "
"the required work, and Python's scoping rules make the result ugly if the"
" little function needs additional information.  Take the first example in"
" the previous paragraph, finding all the strings in the list containing a"
" given substring.  You could write the following to do it::"
msgstr ""

#: ../../whatsnew/2.0.rst:286
msgid ""
"Because of Python's scoping rules, a default argument is used so that the"
" anonymous function created by the :keyword:`lambda` expression knows "
"what substring is being searched for.  List comprehensions make this "
"cleaner::"
msgstr ""

#: ../../whatsnew/2.0.rst:292
msgid "List comprehensions have the form::"
msgstr ""

#: ../../whatsnew/2.0.rst:299
msgid ""
"The :keyword:`!for`...\\ :keyword:`!in` clauses contain the sequences to "
"be iterated over.  The sequences do not have to be the same length, "
"because they are *not* iterated over in parallel, but from left to right;"
" this is explained more clearly in the following paragraphs.  The "
"elements of the generated list will be the successive values of "
"*expression*.  The final :keyword:`!if` clause is optional; if present, "
"*expression* is only evaluated and added to the result if *condition* is "
"true."
msgstr ""

#: ../../whatsnew/2.0.rst:307
msgid ""
"To make the semantics very clear, a list comprehension is equivalent to "
"the following Python code::"
msgstr ""

#: ../../whatsnew/2.0.rst:319
msgid ""
"This means that when there are multiple :keyword:`!for`...\\ "
":keyword:`!in` clauses, the resulting list will be equal to the product "
"of the lengths of all the sequences.  If you have two lists of length 3, "
"the output list is 9 elements long::"
msgstr ""

#: ../../whatsnew/2.0.rst:330
msgid ""
"To avoid introducing an ambiguity into Python's grammar, if *expression* "
"is creating a tuple, it must be surrounded with parentheses.  The first "
"list comprehension below is a syntax error, while the second one is "
"correct::"
msgstr ""

#: ../../whatsnew/2.0.rst:339
msgid ""
"The idea of list comprehensions originally comes from the functional "
"programming language Haskell (https://www.haskell.org).  Greg Ewing "
"argued most effectively for adding them to Python and wrote the initial "
"list comprehension patch, which was then discussed for a seemingly "
"endless time on the python-dev mailing list and kept up-to-date by Skip "
"Montanaro."
msgstr ""

#: ../../whatsnew/2.0.rst:349
msgid "Augmented Assignment"
msgstr ""

#: ../../whatsnew/2.0.rst:351
msgid ""
"Augmented assignment operators, another long-requested feature, have been"
" added to Python 2.0.  Augmented assignment operators include ``+=``, "
"``-=``, ``*=``, and so forth.  For example, the statement ``a += 2`` "
"increments the value of the variable  ``a`` by 2, equivalent to the "
"slightly lengthier ``a = a + 2``."
msgstr ""

#: ../../whatsnew/2.0.rst:356
msgid ""
"The full list of supported assignment operators is ``+=``, ``-=``, "
"``*=``, ``/=``, ``%=``, ``**=``, ``&=``, ``|=``, ``^=``, ``>>=``, and "
"``<<=``.  Python classes can override the augmented assignment operators "
"by defining methods named :meth:`__iadd__`, :meth:`__isub__`, etc.  For "
"example, the following :class:`Number` class stores a number and supports"
" using += to create a new instance with an incremented value."
msgstr ""

#: ../../whatsnew/2.0.rst:377
msgid ""
"The :meth:`__iadd__` special method is called with the value of the "
"increment, and should return a new instance with an appropriately "
"modified value; this return value is bound as the new value of the "
"variable on the left-hand side."
msgstr ""

#: ../../whatsnew/2.0.rst:381
msgid ""
"Augmented assignment operators were first introduced in the C programming"
" language, and most C-derived languages, such as :program:`awk`, C++, "
"Java, Perl, and PHP also support them.  The augmented assignment patch "
"was implemented by Thomas Wouters."
msgstr ""

#: ../../whatsnew/2.0.rst:390
msgid "String Methods"
msgstr ""

#: ../../whatsnew/2.0.rst:392
msgid ""
"Until now string-manipulation functionality was in the :mod:`string` "
"module, which was usually a front-end for the :mod:`strop` module written"
" in C.  The addition of Unicode posed a difficulty for the :mod:`strop` "
"module, because the functions would all need to be rewritten in order to "
"accept either 8-bit or Unicode strings.  For functions such as "
":func:`string.replace`, which takes 3 string arguments, that means eight "
"possible permutations, and correspondingly complicated code."
msgstr ""

#: ../../whatsnew/2.0.rst:400
msgid ""
"Instead, Python 2.0 pushes the problem onto the string type, making "
"string manipulation functionality available through methods on both 8-bit"
" strings and Unicode strings.   ::"
msgstr ""

#: ../../whatsnew/2.0.rst:411
msgid ""
"One thing that hasn't changed, a noteworthy April Fools' joke "
"notwithstanding, is that Python strings are immutable. Thus, the string "
"methods return new strings, and do not modify the string on which they "
"operate."
msgstr ""

#: ../../whatsnew/2.0.rst:415
msgid ""
"The old :mod:`string` module is still around for backwards compatibility,"
" but it mostly acts as a front-end to the new string methods."
msgstr ""

#: ../../whatsnew/2.0.rst:418
msgid ""
"Two methods which have no parallel in pre-2.0 versions, although they did"
" exist in JPython for quite some time, are :meth:`startswith` and "
":meth:`endswith`. ``s.startswith(t)`` is equivalent to ``s[:len(t)] == "
"t``, while ``s.endswith(t)`` is equivalent to ``s[-len(t):] == t``."
msgstr ""

#: ../../whatsnew/2.0.rst:423
msgid ""
"One other method which deserves special mention is :meth:`join`.  The "
":meth:`join` method of a string receives one parameter, a sequence of "
"strings, and is equivalent to the :func:`string.join` function from the "
"old :mod:`string` module, with the arguments reversed. In other words, "
"``s.join(seq)`` is equivalent to the old ``string.join(seq, s)``."
msgstr ""

#: ../../whatsnew/2.0.rst:433
msgid "Garbage Collection of Cycles"
msgstr ""

#: ../../whatsnew/2.0.rst:435
msgid ""
"The C implementation of Python uses reference counting to implement "
"garbage collection.  Every Python object maintains a count of the number "
"of references pointing to itself, and adjusts the count as references are"
" created or destroyed.  Once the reference count reaches zero, the object"
" is no longer accessible, since you need to have a reference to an object"
" to access it, and if the count is zero, no references exist any longer."
msgstr ""

#: ../../whatsnew/2.0.rst:442
msgid ""
"Reference counting has some pleasant properties: it's easy to understand "
"and implement, and the resulting implementation is portable, fairly fast,"
" and reacts well with other libraries that implement their own memory "
"handling schemes.  The major problem with reference counting is that it "
"sometimes doesn't realise that objects are no longer accessible, "
"resulting in a memory leak.  This happens when there are cycles of "
"references."
msgstr ""

#: ../../whatsnew/2.0.rst:449
msgid ""
"Consider the simplest possible cycle,  a class instance which has a "
"reference to itself::"
msgstr ""

#: ../../whatsnew/2.0.rst:455
msgid ""
"After the above two lines of code have been executed, the reference count"
" of ``instance`` is 2; one reference is from the variable named "
"``'instance'``, and the other is from the ``myself`` attribute of the "
"instance."
msgstr ""

#: ../../whatsnew/2.0.rst:459
msgid ""
"If the next line of code is ``del instance``, what happens?  The "
"reference count of ``instance`` is decreased by 1, so it has a reference "
"count of 1; the reference in the ``myself`` attribute still exists.  Yet "
"the instance is no longer accessible through Python code, and it could be"
" deleted.  Several objects can participate in a cycle if they have "
"references to each other, causing all of the objects to be leaked."
msgstr ""

#: ../../whatsnew/2.0.rst:466
msgid ""
"Python 2.0 fixes this problem by periodically executing a cycle detection"
" algorithm which looks for inaccessible cycles and deletes the objects "
"involved. A new :mod:`gc` module provides functions to perform a garbage "
"collection, obtain debugging statistics, and tuning the collector's "
"parameters."
msgstr ""

#: ../../whatsnew/2.0.rst:471
msgid ""
"Running the cycle detection algorithm takes some time, and therefore will"
" result in some additional overhead.  It is hoped that after we've gotten"
" experience with the cycle collection from using 2.0, Python 2.1 will be "
"able to minimize the overhead with careful tuning.  It's not yet obvious "
"how much performance is lost, because benchmarking this is tricky and "
"depends crucially on how often the program creates and destroys objects."
"  The detection of cycles can be disabled when Python is compiled, if you"
" can't afford even a tiny speed penalty or suspect that the cycle "
"collection is buggy, by specifying the :option:`!--without-cycle-gc` "
"switch when running the :program:`configure` script."
msgstr ""

#: ../../whatsnew/2.0.rst:482
msgid ""
"Several people tackled this problem and contributed to a solution.  An "
"early implementation of the cycle detection approach was written by Toby "
"Kelsey.  The current algorithm was suggested by Eric Tiedemann during a "
"visit to CNRI, and Guido van Rossum and Neil Schemenauer wrote two "
"different implementations, which were later integrated by Neil.  Lots of "
"other people offered suggestions along the way; the March 2000 archives "
"of the python-dev mailing list contain most of the relevant discussion, "
"especially in the threads titled \"Reference cycle collection for "
"Python\" and \"Finalization again\"."
msgstr ""

#: ../../whatsnew/2.0.rst:495
msgid "Other Core Changes"
msgstr ""

#: ../../whatsnew/2.0.rst:497
msgid ""
"Various minor changes have been made to Python's syntax and built-in "
"functions. None of the changes are very far-reaching, but they're handy "
"conveniences."
msgstr ""

#: ../../whatsnew/2.0.rst:502
msgid "Minor Language Changes"
msgstr ""

#: ../../whatsnew/2.0.rst:504
msgid ""
"A new syntax makes it more convenient to call a given function with a "
"tuple of arguments and/or a dictionary of keyword arguments. In Python "
"1.5 and earlier, you'd use the :func:`apply` built-in function: "
"``apply(f, args, kw)`` calls the function :func:`f` with the argument "
"tuple *args* and the keyword arguments in the dictionary *kw*.  "
":func:`apply`  is the same in 2.0, but thanks to a patch from Greg Ewing,"
" ``f(*args, **kw)`` is a shorter and clearer way to achieve the same "
"effect.  This syntax is symmetrical with the syntax for defining "
"functions::"
msgstr ""

#: ../../whatsnew/2.0.rst:518
msgid ""
"The ``print`` statement can now have its output directed to a file-like "
"object by following the ``print`` with  ``>> file``, similar to the "
"redirection operator in Unix shells. Previously you'd either have to use "
"the :meth:`write` method of the file-like object, which lacks the "
"convenience and simplicity of ``print``, or you could assign a new value "
"to ``sys.stdout`` and then restore the old value.  For sending output to "
"standard error, it's much easier to write this::"
msgstr ""

#: ../../whatsnew/2.0.rst:528
msgid ""
"Modules can now be renamed on importing them, using the syntax ``import "
"module as name`` or ``from module import name as othername``.  The patch "
"was submitted by Thomas Wouters."
msgstr ""

#: ../../whatsnew/2.0.rst:532
#, python-format
msgid ""
"A new format style is available when using the ``%`` operator; '%r' will "
"insert the :func:`repr` of its argument.  This was also added from "
"symmetry considerations, this time for symmetry with the existing '%s' "
"format style, which inserts the :func:`str` of its argument.  For "
"example, ``'%r %s' % ('abc', 'abc')`` returns a string containing ``'abc'"
" abc``."
msgstr ""

#: ../../whatsnew/2.0.rst:538
msgid ""
"Previously there was no way to implement a class that overrode Python's "
"built-in :keyword:`in` operator and implemented a custom version.  ``obj "
"in seq`` returns true if *obj* is present in the sequence *seq*; Python "
"computes this by simply trying every index of the sequence until either "
"*obj* is found or an :exc:`IndexError` is encountered.  Moshe Zadka "
"contributed a patch which adds a :meth:`__contains__` magic method for "
"providing a custom implementation for :keyword:`!in`. Additionally, new "
"built-in objects written in C can define what :keyword:`!in` means for "
"them via a new slot in the sequence protocol."
msgstr ""

#: ../../whatsnew/2.0.rst:547
msgid ""
"Earlier versions of Python used a recursive algorithm for deleting "
"objects. Deeply nested data structures could cause the interpreter to "
"fill up the C stack and crash; Christian Tismer rewrote the deletion "
"logic to fix this problem.  On a related note, comparing recursive "
"objects recursed infinitely and crashed; Jeremy Hylton rewrote the code "
"to no longer crash, producing a useful result instead.  For example, "
"after this code::"
msgstr ""

#: ../../whatsnew/2.0.rst:559
msgid ""
"The comparison ``a==b`` returns true, because the two recursive data "
"structures are isomorphic. See the thread \"trashcan and PR#7\" in the "
"April 2000 archives of the python-dev mailing list for the discussion "
"leading up to this implementation, and some useful relevant links.    "
"Note that comparisons can now also raise exceptions. In earlier versions "
"of Python, a comparison operation such as ``cmp(a,b)`` would always "
"produce an answer, even if a user-defined :meth:`__cmp__` method "
"encountered an error, since the resulting exception would simply be "
"silently swallowed."
msgstr ""

#: ../../whatsnew/2.0.rst:571
msgid ""
"Work has been done on porting Python to 64-bit Windows on the Itanium "
"processor, mostly by Trent Mick of ActiveState.  (Confusingly, "
"``sys.platform`` is still ``'win32'`` on Win64 because it seems that for "
"ease of porting, MS Visual C++ treats code as 32 bit on Itanium.) "
"PythonWin also supports Windows CE; see the Python CE page at "
"http://pythonce.sourceforge.net/ for more information."
msgstr ""

#: ../../whatsnew/2.0.rst:577
msgid ""
"Another new platform is Darwin/MacOS X; initial support for it is in "
"Python 2.0. Dynamic loading works, if you specify \"configure --with-dyld"
" --with-suffix=.x\". Consult the README in the Python source distribution"
" for more instructions."
msgstr ""

#: ../../whatsnew/2.0.rst:581
msgid ""
"An attempt has been made to alleviate one of Python's warts, the often-"
"confusing :exc:`NameError` exception when code refers to a local variable"
" before the variable has been assigned a value.  For example, the "
"following code raises an exception on the ``print`` statement in both "
"1.5.2 and 2.0; in 1.5.2 a :exc:`NameError` exception is raised, while 2.0"
" raises a new :exc:`UnboundLocalError` exception. "
":exc:`UnboundLocalError` is a subclass of :exc:`NameError`, so any "
"existing code that expects :exc:`NameError` to be raised should still "
"work. ::"
msgstr ""

#: ../../whatsnew/2.0.rst:595
msgid ""
"Two new exceptions, :exc:`TabError` and :exc:`IndentationError`, have "
"been introduced.  They're both subclasses of :exc:`SyntaxError`, and are "
"raised when Python code is found to be improperly indented."
msgstr ""

#: ../../whatsnew/2.0.rst:601
msgid "Changes to Built-in Functions"
msgstr ""

#: ../../whatsnew/2.0.rst:603
msgid ""
"A new built-in, ``zip(seq1, seq2, ...)``, has been added.  :func:`zip` "
"returns a list of tuples where each tuple contains the i-th element from "
"each of the argument sequences.  The difference between :func:`zip` and "
"``map(None, seq1, seq2)`` is that :func:`map` pads the sequences with "
"``None`` if the sequences aren't all of the same length, while "
":func:`zip` truncates the returned list to the length of the shortest "
"argument sequence."
msgstr ""

#: ../../whatsnew/2.0.rst:610
msgid ""
"The :func:`int` and :func:`long` functions now accept an optional "
"\"base\" parameter when the first argument is a string. ``int('123', "
"10)`` returns 123, while ``int('123', 16)`` returns 291.  ``int(123, "
"16)`` raises a :exc:`TypeError` exception with the message \"can't "
"convert non-string with explicit base\"."
msgstr ""

#: ../../whatsnew/2.0.rst:616
msgid ""
"A new variable holding more detailed version information has been added "
"to the :mod:`sys` module.  ``sys.version_info`` is a tuple ``(major, "
"minor, micro, level, serial)`` For example, in a hypothetical 2.0.1beta1,"
" ``sys.version_info`` would be ``(2, 0, 1, 'beta', 1)``. *level* is a "
"string such as ``\"alpha\"``, ``\"beta\"``, or ``\"final\"`` for a final "
"release."
msgstr ""

#: ../../whatsnew/2.0.rst:622
msgid ""
"Dictionaries have an odd new method, ``setdefault(key, default)``, which "
"behaves similarly to the existing :meth:`get` method.  However, if the "
"key is missing, :meth:`setdefault` both returns the value of *default* as"
" :meth:`get` would do, and also inserts it into the dictionary as the "
"value for *key*.  Thus, the following lines of code::"
msgstr ""

#: ../../whatsnew/2.0.rst:633
msgid "can be reduced to a single ``return dict.setdefault(key, [])`` statement."
msgstr ""

#: ../../whatsnew/2.0.rst:635
msgid ""
"The interpreter sets a maximum recursion depth in order to catch runaway "
"recursion before filling the C stack and causing a core dump or GPF.. "
"Previously this limit was fixed when you compiled Python, but in 2.0 the "
"maximum recursion depth can be read and modified using "
":func:`sys.getrecursionlimit` and :func:`sys.setrecursionlimit`. The "
"default value is 1000, and a rough maximum value for a given platform can"
" be found by running a new script, :file:`Misc/find_recursionlimit.py`."
msgstr ""

#: ../../whatsnew/2.0.rst:647
msgid "Porting to 2.0"
msgstr ""

#: ../../whatsnew/2.0.rst:649
msgid ""
"New Python releases try hard to be compatible with previous releases, and"
" the record has been pretty good.  However, some changes are considered "
"useful enough, usually because they fix initial design decisions that "
"turned out to be actively mistaken, that breaking backward compatibility "
"can't always be avoided. This section lists the changes in Python 2.0 "
"that may cause old Python code to break."
msgstr ""

#: ../../whatsnew/2.0.rst:656
msgid ""
"The change which will probably break the most code is tightening up the "
"arguments accepted by some methods.  Some methods would take multiple "
"arguments and treat them as a tuple, particularly various list methods "
"such as :meth:`append` and :meth:`insert`. In earlier versions of Python,"
" if ``L`` is a list, ``L.append( 1,2 )`` appends the tuple ``(1,2)`` to "
"the list.  In Python 2.0 this causes a :exc:`TypeError` exception to be "
"raised, with the message: 'append requires exactly 1 argument; 2 given'."
"  The fix is to simply add an extra set of parentheses to pass both "
"values as a tuple:  ``L.append( (1,2) )``."
msgstr ""

#: ../../whatsnew/2.0.rst:665
msgid ""
"The earlier versions of these methods were more forgiving because they "
"used an old function in Python's C interface to parse their arguments; "
"2.0 modernizes them to use :func:`PyArg_ParseTuple`, the current argument"
" parsing function, which provides more helpful error messages and treats "
"multi-argument calls as errors.  If you absolutely must use 2.0 but can't"
" fix your code, you can edit :file:`Objects/listobject.c` and define the "
"preprocessor symbol ``NO_STRICT_LIST_APPEND`` to preserve the old "
"behaviour; this isn't recommended."
msgstr ""

#: ../../whatsnew/2.0.rst:673
msgid ""
"Some of the functions in the :mod:`socket` module are still forgiving in "
"this way.  For example, :func:`socket.connect( ('hostname', 25) )` is the"
" correct form, passing a tuple representing an IP address, but "
":func:`socket.connect( 'hostname', 25 )` also works. "
":func:`socket.connect_ex` and :func:`socket.bind` are similarly easy-"
"going.  2.0alpha1 tightened these functions up, but because the "
"documentation actually used the erroneous multiple argument form, many "
"people wrote code which would break with the stricter checking.  GvR "
"backed out the changes in the face of public reaction, so for the "
":mod:`socket` module, the documentation was fixed and the multiple "
"argument form is simply marked as deprecated; it *will* be tightened up "
"again in a future Python version."
msgstr ""

#: ../../whatsnew/2.0.rst:684
msgid ""
"The ``\\x`` escape in string literals now takes exactly 2 hex digits.  "
"Previously it would consume all the hex digits following the 'x' and take"
" the lowest 8 bits of the result, so ``\\x123456`` was equivalent to "
"``\\x56``."
msgstr ""

#: ../../whatsnew/2.0.rst:688
msgid ""
"The :exc:`AttributeError` and :exc:`NameError` exceptions have a more "
"friendly error message, whose text will be something like ``'Spam' "
"instance has no attribute 'eggs'`` or ``name 'eggs' is not defined``.  "
"Previously the error message was just the missing attribute name "
"``eggs``, and code written to take advantage of this fact will break in "
"2.0."
msgstr ""

#: ../../whatsnew/2.0.rst:694
#, python-format
msgid ""
"Some work has been done to make integers and long integers a bit more "
"interchangeable.  In 1.5.2, large-file support was added for Solaris, to "
"allow reading files larger than 2 GiB; this made the :meth:`tell` method "
"of file objects return a long integer instead of a regular integer.  Some"
" code would subtract two file offsets and attempt to use the result to "
"multiply a sequence or slice a string, but this raised a "
":exc:`TypeError`.  In 2.0, long integers can be used to multiply or slice"
" a sequence, and it'll behave as you'd intuitively expect it to; ``3L * "
"'abc'`` produces 'abcabcabc', and ``(0,1,2,3)[2L:4L]`` produces (2,3). "
"Long integers can also be used in various contexts where previously only "
"integers were accepted, such as in the :meth:`seek` method of file "
"objects, and in the formats supported by the ``%`` operator (``%d``, "
"``%i``, ``%x``, etc.).  For example, ``\"%d\" % 2L**64`` will produce the"
" string ``18446744073709551616``."
msgstr ""

#: ../../whatsnew/2.0.rst:708
msgid ""
"The subtlest long integer change of all is that the :func:`str` of a long"
" integer no longer has a trailing 'L' character, though :func:`repr` "
"still includes it.  The 'L' annoyed many people who wanted to print long "
"integers that looked just like regular integers, since they had to go out"
" of their way to chop off the character.  This is no longer a problem in "
"2.0, but code which does ``str(longval)[:-1]`` and assumes the 'L' is "
"there, will now lose the final digit."
msgstr ""

#: ../../whatsnew/2.0.rst:716
#, python-format
msgid ""
"Taking the :func:`repr` of a float now uses a different formatting "
"precision than :func:`str`.  :func:`repr` uses ``%.17g`` format string "
"for C's :func:`sprintf`, while :func:`str` uses ``%.12g`` as before.  The"
" effect is that :func:`repr` may occasionally show more decimal places "
"than  :func:`str`, for certain numbers.  For example, the number 8.1 "
"can't be represented exactly in binary, so ``repr(8.1)`` is "
"``'8.0999999999999996'``, while str(8.1) is ``'8.1'``."
msgstr ""

#: ../../whatsnew/2.0.rst:724
msgid ""
"The ``-X`` command-line option, which turned all standard exceptions into"
" strings instead of classes, has been removed; the standard exceptions "
"will now always be classes.  The :mod:`exceptions` module containing the "
"standard exceptions was translated from Python to a built-in C module, "
"written by Barry Warsaw and Fredrik Lundh."
msgstr ""

#: ../../whatsnew/2.0.rst:740
msgid "Extending/Embedding Changes"
msgstr ""

#: ../../whatsnew/2.0.rst:742
msgid ""
"Some of the changes are under the covers, and will only be apparent to "
"people writing C extension modules or embedding a Python interpreter in a"
" larger application.  If you aren't dealing with Python's C API, you can "
"safely skip this section."
msgstr ""

#: ../../whatsnew/2.0.rst:747
msgid ""
"The version number of the Python C API was incremented, so C extensions "
"compiled for 1.5.2 must be recompiled in order to work with 2.0.  On "
"Windows, it's not possible for Python 2.0 to import a third party "
"extension built for Python 1.5.x due to how Windows DLLs work, so Python "
"will raise an exception and the import will fail."
msgstr ""

#: ../../whatsnew/2.0.rst:753
msgid ""
"Users of Jim Fulton's ExtensionClass module will be pleased to find out "
"that hooks have been added so that ExtensionClasses are now supported by "
":func:`isinstance` and :func:`issubclass`. This means you no longer have "
"to remember to write code such as ``if type(obj) == myExtensionClass``, "
"but can use the more natural ``if isinstance(obj, myExtensionClass)``."
msgstr ""

#: ../../whatsnew/2.0.rst:759
msgid ""
"The :file:`Python/importdl.c` file, which was a mass of #ifdefs to "
"support dynamic loading on many different platforms, was cleaned up and "
"reorganised by Greg Stein.  :file:`importdl.c` is now quite small, and "
"platform-specific code has been moved into a bunch of "
":file:`Python/dynload_\\*.c` files.  Another cleanup: there were also a "
"number of :file:`my\\*.h` files in the Include/ directory that held "
"various portability hacks; they've been merged into a single file, "
":file:`Include/pyport.h`."
msgstr ""

#: ../../whatsnew/2.0.rst:767
msgid ""
"Vladimir Marangozov's long-awaited malloc restructuring was completed, to"
" make it easy to have the Python interpreter use a custom allocator "
"instead of C's standard :func:`malloc`.  For documentation, read the "
"comments in :file:`Include/pymem.h` and :file:`Include/objimpl.h`.  For "
"the lengthy discussions during which the interface was hammered out, see "
"the Web archives of the 'patches' and 'python-dev' lists at python.org."
msgstr ""

#: ../../whatsnew/2.0.rst:774
msgid ""
"Recent versions of the GUSI development environment for MacOS support "
"POSIX threads.  Therefore, Python's POSIX threading support now works on "
"the Macintosh.  Threading support using the user-space GNU ``pth`` "
"library was also contributed."
msgstr ""

#: ../../whatsnew/2.0.rst:779
msgid ""
"Threading support on Windows was enhanced, too.  Windows supports thread "
"locks that use kernel objects only in case of contention; in the common "
"case when there's no contention, they use simpler functions which are an "
"order of magnitude faster.  A threaded version of Python 1.5.2 on NT is "
"twice as slow as an unthreaded version; with the 2.0 changes, the "
"difference is only 10%.  These improvements were contributed by Yakov "
"Markovitch."
msgstr ""

#: ../../whatsnew/2.0.rst:786
msgid ""
"Python 2.0's source now uses only ANSI C prototypes, so compiling Python "
"now requires an ANSI C compiler, and can no longer be done using a "
"compiler that only supports K&R C."
msgstr ""

#: ../../whatsnew/2.0.rst:790
msgid ""
"Previously the Python virtual machine used 16-bit numbers in its "
"bytecode, limiting the size of source files.  In particular, this "
"affected the maximum size of literal lists and dictionaries in Python "
"source; occasionally people who are generating Python code would run into"
" this limit.  A patch by Charles G. Waldman raises the limit from "
"``2^16`` to ``2^{32}``."
msgstr ""

#: ../../whatsnew/2.0.rst:796
msgid ""
"Three new convenience functions intended for adding constants to a "
"module's dictionary at module initialization time were added: "
":func:`PyModule_AddObject`, :func:`PyModule_AddIntConstant`, and "
":func:`PyModule_AddStringConstant`.  Each of these functions takes a "
"module object, a null-terminated C string containing the name to be "
"added, and a third argument for the value to be assigned to the name.  "
"This third argument is, respectively, a Python object, a C long, or a C "
"string."
msgstr ""

#: ../../whatsnew/2.0.rst:804
msgid ""
"A wrapper API was added for Unix-style signal handlers. "
":func:`PyOS_getsig` gets a signal handler and :func:`PyOS_setsig` will "
"set a new handler."
msgstr ""

#: ../../whatsnew/2.0.rst:811
msgid "Distutils: Making Modules Easy to Install"
msgstr ""

#: ../../whatsnew/2.0.rst:813
msgid ""
"Before Python 2.0, installing modules was a tedious affair -- there was "
"no way to figure out automatically where Python is installed, or what "
"compiler options to use for extension modules.  Software authors had to "
"go through an arduous ritual of editing Makefiles and configuration "
"files, which only really work on Unix and leave Windows and MacOS "
"unsupported.  Python users faced wildly differing installation "
"instructions which varied between different extension packages, which "
"made administering a Python installation something of  a chore."
msgstr ""

#: ../../whatsnew/2.0.rst:821
msgid ""
"The SIG for distribution utilities, shepherded by Greg Ward, has created "
"the Distutils, a system to make package installation much easier.  They "
"form the :mod:`distutils` package, a new part of Python's standard "
"library. In the best case, installing a Python module from source will "
"require the same steps: first you simply mean unpack the tarball or zip "
"archive, and the run \"``python setup.py install``\".  The platform will "
"be automatically detected, the compiler will be recognized, C extension "
"modules will be compiled, and the distribution installed into the proper "
"directory.  Optional command-line arguments provide more control over the"
" installation process, the distutils package offers many places to "
"override defaults -- separating the build from the install, building or "
"installing in non-default directories, and more."
msgstr ""

#: ../../whatsnew/2.0.rst:833
msgid ""
"In order to use the Distutils, you need to write a :file:`setup.py` "
"script.  For the simple case, when the software contains only .py files, "
"a minimal :file:`setup.py` can be just a few lines long::"
msgstr ""

#: ../../whatsnew/2.0.rst:841
msgid ""
"The :file:`setup.py` file isn't much more complicated if the software "
"consists of a few packages::"
msgstr ""

#: ../../whatsnew/2.0.rst:848
msgid ""
"A C extension can be the most complicated case; here's an example taken "
"from the PyXML package::"
msgstr ""

#: ../../whatsnew/2.0.rst:864
msgid ""
"The Distutils can also take care of creating source and binary "
"distributions. The \"sdist\" command, run by \"``python setup.py "
"sdist``', builds a source distribution such as :file:`foo-1.0.tar.gz`. "
"Adding new commands isn't difficult, \"bdist_rpm\" and \"bdist_wininst\" "
"commands have already been contributed to create an RPM distribution and "
"a Windows installer for the software, respectively.  Commands to create "
"other distribution formats such as Debian packages and Solaris "
":file:`.pkg` files are in various stages of development."
msgstr ""

#: ../../whatsnew/2.0.rst:873
msgid ""
"All this is documented in a new manual, *Distributing Python Modules*, "
"that joins the basic set of Python documentation."
msgstr ""

#: ../../whatsnew/2.0.rst:880
msgid "XML Modules"
msgstr ""

#: ../../whatsnew/2.0.rst:882
msgid ""
"Python 1.5.2 included a simple XML parser in the form of the "
":mod:`xmllib` module, contributed by Sjoerd Mullender.  Since 1.5.2's "
"release, two different interfaces for processing XML have become common: "
"SAX2 (version 2 of the Simple API for XML) provides an event-driven "
"interface with some similarities to :mod:`xmllib`, and the DOM (Document "
"Object Model) provides a tree-based interface, transforming an XML "
"document into a tree of nodes that can be traversed and modified.  Python"
" 2.0 includes a SAX2 interface and a stripped-down DOM interface as part "
"of the :mod:`xml` package. Here we will give a brief overview of these "
"new interfaces; consult the Python documentation or the source code for "
"complete details. The Python XML SIG is also working on improved "
"documentation."
msgstr ""

#: ../../whatsnew/2.0.rst:896
msgid "SAX2 Support"
msgstr ""

#: ../../whatsnew/2.0.rst:898
msgid ""
"SAX defines an event-driven interface for parsing XML.  To use SAX, you "
"must write a SAX handler class.  Handler classes inherit from various "
"classes provided by SAX, and override various methods that will then be "
"called by the XML parser.  For example, the :meth:`startElement` and "
":meth:`endElement` methods are called for every starting and end tag "
"encountered by the parser, the :meth:`characters` method is called for "
"every chunk of character data, and so forth."
msgstr ""

#: ../../whatsnew/2.0.rst:906
msgid ""
"The advantage of the event-driven approach is that the whole document "
"doesn't have to be resident in memory at any one time, which matters if "
"you are processing really huge documents.  However, writing the SAX "
"handler class can get very complicated if you're trying to modify the "
"document structure in some elaborate way."
msgstr ""

#: ../../whatsnew/2.0.rst:912
msgid ""
"For example, this little example program defines a handler that prints a "
"message for every starting and ending tag, and then parses the file "
":file:`hamlet.xml` using it::"
msgstr ""

#: ../../whatsnew/2.0.rst:935
msgid ""
"For more information, consult the Python documentation, or the XML HOWTO "
"at http://pyxml.sourceforge.net/topics/howto/xml-howto.html."
msgstr ""

#: ../../whatsnew/2.0.rst:940
msgid "DOM Support"
msgstr ""

#: ../../whatsnew/2.0.rst:942
msgid ""
"The Document Object Model is a tree-based representation for an XML "
"document.  A top-level :class:`Document` instance is the root of the "
"tree, and has a single child which is the top-level :class:`Element` "
"instance. This :class:`Element` has children nodes representing character"
" data and any sub-elements, which may have further children of their own,"
" and so forth.  Using the DOM you can traverse the resulting tree any way"
" you like, access element and attribute values, insert and delete nodes, "
"and convert the tree back into XML."
msgstr ""

#: ../../whatsnew/2.0.rst:950
msgid ""
"The DOM is useful for modifying XML documents, because you can create a "
"DOM tree, modify it by adding new nodes or rearranging subtrees, and then"
" produce a new XML document as output.  You can also construct a DOM tree"
" manually and convert it to XML, which can be a more flexible way of "
"producing XML output than simply writing ``<tag1>``...\\ ``</tag1>`` to a"
" file."
msgstr ""

#: ../../whatsnew/2.0.rst:956
msgid ""
"The DOM implementation included with Python lives in the "
":mod:`xml.dom.minidom` module.  It's a lightweight implementation of the "
"Level 1 DOM with support for XML namespaces.  The  :func:`parse` and "
":func:`parseString` convenience functions are provided for generating a "
"DOM tree::"
msgstr ""

#: ../../whatsnew/2.0.rst:964
msgid ""
"``doc`` is a :class:`Document` instance.  :class:`Document`, like all the"
" other DOM classes such as :class:`Element` and :class:`Text`, is a "
"subclass of the :class:`Node` base class.  All the nodes in a DOM tree "
"therefore support certain common methods, such as :meth:`toxml` which "
"returns a string containing the XML representation of the node and its "
"children.  Each class also has special methods of its own; for example, "
":class:`Element` and :class:`Document` instances have a method to find "
"all child elements with a given tag name. Continuing from the previous "
"2-line example::"
msgstr ""

#: ../../whatsnew/2.0.rst:977
msgid "For the *Hamlet* XML file, the above few lines output::"
msgstr ""

#: ../../whatsnew/2.0.rst:982
msgid ""
"The root element of the document is available as ``doc.documentElement``,"
" and its children can be easily modified by deleting, adding, or removing"
" nodes::"
msgstr ""

#: ../../whatsnew/2.0.rst:997
msgid ""
"Again, I will refer you to the Python documentation for a complete "
"listing of the different :class:`Node` classes and their various methods."
msgstr ""

#: ../../whatsnew/2.0.rst:1002
msgid "Relationship to PyXML"
msgstr ""

#: ../../whatsnew/2.0.rst:1004
msgid ""
"The XML Special Interest Group has been working on XML-related Python "
"code for a while.  Its code distribution, called PyXML, is available from"
" the SIG's Web pages at https://www.python.org/community/sigs/current"
"/xml-sig. The PyXML distribution also used the package name ``xml``.  If "
"you've written programs that used PyXML, you're probably wondering about "
"its compatibility with the 2.0 :mod:`xml` package."
msgstr ""

#: ../../whatsnew/2.0.rst:1010
msgid ""
"The answer is that Python 2.0's :mod:`xml` package isn't compatible with "
"PyXML, but can be made compatible by installing a recent version PyXML.  "
"Many applications can get by with the XML support that is included with "
"Python 2.0, but more complicated applications will require that the full "
"PyXML package will be installed.  When installed, PyXML versions 0.6.0 or"
" greater will replace the :mod:`xml` package shipped with Python, and "
"will be a strict superset of the standard package, adding a bunch of "
"additional features.  Some of the additional features in PyXML include:"
msgstr ""

#: ../../whatsnew/2.0.rst:1019
msgid "4DOM, a full DOM implementation from FourThought, Inc."
msgstr ""

#: ../../whatsnew/2.0.rst:1021
msgid "The xmlproc validating parser, written by Lars Marius Garshol."
msgstr ""

#: ../../whatsnew/2.0.rst:1023
msgid "The :mod:`sgmlop` parser accelerator module, written by Fredrik Lundh."
msgstr ""

#: ../../whatsnew/2.0.rst:1029
msgid "Module changes"
msgstr ""

#: ../../whatsnew/2.0.rst:1031
msgid ""
"Lots of improvements and bugfixes were made to Python's extensive "
"standard library; some of the affected modules include :mod:`readline`, "
":mod:`ConfigParser`, :mod:`cgi`, :mod:`calendar`, :mod:`posix`, "
":mod:`readline`, :mod:`xmllib`, :mod:`aifc`, :mod:`chunk, wave`, "
":mod:`random`, :mod:`shelve`, and :mod:`nntplib`.  Consult the CVS logs "
"for the exact patch-by-patch details."
msgstr ""

#: ../../whatsnew/2.0.rst:1037
msgid ""
"Brian Gallew contributed OpenSSL support for the :mod:`socket` module.  "
"OpenSSL is an implementation of the Secure Socket Layer, which encrypts "
"the data being sent over a socket.  When compiling Python, you can edit "
":file:`Modules/Setup` to include SSL support, which adds an additional "
"function to the :mod:`socket` module: ``socket.ssl(socket, keyfile, "
"certfile)``, which takes a socket object and returns an SSL socket.  The "
":mod:`httplib` and :mod:`urllib` modules were also changed to support "
"``https://`` URLs, though no one has implemented FTP or SMTP over SSL."
msgstr ""

#: ../../whatsnew/2.0.rst:1046
msgid ""
"The :mod:`httplib` module has been rewritten by Greg Stein to support "
"HTTP/1.1. Backward compatibility with the 1.5 version of :mod:`httplib` "
"is provided, though using HTTP/1.1 features such as pipelining will "
"require rewriting code to use a different set of interfaces."
msgstr ""

#: ../../whatsnew/2.0.rst:1051
msgid ""
"The :mod:`Tkinter` module now supports Tcl/Tk version 8.1, 8.2, or 8.3, "
"and support for the older 7.x versions has been dropped.  The Tkinter "
"module now supports displaying Unicode strings in Tk widgets. Also, "
"Fredrik Lundh contributed an optimization which makes operations like "
"``create_line`` and ``create_polygon`` much faster, especially when using"
" lots of coordinates."
msgstr ""

#: ../../whatsnew/2.0.rst:1057
msgid ""
"The :mod:`curses` module has been greatly extended, starting from Oliver "
"Andrich's enhanced version, to provide many additional functions from "
"ncurses and SYSV curses, such as colour, alternative character set "
"support, pads, and mouse support.  This means the module is no longer "
"compatible with operating systems that only have BSD curses, but there "
"don't seem to be any currently maintained OSes that fall into this "
"category."
msgstr ""

#: ../../whatsnew/2.0.rst:1064
msgid ""
"As mentioned in the earlier discussion of 2.0's Unicode support, the "
"underlying implementation of the regular expressions provided by the "
":mod:`re` module has been changed.  SRE, a new regular expression engine "
"written by Fredrik Lundh and partially funded by Hewlett Packard, "
"supports matching against both 8-bit strings and Unicode strings."
msgstr ""

#: ../../whatsnew/2.0.rst:1074
msgid "New modules"
msgstr ""

#: ../../whatsnew/2.0.rst:1076
msgid ""
"A number of new modules were added.  We'll simply list them with brief "
"descriptions; consult the 2.0 documentation for the details of a "
"particular module."
msgstr ""

#: ../../whatsnew/2.0.rst:1080
msgid ""
":mod:`atexit`:  For registering functions to be called before the Python "
"interpreter exits. Code that currently sets ``sys.exitfunc`` directly "
"should be changed to  use the :mod:`atexit` module instead, importing "
":mod:`atexit` and calling :func:`atexit.register` with  the function to "
"be called on exit. (Contributed by Skip Montanaro.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1086
msgid ""
":mod:`codecs`, :mod:`encodings`, :mod:`unicodedata`:  Added as part of "
"the new Unicode support."
msgstr ""

#: ../../whatsnew/2.0.rst:1089
msgid ""
":mod:`filecmp`: Supersedes the old :mod:`cmp`, :mod:`cmpcache` and "
":mod:`dircmp` modules, which have now become deprecated. (Contributed by "
"Gordon MacMillan and Moshe Zadka.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1093
msgid ""
":mod:`gettext`: This module provides internationalization (I18N) and "
"localization (L10N) support for Python programs by providing an interface"
" to the GNU gettext message catalog library. (Integrated by Barry Warsaw,"
" from separate contributions by Martin  von L√∂wis, Peter Funk, and James "
"Henstridge.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1098
msgid ""
":mod:`linuxaudiodev`: Support for the :file:`/dev/audio` device on Linux,"
" a twin to the existing :mod:`sunaudiodev` module. (Contributed by Peter "
"Bosch, with fixes by Jeremy Hylton.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1102
msgid ""
":mod:`mmap`: An interface to memory-mapped files on both Windows and "
"Unix.  A file's contents can be mapped directly into memory, at which "
"point it behaves like a mutable string, so its contents can be read and "
"modified.  They can even be passed to functions that expect ordinary "
"strings, such as the :mod:`re` module. (Contributed by Sam Rushing, with "
"some extensions by A.M. Kuchling.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1108
msgid ""
":mod:`pyexpat`: An interface to the Expat XML parser. (Contributed by "
"Paul Prescod.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1111
msgid ""
":mod:`robotparser`: Parse a :file:`robots.txt` file, which is used for "
"writing Web spiders that politely avoid certain areas of a Web site.  The"
" parser accepts the contents of a :file:`robots.txt` file, builds a set "
"of rules from it, and can then answer questions about the fetchability of"
" a given URL.  (Contributed by Skip Montanaro.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1117
msgid ""
":mod:`tabnanny`: A module/script to  check Python source code for "
"ambiguous indentation. (Contributed by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1120
msgid ""
":mod:`UserString`: A base class useful for deriving objects that behave "
"like strings."
msgstr ""

#: ../../whatsnew/2.0.rst:1123
msgid ""
":mod:`webbrowser`: A module that provides a platform independent way to "
"launch a web browser on a specific URL. For each platform, various "
"browsers are tried in a specific order. The user can alter which browser "
"is launched by setting the *BROWSER* environment variable.  (Originally "
"inspired by Eric S. Raymond's patch to :mod:`urllib` which added similar "
"functionality, but the final module comes from code originally  "
"implemented by Fred Drake as :file:`Tools/idle/BrowserControl.py`, and "
"adapted for the standard library by Fred.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1132
msgid ""
":mod:`_winreg`: An interface to the Windows registry.  :mod:`_winreg` is "
"an adaptation of functions that have been part of PythonWin since 1995, "
"but has now been added to the core  distribution, and enhanced to support"
" Unicode. :mod:`_winreg` was written by Bill Tutt and Mark Hammond."
msgstr ""

#: ../../whatsnew/2.0.rst:1137
msgid ""
":mod:`zipfile`: A module for reading and writing ZIP-format archives.  "
"These are archives produced by :program:`PKZIP` on DOS/Windows or "
":program:`zip` on Unix, not to be confused with :program:`gzip`\\ -format"
" files (which are supported by the :mod:`gzip` module) (Contributed by "
"James C. Ahlstrom.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1142
msgid ""
":mod:`imputil`: A module that provides a simpler way for writing "
"customized import hooks, in comparison to the existing :mod:`ihooks` "
"module.  (Implemented by Greg Stein, with much discussion on python-dev "
"along the way.)"
msgstr ""

#: ../../whatsnew/2.0.rst:1150
msgid "IDLE Improvements"
msgstr ""

#: ../../whatsnew/2.0.rst:1152
msgid ""
"IDLE is the official Python cross-platform IDE, written using Tkinter. "
"Python 2.0 includes IDLE 0.6, which adds a number of new features and "
"improvements.  A partial list:"
msgstr ""

#: ../../whatsnew/2.0.rst:1156
msgid ""
"UI improvements and optimizations, especially in the area of syntax "
"highlighting and auto-indentation."
msgstr ""

#: ../../whatsnew/2.0.rst:1159
msgid ""
"The class browser now shows more information, such as the top level "
"functions in a module."
msgstr ""

#: ../../whatsnew/2.0.rst:1162
msgid ""
"Tab width is now a user settable option. When opening an existing Python "
"file, IDLE automatically detects the indentation conventions, and adapts."
msgstr ""

#: ../../whatsnew/2.0.rst:1165
msgid ""
"There is now support for calling browsers on various platforms, used to "
"open the Python documentation in a browser."
msgstr ""

#: ../../whatsnew/2.0.rst:1168
msgid ""
"IDLE now has a command line, which is largely similar to  the vanilla "
"Python interpreter."
msgstr ""

#: ../../whatsnew/2.0.rst:1171
msgid "Call tips were added in many places."
msgstr ""

#: ../../whatsnew/2.0.rst:1173
msgid "IDLE can now be installed as a package."
msgstr ""

#: ../../whatsnew/2.0.rst:1175
msgid "In the editor window, there is now a line/column bar at the bottom."
msgstr ""

#: ../../whatsnew/2.0.rst:1177
msgid ""
"Three new keystroke commands: Check module (:kbd:`Alt-F5`), Import module"
" (:kbd:`F5`) and Run script (:kbd:`Ctrl-F5`)."
msgstr ""

#: ../../whatsnew/2.0.rst:1184
msgid "Deleted and Deprecated Modules"
msgstr ""

#: ../../whatsnew/2.0.rst:1186
msgid ""
"A few modules have been dropped because they're obsolete, or because "
"there are now better ways to do the same thing.  The :mod:`stdwin` module"
" is gone; it was for a platform-independent windowing toolkit that's no "
"longer developed."
msgstr ""

#: ../../whatsnew/2.0.rst:1190
msgid ""
"A number of modules have been moved to the :file:`lib-old` subdirectory: "
":mod:`cmp`, :mod:`cmpcache`, :mod:`dircmp`, :mod:`dump`,  :mod:`find`, "
":mod:`grep`, :mod:`packmail`,  :mod:`poly`, :mod:`util`, "
":mod:`whatsound`, :mod:`zmod`.  If you have code which relies on a module"
"  that's been moved to :file:`lib-old`, you can simply add that directory"
" to ``sys.path``   to get them back, but you're encouraged to update any "
"code that uses these modules."
msgstr ""

#: ../../whatsnew/2.0.rst:1199 ../../whatsnew/2.1.rst:789
#: ../../whatsnew/2.2.rst:1260 ../../whatsnew/2.3.rst:2077
#: ../../whatsnew/2.4.rst:1559 ../../whatsnew/2.5.rst:2281
#: ../../whatsnew/2.6.rst:3308 ../../whatsnew/2.7.rst:2794
msgid "Acknowledgements"
msgstr ""

#: ../../whatsnew/2.0.rst:1201
msgid ""
"The authors would like to thank the following people for offering "
"suggestions on various drafts of this article: David Bolen, Mark Hammond,"
" Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert, Aahz Maruch,"
" Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido van Rossum, "
"Neil Schemenauer, and Russ Schmidt."
msgstr ""

#: ../../whatsnew/2.1.rst:3
msgid "What's New in Python 2.1"
msgstr ""

#: ../../whatsnew/2.1.rst:5 ../../whatsnew/2.2.rst:5 ../../whatsnew/2.3.rst:5
#: ../../whatsnew/2.4.rst:5 ../../whatsnew/2.5.rst:5
msgid "A.M. Kuchling"
msgstr ""

#: ../../whatsnew/2.1.rst:15
msgid ""
"This article explains the new features in Python 2.1.  While there aren't"
" as many changes in 2.1 as there were in Python 2.0, there are still some"
" pleasant surprises in store.  2.1 is the first release to be steered "
"through the use of Python Enhancement Proposals, or PEPs, so most of the "
"sizable changes have accompanying PEPs that provide more complete "
"documentation and a design rationale for the change.  This article "
"doesn't attempt to document the new features completely, but simply "
"provides an overview of the new features for Python programmers. Refer to"
" the Python 2.1 documentation, or to the specific PEP, for more details "
"about any new feature that particularly interests you."
msgstr ""

#: ../../whatsnew/2.1.rst:25
msgid ""
"One recent goal of the Python development team has been to accelerate the"
" pace of new releases, with a new release coming every 6 to 9 months. 2.1"
" is the first release to come out at this faster pace, with the first "
"alpha appearing in January, 3 months after the final version of 2.0 was "
"released."
msgstr ""

#: ../../whatsnew/2.1.rst:30
msgid "The final release of Python 2.1 was made on April 17, 2001."
msgstr ""

#: ../../whatsnew/2.1.rst:36 ../../whatsnew/2.2.rst:839
msgid "PEP 227: Nested Scopes"
msgstr ""

#: ../../whatsnew/2.1.rst:38
msgid ""
"The largest change in Python 2.1 is to Python's scoping rules.  In Python"
" 2.0, at any given time there are at most three namespaces used to look "
"up variable names: local, module-level, and the built-in namespace.  This"
" often surprised people because it didn't match their intuitive "
"expectations.  For example, a nested recursive function definition "
"doesn't work::"
msgstr ""

#: ../../whatsnew/2.1.rst:51
msgid ""
"The function :func:`g` will always raise a :exc:`NameError` exception, "
"because the binding of the name ``g`` isn't in either its local namespace"
" or in the module-level namespace.  This isn't much of a problem in "
"practice (how often do you recursively define interior functions like "
"this?), but this also made using the :keyword:`lambda` expression "
"clumsier, and this was a problem in practice. In code which uses "
":keyword:`lambda` you can often find local variables being copied by "
"passing them as the default values of arguments. ::"
msgstr ""

#: ../../whatsnew/2.1.rst:65 ../../whatsnew/2.2.rst:876
msgid ""
"The readability of Python code written in a strongly functional style "
"suffers greatly as a result."
msgstr ""

#: ../../whatsnew/2.1.rst:68
msgid ""
"The most significant change to Python 2.1 is that static scoping has been"
" added to the language to fix this problem.  As a first effect, the "
"``name=name`` default argument is now unnecessary in the above example.  "
"Put simply, when a given variable name is not assigned a value within a "
"function (by an assignment, or the :keyword:`def`, :keyword:`class`, or "
":keyword:`import` statements), references to the variable will be looked "
"up in the local namespace of the enclosing scope.  A more detailed "
"explanation of the rules, and a dissection of the implementation, can be "
"found in the PEP."
msgstr ""

#: ../../whatsnew/2.1.rst:77 ../../whatsnew/2.2.rst:888
msgid ""
"This change may cause some compatibility problems for code where the same"
" variable name is used both at the module level and as a local variable "
"within a function that contains further function definitions. This seems "
"rather unlikely though, since such code would have been pretty confusing "
"to read in the first place."
msgstr ""

#: ../../whatsnew/2.1.rst:83 ../../whatsnew/2.2.rst:894
msgid ""
"One side effect of the change is that the ``from module import *`` and "
"``exec`` statements have been made illegal inside a function scope under "
"certain conditions.  The Python reference manual has said all along that "
"``from module import *`` is only legal at the top level of a module, but "
"the CPython interpreter has never enforced this before.  As part of the "
"implementation of nested scopes, the compiler which turns Python source "
"into bytecodes has to generate different code to access variables in a "
"containing scope.  ``from module import *`` and ``exec`` make it "
"impossible for the compiler to figure this out, because they add names to"
" the local namespace that are unknowable at compile time. Therefore, if a"
" function contains function definitions or :keyword:`lambda` expressions "
"with free variables, the compiler will flag this by raising a "
":exc:`SyntaxError` exception."
msgstr ""

#: ../../whatsnew/2.1.rst:96 ../../whatsnew/2.2.rst:907
msgid "To make the preceding explanation a bit clearer, here's an example::"
msgstr ""

#: ../../whatsnew/2.1.rst:105 ../../whatsnew/2.2.rst:916
msgid ""
"Line 4 containing the ``exec`` statement is a syntax error, since "
"``exec`` would define a new local variable named ``x`` whose value should"
" be accessed by :func:`g`."
msgstr ""

#: ../../whatsnew/2.1.rst:109 ../../whatsnew/2.2.rst:920
msgid ""
"This shouldn't be much of a limitation, since ``exec`` is rarely used in "
"most Python code (and when it is used, it's often a sign of a poor design"
" anyway)."
msgstr ""

#: ../../whatsnew/2.1.rst:113
msgid ""
"Compatibility concerns have led to nested scopes being introduced "
"gradually; in Python 2.1, they aren't enabled by default, but can be "
"turned on within a module by using a future statement as described in "
":pep:`236`.  (See the following section for further discussion of "
":pep:`236`.)  In Python 2.2, nested scopes will become the default and "
"there will be no way to turn them off, but users will have had all of "
"2.1's lifetime to fix any breakage resulting from their introduction."
msgstr ""

#: ../../whatsnew/2.1.rst:123 ../../whatsnew/2.2.rst:927
msgid ":pep:`227` - Statically Nested Scopes"
msgstr ""

#: ../../whatsnew/2.1.rst:124 ../../whatsnew/2.2.rst:928
msgid "Written and implemented by Jeremy Hylton."
msgstr ""

#: ../../whatsnew/2.1.rst:130
msgid "PEP 236: __future__ Directives"
msgstr ""

#: ../../whatsnew/2.1.rst:132
msgid ""
"The reaction to nested scopes was widespread concern about the dangers of"
" breaking code with the 2.1 release, and it was strong enough to make the"
" Pythoneers take a more conservative approach.  This approach consists of"
" introducing a convention for enabling optional functionality in release "
"N that will become compulsory in release N+1."
msgstr ""

#: ../../whatsnew/2.1.rst:138
msgid ""
"The syntax uses a ``from...import`` statement using the reserved module "
"name :mod:`__future__`.  Nested scopes can be enabled by the following "
"statement::"
msgstr ""

#: ../../whatsnew/2.1.rst:143
msgid ""
"While it looks like a normal :keyword:`import` statement, it's not; there"
" are strict rules on where such a future statement can be put. They can "
"only be at the top of a module, and must precede any Python code or "
"regular :keyword:`!import` statements.  This is because such statements "
"can affect how the Python bytecode compiler parses code and generates "
"bytecode, so they must precede any statement that will result in "
"bytecodes being produced."
msgstr ""

#: ../../whatsnew/2.1.rst:153
msgid ":pep:`236` - Back to the :mod:`__future__`"
msgstr ""

#: ../../whatsnew/2.1.rst:154
msgid "Written by Tim Peters, and primarily implemented by Jeremy Hylton."
msgstr ""

#: ../../whatsnew/2.1.rst:160
msgid "PEP 207: Rich Comparisons"
msgstr ""

#: ../../whatsnew/2.1.rst:162
msgid ""
"In earlier versions, Python's support for implementing comparisons on "
"user-defined classes and extension types was quite simple. Classes could "
"implement a :meth:`__cmp__` method that was given two instances of a "
"class, and could only return 0 if they were equal or +1 or -1 if they "
"weren't; the method couldn't raise an exception or return anything other "
"than a Boolean value.  Users of Numeric Python often found this model too"
" weak and restrictive, because in the number-crunching programs that "
"numeric Python is used for, it would be more useful to be able to perform"
" elementwise comparisons of two matrices, returning a matrix containing "
"the results of a given comparison for each element.  If the two matrices "
"are of different sizes, then the compare has to be able to raise an "
"exception to signal the error."
msgstr ""

#: ../../whatsnew/2.1.rst:174
msgid ""
"In Python 2.1, rich comparisons were added in order to support this need."
" Python classes can now individually overload each of the ``<``, ``<=``, "
"``>``, ``>=``, ``==``, and ``!=`` operations.  The new magic method names"
" are:"
msgstr ""

#: ../../whatsnew/2.1.rst:179 ../../whatsnew/2.5.rst:1808
msgid "Operation"
msgstr ""

#: ../../whatsnew/2.1.rst:179
msgid "Method name"
msgstr ""

#: ../../whatsnew/2.1.rst:181
msgid "``<``"
msgstr ""

#: ../../whatsnew/2.1.rst:181
msgid ":meth:`__lt__`"
msgstr ""

#: ../../whatsnew/2.1.rst:183
msgid "``<=``"
msgstr ""

#: ../../whatsnew/2.1.rst:183
msgid ":meth:`__le__`"
msgstr ""

#: ../../whatsnew/2.1.rst:185
msgid "``>``"
msgstr ""

#: ../../whatsnew/2.1.rst:185
msgid ":meth:`__gt__`"
msgstr ""

#: ../../whatsnew/2.1.rst:187
msgid "``>=``"
msgstr ""

#: ../../whatsnew/2.1.rst:187
msgid ":meth:`__ge__`"
msgstr ""

#: ../../whatsnew/2.1.rst:189
msgid "``==``"
msgstr ""

#: ../../whatsnew/2.1.rst:189
msgid ":meth:`__eq__`"
msgstr ""

#: ../../whatsnew/2.1.rst:191
msgid "``!=``"
msgstr ""

#: ../../whatsnew/2.1.rst:191
msgid ":meth:`__ne__`"
msgstr ""

#: ../../whatsnew/2.1.rst:194
msgid ""
"(The magic methods are named after the corresponding Fortran operators "
"``.LT.``. ``.LE.``, &c.  Numeric programmers are almost certainly quite "
"familiar with these names and will find them easy to remember.)"
msgstr ""

#: ../../whatsnew/2.1.rst:198
msgid ""
"Each of these magic methods is of the form ``method(self, other)``, where"
" ``self`` will be the object on the left-hand side of the operator, while"
" ``other`` will be the object on the right-hand side.  For example, the "
"expression ``A < B`` will cause ``A.__lt__(B)`` to be called."
msgstr ""

#: ../../whatsnew/2.1.rst:203
msgid ""
"Each of these magic methods can return anything at all: a Boolean, a "
"matrix, a list, or any other Python object.  Alternatively they can raise"
" an exception if the comparison is impossible, inconsistent, or otherwise"
" meaningless."
msgstr ""

#: ../../whatsnew/2.1.rst:207
msgid ""
"The built-in ``cmp(A,B)`` function can use the rich comparison machinery,"
" and now accepts an optional argument specifying which comparison "
"operation to use; this is given as one of the strings ``\"<\"``, "
"``\"<=\"``, ``\">\"``, ``\">=\"``, ``\"==\"``, or ``\"!=\"``.  If called "
"without the optional third argument, :func:`cmp` will only return -1, 0, "
"or +1 as in previous versions of Python; otherwise it will call the "
"appropriate method and can return any Python object."
msgstr ""

#: ../../whatsnew/2.1.rst:214
msgid ""
"There are also corresponding changes of interest to C programmers; "
"there's a new slot ``tp_richcmp`` in type objects and an API for "
"performing a given rich comparison.  I won't cover the C API here, but "
"will refer you to :pep:`207`, or to 2.1's C API documentation, for the "
"full list of related functions."
msgstr ""

#: ../../whatsnew/2.1.rst:223
msgid ":pep:`207` - Rich Comparisons"
msgstr ""

#: ../../whatsnew/2.1.rst:223
msgid ""
"Written by Guido van Rossum, heavily based on earlier work by David "
"Ascher, and implemented by Guido van Rossum."
msgstr ""

#: ../../whatsnew/2.1.rst:230
msgid "PEP 230: Warning Framework"
msgstr ""

#: ../../whatsnew/2.1.rst:232
msgid ""
"Over its 10 years of existence, Python has accumulated a certain number "
"of obsolete modules and features along the way.  It's difficult to know "
"when a feature is safe to remove, since there's no way of knowing how "
"much code uses it --- perhaps no programs depend on the feature, or "
"perhaps many do.  To enable removing old features in a more structured "
"way, a warning framework was added. When the Python developers want to "
"get rid of a feature, it will first trigger a warning in the next version"
" of Python.  The following Python version can then drop the feature, and "
"users will have had a full release cycle to remove uses of the old "
"feature."
msgstr ""

#: ../../whatsnew/2.1.rst:242
msgid ""
"Python 2.1 adds the warning framework to be used in this scheme.  It adds"
" a :mod:`warnings` module that provide functions to issue warnings, and "
"to filter out warnings that you don't want to be displayed. Third-party "
"modules can also use this framework to deprecate old features that they "
"no longer wish to support."
msgstr ""

#: ../../whatsnew/2.1.rst:248
msgid ""
"For example, in Python 2.1 the :mod:`regex` module is deprecated, so "
"importing it causes a warning to be printed::"
msgstr ""

#: ../../whatsnew/2.1.rst:256
msgid "Warnings can be issued by calling the :func:`warnings.warn` function::"
msgstr ""

#: ../../whatsnew/2.1.rst:260
msgid ""
"The first parameter is the warning message; an additional optional "
"parameters can be used to specify a particular warning category."
msgstr ""

#: ../../whatsnew/2.1.rst:263
msgid ""
"Filters can be added to disable certain warnings; a regular expression "
"pattern can be applied to the message or to the module name in order to "
"suppress a warning.  For example, you may have a program that uses the "
":mod:`regex` module and not want to spare the time to convert it to use "
"the :mod:`re` module right now.  The warning can be suppressed by calling"
" ::"
msgstr ""

#: ../../whatsnew/2.1.rst:275
msgid ""
"This adds a filter that will apply only to warnings of the class "
":class:`DeprecationWarning` triggered in the :mod:`__main__` module, and "
"applies a regular expression to only match the message about the "
":mod:`regex` module being deprecated, and will cause such warnings to be "
"ignored.  Warnings can also be printed only once, printed every time the "
"offending code is executed, or turned into exceptions that will cause the"
" program to stop (unless the exceptions are caught in the usual way, of "
"course)."
msgstr ""

#: ../../whatsnew/2.1.rst:283
msgid ""
"Functions were also added to Python's C API for issuing warnings; refer "
"to PEP 230 or to Python's API documentation for the details."
msgstr ""

#: ../../whatsnew/2.1.rst:293
msgid ":pep:`5` - Guidelines for Language Evolution"
msgstr ""

#: ../../whatsnew/2.1.rst:290
msgid ""
"Written by Paul Prescod, to specify procedures to be followed when "
"removing old features from Python.  The policy described in this PEP "
"hasn't been officially adopted, but the eventual policy probably won't be"
" too different from Prescod's proposal."
msgstr ""

#: ../../whatsnew/2.1.rst:295
msgid ":pep:`230` - Warning Framework"
msgstr ""

#: ../../whatsnew/2.1.rst:296
msgid "Written and implemented by Guido van Rossum."
msgstr ""

#: ../../whatsnew/2.1.rst:302
msgid "PEP 229: New Build System"
msgstr ""

#: ../../whatsnew/2.1.rst:304
msgid ""
"When compiling Python, the user had to go in and edit the "
":file:`Modules/Setup` file in order to enable various additional modules;"
" the default set is relatively small and limited to modules that compile "
"on most Unix platforms. This means that on Unix platforms with many more "
"features, most notably Linux, Python installations often don't contain "
"all useful modules they could."
msgstr ""

#: ../../whatsnew/2.1.rst:310
msgid ""
"Python 2.0 added the Distutils, a set of modules for distributing and "
"installing extensions.  In Python 2.1, the Distutils are used to compile "
"much of the standard library of extension modules, autodetecting which "
"ones are supported on the current machine.  It's hoped that this will "
"make Python installations easier and more featureful."
msgstr ""

#: ../../whatsnew/2.1.rst:316
msgid ""
"Instead of having to edit the :file:`Modules/Setup` file in order to "
"enable modules, a :file:`setup.py` script in the top directory of the "
"Python source distribution is run at build time, and attempts to discover"
" which modules can be enabled by examining the modules and header files "
"on the system.  If a module is configured in :file:`Modules/Setup`, the "
":file:`setup.py` script won't attempt to compile that module and will "
"defer to the :file:`Modules/Setup` file's contents.  This provides a way "
"to specific any strange command-line flags or libraries that are required"
" for a specific platform."
msgstr ""

#: ../../whatsnew/2.1.rst:325
msgid ""
"In another far-reaching change to the build mechanism, Neil Schemenauer "
"restructured things so Python now uses a single makefile that isn't "
"recursive, instead of makefiles in the top directory and in each of the "
":file:`Python/`, :file:`Parser/`, :file:`Objects/`, and :file:`Modules/` "
"subdirectories.  This makes building Python faster and also makes hacking"
" the Makefiles clearer and simpler."
msgstr ""

#: ../../whatsnew/2.1.rst:335
msgid ":pep:`229` - Using Distutils to Build Python"
msgstr ""

#: ../../whatsnew/2.1.rst:336 ../../whatsnew/2.1.rst:571
msgid "Written and implemented by A.M. Kuchling."
msgstr ""

#: ../../whatsnew/2.1.rst:342
msgid "PEP 205: Weak References"
msgstr ""

#: ../../whatsnew/2.1.rst:344
msgid ""
"Weak references, available through the :mod:`weakref` module, are a minor"
" but useful new data type in the Python programmer's toolbox."
msgstr ""

#: ../../whatsnew/2.1.rst:347
msgid ""
"Storing a reference to an object (say, in a dictionary or a list) has the"
" side effect of keeping that object alive forever.  There are a few "
"specific cases where this behaviour is undesirable, object caches being "
"the most common one, and another being circular references in data "
"structures such as trees."
msgstr ""

#: ../../whatsnew/2.1.rst:352
msgid ""
"For example, consider a memoizing function that caches the results of "
"another function ``f(x)`` by storing the function's argument and its "
"result in a dictionary::"
msgstr ""

#: ../../whatsnew/2.1.rst:368
msgid ""
"This version works for simple things such as integers, but it has a side "
"effect; the ``_cache`` dictionary holds a reference to the return values,"
" so they'll never be deallocated until the Python process exits and "
"cleans up. This isn't very noticeable for integers, but if :func:`f` "
"returns an object, or a data structure that takes up a lot of memory, "
"this can be a problem."
msgstr ""

#: ../../whatsnew/2.1.rst:374
msgid ""
"Weak references provide a way to implement a cache that won't keep "
"objects alive beyond their time.  If an object is only accessible through"
" weak references, the object will be deallocated and the weak references "
"will now indicate that the object it referred to no longer exists.  A "
"weak reference to an object *obj* is created by calling ``wr = "
"weakref.ref(obj)``.  The object being referred to is returned by calling "
"the weak reference as if it were a function: ``wr()``.  It will return "
"the referenced object, or ``None`` if the object no longer exists."
msgstr ""

#: ../../whatsnew/2.1.rst:382
msgid ""
"This makes it possible to write a :func:`memoize` function whose cache "
"doesn't keep objects alive, by storing weak references in the cache. ::"
msgstr ""

#: ../../whatsnew/2.1.rst:400
msgid ""
"The :mod:`weakref` module also allows creating proxy objects which behave"
" like weak references --- an object referenced only by proxy objects is "
"deallocated -- but instead of requiring an explicit call to retrieve the "
"object, the proxy transparently forwards all operations to the object as "
"long as the object still exists.  If the object is deallocated, "
"attempting to use a proxy will cause a :exc:`weakref.ReferenceError` "
"exception to be raised. ::"
msgstr ""

#: ../../whatsnew/2.1.rst:416
msgid ":pep:`205` - Weak References"
msgstr ""

#: ../../whatsnew/2.1.rst:417
msgid "Written and implemented by Fred L. Drake, Jr."
msgstr ""

#: ../../whatsnew/2.1.rst:423
msgid "PEP 232: Function Attributes"
msgstr ""

#: ../../whatsnew/2.1.rst:425
msgid ""
"In Python 2.1, functions can now have arbitrary information attached to "
"them. People were often using docstrings to hold information about "
"functions and methods, because the ``__doc__`` attribute was the only way"
" of attaching any information to a function.  For example, in the Zope "
"Web application server, functions are marked as safe for public access by"
" having a docstring, and in John Aycock's SPARK parsing framework, "
"docstrings hold parts of the BNF grammar to be parsed.  This overloading "
"is unfortunate, since docstrings are really intended to hold a function's"
" documentation; for example, it means you can't properly document "
"functions intended for private use in Zope."
msgstr ""

#: ../../whatsnew/2.1.rst:435
msgid ""
"Arbitrary attributes can now be set and retrieved on functions using the "
"regular Python syntax::"
msgstr ""

#: ../../whatsnew/2.1.rst:444
msgid ""
"The dictionary containing attributes can be accessed as the function's "
":attr:`~object.__dict__`. Unlike the :attr:`~object.__dict__` attribute "
"of class instances, in functions you can actually assign a new dictionary"
" to :attr:`~object.__dict__`, though the new value is restricted to a "
"regular Python dictionary; you *can't* be tricky and set it to a "
":class:`UserDict` instance, or any other random object that behaves like "
"a mapping."
msgstr ""

#: ../../whatsnew/2.1.rst:454
msgid ":pep:`232` - Function Attributes"
msgstr ""

#: ../../whatsnew/2.1.rst:455
msgid "Written and implemented by Barry Warsaw."
msgstr ""

#: ../../whatsnew/2.1.rst:461
msgid "PEP 235: Importing Modules on Case-Insensitive Platforms"
msgstr ""

#: ../../whatsnew/2.1.rst:463
msgid ""
"Some operating systems have filesystems that are case-insensitive, MacOS "
"and Windows being the primary examples; on these systems, it's impossible"
" to distinguish the filenames ``FILE.PY`` and ``file.py``, even though "
"they do store the file's name  in its original case (they're case-"
"preserving, too)."
msgstr ""

#: ../../whatsnew/2.1.rst:468
msgid ""
"In Python 2.1, the :keyword:`import` statement will work to simulate "
"case-sensitivity on case-insensitive platforms.  Python will now search "
"for the first case-sensitive match by default, raising an "
":exc:`ImportError` if no such file is found, so ``import file`` will not "
"import a module named ``FILE.PY``. Case-insensitive matching can be "
"requested by setting the :envvar:`PYTHONCASEOK` environment variable "
"before starting the Python interpreter."
msgstr ""

#: ../../whatsnew/2.1.rst:479
msgid "PEP 217: Interactive Display Hook"
msgstr ""

#: ../../whatsnew/2.1.rst:481
msgid ""
"When using the Python interpreter interactively, the output of commands "
"is displayed using the built-in :func:`repr` function. In Python 2.1, the"
" variable :func:`sys.displayhook` can be set to a callable object which "
"will be called instead of :func:`repr`. For example, you can set it to a "
"special pretty-printing function::"
msgstr ""

#: ../../whatsnew/2.1.rst:502
msgid ":pep:`217` - Display Hook for Interactive Use"
msgstr ""

#: ../../whatsnew/2.1.rst:503
msgid "Written and implemented by Moshe Zadka."
msgstr ""

#: ../../whatsnew/2.1.rst:509
msgid "PEP 208: New Coercion Model"
msgstr ""

#: ../../whatsnew/2.1.rst:511
msgid ""
"How numeric coercion is done at the C level was significantly modified.  "
"This will only affect the authors of C extensions to Python, allowing "
"them more flexibility in writing extension types that support numeric "
"operations."
msgstr ""

#: ../../whatsnew/2.1.rst:515
msgid ""
"Extension types can now set the type flag ``Py_TPFLAGS_CHECKTYPES`` in "
"their ``PyTypeObject`` structure to indicate that they support the new "
"coercion model. In such extension types, the numeric slot functions can "
"no longer assume that they'll be passed two arguments of the same type; "
"instead they may be passed two arguments of differing types, and can then"
" perform their own internal coercion. If the slot function is passed a "
"type it can't handle, it can indicate the failure by returning a "
"reference to the ``Py_NotImplemented`` singleton value. The numeric "
"functions of the other type will then be tried, and perhaps they can "
"handle the operation; if the other type also returns "
"``Py_NotImplemented``, then a :exc:`TypeError` will be raised.  Numeric "
"methods written in Python can also return ``Py_NotImplemented``, causing "
"the interpreter to act as if the method did not exist (perhaps raising a "
":exc:`TypeError`, perhaps trying another object's numeric methods)."
msgstr ""

#: ../../whatsnew/2.1.rst:534
msgid ":pep:`208` - Reworking the Coercion Model"
msgstr ""

#: ../../whatsnew/2.1.rst:533
msgid ""
"Written and implemented by Neil Schemenauer, heavily based upon earlier "
"work by Marc-Andr√© Lemburg.  Read this to understand the fine points of "
"how numeric operations will now be processed at the C level."
msgstr ""

#: ../../whatsnew/2.1.rst:541
msgid "PEP 241: Metadata in Python Packages"
msgstr ""

#: ../../whatsnew/2.1.rst:543
msgid ""
"A common complaint from Python users is that there's no single catalog of"
" all the Python modules in existence.  T. Middleton's Vaults of Parnassus"
" at http://www.vex.net/parnassus/ are the largest catalog of Python "
"modules, but registering software at the Vaults is optional, and many "
"people don't bother."
msgstr ""

#: ../../whatsnew/2.1.rst:548
msgid ""
"As a first small step toward fixing the problem, Python software packaged"
" using the Distutils :command:`sdist` command will include a file named "
":file:`PKG-INFO` containing information about the package such as its "
"name, version, and author (metadata, in cataloguing terminology).  "
":pep:`241` contains the full list of fields that can be present in the "
":file:`PKG-INFO` file.  As people began to package their software using "
"Python 2.1, more and more packages will include metadata, making it "
"possible to build automated cataloguing systems and experiment with them."
"  With the result experience, perhaps it'll be possible to design a "
"really good catalog and then build support for it into Python 2.2. For "
"example, the Distutils :command:`sdist` and :command:`bdist_\\*` commands"
" could support an ``upload`` option that would automatically upload your "
"package to a catalog server."
msgstr ""

#: ../../whatsnew/2.1.rst:561
msgid ""
"You can start creating packages containing :file:`PKG-INFO` even if "
"you're not using Python 2.1, since a new release of the Distutils will be"
" made for users of earlier Python versions.  Version 1.0.2 of the "
"Distutils includes the changes described in :pep:`241`, as well as "
"various bugfixes and enhancements.  It will be available from the "
"Distutils SIG at https://www.python.org/community/sigs/current/distutils-"
"sig/."
msgstr ""

#: ../../whatsnew/2.1.rst:571
msgid ":pep:`241` - Metadata for Python Software Packages"
msgstr ""

#: ../../whatsnew/2.1.rst:574
msgid ":pep:`243` - Module Repository Upload Mechanism"
msgstr ""

#: ../../whatsnew/2.1.rst:574
msgid ""
"Written by Sean Reifschneider, this draft PEP describes a proposed "
"mechanism for uploading  Python packages to a central server."
msgstr ""

#: ../../whatsnew/2.1.rst:581 ../../whatsnew/2.2.rst:934
#: ../../whatsnew/2.6.rst:1783 ../../whatsnew/2.7.rst:1025
msgid "New and Improved Modules"
msgstr ""

#: ../../whatsnew/2.1.rst:583
msgid ""
"Ka-Ping Yee contributed two new modules: :mod:`inspect.py`, a module for "
"getting information about live Python code, and :mod:`pydoc.py`, a module"
" for interactively converting docstrings to HTML or text.  As a bonus, "
":file:`Tools/scripts/pydoc`, which is now automatically installed, uses "
":mod:`pydoc.py` to display documentation given a Python module, package, "
"or class name.  For example, ``pydoc xml.dom`` displays the following::"
msgstr ""

#: ../../whatsnew/2.1.rst:605
msgid ""
":file:`pydoc` also includes a Tk-based interactive help browser.   "
":file:`pydoc` quickly becomes addictive; try it out!"
msgstr ""

#: ../../whatsnew/2.1.rst:608
msgid ""
"Two different modules for unit testing were added to the standard "
"library. The :mod:`doctest` module, contributed by Tim Peters, provides a"
" testing framework based on running embedded examples in docstrings and "
"comparing the results against the expected output.  PyUnit, contributed "
"by Steve Purcell, is a unit testing framework inspired by JUnit, which "
"was in turn an adaptation of Kent Beck's Smalltalk testing framework.  "
"See http://pyunit.sourceforge.net/ for more information about PyUnit."
msgstr ""

#: ../../whatsnew/2.1.rst:616
msgid ""
"The :mod:`difflib` module contains a class, :class:`SequenceMatcher`, "
"which compares two sequences and computes the changes required to "
"transform one sequence into the other.  For example, this module can be "
"used to write a tool similar to the Unix :program:`diff` program, and in "
"fact the sample program :file:`Tools/scripts/ndiff.py` demonstrates how "
"to write such a script."
msgstr ""

#: ../../whatsnew/2.1.rst:622
msgid ""
":mod:`curses.panel`, a wrapper for the panel library, part of ncurses and"
" of SYSV curses, was contributed by Thomas Gellekum.  The panel library "
"provides windows with the additional feature of depth. Windows can be "
"moved higher or lower in the depth ordering, and the panel library "
"figures out where panels overlap and which sections are visible."
msgstr ""

#: ../../whatsnew/2.1.rst:628
msgid ""
"The PyXML package has gone through a few releases since Python 2.0, and "
"Python 2.1 includes an updated version of the :mod:`xml` package.  Some "
"of the noteworthy changes include support for Expat 1.2 and later "
"versions, the ability for Expat parsers to handle files in any encoding "
"supported by Python, and various bugfixes for SAX, DOM, and the "
":mod:`minidom` module."
msgstr ""

#: ../../whatsnew/2.1.rst:634
msgid ""
"Ping also contributed another hook for handling uncaught exceptions. "
":func:`sys.excepthook` can be set to a callable object.  When an "
"exception isn't caught by any :keyword:`try`...\\ :keyword:`except` "
"blocks, the exception will be passed to :func:`sys.excepthook`, which can"
" then do whatever it likes.  At the Ninth Python Conference, Ping "
"demonstrated an application for this hook: printing an extended traceback"
" that not only lists the stack frames, but also lists the function "
"arguments and the local variables for each frame."
msgstr ""

#: ../../whatsnew/2.1.rst:642
msgid ""
"Various functions in the :mod:`time` module, such as :func:`asctime` and "
":func:`localtime`, require a floating point argument containing the time "
"in seconds since the epoch.  The most common use of these functions is to"
" work with the current time, so the floating point argument has been made"
" optional; when a value isn't provided, the current time will be used.  "
"For example, log file entries usually need a string containing the "
"current time; in Python 2.1, ``time.asctime()`` can be used, instead of "
"the lengthier ``time.asctime(time.localtime(time.time()))`` that was "
"previously required."
msgstr ""

#: ../../whatsnew/2.1.rst:651
msgid "This change was proposed and implemented by Thomas Wouters."
msgstr ""

#: ../../whatsnew/2.1.rst:653
msgid ""
"The :mod:`ftplib` module now defaults to retrieving files in passive "
"mode, because passive mode is more likely to work from behind a firewall."
"  This request came from the Debian bug tracking system, since other "
"Debian packages use :mod:`ftplib` to retrieve files and then don't work "
"from behind a firewall. It's deemed unlikely that this will cause "
"problems for anyone, because Netscape defaults to passive mode and few "
"people complain, but if passive mode is unsuitable for your application "
"or network setup, call ``set_pasv(0)`` on FTP objects to disable passive "
"mode."
msgstr ""

#: ../../whatsnew/2.1.rst:662
msgid ""
"Support for raw socket access has been added to the :mod:`socket` module,"
" contributed by Grant Edwards."
msgstr ""

#: ../../whatsnew/2.1.rst:665
msgid ""
"The :mod:`pstats` module now contains a simple interactive statistics "
"browser for displaying timing profiles for Python programs, invoked when "
"the module is run as a script.  Contributed by  Eric S. Raymond."
msgstr ""

#: ../../whatsnew/2.1.rst:669
msgid ""
"A new implementation-dependent function, ``sys._getframe([depth])``, has "
"been added to return a given frame object from the current call stack. "
":func:`sys._getframe` returns the frame at the top of the call stack;  if"
" the optional integer argument *depth* is supplied, the function returns "
"the frame that is *depth* calls below the top of the stack.  For example,"
" ``sys._getframe(1)`` returns the caller's frame object."
msgstr ""

#: ../../whatsnew/2.1.rst:676
msgid ""
"This function is only present in CPython, not in Jython or the .NET "
"implementation.  Use it for debugging, and resist the temptation to put "
"it into production code."
msgstr ""

#: ../../whatsnew/2.1.rst:684 ../../whatsnew/2.2.rst:1129
#: ../../whatsnew/2.3.rst:1966 ../../whatsnew/2.7.rst:2391
msgid "Other Changes and Fixes"
msgstr ""

#: ../../whatsnew/2.1.rst:686
msgid ""
"There were relatively few smaller changes made in Python 2.1 due to the "
"shorter release cycle.  A search through the CVS change logs turns up 117"
" patches applied, and 136 bugs fixed; both figures are likely to be "
"underestimates.  Some of the more notable changes are:"
msgstr ""

#: ../../whatsnew/2.1.rst:691
msgid ""
"A specialized object allocator is now optionally available, that should "
"be faster than the system :func:`malloc` and have less memory overhead.  "
"The allocator uses C's :func:`malloc` function to get large pools of "
"memory, and then fulfills smaller memory requests from these pools.  It "
"can be enabled by providing the :option:`!--with-pymalloc` option to the "
":program:`configure` script; see :file:`Objects/obmalloc.c` for the "
"implementation details."
msgstr ""

#: ../../whatsnew/2.1.rst:698
msgid ""
"Authors of C extension modules should test their code with the object "
"allocator enabled, because some incorrect code may break, causing core "
"dumps at runtime. There are a bunch of memory allocation functions in "
"Python's C API that have previously been just aliases for the C library's"
" :func:`malloc` and :func:`free`, meaning that if you accidentally called"
" mismatched functions, the error wouldn't be noticeable.  When the object"
" allocator is enabled, these functions aren't aliases of :func:`malloc` "
"and :func:`free` any more, and calling the wrong function to free memory "
"will get you a core dump.  For example, if memory was allocated using "
":func:`PyMem_New`, it has to be freed using :func:`PyMem_Del`, not "
":func:`free`.  A few modules included with Python fell afoul of this and "
"had to be fixed; doubtless there are more third-party modules that will "
"have the same problem."
msgstr ""

#: ../../whatsnew/2.1.rst:711
msgid "The object allocator was contributed by Vladimir Marangozov."
msgstr ""

#: ../../whatsnew/2.1.rst:713
msgid ""
"The speed of line-oriented file I/O has been improved because people "
"often complain about its lack of speed, and because it's often been used "
"as a na√Øve benchmark.  The :meth:`readline` method of file objects has "
"therefore been rewritten to be much faster.  The exact amount of the "
"speedup will vary from platform to platform depending on how slow the C "
"library's :func:`getc` was, but is around 66%, and potentially much "
"faster on some particular operating systems. Tim Peters did much of the "
"benchmarking and coding for this change, motivated by a discussion in "
"comp.lang.python."
msgstr ""

#: ../../whatsnew/2.1.rst:722
msgid ""
"A new module and method for file objects was also added, contributed by "
"Jeff Epler. The new method, :meth:`xreadlines`, is similar to the "
"existing :func:`xrange` built-in.  :func:`xreadlines` returns an opaque "
"sequence object that only supports being iterated over, reading a line on"
" every iteration but not reading the entire file into memory as the "
"existing :meth:`readlines` method does. You'd use it like this::"
msgstr ""

#: ../../whatsnew/2.1.rst:733
msgid ""
"For a fuller discussion of the line I/O changes, see the python-dev "
"summary for January 1--15, 2001 at https://mail.python.org/pipermail"
"/python-dev/2001-January/."
msgstr ""

#: ../../whatsnew/2.1.rst:736
msgid ""
"A new method, :meth:`popitem`, was added to dictionaries to enable "
"destructively iterating through the contents of a dictionary; this can be"
" faster for large dictionaries because there's no need to construct a "
"list containing all the keys or values. ``D.popitem()`` removes a random "
"``(key, value)`` pair from the dictionary ``D`` and returns it as a "
"2-tuple.  This was implemented mostly by Tim Peters and Guido van Rossum,"
" after a suggestion and preliminary patch by Moshe Zadka."
msgstr ""

#: ../../whatsnew/2.1.rst:744
msgid ""
"Modules can now control which names are imported when ``from module "
"import *`` is used, by defining an ``__all__`` attribute containing a "
"list of names that will be imported.  One common complaint is that if the"
" module imports other modules such as :mod:`sys` or :mod:`string`, ``from"
" module import *`` will add them to the importing module's namespace.  To"
" fix this, simply list the public names in ``__all__``::"
msgstr ""

#: ../../whatsnew/2.1.rst:754
msgid ""
"A stricter version of this patch was first suggested and implemented by "
"Ben Wolfson, but after some python-dev discussion, a weaker final version"
" was checked in."
msgstr ""

#: ../../whatsnew/2.1.rst:758
msgid ""
"Applying :func:`repr` to strings previously used octal escapes for non-"
"printable characters; for example, a newline was ``'\\012'``.  This was a"
" vestigial trace of Python's C ancestry, but today octal is of very "
"little practical use.  Ka-Ping Yee suggested using hex escapes instead of"
" octal ones, and using the ``\\n``, ``\\t``, ``\\r`` escapes for the "
"appropriate characters, and implemented this new formatting."
msgstr ""

#: ../../whatsnew/2.1.rst:765
msgid ""
"Syntax errors detected at compile-time can now raise exceptions "
"containing the filename and line number of the error, a pleasant side "
"effect of the compiler reorganization done by Jeremy Hylton."
msgstr ""

#: ../../whatsnew/2.1.rst:769
msgid ""
"C extensions which import other modules have been changed to use "
":func:`PyImport_ImportModule`, which means that they will use any import "
"hooks that have been installed.  This is also encouraged for third-party "
"extensions that need to import some other module from C code."
msgstr ""

#: ../../whatsnew/2.1.rst:774
msgid ""
"The size of the Unicode character database was shrunk by another 340K "
"thanks to Fredrik Lundh."
msgstr ""

#: ../../whatsnew/2.1.rst:777
msgid ""
"Some new ports were contributed: MacOS X (by Steven Majewski), Cygwin (by"
" Jason Tishler); RISCOS (by Dietmar Schwertberger); Unixware 7  (by Billy"
" G. Allie)."
msgstr ""

#: ../../whatsnew/2.1.rst:781
msgid ""
"And there's the usual list of minor bugfixes, minor memory leaks, "
"docstring edits, and other tweaks, too lengthy to be worth itemizing; see"
" the CVS logs for the full details if you want them."
msgstr ""

#: ../../whatsnew/2.1.rst:791
msgid ""
"The author would like to thank the following people for offering "
"suggestions on various drafts of this article: Graeme Cross, David "
"Goodger, Jay Graves, Michael Hudson, Marc-Andr√© Lemburg, Fredrik Lundh, "
"Neil Schemenauer, Thomas Wouters."
msgstr ""

#: ../../whatsnew/2.2.rst:3
msgid "What's New in Python 2.2"
msgstr ""

#: ../../whatsnew/2.2.rst:15
msgid ""
"This article explains the new features in Python 2.2.2, released on "
"October 14, 2002.  Python 2.2.2 is a bugfix release of Python 2.2, "
"originally released on December 21, 2001."
msgstr ""

#: ../../whatsnew/2.2.rst:19
msgid ""
"Python 2.2 can be thought of as the \"cleanup release\".  There are some "
"features such as generators and iterators that are completely new, but "
"most of the changes, significant and far-reaching though they may be, are"
" aimed at cleaning up irregularities and dark corners of the language "
"design."
msgstr ""

#: ../../whatsnew/2.2.rst:24
msgid ""
"This article doesn't attempt to provide a complete specification of the "
"new features, but instead provides a convenient overview.  For full "
"details, you should refer to the documentation for Python 2.2, such as "
"the `Python Library Reference "
"<https://docs.python.org/2.2/lib/lib.html>`_ and the `Python Reference "
"Manual <https://docs.python.org/2.2/ref/ref.html>`_.  If you want to "
"understand the complete implementation and design rationale for a change,"
" refer to the PEP for a particular new feature."
msgstr ""

#: ../../whatsnew/2.2.rst:43
msgid "PEPs 252 and 253: Type and Class Changes"
msgstr ""

#: ../../whatsnew/2.2.rst:45
msgid ""
"The largest and most far-reaching changes in Python 2.2 are to Python's "
"model of objects and classes.  The changes should be backward compatible,"
" so it's likely that your code will continue to run unchanged, but the "
"changes provide some amazing new capabilities. Before beginning this, the"
" longest and most complicated section of this article, I'll provide an "
"overview of the changes and offer some comments."
msgstr ""

#: ../../whatsnew/2.2.rst:52
msgid ""
"A long time ago I wrote a Web page listing flaws in Python's design.  One"
" of the most significant flaws was that it's impossible to subclass "
"Python types implemented in C.  In particular, it's not possible to "
"subclass built-in types, so you can't just subclass, say, lists in order "
"to add a single useful method to them. The :mod:`UserList` module "
"provides a class that supports all of the methods of lists and that can "
"be subclassed further, but there's lots of C code that expects a regular "
"Python list and won't accept a :class:`UserList` instance."
msgstr ""

#: ../../whatsnew/2.2.rst:61
msgid ""
"Python 2.2 fixes this, and in the process adds some exciting new "
"capabilities. A brief summary:"
msgstr ""

#: ../../whatsnew/2.2.rst:64
msgid ""
"You can subclass built-in types such as lists and even integers, and your"
" subclasses should work in every place that requires the original type."
msgstr ""

#: ../../whatsnew/2.2.rst:67
msgid ""
"It's now possible to define static and class methods, in addition to the "
"instance methods available in previous versions of Python."
msgstr ""

#: ../../whatsnew/2.2.rst:70
msgid ""
"It's also possible to automatically call methods on accessing or setting "
"an instance attribute by using a new mechanism called :dfn:`properties`."
"  Many uses of :meth:`__getattr__` can be rewritten to use properties "
"instead, making the resulting code simpler and faster.  As a small side "
"benefit, attributes can now have docstrings, too."
msgstr ""

#: ../../whatsnew/2.2.rst:76
msgid ""
"The list of legal attributes for an instance can be limited to a "
"particular set using :dfn:`slots`, making it possible to safeguard "
"against typos and perhaps make more optimizations possible in future "
"versions of Python."
msgstr ""

#: ../../whatsnew/2.2.rst:80
msgid ""
"Some users have voiced concern about all these changes.  Sure, they say, "
"the new features are neat and lend themselves to all sorts of tricks that"
" weren't possible in previous versions of Python, but they also make the "
"language more complicated.  Some people have said that they've always "
"recommended Python for its simplicity, and feel that its simplicity is "
"being lost."
msgstr ""

#: ../../whatsnew/2.2.rst:86
msgid ""
"Personally, I think there's no need to worry.  Many of the new features "
"are quite esoteric, and you can write a lot of Python code without ever "
"needed to be aware of them.  Writing a simple class is no more difficult "
"than it ever was, so you don't need to bother learning or teaching them "
"unless they're actually needed.  Some very complicated tasks that were "
"previously only possible from C will now be possible in pure Python, and "
"to my mind that's all for the better."
msgstr ""

#: ../../whatsnew/2.2.rst:93
msgid ""
"I'm not going to attempt to cover every single corner case and small "
"change that were required to make the new features work.  Instead this "
"section will paint only the broad strokes.  See section :ref:`sect-"
"rellinks`, \"Related Links\", for further sources of information about "
"Python 2.2's new object model."
msgstr ""

#: ../../whatsnew/2.2.rst:100
msgid "Old and New Classes"
msgstr ""

#: ../../whatsnew/2.2.rst:102
msgid ""
"First, you should know that Python 2.2 really has two kinds of classes: "
"classic or old-style classes, and new-style classes.  The old-style class"
" model is exactly the same as the class model in earlier versions of "
"Python.  All the new features described in this section apply only to "
"new-style classes. This divergence isn't intended to last forever; "
"eventually old-style classes will be dropped, possibly in Python 3.0."
msgstr ""

#: ../../whatsnew/2.2.rst:109
msgid ""
"So how do you define a new-style class?  You do it by subclassing an "
"existing new-style class.  Most of Python's built-in types, such as "
"integers, lists, dictionaries, and even files, are new-style classes now."
"  A new-style class named :class:`object`, the base class for all built-"
"in types, has also been added so if no built-in type is suitable, you can"
" just subclass :class:`object`::"
msgstr ""

#: ../../whatsnew/2.2.rst:121
msgid ""
"This means that :keyword:`class` statements that don't have any base "
"classes are always classic classes in Python 2.2.  (Actually you can also"
" change this by setting a module-level variable named "
":attr:`__metaclass__` --- see :pep:`253` for the details --- but it's "
"easier to just subclass :class:`object`.)"
msgstr ""

#: ../../whatsnew/2.2.rst:126
msgid ""
"The type objects for the built-in types are available as built-ins, named"
" using a clever trick.  Python has always had built-in functions named "
":func:`int`, :func:`float`, and :func:`str`.  In 2.2, they aren't "
"functions any more, but type objects that behave as factories when "
"called. ::"
msgstr ""

#: ../../whatsnew/2.2.rst:136
msgid ""
"To make the set of types complete, new type objects such as :func:`dict` "
"and :func:`file` have been added.  Here's a more interesting example, "
"adding a :meth:`lock` method to file objects::"
msgstr ""

#: ../../whatsnew/2.2.rst:146
msgid ""
"The now-obsolete :mod:`posixfile` module contained a class that emulated "
"all of a file object's methods and also added a :meth:`lock` method, but "
"this class couldn't be passed to internal functions that expected a "
"built-in file, something which is possible with our new "
":class:`LockableFile`."
msgstr ""

#: ../../whatsnew/2.2.rst:153
msgid "Descriptors"
msgstr ""

#: ../../whatsnew/2.2.rst:155
msgid ""
"In previous versions of Python, there was no consistent way to discover "
"what attributes and methods were supported by an object. There were some "
"informal conventions, such as defining :attr:`__members__` and "
":attr:`__methods__` attributes that were lists of names, but often the "
"author of an extension type or a class wouldn't bother to define them.  "
"You could fall back on inspecting the :attr:`~object.__dict__` of an "
"object, but when class inheritance or an arbitrary :meth:`__getattr__` "
"hook were in use this could still be inaccurate."
msgstr ""

#: ../../whatsnew/2.2.rst:163
msgid ""
"The one big idea underlying the new class model is that an API for "
"describing the attributes of an object using :dfn:`descriptors` has been "
"formalized. Descriptors specify the value of an attribute, stating "
"whether it's a method or a field.  With the descriptor API, static "
"methods and class methods become possible, as well as more exotic "
"constructs."
msgstr ""

#: ../../whatsnew/2.2.rst:169
msgid ""
"Attribute descriptors are objects that live inside class objects, and "
"have a few attributes of their own:"
msgstr ""

#: ../../whatsnew/2.2.rst:172
msgid ":attr:`~definition.__name__` is the attribute's name."
msgstr ""

#: ../../whatsnew/2.2.rst:174
msgid ":attr:`__doc__` is the attribute's docstring."
msgstr ""

#: ../../whatsnew/2.2.rst:176
msgid ""
"``__get__(object)`` is a method that retrieves the attribute value from "
"*object*."
msgstr ""

#: ../../whatsnew/2.2.rst:179
msgid "``__set__(object, value)`` sets the attribute on *object* to *value*."
msgstr ""

#: ../../whatsnew/2.2.rst:181
msgid "``__delete__(object, value)`` deletes the *value*  attribute of *object*."
msgstr ""

#: ../../whatsnew/2.2.rst:183
msgid ""
"For example, when you write ``obj.x``, the steps that Python actually "
"performs are::"
msgstr ""

#: ../../whatsnew/2.2.rst:189
msgid ""
"For methods, :meth:`descriptor.__get__` returns a temporary object that's"
" callable, and wraps up the instance and the method to be called on it. "
"This is also why static methods and class methods are now possible; they "
"have descriptors that wrap up just the method, or the method and the "
"class.  As a brief explanation of these new kinds of methods, static "
"methods aren't passed the instance, and therefore resemble regular "
"functions.  Class methods are passed the class of the object, but not the"
" object itself.  Static and class methods are defined like this::"
msgstr ""

#: ../../whatsnew/2.2.rst:207
msgid ""
"The :func:`staticmethod` function takes the function :func:`f`, and "
"returns it wrapped up in a descriptor so it can be stored in the class "
"object.  You might expect there to be special syntax for creating such "
"methods (``def static f``, ``defstatic f()``, or something like that) but"
" no such syntax has been defined yet; that's been left for future "
"versions of Python."
msgstr ""

#: ../../whatsnew/2.2.rst:213
msgid ""
"More new features, such as slots and properties, are also implemented as "
"new kinds of descriptors, and it's not difficult to write a descriptor "
"class that does something novel.  For example, it would be possible to "
"write a descriptor class that made it possible to write Eiffel-style "
"preconditions and postconditions for a method.  A class that used this "
"feature might be defined like this::"
msgstr ""

#: ../../whatsnew/2.2.rst:235
msgid ""
"Note that a person using the new :func:`eiffelmethod` doesn't have to "
"understand anything about descriptors.  This is why I think the new "
"features don't increase the basic complexity of the language. There will "
"be a few wizards who need to know about it in order to write "
":func:`eiffelmethod` or the ZODB or whatever, but most users will just "
"write code on top of the resulting libraries and ignore the "
"implementation details."
msgstr ""

#: ../../whatsnew/2.2.rst:244
msgid "Multiple Inheritance: The Diamond Rule"
msgstr ""

#: ../../whatsnew/2.2.rst:246
msgid ""
"Multiple inheritance has also been made more useful through changing the "
"rules under which names are resolved.  Consider this set of classes "
"(diagram taken from :pep:`253` by Guido van Rossum)::"
msgstr ""

#: ../../whatsnew/2.2.rst:264
msgid ""
"The lookup rule for classic classes is simple but not very smart; the "
"base classes are searched depth-first, going from left to right.  A "
"reference to :meth:`D.save` will search the classes :class:`D`, "
":class:`B`, and then :class:`A`, where :meth:`save` would be found and "
"returned.  :meth:`C.save` would never be found at all.  This is bad, "
"because if :class:`C`'s :meth:`save` method is saving some internal state"
" specific to :class:`C`, not calling it will result in that state never "
"getting saved."
msgstr ""

#: ../../whatsnew/2.2.rst:272
msgid ""
"New-style classes follow a different algorithm that's a bit more "
"complicated to explain, but does the right thing in this situation. (Note"
" that Python 2.3 changes this algorithm to one that produces the same "
"results in most cases, but produces more useful results for really "
"complicated inheritance graphs.)"
msgstr ""

#: ../../whatsnew/2.2.rst:277
msgid ""
"List all the base classes, following the classic lookup rule and include "
"a class multiple times if it's visited repeatedly.  In the above example,"
" the list of visited classes is [:class:`D`, :class:`B`, :class:`A`, "
":class:`C`, :class:`A`]."
msgstr ""

#: ../../whatsnew/2.2.rst:282
msgid ""
"Scan the list for duplicated classes.  If any are found, remove all but "
"one occurrence, leaving the *last* one in the list.  In the above "
"example, the list becomes [:class:`D`, :class:`B`, :class:`C`, "
":class:`A`] after dropping duplicates."
msgstr ""

#: ../../whatsnew/2.2.rst:287
msgid ""
"Following this rule, referring to :meth:`D.save` will return "
":meth:`C.save`, which is the behaviour we're after.  This lookup rule is "
"the same as the one followed by Common Lisp.  A new built-in function, "
":func:`super`, provides a way to get at a class's superclasses without "
"having to reimplement Python's algorithm. The most commonly used form "
"will be  ``super(class, obj)``, which returns  a bound superclass object "
"(not the actual class object).  This form will be used in methods to call"
" a method in the superclass; for example, :class:`D`'s :meth:`save` "
"method would look like this::"
msgstr ""

#: ../../whatsnew/2.2.rst:303
msgid ""
":func:`super` can also return unbound superclass objects when called as "
"``super(class)`` or ``super(class1, class2)``, but this probably won't "
"often be useful."
msgstr ""

#: ../../whatsnew/2.2.rst:309
msgid "Attribute Access"
msgstr ""

#: ../../whatsnew/2.2.rst:311
msgid ""
"A fair number of sophisticated Python classes define hooks for attribute "
"access using :meth:`__getattr__`; most commonly this is done for "
"convenience, to make code more readable by automatically mapping an "
"attribute access such as ``obj.parent`` into a method call such as "
"``obj.get_parent``.  Python 2.2 adds some new ways of controlling "
"attribute access."
msgstr ""

#: ../../whatsnew/2.2.rst:317
msgid ""
"First, ``__getattr__(attr_name)`` is still supported by new-style "
"classes, and nothing about it has changed.  As before, it will be called "
"when an attempt is made to access ``obj.foo`` and no attribute named "
"``foo`` is found in the instance's dictionary."
msgstr ""

#: ../../whatsnew/2.2.rst:322
msgid ""
"New-style classes also support a new method, "
"``__getattribute__(attr_name)``.  The difference between the two methods "
"is that :meth:`__getattribute__` is *always* called whenever any "
"attribute is accessed, while the old :meth:`__getattr__` is only called "
"if ``foo`` isn't found in the instance's dictionary."
msgstr ""

#: ../../whatsnew/2.2.rst:328
msgid ""
"However, Python 2.2's support for :dfn:`properties` will often be a "
"simpler way to trap attribute references.  Writing a :meth:`__getattr__` "
"method is complicated because to avoid recursion you can't use regular "
"attribute accesses inside them, and instead have to mess around with the "
"contents of :attr:`~object.__dict__`. :meth:`__getattr__` methods also "
"end up being called by Python when it checks for other methods such as "
":meth:`__repr__` or :meth:`__coerce__`, and so have to be written with "
"this in mind. Finally, calling a function on every attribute access "
"results in a sizable performance loss."
msgstr ""

#: ../../whatsnew/2.2.rst:337
msgid ""
":class:`property` is a new built-in type that packages up three functions"
" that get, set, or delete an attribute, and a docstring.  For example, if"
" you want to define a :attr:`size` attribute that's computed, but also "
"settable, you could write::"
msgstr ""

#: ../../whatsnew/2.2.rst:357
msgid ""
"That is certainly clearer and easier to write than a pair of "
":meth:`__getattr__`/:meth:`__setattr__` methods that check for the "
":attr:`size` attribute and handle it specially while retrieving all other"
" attributes from the instance's :attr:`~object.__dict__`.  Accesses to "
":attr:`size` are also the only ones which have to perform the work of "
"calling a function, so references to other attributes run at their usual "
"speed."
msgstr ""

#: ../../whatsnew/2.2.rst:364
msgid ""
"Finally, it's possible to constrain the list of attributes that can be "
"referenced on an object using the new :attr:`~object.__slots__` class "
"attribute. Python objects are usually very dynamic; at any time it's "
"possible to define a new attribute on an instance by just doing "
"``obj.new_attr=1``.   A new-style class can define a class attribute "
"named :attr:`~object.__slots__` to limit the legal attributes  to a "
"particular set of names.  An example will make this clear::"
msgstr ""

#: ../../whatsnew/2.2.rst:385
msgid ""
"Note how you get an :exc:`AttributeError` on the attempt to assign to an "
"attribute not listed in :attr:`~object.__slots__`."
msgstr ""

#: ../../whatsnew/2.2.rst:392
msgid "Related Links"
msgstr ""

#: ../../whatsnew/2.2.rst:394
msgid ""
"This section has just been a quick overview of the new features, giving "
"enough of an explanation to start you programming, but many details have "
"been simplified or ignored.  Where should you go to get a more complete "
"picture?"
msgstr ""

#: ../../whatsnew/2.2.rst:398
msgid ""
"https://docs.python.org/dev/howto/descriptor.html is a lengthy tutorial "
"introduction to the descriptor features, written by Guido van Rossum. If "
"my description has whetted your appetite, go read this tutorial next, "
"because it goes into much more detail about the new features while still "
"remaining quite easy to read."
msgstr ""

#: ../../whatsnew/2.2.rst:403
msgid ""
"Next, there are two relevant PEPs, :pep:`252` and :pep:`253`.  :pep:`252`"
" is titled \"Making Types Look More Like Classes\", and covers the "
"descriptor API. :pep:`253` is titled \"Subtyping Built-in Types\", and "
"describes the changes to type objects that make it possible to subtype "
"built-in objects.  :pep:`253` is the more complicated PEP of the two, and"
" at a few points the necessary explanations of types and meta-types may "
"cause your head to explode.  Both PEPs were written and implemented by "
"Guido van Rossum, with substantial assistance from the rest of the Zope "
"Corp. team."
msgstr ""

#: ../../whatsnew/2.2.rst:412
msgid ""
"Finally, there's the ultimate authority: the source code.  Most of the "
"machinery for the type handling is in :file:`Objects/typeobject.c`, but "
"you should only resort to it after all other avenues have been exhausted,"
" including posting a question to python-list or python-dev."
msgstr ""

#: ../../whatsnew/2.2.rst:421
msgid "PEP 234: Iterators"
msgstr ""

#: ../../whatsnew/2.2.rst:423
msgid ""
"Another significant addition to 2.2 is an iteration interface at both the"
" C and Python levels.  Objects can define how they can be looped over by "
"callers."
msgstr ""

#: ../../whatsnew/2.2.rst:426
msgid ""
"In Python versions up to 2.1, the usual way to make ``for item in obj`` "
"work is to define a :meth:`__getitem__` method that looks something like "
"this::"
msgstr ""

#: ../../whatsnew/2.2.rst:432
msgid ""
":meth:`__getitem__` is more properly used to define an indexing operation"
" on an object so that you can write ``obj[5]`` to retrieve the sixth "
"element.  It's a bit misleading when you're using this only to support "
":keyword:`for` loops. Consider some file-like object that wants to be "
"looped over; the *index* parameter is essentially meaningless, as the "
"class probably assumes that a series of :meth:`__getitem__` calls will be"
" made with *index* incrementing by one each time.  In other words, the "
"presence of the :meth:`__getitem__` method doesn't mean that using "
"``file[5]``  to randomly access the sixth element will work, though it "
"really should."
msgstr ""

#: ../../whatsnew/2.2.rst:442
msgid ""
"In Python 2.2, iteration can be implemented separately, and "
":meth:`__getitem__` methods can be limited to classes that really do "
"support random access.  The basic idea of iterators is  simple.  A new "
"built-in function, ``iter(obj)`` or ``iter(C, sentinel)``, is used to get"
" an iterator. ``iter(obj)`` returns an iterator for the object *obj*, "
"while ``iter(C, sentinel)`` returns an iterator that will invoke the "
"callable object *C* until it returns *sentinel* to signal that the "
"iterator is done."
msgstr ""

#: ../../whatsnew/2.2.rst:450
msgid ""
"Python classes can define an :meth:`__iter__` method, which should create"
" and return a new iterator for the object; if the object is its own "
"iterator, this method can just return ``self``.  In particular, iterators"
" will usually be their own iterators.  Extension types implemented in C "
"can implement a :c:member:`~PyTypeObject.tp_iter` function in order to "
"return an iterator, and extension types that want to behave as iterators "
"can define a :c:member:`~PyTypeObject.tp_iternext` function."
msgstr ""

#: ../../whatsnew/2.2.rst:457
msgid ""
"So, after all this, what do iterators actually do?  They have one "
"required method, :meth:`next`, which takes no arguments and returns the "
"next value.  When there are no more values to be returned, calling "
":meth:`next` should raise the :exc:`StopIteration` exception. ::"
msgstr ""

#: ../../whatsnew/2.2.rst:478
msgid ""
"In 2.2, Python's :keyword:`for` statement no longer expects a sequence; "
"it expects something for which :func:`iter` will return an iterator. For "
"backward compatibility and convenience, an iterator is automatically "
"constructed for sequences that don't implement :meth:`__iter__` or a "
":c:member:`~PyTypeObject.tp_iter` slot, so ``for i in [1,2,3]`` will "
"still work.  Wherever the Python interpreter loops over a sequence, it's "
"been changed to use the iterator protocol.  This means you can do things "
"like this::"
msgstr ""

#: ../../whatsnew/2.2.rst:492
msgid ""
"Iterator support has been added to some of Python's basic types.   "
"Calling :func:`iter` on a dictionary will return an iterator which loops "
"over its keys::"
msgstr ""

#: ../../whatsnew/2.2.rst:512
msgid ""
"That's just the default behaviour.  If you want to iterate over keys, "
"values, or key/value pairs, you can explicitly call the :meth:`iterkeys`,"
" :meth:`itervalues`, or :meth:`iteritems` methods to get an appropriate "
"iterator. In a minor related change, the :keyword:`in` operator now works"
" on dictionaries, so ``key in dict`` is now equivalent to "
"``dict.has_key(key)``."
msgstr ""

#: ../../whatsnew/2.2.rst:518
msgid ""
"Files also provide an iterator, which calls the :meth:`readline` method "
"until there are no more lines in the file.  This means you can now read "
"each line of a file using code like this::"
msgstr ""

#: ../../whatsnew/2.2.rst:526
msgid ""
"Note that you can only go forward in an iterator; there's no way to get "
"the previous element, reset the iterator, or make a copy of it. An "
"iterator object could provide such additional capabilities, but the "
"iterator protocol only requires a :meth:`next` method."
msgstr ""

#: ../../whatsnew/2.2.rst:535
msgid ":pep:`234` - Iterators"
msgstr ""

#: ../../whatsnew/2.2.rst:535
msgid ""
"Written by Ka-Ping Yee and GvR; implemented  by the Python Labs crew, "
"mostly by GvR and Tim Peters."
msgstr ""

#: ../../whatsnew/2.2.rst:542 ../../whatsnew/2.3.rst:126
msgid "PEP 255: Simple Generators"
msgstr ""

#: ../../whatsnew/2.2.rst:544
msgid ""
"Generators are another new feature, one that interacts with the "
"introduction of iterators."
msgstr ""

#: ../../whatsnew/2.2.rst:547
msgid ""
"You're doubtless familiar with how function calls work in Python or C.  "
"When you call a function, it gets a private namespace where its local "
"variables are created.  When the function reaches a :keyword:`return` "
"statement, the local variables are destroyed and the resulting value is "
"returned to the caller.  A later call to the same function will get a "
"fresh new set of local variables. But, what if the local variables "
"weren't thrown away on exiting a function? What if you could later resume"
" the function where it left off?  This is what generators provide; they "
"can be thought of as resumable functions."
msgstr ""

#: ../../whatsnew/2.2.rst:556 ../../whatsnew/2.3.rst:145
msgid "Here's the simplest example of a generator function::"
msgstr ""

#: ../../whatsnew/2.2.rst:562
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`!yield` statement is a generator "
"function; this is detected by Python's bytecode compiler which compiles "
"the function specially as a result.  Because a new keyword was "
"introduced, generators must be explicitly enabled in a module by "
"including a ``from __future__ import generators`` statement near the top "
"of the module's source code.  In Python 2.3 this statement will become "
"unnecessary."
msgstr ""

#: ../../whatsnew/2.2.rst:570
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator "
"protocol.  On executing the :keyword:`yield` statement, the generator "
"outputs the value of ``i``, similar to a :keyword:`return` statement.  "
"The big difference between :keyword:`!yield` and a :keyword:`!return` "
"statement is that on reaching a :keyword:`!yield` the generator's state "
"of execution is suspended and local variables are preserved.  On the next"
" call to the generator's ``next()`` method, the function will resume "
"executing immediately after the :keyword:`!yield` statement.  (For "
"complicated reasons, the :keyword:`!yield` statement isn't allowed inside"
" the :keyword:`!try` block of a :keyword:`try`...\\ :keyword:`finally` "
"statement; read :pep:`255` for a full explanation of the interaction "
"between :keyword:`!yield` and exceptions.)"
msgstr ""

#: ../../whatsnew/2.2.rst:583 ../../whatsnew/2.3.rst:169
msgid "Here's a sample usage of the :func:`generate_ints` generator::"
msgstr ""

#: ../../whatsnew/2.2.rst:600 ../../whatsnew/2.3.rst:186
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr ""

#: ../../whatsnew/2.2.rst:603 ../../whatsnew/2.3.rst:189
msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. "
":keyword:`!return` with a value, such as ``return 5``, is a syntax error "
"inside a generator function.  The end of the generator's results can also"
" be indicated by raising :exc:`StopIteration` manually, or by just "
"letting the flow of execution fall off the bottom of the function."
msgstr ""

#: ../../whatsnew/2.2.rst:611 ../../whatsnew/2.3.rst:197
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment"
" ``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. "
":file:`Lib/test/test_generators.py` contains a number of more interesting"
" examples.  The simplest one implements an in-order traversal of a tree "
"using generators recursively. ::"
msgstr ""

#: ../../whatsnew/2.2.rst:629 ../../whatsnew/2.3.rst:215
msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce "
"solutions for the N-Queens problem (placing $N$ queens on an $NxN$ chess "
"board so that no queen threatens another) and the Knight's Tour (a route "
"that takes a knight to every square of an $NxN$ chessboard without "
"visiting any square twice)."
msgstr ""

#: ../../whatsnew/2.2.rst:634 ../../whatsnew/2.3.rst:220
msgid ""
"The idea of generators comes from other programming languages, especially"
" Icon (https://www.cs.arizona.edu/icon/), where the idea of generators is"
" central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming "
"Language\" at https://www.cs.arizona.edu/icon/docs/ipd266.htm gives an "
"idea of what this looks like::"
msgstr ""

#: ../../whatsnew/2.2.rst:644 ../../whatsnew/2.3.rst:230
msgid ""
"In Icon the :func:`find` function returns the indexes at which the "
"substring \"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, "
"``i`` is first assigned a value of 3, but 3 is less than 5, so the "
"comparison fails, and Icon retries it with the second value of 23.  23 is"
" greater than 5, so the comparison now succeeds, and the code prints the "
"value 23 to the screen."
msgstr ""

#: ../../whatsnew/2.2.rst:650
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a "
"central concept.  Generators are considered a new part of the core Python"
" language, but learning or using them isn't compulsory; if they don't "
"solve any problems that you have, feel free to ignore them. One novel "
"feature of Python's interface as compared to Icon's is that a generator's"
" state is represented as a concrete object (the iterator) that can be "
"passed around to other functions or stored in a data structure."
msgstr ""

#: ../../whatsnew/2.2.rst:662 ../../whatsnew/2.3.rst:248
msgid ":pep:`255` - Simple Generators"
msgstr ""

#: ../../whatsnew/2.2.rst:662 ../../whatsnew/2.3.rst:248
msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented"
" mostly by Neil Schemenauer and Tim Peters, with other fixes from the "
"Python Labs crew."
msgstr ""

#: ../../whatsnew/2.2.rst:669 ../../whatsnew/2.4.rst:90
msgid "PEP 237: Unifying Long Integers and Integers"
msgstr ""

#: ../../whatsnew/2.2.rst:671
msgid ""
"In recent versions, the distinction between regular integers, which are "
"32-bit values on most machines, and long integers, which can be of "
"arbitrary size, was becoming an annoyance.  For example, on platforms "
"that support files larger than ``2**32`` bytes, the :meth:`tell` method "
"of file objects has to return a long integer. However, there were various"
" bits of Python that expected plain integers and would raise an error if "
"a long integer was provided instead.  For example, in Python 1.5, only "
"regular integers could be used as a slice index, and ``'abc'[1L:]`` would"
" raise a :exc:`TypeError` exception with the message 'slice index must be"
" int'."
msgstr ""

#: ../../whatsnew/2.2.rst:681
msgid ""
"Python 2.2 will shift values from short to long integers as required. The"
" 'L' suffix is no longer needed to indicate a long integer literal, as "
"now the compiler will choose the appropriate type.  (Using the 'L' suffix"
" will be discouraged in future 2.x versions of Python, triggering a "
"warning in Python 2.4, and probably dropped in Python 3.0.)  Many "
"operations that used to raise an :exc:`OverflowError` will now return a "
"long integer as their result.  For example::"
msgstr ""

#: ../../whatsnew/2.2.rst:694
msgid ""
"In most cases, integers and long integers will now be treated "
"identically.  You can still distinguish them with the :func:`type` built-"
"in function, but that's rarely needed."
msgstr ""

#: ../../whatsnew/2.2.rst:702 ../../whatsnew/2.4.rst:108
msgid ":pep:`237` - Unifying Long Integers and Integers"
msgstr ""

#: ../../whatsnew/2.2.rst:702
msgid ""
"Written by Moshe Zadka and Guido van Rossum.  Implemented mostly by Guido"
" van Rossum."
msgstr ""

#: ../../whatsnew/2.2.rst:709
msgid "PEP 238: Changing the Division Operator"
msgstr ""

#: ../../whatsnew/2.2.rst:711
msgid ""
"The most controversial change in Python 2.2 heralds the start of an "
"effort to fix an old design flaw that's been in Python from the "
"beginning. Currently Python's division operator, ``/``, behaves like C's "
"division operator when presented with two integer arguments: it returns "
"an integer result that's truncated down when there would be a fractional "
"part.  For example, ``3/2`` is 1, not 1.5, and ``(-1)/2`` is -1, not "
"-0.5.  This means that the results of division can vary unexpectedly "
"depending on the type of the two operands and because Python is "
"dynamically typed, it can be difficult to determine the possible types of"
" the operands."
msgstr ""

#: ../../whatsnew/2.2.rst:721
msgid ""
"(The controversy is over whether this is *really* a design flaw, and "
"whether it's worth breaking existing code to fix this.  It's caused "
"endless discussions on python-dev, and in July 2001 erupted into a storm "
"of acidly sarcastic postings on :newsgroup:`comp.lang.python`. I won't "
"argue for either side here and will stick to describing what's  "
"implemented in 2.2.  Read :pep:`238` for a summary of arguments and "
"counter-arguments.)"
msgstr ""

#: ../../whatsnew/2.2.rst:728
msgid ""
"Because this change might break code, it's being introduced very "
"gradually. Python 2.2 begins the transition, but the switch won't be "
"complete until Python 3.0."
msgstr ""

#: ../../whatsnew/2.2.rst:732
msgid ""
"First, I'll borrow some terminology from :pep:`238`.  \"True division\" "
"is the division that most non-programmers are familiar with: 3/2 is 1.5, "
"1/4 is 0.25, and so forth.  \"Floor division\" is what Python's ``/`` "
"operator currently does when given integer operands; the result is the "
"floor of the value returned by true division.  \"Classic division\" is "
"the current mixed behaviour of ``/``; it returns the result of floor "
"division when the operands are integers, and returns the result of true "
"division when one of the operands is a floating-point number."
msgstr ""

#: ../../whatsnew/2.2.rst:740
msgid "Here are the changes 2.2 introduces:"
msgstr ""

#: ../../whatsnew/2.2.rst:742
msgid ""
"A new operator, ``//``, is the floor division operator. (Yes, we know it "
"looks like C++'s comment symbol.)  ``//`` *always* performs floor "
"division no matter what the types of its operands are, so ``1 // 2`` is 0"
" and ``1.0 // 2.0`` is also 0.0."
msgstr ""

#: ../../whatsnew/2.2.rst:747
msgid ""
"``//`` is always available in Python 2.2; you don't need to enable it "
"using a ``__future__`` statement."
msgstr ""

#: ../../whatsnew/2.2.rst:750
msgid ""
"By including a ``from __future__ import division`` in a module, the ``/``"
" operator will be changed to return the result of true division, so "
"``1/2`` is 0.5.  Without the ``__future__`` statement, ``/`` still means "
"classic division. The default meaning of ``/`` will not change until "
"Python 3.0."
msgstr ""

#: ../../whatsnew/2.2.rst:755
msgid ""
"Classes can define methods called :meth:`__truediv__` and "
":meth:`__floordiv__` to overload the two division operators.  At the C "
"level, there are also slots in the :c:type:`PyNumberMethods` structure so"
" extension types can define the two operators."
msgstr ""

#: ../../whatsnew/2.2.rst:760
msgid ""
"Python 2.2 supports some command-line arguments for testing whether code "
"will work with the changed division semantics.  Running python with "
":option:`!-Q warn` will cause a warning to be issued whenever division is"
" applied to two integers.  You can use this to find code that's affected "
"by the change and fix it.  By default, Python 2.2 will simply perform "
"classic division without a warning; the warning will be turned on by "
"default in Python 2.3."
msgstr ""

#: ../../whatsnew/2.2.rst:770
msgid ":pep:`238` - Changing the Division Operator"
msgstr ""

#: ../../whatsnew/2.2.rst:771
msgid ""
"Written by Moshe Zadka and  Guido van Rossum.  Implemented by Guido van "
"Rossum.."
msgstr ""

#: ../../whatsnew/2.2.rst:777
msgid "Unicode Changes"
msgstr ""

#: ../../whatsnew/2.2.rst:779
msgid ""
"Python's Unicode support has been enhanced a bit in 2.2.  Unicode strings"
" are usually stored as UCS-2, as 16-bit unsigned integers. Python 2.2 can"
" also be compiled to use UCS-4, 32-bit unsigned integers, as its internal"
" encoding by supplying :option:`!--enable-unicode=ucs4` to the configure "
"script.   (It's also possible to specify :option:`!--disable-unicode` to "
"completely disable Unicode support.)"
msgstr ""

#: ../../whatsnew/2.2.rst:786
msgid ""
"When built to use UCS-4 (a \"wide Python\"), the interpreter can natively"
" handle Unicode characters from U+000000 to U+110000, so the range of "
"legal values for the :func:`unichr` function is expanded accordingly.  "
"Using an interpreter compiled to use UCS-2 (a \"narrow Python\"), values "
"greater than 65535 will still cause :func:`unichr` to raise a "
":exc:`ValueError` exception. This is all described in :pep:`261`, "
"\"Support for 'wide' Unicode characters\"; consult it for further "
"details."
msgstr ""

#: ../../whatsnew/2.2.rst:794
msgid ""
"Another change is simpler to explain. Since their introduction, Unicode "
"strings have supported an :meth:`encode` method to convert the string to "
"a selected encoding such as UTF-8 or Latin-1.  A symmetric "
"``decode([*encoding*])`` method has been added to 8-bit strings (though "
"not to Unicode strings) in 2.2. :meth:`decode` assumes that the string is"
" in the specified encoding and decodes it, returning whatever is returned"
" by the codec."
msgstr ""

#: ../../whatsnew/2.2.rst:801
msgid ""
"Using this new feature, codecs have been added for tasks not directly "
"related to Unicode.  For example, codecs have been added for uu-encoding,"
" MIME's base64 encoding, and compression with the :mod:`zlib` module::"
msgstr ""

#: ../../whatsnew/2.2.rst:822
msgid ""
"To convert a class instance to Unicode, a :meth:`__unicode__` method can "
"be defined by a class, analogous to :meth:`__str__`."
msgstr ""

#: ../../whatsnew/2.2.rst:825
msgid ""
":meth:`encode`, :meth:`decode`, and :meth:`__unicode__` were implemented "
"by Marc-Andr√© Lemburg.  The changes to support using UCS-4 internally "
"were implemented by Fredrik Lundh and Martin von L√∂wis."
msgstr ""

#: ../../whatsnew/2.2.rst:832
msgid ":pep:`261` - Support for 'wide' Unicode characters"
msgstr ""

#: ../../whatsnew/2.2.rst:833
msgid "Written by Paul Prescod."
msgstr ""

#: ../../whatsnew/2.2.rst:841
msgid ""
"In Python 2.1, statically nested scopes were added as an optional "
"feature, to be enabled by a ``from __future__ import nested_scopes`` "
"directive.  In 2.2 nested scopes no longer need to be specially enabled, "
"and are now always present.  The rest of this section is a copy of the "
"description of nested scopes from my \"What's New in Python 2.1\" "
"document; if you read it when 2.1 came out, you can skip the rest of this"
" section."
msgstr ""

#: ../../whatsnew/2.2.rst:848
msgid ""
"The largest change introduced in Python 2.1, and made complete in 2.2, is"
" to Python's scoping rules.  In Python 2.0, at any given time there are "
"at most three namespaces used to look up variable names: local, module-"
"level, and the built-in namespace.  This often surprised people because "
"it didn't match their intuitive expectations.  For example, a nested "
"recursive function definition doesn't work::"
msgstr ""

#: ../../whatsnew/2.2.rst:862
msgid ""
"The function :func:`g` will always raise a :exc:`NameError` exception, "
"because the binding of the name ``g`` isn't in either its local namespace"
" or in the module-level namespace.  This isn't much of a problem in "
"practice (how often do you recursively define interior functions like "
"this?), but this also made using the :keyword:`lambda` expression "
"clumsier, and this was a problem in practice. In code which uses "
":keyword:`!lambda` you can often find local variables being copied by "
"passing them as the default values of arguments. ::"
msgstr ""

#: ../../whatsnew/2.2.rst:879
msgid ""
"The most significant change to Python 2.2 is that static scoping has been"
" added to the language to fix this problem.  As a first effect, the "
"``name=name`` default argument is now unnecessary in the above example.  "
"Put simply, when a given variable name is not assigned a value within a "
"function (by an assignment, or the :keyword:`def`, :keyword:`class`, or "
":keyword:`import` statements), references to the variable will be looked "
"up in the local namespace of the enclosing scope.  A more detailed "
"explanation of the rules, and a dissection of the implementation, can be "
"found in the PEP."
msgstr ""

#: ../../whatsnew/2.2.rst:936
msgid ""
"The :mod:`xmlrpclib` module was contributed to the standard library by "
"Fredrik Lundh, providing support for writing XML-RPC clients.  XML-RPC is"
" a simple remote procedure call protocol built on top of HTTP and XML. "
"For example, the following snippet retrieves a list of RSS channels from "
"the O'Reilly Network, and then  lists the recent headlines for one "
"channel::"
msgstr ""

#: ../../whatsnew/2.2.rst:959
msgid ""
"The :mod:`SimpleXMLRPCServer` module makes it easy to create "
"straightforward XML-RPC servers.  See http://xmlrpc.scripting.com/ for "
"more information about XML-RPC."
msgstr ""

#: ../../whatsnew/2.2.rst:962
msgid ""
"The new :mod:`hmac` module implements the HMAC algorithm described by "
":rfc:`2104`. (Contributed by Gerhard H√§ring.)"
msgstr ""

#: ../../whatsnew/2.2.rst:965
msgid ""
"Several functions that originally returned lengthy tuples now return "
"pseudo-sequences that still behave like tuples but also have mnemonic "
"attributes such as memberst_mtime or :attr:`tm_year`. The enhanced "
"functions include :func:`stat`, :func:`fstat`, :func:`statvfs`, and "
":func:`fstatvfs` in the :mod:`os` module, and :func:`localtime`, "
":func:`gmtime`, and :func:`strptime` in the :mod:`time` module."
msgstr ""

#: ../../whatsnew/2.2.rst:972
msgid ""
"For example, to obtain a file's size using the old tuples, you'd end up "
"writing something like ``file_size = os.stat(filename)[stat.ST_SIZE]``, "
"but now this can be written more clearly as ``file_size = "
"os.stat(filename).st_size``."
msgstr ""

#: ../../whatsnew/2.2.rst:976
msgid "The original patch for this feature was contributed by Nick Mathewson."
msgstr ""

#: ../../whatsnew/2.2.rst:978
msgid ""
"The Python profiler has been extensively reworked and various errors in "
"its output have been corrected.  (Contributed by Fred L. Drake, Jr. and "
"Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.2.rst:981
msgid ""
"The :mod:`socket` module can be compiled to support IPv6; specify the "
":option:`!--enable-ipv6` option to Python's configure script.  "
"(Contributed by Jun-ichiro \"itojun\" Hagino.)"
msgstr ""

#: ../../whatsnew/2.2.rst:985
msgid ""
"Two new format characters were added to the :mod:`struct` module for "
"64-bit integers on platforms that support the C :c:type:`long long` type."
"  ``q`` is for a signed 64-bit integer, and ``Q`` is for an unsigned one."
"  The value is returned in Python's long integer type.  (Contributed by "
"Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.2.rst:990
msgid ""
"In the interpreter's interactive mode, there's a new built-in function "
":func:`help` that uses the :mod:`pydoc` module introduced in Python 2.1 "
"to provide interactive help. ``help(object)`` displays any available help"
" text about *object*.  :func:`help` with no argument puts you in an "
"online help utility, where you can enter the names of functions, classes,"
" or modules to read their help text. (Contributed by Guido van Rossum, "
"using Ka-Ping Yee's :mod:`pydoc` module.)"
msgstr ""

#: ../../whatsnew/2.2.rst:998
msgid ""
"Various bugfixes and performance improvements have been made to the SRE "
"engine underlying the :mod:`re` module.  For example, the :func:`re.sub` "
"and :func:`re.split` functions have been rewritten in C.  Another "
"contributed patch speeds up certain Unicode character ranges by a factor "
"of two, and a new :meth:`finditer`  method that returns an iterator over "
"all the non-overlapping matches in  a given string.  (SRE is maintained "
"by Fredrik Lundh.  The BIGCHARSET patch was contributed by Martin von "
"L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1006
msgid ""
"The :mod:`smtplib` module now supports :rfc:`2487`, \"Secure SMTP over "
"TLS\", so it's now possible to encrypt the SMTP traffic between a Python "
"program and the mail transport agent being handed a message.  "
":mod:`smtplib` also supports SMTP authentication.  (Contributed by "
"Gerhard H√§ring.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1011
msgid ""
"The :mod:`imaplib` module, maintained by Piers Lauder, has support for "
"several new extensions: the NAMESPACE extension defined in :rfc:`2342`, "
"SORT, GETACL and SETACL.  (Contributed by Anthony Baxter and Michel "
"Pelletier.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1015
msgid ""
"The :mod:`rfc822` module's parsing of email addresses is now compliant "
"with :rfc:`2822`, an update to :rfc:`822`.  (The module's name is *not* "
"going to be changed to ``rfc2822``.)  A new package, :mod:`email`, has "
"also been added for parsing and generating e-mail messages.  (Contributed"
" by Barry Warsaw, and arising out of his work on Mailman.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1021
msgid ""
"The :mod:`difflib` module now contains a new :class:`Differ` class for "
"producing human-readable lists of changes (a \"delta\") between two "
"sequences of lines of text.  There are also two generator functions, "
":func:`ndiff` and :func:`restore`, which respectively return a delta from"
" two sequences, or one of the original sequences from a delta. (Grunt "
"work contributed by David Goodger, from ndiff.py code by Tim Peters who "
"then did the generatorization.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1028
msgid ""
"New constants :const:`ascii_letters`, :const:`ascii_lowercase`, and "
":const:`ascii_uppercase` were added to the :mod:`string` module.  There "
"were several modules in the standard library that used "
":const:`string.letters` to mean the ranges A-Za-z, but that assumption is"
" incorrect when locales are in use, because :const:`string.letters` "
"varies depending on the set of legal characters defined by the current "
"locale.  The buggy modules have all been fixed to use "
":const:`ascii_letters` instead. (Reported by an unknown person; fixed by "
"Fred L. Drake, Jr.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1037
msgid ""
"The :mod:`mimetypes` module now makes it easier to use alternative MIME-"
"type databases by the addition of a :class:`MimeTypes` class, which takes"
" a list of filenames to be parsed.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1041
msgid ""
"A :class:`Timer` class was added to the :mod:`threading` module that "
"allows scheduling an activity to happen at some future time.  "
"(Contributed by Itamar Shtull-Trauring.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1049
msgid "Interpreter Changes and Fixes"
msgstr ""

#: ../../whatsnew/2.2.rst:1051
msgid ""
"Some of the changes only affect people who deal with the Python "
"interpreter at the C level because they're writing Python extension "
"modules, embedding the interpreter, or just hacking on the interpreter "
"itself. If you only write Python code, none of the changes described here"
" will affect you very much."
msgstr ""

#: ../../whatsnew/2.2.rst:1056
msgid ""
"Profiling and tracing functions can now be implemented in C, which can "
"operate at much higher speeds than Python-based functions and should "
"reduce the overhead of profiling and tracing.  This  will be of interest "
"to authors of development environments for Python.  Two new C functions "
"were added to Python's API, :c:func:`PyEval_SetProfile` and "
":c:func:`PyEval_SetTrace`. The existing :func:`sys.setprofile` and "
":func:`sys.settrace` functions still exist, and have simply been changed "
"to use the new C-level interface.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1065
msgid ""
"Another low-level API, primarily of interest to implementors of Python "
"debuggers and development tools, was added. "
":c:func:`PyInterpreterState_Head` and :c:func:`PyInterpreterState_Next` "
"let a caller walk through all the existing interpreter objects; "
":c:func:`PyInterpreterState_ThreadHead` and :c:func:`PyThreadState_Next` "
"allow looping over all the thread states for a given interpreter.  "
"(Contributed by David Beazley.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1072
msgid ""
"The C-level interface to the garbage collector has been changed to make "
"it easier to write extension types that support garbage collection and to"
" debug misuses of the functions. Various functions have slightly "
"different semantics, so a bunch of functions had to be renamed.  "
"Extensions that use the old API will still compile but will *not* "
"participate in garbage collection, so updating them for 2.2 should be "
"considered fairly high priority."
msgstr ""

#: ../../whatsnew/2.2.rst:1079
msgid ""
"To upgrade an extension module to the new API, perform the following "
"steps:"
msgstr ""

#: ../../whatsnew/2.2.rst:1081
msgid "Rename :c:func:`Py_TPFLAGS_GC` to :c:func:`PyTPFLAGS_HAVE_GC`."
msgstr ""

#: ../../whatsnew/2.2.rst:1084
msgid "Use :c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar` to allocate"
msgstr ""

#: ../../whatsnew/2.2.rst:1084
msgid "objects, and :c:func:`PyObject_GC_Del` to deallocate them."
msgstr ""

#: ../../whatsnew/2.2.rst:1087
msgid "Rename :c:func:`PyObject_GC_Init` to :c:func:`PyObject_GC_Track` and"
msgstr ""

#: ../../whatsnew/2.2.rst:1087
msgid ":c:func:`PyObject_GC_Fini` to :c:func:`PyObject_GC_UnTrack`."
msgstr ""

#: ../../whatsnew/2.2.rst:1089
msgid "Remove :c:func:`PyGC_HEAD_SIZE` from object size calculations."
msgstr ""

#: ../../whatsnew/2.2.rst:1091
msgid "Remove calls to :c:func:`PyObject_AS_GC` and :c:func:`PyObject_FROM_GC`."
msgstr ""

#: ../../whatsnew/2.2.rst:1093
msgid ""
"A new ``et`` format sequence was added to :c:func:`PyArg_ParseTuple`; "
"``et`` takes both a parameter and an encoding name, and converts the "
"parameter to the given encoding if the parameter turns out to be a "
"Unicode string, or leaves it alone if it's an 8-bit string, assuming it "
"to already be in the desired encoding.  This differs from the ``es`` "
"format character, which assumes that 8-bit strings are in Python's "
"default ASCII encoding and converts them to the specified new encoding. "
"(Contributed by M.-A. Lemburg, and used for the MBCS support on Windows "
"described in the following section.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1102
msgid ""
"A different argument parsing function, :c:func:`PyArg_UnpackTuple`, has "
"been added that's simpler and presumably faster.  Instead of specifying a"
" format string, the caller simply gives the minimum and maximum number of"
" arguments expected, and a set of pointers to :c:type:`PyObject\\*` "
"variables that will be filled in with argument values."
msgstr ""

#: ../../whatsnew/2.2.rst:1108
msgid ""
"Two new flags :const:`METH_NOARGS` and :const:`METH_O` are available in "
"method definition tables to simplify implementation of methods with no "
"arguments or a single untyped argument. Calling such methods is more "
"efficient than calling a corresponding method that uses "
":const:`METH_VARARGS`.  Also, the old :const:`METH_OLDARGS` style of "
"writing C methods is  now officially deprecated."
msgstr ""

#: ../../whatsnew/2.2.rst:1114
msgid ""
"Two new wrapper functions, :c:func:`PyOS_snprintf` and "
":c:func:`PyOS_vsnprintf` were added to provide  cross-platform "
"implementations for the relatively new :c:func:`snprintf` and "
":c:func:`vsnprintf` C lib APIs. In contrast to the standard "
":c:func:`sprintf` and :c:func:`vsprintf` functions, the Python versions "
"check the bounds of the buffer used to protect against buffer overruns. "
"(Contributed by M.-A. Lemburg.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1121
msgid ""
"The :c:func:`_PyTuple_Resize` function has lost an unused parameter, so "
"now it takes 2 parameters instead of 3.  The third argument was never "
"used, and can simply be discarded when porting code from earlier versions"
" to Python 2.2."
msgstr ""

#: ../../whatsnew/2.2.rst:1131
msgid ""
"As usual there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 527 patches applied and 683 bugs fixed between Python 2.1 and "
"2.2; 2.2.1 applied 139 patches and fixed 143 bugs; 2.2.2 applied 106 "
"patches and fixed 82 bugs.  These figures are likely to be "
"underestimates."
msgstr ""

#: ../../whatsnew/2.2.rst:1137 ../../whatsnew/2.3.rst:1973
msgid "Some of the more notable changes are:"
msgstr ""

#: ../../whatsnew/2.2.rst:1139
msgid ""
"The code for the MacOS port for Python, maintained by Jack Jansen, is now"
" kept in the main Python CVS tree, and many changes have been made to "
"support MacOS X."
msgstr ""

#: ../../whatsnew/2.2.rst:1142
msgid ""
"The most significant change is the ability to build Python as a "
"framework, enabled by supplying the :option:`!--enable-framework` option "
"to the configure script when compiling Python.  According to Jack Jansen,"
" \"This installs a self-contained Python installation plus the OS X "
"framework \"glue\" into :file:`/Library/Frameworks/Python.framework` (or "
"another location of choice). For now there is little immediate added "
"benefit to this (actually, there is the disadvantage that you have to "
"change your PATH to be able to find Python), but it is the basis for "
"creating a full-blown Python application, porting the MacPython IDE, "
"possibly using Python as a standard OSA scripting language and much "
"more.\""
msgstr ""

#: ../../whatsnew/2.2.rst:1153
msgid ""
"Most of the MacPython toolbox modules, which interface to MacOS APIs such"
" as windowing, QuickTime, scripting, etc. have been ported to OS X, but "
"they've been left commented out in :file:`setup.py`.  People who want to "
"experiment with these modules can uncomment them manually."
msgstr ""

#: ../../whatsnew/2.2.rst:1176
msgid ""
"Keyword arguments passed to built-in functions that don't take them now "
"cause a :exc:`TypeError` exception to be raised, with the message "
"\"*function* takes no keyword arguments\"."
msgstr ""

#: ../../whatsnew/2.2.rst:1180
msgid ""
"Weak references, added in Python 2.1 as an extension module, are now part"
" of the core because they're used in the implementation of new-style "
"classes.  The :exc:`ReferenceError` exception has therefore moved from "
"the :mod:`weakref` module to become a built-in exception."
msgstr ""

#: ../../whatsnew/2.2.rst:1185
msgid ""
"A new script, :file:`Tools/scripts/cleanfuture.py` by Tim Peters, "
"automatically removes obsolete ``__future__`` statements from Python "
"source code."
msgstr ""

#: ../../whatsnew/2.2.rst:1189
msgid ""
"An additional *flags* argument has been added to the built-in function "
":func:`compile`, so the behaviour of ``__future__`` statements can now be"
" correctly observed in simulated shells, such as those presented by IDLE "
"and other development environments.  This is described in :pep:`264`. "
"(Contributed by Michael Hudson.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1195
msgid ""
"The new license introduced with Python 1.6 wasn't GPL-compatible.  This "
"is fixed by some minor textual changes to the 2.2 license, so it's now "
"legal to embed Python inside a GPLed program again.  Note that Python "
"itself is not GPLed, but instead is under a license that's essentially "
"equivalent to the BSD license, same as it always was.  The license "
"changes were also applied to the Python 2.0.1 and 2.1.1 releases."
msgstr ""

#: ../../whatsnew/2.2.rst:1202
msgid ""
"When presented with a Unicode filename on Windows, Python will now "
"convert it to an MBCS encoded string, as used by the Microsoft file APIs."
"  As MBCS is explicitly used by the file APIs, Python's choice of ASCII "
"as the default encoding turns out to be an annoyance.  On Unix, the "
"locale's character set is used if ``locale.nl_langinfo(CODESET)`` is "
"available.  (Windows support was contributed by Mark Hammond with "
"assistance from Marc-Andr√© Lemburg. Unix support was added by Martin von "
"L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1210
msgid ""
"Large file support is now enabled on Windows.  (Contributed by Tim "
"Peters.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1212
msgid ""
"The :file:`Tools/scripts/ftpmirror.py` script now parses a :file:`.netrc`"
" file, if you have one. (Contributed by Mike Romberg.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1215
msgid ""
"Some features of the object returned by the :func:`xrange` function are "
"now deprecated, and trigger warnings when they're accessed; they'll "
"disappear in Python 2.3. :class:`xrange` objects tried to pretend they "
"were full sequence types by supporting slicing, sequence multiplication, "
"and the :keyword:`in` operator, but these features were rarely used and "
"therefore buggy.  The :meth:`tolist` method and the :attr:`start`, "
":attr:`stop`, and :attr:`step` attributes are also being deprecated.  At "
"the C level, the fourth argument to the :c:func:`PyRange_New` function, "
"``repeat``, has also been deprecated."
msgstr ""

#: ../../whatsnew/2.2.rst:1224
msgid ""
"There were a bunch of patches to the dictionary implementation, mostly to"
" fix potential core dumps if a dictionary contains objects that sneakily "
"changed their hash value, or mutated the dictionary they were contained "
"in. For a while python-dev fell into a gentle rhythm of Michael Hudson "
"finding a case that dumped core, Tim Peters fixing the bug, Michael "
"finding another case, and round and round it went."
msgstr ""

#: ../../whatsnew/2.2.rst:1231
msgid ""
"On Windows, Python can now be compiled with Borland C thanks to a number "
"of patches contributed by Stephen Hansen, though the result isn't fully "
"functional yet.  (But this *is* progress...)"
msgstr ""

#: ../../whatsnew/2.2.rst:1235
msgid ""
"Another Windows enhancement: Wise Solutions generously offered PythonLabs"
" use of their InstallerMaster 8.1 system.  Earlier PythonLabs Windows "
"installers used Wise 5.0a, which was beginning to show its age.  "
"(Packaged up by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1239
msgid ""
"Files ending in ``.pyw`` can now be imported on Windows. ``.pyw`` is a "
"Windows-only thing, used to indicate that a script needs to be run using "
"PYTHONW.EXE instead of PYTHON.EXE in order to prevent a DOS console from "
"popping up to display the output.  This patch makes it possible to import"
" such scripts, in case they're also usable as modules.  (Implemented by "
"David Bolen.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1245
msgid ""
"On platforms where Python uses the C :c:func:`dlopen` function  to load "
"extension modules, it's now possible to set the flags used  by "
":c:func:`dlopen` using the :func:`sys.getdlopenflags` and "
":func:`sys.setdlopenflags` functions. (Contributed by Bram Stolk.)"
msgstr ""

#: ../../whatsnew/2.2.rst:1250
msgid ""
"The :func:`pow` built-in function no longer supports 3 arguments when "
"floating-point numbers are supplied. ``pow(x, y, z)`` returns ``(x**y) % "
"z``, but this is never useful for floating point numbers, and the final "
"result varies unpredictably depending on the platform.  A call such as "
"``pow(2.0, 8.0, 7.0)`` will now raise a :exc:`TypeError` exception."
msgstr ""

#: ../../whatsnew/2.2.rst:1262
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this "
"article: Fred Bremmer, Keith Briggs, Andrew Dalke, Fred L. Drake, Jr., "
"Carel Fellinger, David Goodger, Mark Hammond, Stephen Hansen, Michael "
"Hudson, Jack Jansen, Marc-Andr√© Lemburg, Martin von L√∂wis, Fredrik Lundh,"
" Michael McLay, Nick Mathewson, Paul Moore, Gustavo Niemeyer, Don "
"O'Donnell, Joonas Paalasma, Tim Peters, Jens Quade, Tom Reinhardt, Neil "
"Schemenauer, Guido van Rossum, Greg Ward, Edward Welbourne."
msgstr ""

#: ../../whatsnew/2.3.rst:3
msgid "What's New in Python 2.3"
msgstr ""

#: ../../whatsnew/2.3.rst:11
msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr ""

#: ../../whatsnew/2.3.rst:14
msgid ""
"The main themes for Python 2.3 are polishing some of the features added "
"in 2.2, adding various small but useful enhancements to the core "
"language, and expanding the standard library.  The new object model "
"introduced in the previous version has benefited from 18 months of "
"bugfixes and from optimization efforts that have improved the performance"
" of new-style classes.  A few new built-in functions have been added such"
" as :func:`sum` and :func:`enumerate`.  The :keyword:`in` operator can "
"now be used for substring searches (e.g. ``\"ab\" in \"abc\"`` returns "
":const:`True`)."
msgstr ""

#: ../../whatsnew/2.3.rst:23
msgid ""
"Some of the many new library features include Boolean, set, heap, and "
"date/time data types, the ability to import modules from ZIP-format "
"archives, metadata support for the long-awaited Python catalog, an "
"updated version of IDLE, and modules for logging messages, wrapping text,"
" parsing CSV files, processing command-line options, using BerkeleyDB "
"databases...  the list of new and enhanced modules is lengthy."
msgstr ""

#: ../../whatsnew/2.3.rst:30
msgid ""
"This article doesn't attempt to provide a complete specification of the "
"new features, but instead provides a convenient overview.  For full "
"details, you should refer to the documentation for Python 2.3, such as "
"the Python Library Reference and the Python Reference Manual.  If you "
"want to understand the complete implementation and design rationale, "
"refer to the PEP for a particular new feature."
msgstr ""

#: ../../whatsnew/2.3.rst:41
msgid "PEP 218: A Standard Set Datatype"
msgstr ""

#: ../../whatsnew/2.3.rst:43
msgid ""
"The new :mod:`sets` module contains an implementation of a set datatype."
"  The :class:`Set` class is for mutable sets, sets that can have members "
"added and removed.  The :class:`ImmutableSet` class is for sets that "
"can't be modified, and instances of :class:`ImmutableSet` can therefore "
"be used as dictionary keys. Sets are built on top of dictionaries, so the"
" elements within a set must be hashable."
msgstr ""

#: ../../whatsnew/2.3.rst:50
msgid "Here's a simple example::"
msgstr ""

#: ../../whatsnew/2.3.rst:66
msgid ""
"The union and intersection of sets can be computed with the :meth:`union`"
" and :meth:`intersection` methods; an alternative notation uses the "
"bitwise operators ``&`` and ``|``. Mutable sets also have in-place "
"versions of these methods, :meth:`union_update` and "
":meth:`intersection_update`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:86
msgid ""
"It's also possible to take the symmetric difference of two sets.  This is"
" the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in-place version with the ungainly name "
":meth:`symmetric_difference_update`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:100
msgid ""
"There are also :meth:`issubset` and :meth:`issuperset` methods for "
"checking whether one set is a subset or superset of another::"
msgstr ""

#: ../../whatsnew/2.3.rst:117 ../../whatsnew/2.4.rst:83
msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ""

#: ../../whatsnew/2.3.rst:117
msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex "
"Martelli, and GvR."
msgstr ""

#: ../../whatsnew/2.3.rst:128
msgid ""
"In Python 2.2, generators were added as an optional feature, to be "
"enabled by a ``from __future__ import generators`` directive.  In 2.3 "
"generators no longer need to be specially enabled, and are now always "
"present; this means that :keyword:`yield` is now always a keyword.  The "
"rest of this section is a copy of the description of generators from the "
"\"What's New in Python 2.2\" document; if you read it back when Python "
"2.2 came out, you can skip the rest of this section."
msgstr ""

#: ../../whatsnew/2.3.rst:136
msgid ""
"You're doubtless familiar with how function calls work in Python or C. "
"When you call a function, it gets a private namespace where its local "
"variables are created.  When the function reaches a :keyword:`return` "
"statement, the local variables are destroyed and the resulting value is "
"returned to the caller.  A later call to the same function will get a "
"fresh new set of local variables. But, what if the local variables "
"weren't thrown away on exiting a function? What if you could later resume"
" the function where it left off?  This is what generators provide; they "
"can be thought of as resumable functions."
msgstr ""

#: ../../whatsnew/2.3.rst:151
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`!yield` statement is a generator "
"function; this is detected by Python's bytecode compiler which compiles "
"the function specially as a result."
msgstr ""

#: ../../whatsnew/2.3.rst:156
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator "
"protocol.  On executing the :keyword:`yield` statement, the generator "
"outputs the value of ``i``, similar to a :keyword:`return` statement.  "
"The big difference between :keyword:`!yield` and a :keyword:`!return` "
"statement is that on reaching a :keyword:`!yield` the generator's state "
"of execution is suspended and local variables are preserved.  On the next"
" call to the generator's ``.next()`` method, the function will resume "
"executing immediately after the :keyword:`!yield` statement.  (For "
"complicated reasons, the :keyword:`!yield` statement isn't allowed inside"
" the :keyword:`try` block of a :keyword:`!try`...\\ :keyword:`!finally` "
"statement; read :pep:`255` for a full explanation of the interaction "
"between :keyword:`!yield` and exceptions.)"
msgstr ""

#: ../../whatsnew/2.3.rst:236
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a "
"central concept.  Generators are considered part of the core Python "
"language, but learning or using them isn't compulsory; if they don't "
"solve any problems that you have, feel free to ignore them. One novel "
"feature of Python's interface as compared to Icon's is that a generator's"
" state is represented as a concrete object (the iterator) that can be "
"passed around to other functions or stored in a data structure."
msgstr ""

#: ../../whatsnew/2.3.rst:257
msgid "PEP 263: Source Code Encodings"
msgstr ""

#: ../../whatsnew/2.3.rst:259
msgid ""
"Python source files can now be declared as being in different character "
"set encodings.  Encodings are declared by including a specially formatted"
" comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr ""

#: ../../whatsnew/2.3.rst:267
msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with "
"8-bit characters and have no encoding declaration will result in a "
":exc:`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will"
" be a syntax error."
msgstr ""

#: ../../whatsnew/2.3.rst:273
msgid ""
"The encoding declaration only affects Unicode string literals, which will"
" be converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr ""

#: ../../whatsnew/2.3.rst:282
msgid ":pep:`263` - Defining Python Source Code Encodings"
msgstr ""

#: ../../whatsnew/2.3.rst:282
msgid ""
"Written by Marc-Andr√© Lemburg and Martin von L√∂wis; implemented by Suzuki"
" Hisao and Martin von L√∂wis."
msgstr ""

#: ../../whatsnew/2.3.rst:289
msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr ""

#: ../../whatsnew/2.3.rst:291
msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a"
" ZIP-format archive.  You don't need to import the module explicitly; it "
"will be automatically imported if a ZIP archive's filename is added to "
"``sys.path``. For example:"
msgstr ""

#: ../../whatsnew/2.3.rst:314
msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The "
"ZIP archive can contain any kind of files, but only files named "
":file:`\\*.py`, :file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If "
"an archive only contains :file:`\\*.py` files, Python will not attempt to"
" modify the archive by adding the corresponding :file:`\\*.pyc` file, "
"meaning that if a ZIP archive doesn't contain :file:`\\*.pyc` files, "
"importing may be rather slow."
msgstr ""

#: ../../whatsnew/2.3.rst:321
msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would "
"only import from the :file:`lib/` subdirectory within the archive."
msgstr ""

#: ../../whatsnew/2.3.rst:331
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ""

#: ../../whatsnew/2.3.rst:329
msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. "
"Python 2.3 follows the specification in :pep:`273`,  but uses an "
"implementation written by Just van Rossum  that uses the import hooks "
"described in :pep:`302`. See section :ref:`section-pep302` for a "
"description of the new import hooks."
msgstr ""

#: ../../whatsnew/2.3.rst:338
msgid "PEP 277: Unicode file name support for Windows NT"
msgstr ""

#: ../../whatsnew/2.3.rst:340
msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte "
"strings, which is inadequate because it renders some file names "
"inaccessible."
msgstr ""

#: ../../whatsnew/2.3.rst:344
msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations"
" of the file system) for all functions that expect file names, most "
"notably the :func:`open` built-in function. If a Unicode string is passed"
" to :func:`os.listdir`, Python now returns a list of Unicode strings.  A "
"new function, :func:`os.getcwdu`, returns the current directory as a "
"Unicode string."
msgstr ""

#: ../../whatsnew/2.3.rst:350
msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr ""

#: ../../whatsnew/2.3.rst:353
msgid ""
"Other systems also allow Unicode strings as file names but convert them "
"to byte strings before passing them to the system, which can cause a "
":exc:`UnicodeError` to be raised. Applications can test whether arbitrary"
" Unicode strings are supported as file names by checking "
":attr:`os.path.supports_unicode_filenames`, a Boolean value."
msgstr ""

#: ../../whatsnew/2.3.rst:359
msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr ""

#: ../../whatsnew/2.3.rst:365
msgid ":pep:`277` - Unicode file name support for Windows NT"
msgstr ""

#: ../../whatsnew/2.3.rst:365
msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von L√∂wis, "
"and Mark Hammond."
msgstr ""

#: ../../whatsnew/2.3.rst:375
msgid "PEP 278: Universal Newline Support"
msgstr ""

#: ../../whatsnew/2.3.rst:377
msgid ""
"The three major operating systems used today are Microsoft Windows, "
"Apple's Macintosh OS, and the various Unix derivatives.  A minor "
"irritation of cross-platform work  is that these three platforms all use "
"different characters to mark the ends of lines in text files.  Unix uses "
"the linefeed (ASCII character 10), MacOS uses the carriage return (ASCII "
"character 13), and Windows uses a two-character sequence of a carriage "
"return plus a newline."
msgstr ""

#: ../../whatsnew/2.3.rst:384
msgid ""
"Python's file objects can now support end of line conventions other than "
"the one followed by the platform on which Python is running. Opening a "
"file with the mode ``'U'`` or ``'rU'`` will open a file for reading in "
":term:`universal newlines` mode.  All three line ending conventions will "
"be translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`read` and :meth:`readline`."
msgstr ""

#: ../../whatsnew/2.3.rst:391
msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`execfile` function.  This means that "
"Python modules can be shared between all three operating systems without "
"needing to convert the line-endings."
msgstr ""

#: ../../whatsnew/2.3.rst:396
msgid ""
"This feature can be disabled when compiling Python by specifying the "
":option:`!--without-universal-newlines` switch when running Python's "
":program:`configure` script."
msgstr ""

#: ../../whatsnew/2.3.rst:403
msgid ":pep:`278` - Universal Newline Support"
msgstr ""

#: ../../whatsnew/2.3.rst:404
msgid "Written and implemented by Jack Jansen."
msgstr ""

#: ../../whatsnew/2.3.rst:412
msgid "PEP 279: enumerate()"
msgstr ""

#: ../../whatsnew/2.3.rst:414
msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit"
" clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a"
" sequence, returns an iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""

#: ../../whatsnew/2.3.rst:419
msgid "A common idiom to change every element of a list looks like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:426
msgid "This can be rewritten using :func:`enumerate` as::"
msgstr ""

#: ../../whatsnew/2.3.rst:435
msgid ":pep:`279` - The enumerate() built-in function"
msgstr ""

#: ../../whatsnew/2.3.rst:436
msgid "Written and implemented by Raymond D. Hettinger."
msgstr ""

#: ../../whatsnew/2.3.rst:442
msgid "PEP 282: The logging Package"
msgstr ""

#: ../../whatsnew/2.3.rst:444
msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating"
" logging output which can then be filtered and processed in various ways."
"  A configuration file written in a standard format can be used to "
"control the logging behavior of a program.  Python includes handlers that"
" will write log records to standard error or to a file or socket, send "
"them to the system log, or even e-mail them to a particular address; of "
"course, it's also possible to write your own handler classes."
msgstr ""

#: ../../whatsnew/2.3.rst:453
msgid ""
"The :class:`Logger` class is the primary class. Most application code "
"will deal with one or more :class:`Logger` objects, each one used by a "
"particular subsystem of the application. Each :class:`Logger` is "
"identified by a name, and names are organized into a hierarchy using "
"``.``  as the component separator. For example, you might have "
":class:`Logger` instances named ``server``, ``server.auth`` and "
"``server.network``.  The latter two instances are below ``server`` in the"
" hierarchy.  This means that if you turn up the verbosity for ``server`` "
"or direct ``server`` messages to a different handler, the changes will "
"also apply to records logged to ``server.auth`` and ``server.network``. "
"There's also a root :class:`Logger` that's the parent of all other "
"loggers."
msgstr ""

#: ../../whatsnew/2.3.rst:464
msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr ""

#: ../../whatsnew/2.3.rst:475 ../../whatsnew/2.3.rst:500
#: ../../whatsnew/2.6.rst:642
msgid "This produces the following output::"
msgstr ""

#: ../../whatsnew/2.3.rst:481
msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the "
":meth:`setLevel` method on the root logger."
msgstr ""

#: ../../whatsnew/2.3.rst:486
msgid ""
"Notice the :func:`warning` call's use of string formatting operators; all"
" of the functions for logging messages take the arguments ``(msg, arg1, "
"arg2, ...)`` and log the string resulting from ``msg % (arg1, arg2, "
"...)``."
msgstr ""

#: ../../whatsnew/2.3.rst:490
msgid ""
"There's also an :func:`exception` function that records the most recent "
"traceback.  Any of the other functions will also record the traceback if "
"you specify a true value for the keyword argument *exc_info*. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:508
msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The ``getLogger(name)`` function is used to get a particular log,"
" creating it if it doesn't exist yet. ``getLogger(None)`` returns the "
"root logger. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:519
msgid ""
"Log records are usually propagated up the hierarchy, so a message logged "
"to ``server.auth`` is also seen by ``server`` and ``root``, but a "
":class:`Logger` can prevent this by setting its :attr:`propagate` "
"attribute to :const:`False`."
msgstr ""

#: ../../whatsnew/2.3.rst:523
msgid ""
"There are more classes provided by the :mod:`logging` package that can be"
" customized.  When a :class:`Logger` instance is told to log a message, "
"it creates a :class:`LogRecord` instance that is sent to any number of "
"different :class:`Handler` instances.  Loggers and handlers can also have"
" an attached list of filters, and each filter can cause the "
":class:`LogRecord` to be ignored or can modify the record before passing "
"it along.  When they're finally output, :class:`LogRecord` instances are "
"converted to text by a :class:`Formatter` class.  All of these classes "
"can be replaced by your own specially-written classes."
msgstr ""

#: ../../whatsnew/2.3.rst:533
msgid ""
"With all of these features the :mod:`logging` package should provide "
"enough flexibility for even the most complicated applications.  This is "
"only an incomplete overview of its features, so please see the package's "
"reference documentation for all of the details.  Reading :pep:`282` will "
"also be helpful."
msgstr ""

#: ../../whatsnew/2.3.rst:541
msgid ":pep:`282` - A Logging System"
msgstr ""

#: ../../whatsnew/2.3.rst:542
msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr ""

#: ../../whatsnew/2.3.rst:550
msgid "PEP 285: A Boolean Type"
msgstr ""

#: ../../whatsnew/2.3.rst:552
msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to "
"the :mod:`__builtin__` module, :const:`True` and :const:`False`.  "
"(:const:`True` and :const:`False` constants were added to the built-ins "
"in Python 2.2.1, but the 2.2.1 versions are simply set to integer values "
"of 1 and 0 and aren't a different type.)"
msgstr ""

#: ../../whatsnew/2.3.rst:558
msgid ""
"The type object for this new type is named :class:`bool`; the constructor"
" for it takes any Python value and converts it to :const:`True` or "
":const:`False`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:570
msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:581
msgid ""
"Python's Booleans were added with the primary goal of making code "
"clearer.  For example, if you're reading a function and encounter the "
"statement ``return 1``, you might wonder whether the ``1`` represents a "
"Boolean truth value, an index, or a coefficient that multiplies some "
"other quantity.  If the statement is ``return True``, however, the "
"meaning of the return value is quite clear."
msgstr ""

#: ../../whatsnew/2.3.rst:587
msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking."
"  A very strict language such as Pascal would also prevent you performing"
" arithmetic with Booleans, and would require that the expression in an "
":keyword:`if` statement always evaluate to a Boolean result.  Python is "
"not this strict and never will be, as :pep:`285` explicitly says.  This "
"means you can still use any expression in an :keyword:`!if` statement, "
"even ones that evaluate to a list or tuple or some random object.  The "
"Boolean type is a subclass of the :class:`int` class so that arithmetic "
"using a Boolean still works. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:605
msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings "
"``'True'`` and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""

#: ../../whatsnew/2.3.rst:613
msgid ":pep:`285` - Adding a bool type"
msgstr ""

#: ../../whatsnew/2.3.rst:614
msgid "Written and implemented by GvR."
msgstr ""

#: ../../whatsnew/2.3.rst:620
msgid "PEP 293: Codec Error Handling Callbacks"
msgstr ""

#: ../../whatsnew/2.3.rst:622
msgid ""
"When encoding a Unicode string into a byte string, unencodable characters"
" may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), \"ignore\""
" (skipping the character), or \"replace\" (using a question mark in the "
"output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr ""

#: ../../whatsnew/2.3.rst:630
msgid ""
"Python now has a flexible framework to add different processing "
"strategies.  New error handlers can be added with "
":func:`codecs.register_error`, and codecs then can access the error "
"handler with :func:`codecs.lookup_error`. An equivalent C API has been "
"added for codecs written in C. The error handler gets the necessary state"
" information such as the string being converted, the position in the "
"string where the error was detected, and the target encoding.  The "
"handler can then either raise an exception or return a replacement "
"string."
msgstr ""

#: ../../whatsnew/2.3.rst:638
msgid ""
"Two additional error handlers have been implemented using this framework:"
" \"backslashreplace\" uses Python backslash quoting to represent "
"unencodable characters and \"xmlcharrefreplace\" emits XML character "
"references."
msgstr ""

#: ../../whatsnew/2.3.rst:645
msgid ":pep:`293` - Codec Error Handling Callbacks"
msgstr ""

#: ../../whatsnew/2.3.rst:646
msgid "Written and implemented by Walter D√∂rwald."
msgstr ""

#: ../../whatsnew/2.3.rst:654
msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr ""

#: ../../whatsnew/2.3.rst:656
msgid ""
"Support for the long-requested Python catalog makes its first appearance "
"in 2.3."
msgstr ""

#: ../../whatsnew/2.3.rst:658
msgid ""
"The heart of the catalog is the new Distutils :command:`register` "
"command. Running ``python setup.py register`` will collect the metadata "
"describing a package, such as its name, version, maintainer, description,"
" &c., and send it to a central catalog server.  The resulting catalog is "
"available from https://pypi.org."
msgstr ""

#: ../../whatsnew/2.3.rst:664
msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* "
"keyword argument has been added to the Distutils :func:`setup` function."
"  A list of `Trove <http://catb.org/~esr/trove/>`_-style strings can be "
"supplied to help classify the software."
msgstr ""

#: ../../whatsnew/2.3.rst:669
msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr ""

#: ../../whatsnew/2.3.rst:688
msgid ""
"The full list of classifiers can be obtained by running  ``python "
"setup.py register --list-classifiers``."
msgstr ""

#: ../../whatsnew/2.3.rst:694
msgid ":pep:`301` - Package Index and Metadata for Distutils"
msgstr ""

#: ../../whatsnew/2.3.rst:695
msgid "Written and implemented by Richard Jones."
msgstr ""

#: ../../whatsnew/2.3.rst:703
msgid "PEP 302: New Import Hooks"
msgstr ""

#: ../../whatsnew/2.3.rst:705
msgid ""
"While it's been possible to write custom import hooks ever since the "
":mod:`ihooks` module was introduced in Python 1.3, no one has ever been "
"really happy with it because writing new import hooks is difficult and "
"messy.  There have been various proposed alternatives such as the "
":mod:`imputil` and :mod:`iu` modules, but none of them has ever gained "
"much acceptance, and none of them were easily usable from C code."
msgstr ""

#: ../../whatsnew/2.3.rst:712
msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`iu` module.  Three new items  are added to the "
":mod:`sys` module:"
msgstr ""

#: ../../whatsnew/2.3.rst:716
msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either "
"returns an importer object that will handle imports from this path or "
"raises an :exc:`ImportError` exception if it can't handle this path."
msgstr ""

#: ../../whatsnew/2.3.rst:721
msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so "
"``sys.path_hooks`` will only need to be traversed once for each path."
msgstr ""

#: ../../whatsnew/2.3.rst:724
msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user "
"code can add objects to it.  Additional built-in and frozen modules can "
"be imported by an object added to this list."
msgstr ""

#: ../../whatsnew/2.3.rst:729
msgid ""
"Importer objects must have a single method, ``find_module(fullname, "
"path=None)``.  *fullname* will be a module or package name, e.g. "
"``string`` or ``distutils.core``.  :meth:`find_module` must return a "
"loader object that has a single method, ``load_module(fullname)``, that "
"creates and returns the corresponding module object."
msgstr ""

#: ../../whatsnew/2.3.rst:735
msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something "
"like this (simplified a bit; see :pep:`302` for the full details)::"
msgstr ""

#: ../../whatsnew/2.3.rst:760
msgid ":pep:`302` - New Import Hooks"
msgstr ""

#: ../../whatsnew/2.3.rst:761
msgid "Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr ""

#: ../../whatsnew/2.3.rst:769
msgid "PEP 305: Comma-separated Files"
msgstr ""

#: ../../whatsnew/2.3.rst:771
msgid ""
"Comma-separated files are a format frequently used for exporting data "
"from databases and spreadsheets.  Python 2.3 adds a parser for comma-"
"separated files."
msgstr ""

#: ../../whatsnew/2.3.rst:774
msgid "Comma-separated format is deceptively simple at first glance::"
msgstr ""

#: ../../whatsnew/2.3.rst:778
msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss"
" in string data that can contain commas, and things get more "
"complicated::"
msgstr ""

#: ../../whatsnew/2.3.rst:783
msgid ""
"A big ugly regular expression can parse this, but using the new  "
":mod:`csv` package is much simpler::"
msgstr ""

#: ../../whatsnew/2.3.rst:793
msgid ""
"The :func:`reader` function takes a number of different options. The "
"field separator isn't limited to the comma and can be changed to any "
"character, and so can the quoting and line-ending characters."
msgstr ""

#: ../../whatsnew/2.3.rst:797
msgid ""
"Different dialects of comma-separated files can be defined and "
"registered; currently there are two dialects, both used by Microsoft "
"Excel. A separate :class:`csv.writer` class will generate comma-separated"
" files from a succession of tuples or lists, quoting strings that contain"
" the delimiter."
msgstr ""

#: ../../whatsnew/2.3.rst:806
msgid ":pep:`305` - CSV File API"
msgstr ""

#: ../../whatsnew/2.3.rst:806
msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip"
" Montanaro, Cliff Wells."
msgstr ""

#: ../../whatsnew/2.3.rst:815
msgid "PEP 307: Pickle Enhancements"
msgstr ""

#: ../../whatsnew/2.3.rst:817
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules received some attention "
"during the 2.3 development cycle.  In 2.2, new-style classes could be "
"pickled without difficulty, but they weren't pickled very compactly; "
":pep:`307` quotes a trivial example where a new-style class results in a "
"pickled string three times longer than that for a classic class."
msgstr ""

#: ../../whatsnew/2.3.rst:823
msgid ""
"The solution was to invent a new pickle protocol.  The "
":func:`pickle.dumps` function has supported a text-or-binary flag  for a "
"long time.  In 2.3, this flag is redefined from a Boolean to an integer: "
"0 is the old text-mode pickle format, 1 is the old binary format, and now"
" 2 is a new 2.3-specific format.  A new constant, "
":const:`pickle.HIGHEST_PROTOCOL`, can be used to select the fanciest "
"protocol available."
msgstr ""

#: ../../whatsnew/2.3.rst:830
msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle`"
" provided hooks for trying to prevent unsafe classes from being unpickled"
" (specifically, a :attr:`__safe_for_unpickling__` attribute), but none of"
" this code was ever audited and therefore it's all been ripped out in "
"2.3.  You should not unpickle untrusted data in any version of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:836
msgid ""
"To reduce the pickling overhead for new-style classes, a new interface "
"for customizing pickling was added using three special methods: "
":meth:`__getstate__`, :meth:`__setstate__`, and :meth:`__getnewargs__`.  "
"Consult :pep:`307` for the full semantics  of these methods."
msgstr ""

#: ../../whatsnew/2.3.rst:841
msgid ""
"As a way to compress pickles yet further, it's now possible to use "
"integer codes instead of long strings to identify pickled classes. The "
"Python Software Foundation will maintain a list of standardized codes; "
"there's also a range of codes for private use.  Currently no codes have "
"been specified."
msgstr ""

#: ../../whatsnew/2.3.rst:849
msgid ":pep:`307` - Extensions to the pickle protocol"
msgstr ""

#: ../../whatsnew/2.3.rst:850
msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr ""

#: ../../whatsnew/2.3.rst:858
msgid "Extended Slices"
msgstr ""

#: ../../whatsnew/2.3.rst:860
msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third"
" \"step\" or \"stride\" argument.  For example, these are all legal "
"Python syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added "
"to Python at the request of the developers of Numerical Python, which "
"uses the third argument extensively.  However, Python's built-in list, "
"tuple, and string sequence types have never supported this feature, "
"raising a :exc:`TypeError` if you tried it. Michael Hudson contributed a "
"patch to fix this shortcoming."
msgstr ""

#: ../../whatsnew/2.3.rst:868
msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr ""

#: ../../whatsnew/2.3.rst:875
msgid ""
"Negative values also work to make a copy of the same list in reverse "
"order::"
msgstr ""

#: ../../whatsnew/2.3.rst:880
msgid "This also works for tuples, arrays, and strings::"
msgstr ""

#: ../../whatsnew/2.3.rst:888
msgid ""
"If you have a mutable sequence such as a list or an array you can assign "
"to or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice"
" can be used to change the length of the sequence::"
msgstr ""

#: ../../whatsnew/2.3.rst:900
msgid ""
"Extended slices aren't this flexible.  When assigning to an extended "
"slice, the list on the right hand side of the statement must contain the "
"same number of items as the slice it is replacing::"
msgstr ""

#: ../../whatsnew/2.3.rst:917
msgid "Deletion is more straightforward::"
msgstr ""

#: ../../whatsnew/2.3.rst:928
msgid ""
"One can also now pass slice objects to the :meth:`__getitem__` methods of"
" the built-in sequences::"
msgstr ""

#: ../../whatsnew/2.3.rst:934
msgid "Or use slice objects directly in subscripts::"
msgstr ""

#: ../../whatsnew/2.3.rst:939
msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method ``indices(length)`` which, given the length of "
"a sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`indices` handles omitted and out-of-"
"bounds indices in a manner consistent with regular slices (and this "
"innocuous phrase hides a welter of confusing details!).  The method is "
"intended to be used like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:957
msgid ""
"From this example you can also see that the built-in :class:`slice` "
"object is now the type object for the slice type, and is no longer a "
"function.  This is consistent with Python 2.2, where :class:`int`, "
":class:`str`, etc., underwent the same change."
msgstr ""

#: ../../whatsnew/2.3.rst:966 ../../whatsnew/2.4.rst:774
#: ../../whatsnew/2.5.rst:974 ../../whatsnew/2.6.rst:1485
#: ../../whatsnew/2.7.rst:672 ../../whatsnew/3.1.rst:116
#: ../../whatsnew/3.2.rst:435 ../../whatsnew/3.3.rst:776
#: ../../whatsnew/3.4.rst:401 ../../whatsnew/3.5.rst:701
#: ../../whatsnew/3.6.rst:738 ../../whatsnew/3.7.rst:494
#: ../../whatsnew/3.8.rst:385
msgid "Other Language Changes"
msgstr ""

#: ../../whatsnew/2.3.rst:968
msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr ""

#: ../../whatsnew/2.3.rst:970
msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ""

#: ../../whatsnew/2.3.rst:973
msgid ""
"A new built-in function :func:`enumerate` was added, as described in "
"section :ref:`section-enumerate` of this document."
msgstr ""

#: ../../whatsnew/2.3.rst:976
msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with"
" the built-in :class:`bool` type, as described in section :ref:`section-"
"bool` of this document."
msgstr ""

#: ../../whatsnew/2.3.rst:980
msgid ""
"The :func:`int` type constructor will now return a long integer instead "
"of raising an :exc:`OverflowError` when a string or floating-point number"
" is too large to fit into an integer.  This can lead to the paradoxical "
"result that ``isinstance(int(expression), int)`` is false, but that seems"
" unlikely to cause problems in practice."
msgstr ""

#: ../../whatsnew/2.3.rst:986
msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr ""

#: ../../whatsnew/2.3.rst:989
msgid ""
"A new built-in function, ``sum(iterable, start=0)``,  adds up the numeric"
" items in the iterable object and returns their sum.  :func:`sum` only "
"accepts numbers, meaning that you can't use it to concatenate a bunch of "
"strings. (Contributed by Alex Martelli.)"
msgstr ""

#: ../../whatsnew/2.3.rst:994
msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the "
"list when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""

#: ../../whatsnew/2.3.rst:999
msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to "
"limit the search to  only part of the list."
msgstr ""

#: ../../whatsnew/2.3.rst:1003
msgid ""
"Dictionaries have a new method, ``pop(key[, *default*])``, that returns "
"the value corresponding to *key* and removes that key/value pair from the"
" dictionary.  If the requested key isn't present in the dictionary, "
"*default* is returned if it's specified and :exc:`KeyError` raised if it "
"isn't. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1025
msgid ""
"There's also a new class method,  ``dict.fromkeys(iterable, value)``, "
"that creates a dictionary with keys taken from the supplied iterator "
"*iterable* and all values set to *value*, defaulting to ``None``."
msgstr ""

#: ../../whatsnew/2.3.rst:1029
msgid "(Patches contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1031
msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to "
"simplify creating small dictionaries::"
msgstr ""

#: ../../whatsnew/2.3.rst:1037
msgid "(Contributed by Just van Rossum.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1039
msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, "
"so you can no longer disable assertions by assigning to ``__debug__``. "
"Running Python with the :option:`-O` switch will still generate code that"
" doesn't execute any assertions."
msgstr ""

#: ../../whatsnew/2.3.rst:1044
msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the "
":mod:`new` module can be deprecated in a future Python version, because "
"you can now use the type objects available in the :mod:`types` module.) "
"For example, you can create a new module object with the following code:"
msgstr ""

#: ../../whatsnew/2.3.rst:1059
msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply "
":option:`-Walways::PendingDeprecationWarning:: <-W>` on the command line "
"or use :func:`warnings.filterwarnings`."
msgstr ""

#: ../../whatsnew/2.3.rst:1065
msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error"
" occurred\"``, has begun.  Raising a string will now trigger "
":exc:`PendingDeprecationWarning`."
msgstr ""

#: ../../whatsnew/2.3.rst:1069
msgid ""
"Using ``None`` as a variable name will now result in a "
":exc:`SyntaxWarning` warning.  In a future version of Python, ``None`` "
"may finally become a keyword."
msgstr ""

#: ../../whatsnew/2.3.rst:1072
msgid ""
"The :meth:`xreadlines` method of file objects, introduced in Python 2.1, "
"is no longer necessary because files now behave as their own iterator. "
":meth:`xreadlines` was originally introduced as a faster way to loop over"
" all the lines in a file, but now you can simply write ``for line in "
"file_obj``. File objects also have a new read-only :attr:`encoding` "
"attribute that gives the encoding used by the file; Unicode strings "
"written to the file will be automatically  converted to bytes using the "
"given encoding."
msgstr ""

#: ../../whatsnew/2.3.rst:1080
msgid ""
"The method resolution order used by new-style classes has changed, though"
" you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but"
" 2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" "
"<http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.3910>`_. To "
"understand the motivation for this change,  read Michele Simionato's "
"article `\"Python 2.3 Method Resolution Order\" "
"<http://www.phyast.pitt.edu/~micheles/mro.html>`_, or read the thread on "
"python-dev starting with the message at https://mail.python.org/pipermail"
"/python-dev/2002-October/029035.html. Samuele Pedroni first pointed out "
"the problem and also implemented the fix by coding the C3 algorithm."
msgstr ""

#: ../../whatsnew/2.3.rst:1093
msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from "
"10 to 100 bytecodes, speeding up single-threaded applications by reducing"
" the switching overhead.  Some multithreaded applications may suffer "
"slower response time, but that's easily fixed by setting the limit back "
"to a lower number using ``sys.setcheckinterval(N)``. The limit can be "
"retrieved with the new :func:`sys.getcheckinterval` function."
msgstr ""

#: ../../whatsnew/2.3.rst:1101
msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`__class__`, you'd get this "
"output::"
msgstr ""

#: ../../whatsnew/2.3.rst:1110
msgid "In 2.3, you get this::"
msgstr ""

#: ../../whatsnew/2.3.rst:1115
msgid ""
"One of the noted incompatibilities between old- and new-style classes has"
" been removed: you can now assign to the :attr:`~definition.__name__` and"
" :attr:`~class.__bases__` attributes of new-style classes.  There are "
"some restrictions on what can be assigned to :attr:`~class.__bases__` "
"along the lines of those relating to assigning to an instance's "
":attr:`~instance.__class__` attribute."
msgstr ""

#: ../../whatsnew/2.3.rst:1125
msgid "String Changes"
msgstr ""

#: ../../whatsnew/2.3.rst:1127
msgid ""
"The :keyword:`in` operator now works differently for strings. Previously,"
" when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only"
" be a single character. That's now changed; *X* can be a string of any "
"length, and ``X in Y`` will return :const:`True` if *X* is a substring of"
" *Y*.  If *X* is the empty string, the result is always :const:`True`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1140
msgid ""
"Note that this doesn't tell you where the substring starts; if you need "
"that information, use the :meth:`find` string method."
msgstr ""

#: ../../whatsnew/2.3.rst:1143
msgid ""
"The :meth:`strip`, :meth:`lstrip`, and :meth:`rstrip` string methods now "
"have an optional argument for specifying the characters to strip.  The "
"default is still to remove all whitespace characters::"
msgstr ""

#: ../../whatsnew/2.3.rst:1157
msgid "(Suggested by Simon Brunning and implemented by Walter D√∂rwald.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1159
msgid ""
"The :meth:`startswith` and :meth:`endswith` string methods now accept "
"negative numbers for the *start* and *end* parameters."
msgstr ""

#: ../../whatsnew/2.3.rst:1162
msgid ""
"Another new string method is :meth:`zfill`, originally a function in the "
":mod:`string` module.  :meth:`zfill` pads a numeric string with zeros on "
"the left until it's the specified width. Note that the ``%`` operator is "
"still more flexible and powerful than :meth:`zfill`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1174
msgid "(Contributed by Walter D√∂rwald.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1176
msgid ""
"A new type object, :class:`basestring`, has been added. Both 8-bit "
"strings and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's "
"a completely abstract type, so you can't create :class:`basestring` "
"instances."
msgstr ""

#: ../../whatsnew/2.3.rst:1181
msgid ""
"Interned strings are no longer immortal and will now be garbage-collected"
" in the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1189 ../../whatsnew/2.4.rst:933
#: ../../whatsnew/2.5.rst:1139 ../../whatsnew/2.6.rst:1693
#: ../../whatsnew/2.7.rst:928 ../../whatsnew/3.1.rst:416
#: ../../whatsnew/3.2.rst:2345 ../../whatsnew/3.3.rst:2149
#: ../../whatsnew/3.5.rst:2105 ../../whatsnew/3.6.rst:1779
#: ../../whatsnew/3.7.rst:1770 ../../whatsnew/3.8.rst:1454
msgid "Optimizations"
msgstr ""

#: ../../whatsnew/2.3.rst:1191
msgid ""
"The creation of new-style class instances has been made much faster; "
"they're now faster than classic classes!"
msgstr ""

#: ../../whatsnew/2.3.rst:1194
msgid ""
"The :meth:`sort` method of list objects has been extensively rewritten by"
" Tim Peters, and the implementation is significantly faster."
msgstr ""

#: ../../whatsnew/2.3.rst:1197
msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales "
"better than the O(n\\*n) required for the grade-school multiplication "
"algorithm.  (Original patch by Christopher A. Craig, and significantly "
"reworked by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1202
msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section :ref"
":`23section-other` for a longer explanation. (Removed by Michael Hudson.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1206
msgid ""
":func:`xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by "
"Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1210
msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1214
#, python-format
msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  "
"pystone benchmark around 25% faster than Python 2.2."
msgstr ""

#: ../../whatsnew/2.3.rst:1221 ../../whatsnew/2.4.rst:990
#: ../../whatsnew/3.1.rst:224 ../../whatsnew/3.2.rst:656
msgid "New, Improved, and Deprecated Modules"
msgstr ""

#: ../../whatsnew/2.3.rst:1223 ../../whatsnew/2.4.rst:992
msgid ""
"As usual, Python's standard library received a number of enhancements and"
" bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""

#: ../../whatsnew/2.3.rst:1228
msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using "
"the ``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1233
msgid ""
"The :mod:`bsddb` module has been replaced by version 4.1.6 of the "
"`PyBSDDB <http://pybsddb.sourceforge.net>`_ package, providing a more "
"complete interface to the transactional features of the BerkeleyDB "
"library."
msgstr ""

#: ../../whatsnew/2.3.rst:1237
msgid ""
"The old version of the module has been renamed to  :mod:`bsddb185` and is"
" no longer built automatically; you'll  have to edit "
":file:`Modules/Setup` to enable it.  Note that the new :mod:`bsddb` "
"package is intended to be compatible with the  old module, so be sure to "
"file bugs if you discover any incompatibilities. When upgrading to Python"
" 2.3, if the new interpreter is compiled with a new version of  the "
"underlying BerkeleyDB library, you will almost certainly have to convert "
"your database files to the new version.  You can do this fairly easily "
"with the new scripts :file:`db2pickle.py` and :file:`pickle2db.py` which "
"you will find in the distribution's :file:`Tools/scripts` directory.  If "
"you've already been using the PyBSDDB package and importing it as "
":mod:`bsddb3`, you will have to change your ``import`` statements to "
"import it as :mod:`bsddb`."
msgstr ""

#: ../../whatsnew/2.3.rst:1249
msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding "
":mod:`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1253
msgid ""
"A set of standard date/time types has been added in the new "
":mod:`datetime` module.  See the following section for more details."
msgstr ""

#: ../../whatsnew/2.3.rst:1256
msgid ""
"The Distutils :class:`Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of"
" the dependency files are modified.  For example, if :file:`sampmodule.c`"
" includes the header file :file:`sample.h`, you would create the "
":class:`Extension` object like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:1267
msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1270
msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, "
":envvar:`CFLAGS`, :envvar:`CPP`, :envvar:`LDFLAGS`, and "
":envvar:`CPPFLAGS` environment variables, using them to override the "
"settings in Python's configuration (contributed by Robert Weber)."
msgstr ""

#: ../../whatsnew/2.3.rst:1275
msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`DocTestSuite` function creates a "
":class:`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""

#: ../../whatsnew/2.3.rst:1280
msgid ""
"The new ``gc.get_referents(object)`` function returns a list of all the "
"objects referenced by *object*."
msgstr ""

#: ../../whatsnew/2.3.rst:1283
msgid ""
"The :mod:`getopt` module gained a new function, :func:`gnu_getopt`, that "
"supports the same arguments as the existing :func:`getopt` function but "
"uses GNU-style scanning mode. The existing :func:`getopt` stops "
"processing options as soon as a non-option argument is encountered, but "
"in GNU-style mode processing continues, meaning that options and "
"arguments can be mixed.  For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1294
msgid "(Contributed by Peter √Östrand.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1296
msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return "
"enhanced tuples::"
msgstr ""

#: ../../whatsnew/2.3.rst:1304
msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr ""

#: ../../whatsnew/2.3.rst:1306
msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to "
"remove the smallest item, and inserting a new item while maintaining the "
"heap property is O(lg n).  (See "
"https://xlinux.nist.gov/dads//HTML/priorityque.html for more information "
"about the priority queue data structure.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1314
msgid ""
"The :mod:`heapq` module provides :func:`heappush` and :func:`heappop` "
"functions for adding and removing items while maintaining the heap "
"property on top of some other mutable Python sequence type.  Here's an "
"example that uses a Python list::"
msgstr ""

#: ../../whatsnew/2.3.rst:1332
msgid "(Contributed by Kevin O'Connor.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1334
msgid ""
"The IDLE integrated development environment has been updated using the "
"code from the IDLEfork project (http://idlefork.sourceforge.net).  The "
"most notable feature is that the code being developed is now executed in "
"a subprocess, meaning that there's no longer any need for manual "
"``reload()`` operations. IDLE's core code has been incorporated into the "
"standard library as the :mod:`idlelib` package."
msgstr ""

#: ../../whatsnew/2.3.rst:1340
msgid ""
"The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by "
"Piers Lauder and Tino Lange.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1343
msgid ""
"The :mod:`itertools` contains a number of useful functions for use with "
"iterators, inspired by various functions provided by the ML and Haskell "
"languages.  For example, ``itertools.ifilter(predicate, iterator)`` "
"returns all elements in the iterator for which the function "
":func:`predicate` returns :const:`True`, and ``itertools.repeat(obj, N)``"
" returns ``obj`` *N* times. There are a number of other functions in the "
"module; see the package's reference documentation for details. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1352
msgid ""
"Two new functions in the :mod:`math` module, ``degrees(rads)`` and "
"``radians(degs)``, convert between radians and degrees.  Other functions "
"in the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` "
"have always required input values measured in radians.  Also, an optional"
" *base* argument was added to :func:`math.log` to make it easier to "
"compute logarithms for bases other than ``e`` and ``10``.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1359
msgid ""
"Several new POSIX functions (:func:`getpgid`, :func:`killpg`, "
":func:`lchown`, :func:`loadavg`, :func:`major`, :func:`makedev`, "
":func:`minor`, and :func:`mknod`) were added to the :mod:`posix` module "
"that underlies the :mod:`os` module. (Contributed by Gustavo Niemeyer, "
"Geert Jansen, and Denis S. Otkidach.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1365
msgid ""
"In the :mod:`os` module, the :func:`\\*stat` family of functions can now "
"report fractions of a second in a timestamp.  Such time stamps are "
"represented as floats, similar to the value returned by "
":func:`time.time`."
msgstr ""

#: ../../whatsnew/2.3.rst:1369
msgid ""
"During testing, it was found that some applications will break if time "
"stamps are floats.  For compatibility, when using the tuple interface of "
"the :class:`stat_result` time stamps will be represented as integers. "
"When using named fields (a feature first introduced in Python 2.2), time "
"stamps are still represented as integers, unless "
":func:`os.stat_float_times` is invoked to enable float return values::"
msgstr ""

#: ../../whatsnew/2.3.rst:1382
msgid "In Python 2.4, the default will change to always returning floats."
msgstr ""

#: ../../whatsnew/2.3.rst:1384
msgid ""
"Application developers should enable this feature only if all their "
"libraries work properly when confronted with floating point time stamps, "
"or if they use the tuple API. If used, the feature should be activated on"
" an application level instead of trying to enable it on a per-use basis."
msgstr ""

#: ../../whatsnew/2.3.rst:1389
msgid ""
"The :mod:`optparse` module contains a new parser for command-line "
"arguments that can convert option values to a particular Python type  and"
" will automatically generate a usage message.  See the following section "
"for  more details."
msgstr ""

#: ../../whatsnew/2.3.rst:1394
msgid ""
"The old and never-documented :mod:`linuxaudiodev` module has been "
"deprecated, and a new version named :mod:`ossaudiodev` has been added.  "
"The module was renamed because the OSS sound drivers can be used on "
"platforms other than Linux, and the interface has also been tidied and "
"brought up to date in various ways. (Contributed by Greg Ward and "
"Nicholas FitzRoy-Dale.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1400
msgid ""
"The new :mod:`platform` module contains a number of functions that try to"
" determine various properties of the platform you're running on.  There "
"are functions for getting the architecture, CPU type, the Windows OS "
"version, and even the Linux distribution version. (Contributed by Marc-"
"Andr√© Lemburg.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1405
msgid ""
"The parser objects provided by the :mod:`pyexpat` module can now "
"optionally buffer character data, resulting in fewer calls to your "
"character data handler and therefore faster performance.  Setting the "
"parser object's :attr:`buffer_text` attribute to :const:`True` will "
"enable buffering."
msgstr ""

#: ../../whatsnew/2.3.rst:1410
msgid ""
"The ``sample(population, k)`` function was added to the :mod:`random` "
"module.  *population* is a sequence or :class:`xrange` object containing "
"the elements of a population, and :func:`sample` chooses *k* elements "
"from the population without replacing chosen elements.  *k* can be any "
"value up to ``len(population)``. For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1432
msgid ""
"The :mod:`random` module now uses a new algorithm, the Mersenne Twister, "
"implemented in C.  It's faster and more extensively studied than the "
"previous algorithm."
msgstr ""

#: ../../whatsnew/2.3.rst:1436
msgid "(All changes contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1438
msgid ""
"The :mod:`readline` module also gained a number of new functions: "
":func:`get_history_item`, :func:`get_current_history_length`, and "
":func:`redisplay`."
msgstr ""

#: ../../whatsnew/2.3.rst:1442
msgid ""
"The :mod:`rexec` and :mod:`Bastion` modules have been declared dead, and "
"attempts to import them will fail with a :exc:`RuntimeError`.  New-style "
"classes provide new ways to break out of the restricted execution "
"environment provided by :mod:`rexec`, and no one has interest in fixing "
"them or time to do so.  If you have applications using :mod:`rexec`, "
"rewrite them to use something else."
msgstr ""

#: ../../whatsnew/2.3.rst:1448
msgid ""
"(Sticking with Python 2.2 or 2.1 will not make your applications any "
"safer because there are known bugs in the :mod:`rexec` module in those "
"versions.  To repeat: if you're using :mod:`rexec`, stop using it "
"immediately.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1452
msgid ""
"The :mod:`rotor` module has been deprecated because the  algorithm it "
"uses for encryption is not believed to be secure.  If you need "
"encryption, use one of the several AES Python modules that are available "
"separately."
msgstr ""

#: ../../whatsnew/2.3.rst:1456
msgid ""
"The :mod:`shutil` module gained a ``move(src, dest)`` function that "
"recursively moves a file or directory to a new location."
msgstr ""

#: ../../whatsnew/2.3.rst:1459
msgid ""
"Support for more advanced POSIX signal handling was added to the "
":mod:`signal` but then removed again as it proved impossible to make it "
"work reliably across platforms."
msgstr ""

#: ../../whatsnew/2.3.rst:1463
msgid ""
"The :mod:`socket` module now supports timeouts.  You can call the "
"``settimeout(t)`` method on a socket object to set a timeout of *t* "
"seconds. Subsequent socket operations that take longer than *t* seconds "
"to complete will abort and raise a :exc:`socket.timeout` exception."
msgstr ""

#: ../../whatsnew/2.3.rst:1468
msgid ""
"The original timeout implementation was by Tim O'Malley.  Michael Gilfix "
"integrated it into the Python :mod:`socket` module and shepherded it "
"through a lengthy review.  After the code was checked in, Guido van "
"Rossum rewrote parts of it.  (This is a good example of a collaborative "
"development process in action.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1474
msgid ""
"On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer"
" (SSL) support."
msgstr ""

#: ../../whatsnew/2.3.rst:1477
msgid ""
"The value of the C :const:`PYTHON_API_VERSION` macro is now exposed at "
"the Python level as ``sys.api_version``.  The current exception can be "
"cleared by calling the new :func:`sys.exc_clear` function."
msgstr ""

#: ../../whatsnew/2.3.rst:1481
msgid ""
"The new :mod:`tarfile` module  allows reading from and writing to "
":program:`tar`\\ -format archive files. (Contributed by Lars Gust√§bel.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1484
msgid ""
"The new :mod:`textwrap` module contains functions for wrapping strings "
"containing paragraphs of text.  The ``wrap(text, width)`` function takes "
"a string and returns a list containing the text split into lines of no "
"more than the chosen width.  The ``fill(text, width)`` function returns a"
" single string, reformatted to fit into lines no longer than the chosen "
"width. (As you can guess, :func:`fill` is built on top of :func:`wrap`.  "
"For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1506
msgid ""
"The module also contains a :class:`TextWrapper` class that actually "
"implements the text wrapping strategy.   Both the :class:`TextWrapper` "
"class and the :func:`wrap` and :func:`fill` functions support a number of"
" additional keyword arguments for fine-tuning the formatting; consult the"
" module's documentation for details. (Contributed by Greg Ward.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1512
msgid ""
"The :mod:`thread` and :mod:`threading` modules now have companion "
"modules, :mod:`dummy_thread` and :mod:`dummy_threading`, that provide a "
"do-nothing implementation of the :mod:`thread` module's interface for "
"platforms where threads are not supported.  The intention is to simplify "
"thread-aware modules (ones that *don't* rely on threads to run) by "
"putting the following code at the top::"
msgstr ""

#: ../../whatsnew/2.3.rst:1524
msgid ""
"In this example, :mod:`_threading` is used as the module name to make it "
"clear that the module being used is not necessarily the actual "
":mod:`threading` module. Code can call functions and use classes in "
":mod:`_threading` whether or not threads are supported, avoiding an "
":keyword:`if` statement and making the code slightly clearer.  This "
"module will not magically make multithreaded code run without threads; "
"code that waits for another thread to return or to do something will "
"simply hang forever."
msgstr ""

#: ../../whatsnew/2.3.rst:1532
msgid ""
"The :mod:`time` module's :func:`strptime` function has long been an "
"annoyance because it uses the platform C library's :func:`strptime` "
"implementation, and different platforms sometimes have odd bugs.  Brett "
"Cannon contributed a portable implementation that's written in pure "
"Python and should behave identically on all platforms."
msgstr ""

#: ../../whatsnew/2.3.rst:1538
msgid ""
"The new :mod:`timeit` module helps measure how long snippets of Python "
"code take to execute.  The :file:`timeit.py` file can be run directly "
"from the command line, or the module's :class:`Timer` class can be "
"imported and used directly.  Here's a short example that figures out "
"whether it's faster to convert an 8-bit string to Unicode by appending an"
" empty Unicode string to it or by using the :func:`unicode` function::"
msgstr ""

#: ../../whatsnew/2.3.rst:1558
msgid ""
"The :mod:`Tix` module has received various bug fixes and updates for the "
"current version of the Tix package."
msgstr ""

#: ../../whatsnew/2.3.rst:1561
msgid ""
"The :mod:`Tkinter` module now works with a thread-enabled  version of "
"Tcl. Tcl's threading model requires that widgets only be accessed from "
"the thread in which they're created; accesses from another thread can "
"cause Tcl to panic.  For certain Tcl interfaces, :mod:`Tkinter` will now "
"automatically avoid this  when a widget is accessed from a different "
"thread by marshalling a command, passing it to the correct thread, and "
"waiting for the results.  Other interfaces can't be handled automatically"
" but :mod:`Tkinter` will now raise an exception on such an access so that"
" you can at least find out about the problem.  See "
"https://mail.python.org/pipermail/python-dev/2002-December/031107.html "
"for a more detailed explanation of this change.  (Implemented by Martin "
"von L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1572
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are "
"converted to their Python equivalent, if one exists, or wrapped with a "
":class:`_tkinter.Tcl_Obj` object if no Python equivalent exists. This "
"behavior can be controlled through the :meth:`wantobjects` method of "
":class:`tkapp` objects."
msgstr ""

#: ../../whatsnew/2.3.rst:1578
msgid ""
"When using :mod:`_tkinter` through the :mod:`Tkinter` module (as most "
"Tkinter applications will), this feature is always activated. It should "
"not cause compatibility problems, since Tkinter would always convert "
"string results to Python types where possible."
msgstr ""

#: ../../whatsnew/2.3.rst:1583
msgid ""
"If any incompatibilities are found, the old behavior can be restored by "
"setting the :attr:`wantobjects` variable in the :mod:`Tkinter` module to "
"false before creating the first :class:`tkapp` object. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1590
msgid "Any breakage caused by this change should be reported as a bug."
msgstr ""

#: ../../whatsnew/2.3.rst:1592
msgid ""
"The :mod:`UserDict` module has a new :class:`DictMixin` class which "
"defines all dictionary methods for classes that already have a minimum "
"mapping interface.  This greatly simplifies writing classes that need to "
"be substitutable for dictionaries, such as the classes in  the "
":mod:`shelve` module."
msgstr ""

#: ../../whatsnew/2.3.rst:1598
msgid ""
"Adding the mix-in as a superclass provides the full dictionary interface "
"whenever the class defines :meth:`__getitem__`, :meth:`__setitem__`, "
":meth:`__delitem__`, and :meth:`keys`. For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1639 ../../whatsnew/2.4.rst:891
#: ../../whatsnew/2.4.rst:919 ../../whatsnew/2.4.rst:1212
#: ../../whatsnew/2.5.rst:1373 ../../whatsnew/2.5.rst:1382
#: ../../whatsnew/2.6.rst:1596 ../../whatsnew/2.6.rst:1880
#: ../../whatsnew/2.6.rst:1901 ../../whatsnew/3.1.rst:281
#: ../../whatsnew/3.2.rst:822 ../../whatsnew/3.2.rst:834
#: ../../whatsnew/3.2.rst:878 ../../whatsnew/3.2.rst:899
#: ../../whatsnew/3.2.rst:913 ../../whatsnew/3.2.rst:1783
#: ../../whatsnew/3.2.rst:1828
msgid "(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1641
msgid ""
"The DOM implementation in :mod:`xml.dom.minidom` can now generate XML "
"output in a particular encoding by providing an optional encoding "
"argument to the :meth:`toxml` and :meth:`toprettyxml` methods of DOM "
"nodes."
msgstr ""

#: ../../whatsnew/2.3.rst:1645
msgid ""
"The :mod:`xmlrpclib` module now supports an XML-RPC extension for "
"handling nil data values such as Python's ``None``.  Nil values are "
"always supported on unmarshalling an XML-RPC response.  To generate "
"requests containing ``None``, you must supply a true value for the "
"*allow_none* parameter when creating a :class:`Marshaller` instance."
msgstr ""

#: ../../whatsnew/2.3.rst:1651
msgid ""
"The new :mod:`DocXMLRPCServer` module allows writing self-documenting "
"XML-RPC servers. Run it in demo mode (as a program) to see it in action."
"   Pointing the Web browser to the RPC server produces pydoc-style "
"documentation; pointing xmlrpclib to the server allows invoking the "
"actual methods. (Contributed by Brian Quinlan.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1657
msgid ""
"Support for internationalized domain names (RFCs 3454, 3490, 3491, and "
"3492) has been added. The \"idna\" encoding can be used to convert "
"between a Unicode domain name and the ASCII-compatible encoding (ACE) of "
"that name. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1664
msgid ""
"The :mod:`socket` module has also been extended to transparently convert "
"Unicode hostnames to the ACE version before passing them to the C "
"library. Modules that deal with hostnames such as :mod:`httplib` and "
":mod:`ftplib`) also support Unicode host names; :mod:`httplib` also sends"
" HTTP ``Host`` headers using the ACE version of the domain name.  "
":mod:`urllib` supports Unicode URLs with non-ASCII host names as long as "
"the ``path`` part of the URL is ASCII only."
msgstr ""

#: ../../whatsnew/2.3.rst:1672
msgid ""
"To implement this change, the :mod:`stringprep` module, the  "
"``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""

#: ../../whatsnew/2.3.rst:1679
msgid "Date/Time Type"
msgstr ""

#: ../../whatsnew/2.3.rst:1681
msgid ""
"Date and time types suitable for expressing timestamps were added as the "
":mod:`datetime` module.  The types don't support different calendars or "
"many fancy features, and just stick to the basics of representing time."
msgstr ""

#: ../../whatsnew/2.3.rst:1685
msgid ""
"The three primary types are: :class:`date`, representing a day, month, "
"and year; :class:`~datetime.time`, consisting of hour, minute, and "
"second; and :class:`~datetime.datetime`, which contains all the "
"attributes of both :class:`date` and :class:`~datetime.time`. There's "
"also a :class:`timedelta` class representing differences between two "
"points in time, and time zone logic is implemented by classes inheriting "
"from the abstract :class:`tzinfo` class."
msgstr ""

#: ../../whatsnew/2.3.rst:1692
msgid ""
"You can create instances of :class:`date` and :class:`~datetime.time` by "
"either supplying keyword arguments to the appropriate constructor, e.g. "
"``datetime.date(year=1972, month=10, day=15)``, or by using one of a "
"number of class methods.  For example, the :meth:`date.today` class "
"method returns the current local date."
msgstr ""

#: ../../whatsnew/2.3.rst:1698
msgid ""
"Once created, instances of the date/time classes are all immutable. There"
" are a number of methods for producing formatted strings from objects::"
msgstr ""

#: ../../whatsnew/2.3.rst:1710
msgid ""
"The :meth:`replace` method allows modifying one or more fields  of a "
":class:`date` or :class:`~datetime.datetime` instance, returning a new "
"instance::"
msgstr ""

#: ../../whatsnew/2.3.rst:1720
msgid ""
"Instances can be compared, hashed, and converted to strings (the result "
"is the same as that of :meth:`isoformat`).  :class:`date` and "
":class:`~datetime.datetime` instances can be subtracted from each other, "
"and added to :class:`timedelta` instances.  The largest missing feature "
"is that there's no standard library support for parsing strings and "
"getting back a :class:`date` or :class:`~datetime.datetime`."
msgstr ""

#: ../../whatsnew/2.3.rst:1727
msgid ""
"For more information, refer to the module's reference documentation. "
"(Contributed by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1734
msgid "The optparse Module"
msgstr ""

#: ../../whatsnew/2.3.rst:1736
msgid ""
"The :mod:`getopt` module provides simple parsing of command-line "
"arguments.  The new :mod:`optparse` module (originally named Optik) "
"provides more elaborate command-line parsing that follows the Unix "
"conventions, automatically creates the output for :option:`!--help`, and "
"can perform different actions for different options."
msgstr ""

#: ../../whatsnew/2.3.rst:1742
msgid ""
"You start by creating an instance of :class:`OptionParser` and telling it"
" what your program's options are. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1756
msgid ""
"Parsing a command line is then done by calling the :meth:`parse_args` "
"method. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1762
msgid ""
"This returns an object containing all of the option values, and a list of"
" strings containing the remaining arguments."
msgstr ""

#: ../../whatsnew/2.3.rst:1765
msgid ""
"Invoking the script with the various arguments now works as you'd expect "
"it to. Note that the length argument is automatically converted to an "
"integer."
msgstr ""

#: ../../whatsnew/2.3.rst:1778
msgid "The help message is automatically generated for you:"
msgstr ""

#: ../../whatsnew/2.3.rst:1793
msgid "See the module's documentation for more details."
msgstr ""

#: ../../whatsnew/2.3.rst:1796
msgid ""
"Optik was written by Greg Ward, with suggestions from the readers of the "
"Getopt SIG."
msgstr ""

#: ../../whatsnew/2.3.rst:1805
msgid "Pymalloc: A Specialized Object Allocator"
msgstr ""

#: ../../whatsnew/2.3.rst:1807
msgid ""
"Pymalloc, a specialized object allocator written by Vladimir Marangozov, "
"was a feature added to Python 2.1.  Pymalloc is intended to be faster "
"than the system :c:func:`malloc` and to have less memory overhead for "
"allocation patterns typical of Python programs. The allocator uses C's "
":c:func:`malloc` function to get large pools of memory and then fulfills "
"smaller memory requests from these pools."
msgstr ""

#: ../../whatsnew/2.3.rst:1813
msgid ""
"In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled "
"by default; you had to explicitly enable it when compiling Python by "
"providing the :option:`!--with-pymalloc` option to the "
":program:`configure` script.  In 2.3, pymalloc has had further "
"enhancements and is now enabled by default; you'll have to supply :option"
":`!--without-pymalloc` to disable it."
msgstr ""

#: ../../whatsnew/2.3.rst:1819
msgid ""
"This change is transparent to code written in Python; however, pymalloc "
"may expose bugs in C extensions.  Authors of C extension modules should "
"test their code with pymalloc enabled, because some incorrect code may "
"cause core dumps at runtime."
msgstr ""

#: ../../whatsnew/2.3.rst:1824
msgid ""
"There's one particularly common error that causes problems.  There are a "
"number of memory allocation functions in Python's C API that have "
"previously just been aliases for the C library's :c:func:`malloc` and "
":c:func:`free`, meaning that if you accidentally called mismatched "
"functions the error wouldn't be noticeable. When the object allocator is "
"enabled, these functions aren't aliases of :c:func:`malloc` and "
":c:func:`free` any more, and calling the wrong function to free memory "
"may get you a core dump.  For example, if memory was allocated using "
":c:func:`PyObject_Malloc`, it has to be freed using "
":c:func:`PyObject_Free`, not :c:func:`free`.  A few modules included with"
" Python fell afoul of this and had to be fixed; doubtless there are more "
"third-party modules that will have the same problem."
msgstr ""

#: ../../whatsnew/2.3.rst:1836
msgid ""
"As part of this change, the confusing multiple interfaces for allocating "
"memory have been consolidated down into two API families. Memory "
"allocated with one family must not be manipulated with functions from the"
" other family.  There is one family for allocating chunks of memory and "
"another family of functions specifically for allocating Python objects."
msgstr ""

#: ../../whatsnew/2.3.rst:1842
msgid ""
"To allocate and free an undistinguished chunk of memory use the \"raw "
"memory\" family: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and "
":c:func:`PyMem_Free`."
msgstr ""

#: ../../whatsnew/2.3.rst:1845
msgid ""
"The \"object memory\" family is the interface to the pymalloc facility "
"described above and is biased towards a large number of \"small\" "
"allocations: :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and "
":c:func:`PyObject_Free`."
msgstr ""

#: ../../whatsnew/2.3.rst:1849
msgid ""
"To allocate and free Python objects, use the \"object\" family "
":c:func:`PyObject_New`, :c:func:`PyObject_NewVar`, and "
":c:func:`PyObject_Del`."
msgstr ""

#: ../../whatsnew/2.3.rst:1852
msgid ""
"Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides "
"debugging features to catch memory overwrites and doubled frees in both "
"extension modules and in the interpreter itself.  To enable this support,"
" compile a debugging version of the Python interpreter by running "
":program:`configure` with :option:`!--with-pydebug`."
msgstr ""

#: ../../whatsnew/2.3.rst:1858
msgid ""
"To aid extension writers, a header file :file:`Misc/pymemcompat.h` is "
"distributed with the source to Python 2.3 that allows Python extensions "
"to use the 2.3 interfaces to memory allocation while compiling against "
"any version of Python since 1.5.2.  You would copy the file from Python's"
" source distribution and bundle it with the source of your extension."
msgstr ""

#: ../../whatsnew/2.3.rst:1869
msgid "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"
msgstr ""

#: ../../whatsnew/2.3.rst:1868
msgid ""
"For the full details of the pymalloc implementation, see the comments at "
"the top of the file :file:`Objects/obmalloc.c` in the Python source code."
" The above link points to the file within the python.org SVN browser."
msgstr ""

#: ../../whatsnew/2.3.rst:1876 ../../whatsnew/2.4.rst:1448
#: ../../whatsnew/2.5.rst:2080 ../../whatsnew/2.6.rst:2979
#: ../../whatsnew/2.7.rst:2100 ../../whatsnew/3.0.rst:852
#: ../../whatsnew/3.1.rst:473 ../../whatsnew/3.2.rst:2523
#: ../../whatsnew/3.3.rst:2169 ../../whatsnew/3.5.rst:2173
#: ../../whatsnew/3.6.rst:1860 ../../whatsnew/3.8.rst:1533
msgid "Build and C API Changes"
msgstr ""

#: ../../whatsnew/2.3.rst:1878 ../../whatsnew/2.5.rst:2082
#: ../../whatsnew/2.6.rst:2981 ../../whatsnew/2.7.rst:2102
#: ../../whatsnew/3.1.rst:475 ../../whatsnew/3.2.rst:2525
#: ../../whatsnew/3.3.rst:2171
msgid "Changes to Python's build process and to the C API include:"
msgstr ""

#: ../../whatsnew/2.3.rst:1880
msgid ""
"The cycle detection implementation used by the garbage collection has "
"proven to be stable, so it's now been made mandatory.  You can no longer "
"compile Python without it, and the :option:`!--with-cycle-gc` switch to "
":program:`configure` has been removed."
msgstr ""

#: ../../whatsnew/2.3.rst:1885
msgid ""
"Python can now optionally be built as a shared library "
"(:file:`libpython2.3.so`) by supplying :option:`!--enable-shared` when "
"running Python's :program:`configure` script.  (Contributed by Ondrej "
"Palkovsky.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1889
msgid ""
"The :c:macro:`DL_EXPORT` and :c:macro:`DL_IMPORT` macros are now "
"deprecated. Initialization functions for Python extension modules should "
"now be declared using the new macro :c:macro:`PyMODINIT_FUNC`, while the "
"Python core will generally use the :c:macro:`PyAPI_FUNC` and "
":c:macro:`PyAPI_DATA` macros."
msgstr ""

#: ../../whatsnew/2.3.rst:1894
#, python-format
msgid ""
"The interpreter can be compiled without any docstrings for the built-in "
"functions and modules by supplying :option:`!--without-doc-strings` to "
"the :program:`configure` script. This makes the Python executable about "
"10% smaller, but will also mean that you can't get help for Python's "
"built-ins.  (Contributed by Gustavo Niemeyer.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1900
msgid ""
"The :c:func:`PyArg_NoArgs` macro is now deprecated, and code that uses it"
" should be changed.  For Python 2.2 and later, the method definition "
"table can specify the :const:`METH_NOARGS` flag, signalling that there "
"are no arguments, and the argument checking can then be removed.  If "
"compatibility with pre-2.2 versions of Python is important, the code "
"could use ``PyArg_ParseTuple(args, \"\")`` instead, but this will be "
"slower than using :const:`METH_NOARGS`."
msgstr ""

#: ../../whatsnew/2.3.rst:1907
msgid ""
":c:func:`PyArg_ParseTuple` accepts new format characters for various "
"sizes of unsigned integers: ``B`` for :c:type:`unsigned char`, ``H`` for "
":c:type:`unsigned short int`,  ``I`` for :c:type:`unsigned int`,  and "
"``K`` for :c:type:`unsigned long long`."
msgstr ""

#: ../../whatsnew/2.3.rst:1912
msgid ""
"A new function, ``PyObject_DelItemString(mapping, char *key)`` was added "
"as shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""

#: ../../whatsnew/2.3.rst:1915
msgid ""
"File objects now manage their internal string buffer differently, "
"increasing it exponentially when needed.  This results in the benchmark "
"tests in :file:`Lib/test/test_bufio.py` speeding up considerably (from 57"
" seconds to 1.7 seconds, according to one measurement)."
msgstr ""

#: ../../whatsnew/2.3.rst:1920
msgid ""
"It's now possible to define class and static methods for a C extension "
"type by setting either the :const:`METH_CLASS` or :const:`METH_STATIC` "
"flags in a method's :c:type:`PyMethodDef` structure."
msgstr ""

#: ../../whatsnew/2.3.rst:1924
msgid ""
"Python now includes a copy of the Expat XML parser's source code, "
"removing any dependence on a system version or local installation of "
"Expat."
msgstr ""

#: ../../whatsnew/2.3.rst:1927
msgid ""
"If you dynamically allocate type objects in your extension, you should be"
" aware of a change in the rules relating to the :attr:`__module__` and "
":attr:`~definition.__name__` attributes.  In summary, you will want to "
"ensure the type's dictionary contains a ``'__module__'`` key; making the "
"module name the part of the type name leading up to the final period will"
" no longer have the desired effect.  For more detail, read the API "
"reference documentation or the  source."
msgstr ""

#: ../../whatsnew/2.3.rst:1938 ../../whatsnew/2.4.rst:1501
#: ../../whatsnew/2.5.rst:2208
msgid "Port-Specific Changes"
msgstr ""

#: ../../whatsnew/2.3.rst:1940
msgid ""
"Support for a port to IBM's OS/2 using the EMX runtime environment was "
"merged into the main Python source tree.  EMX is a POSIX emulation layer "
"over the OS/2 system APIs.  The Python port for EMX tries to support all "
"the POSIX-like capability exposed by the EMX runtime, and mostly "
"succeeds; :func:`fork` and :func:`fcntl` are restricted by the "
"limitations of the underlying emulation layer.  The standard OS/2 port, "
"which uses IBM's Visual Age compiler, also gained support for case-"
"sensitive import semantics as part of the integration of the EMX port "
"into CVS.  (Contributed by Andrew MacIntyre.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1949
msgid ""
"On MacOS, most toolbox modules have been weaklinked to improve backward "
"compatibility.  This means that modules will no longer fail to load if a "
"single routine is missing on the current OS version. Instead calling the "
"missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1954
msgid ""
"The RPM spec files, found in the :file:`Misc/RPM/` directory in the "
"Python source distribution, were updated for 2.3.  (Contributed by Sean "
"Reifschneider.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1957
msgid ""
"Other new platforms now supported by Python include AtheOS "
"(http://www.atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""

#: ../../whatsnew/2.3.rst:1968
msgid ""
"As usual, there were a bunch of other improvements and bugfixes scattered"
" throughout the source tree.  A search through the CVS change logs finds "
"there were 523 patches applied and 514 bugs fixed between Python 2.2 and "
"2.3.  Both figures are likely to be underestimates."
msgstr ""

#: ../../whatsnew/2.3.rst:1975
msgid ""
"If the :envvar:`PYTHONINSPECT` environment variable is set, the Python "
"interpreter will enter the interactive prompt after running a Python "
"program, as if Python had been invoked with the :option:`-i` option. The "
"environment variable can be set before running the Python interpreter, or"
" it can be set by the Python program as part of its execution."
msgstr ""

#: ../../whatsnew/2.3.rst:1981
msgid ""
"The :file:`regrtest.py` script now provides a way to allow \"all "
"resources except *foo*.\"  A resource name passed to the :option:`!-u` "
"option can now be prefixed with a hyphen (``'-'``) to mean \"remove this "
"resource.\"  For example, the option '``-uall,-bsddb``' could be used to "
"enable the use of all resources except ``bsddb``."
msgstr ""

#: ../../whatsnew/2.3.rst:1987
msgid ""
"The tools used to build the documentation now work under Cygwin as well "
"as Unix."
msgstr ""

#: ../../whatsnew/2.3.rst:1990
msgid ""
"The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, "
"this opcode was needed to produce line numbers in tracebacks and support "
"trace functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line "
"numbers in tracebacks have been computed using a different mechanism that"
" works with \"python -O\".  For Python 2.3 Michael Hudson implemented a "
"similar scheme to determine when to call the trace function, removing the"
" need for ``SET_LINENO`` entirely."
msgstr ""

#: ../../whatsnew/2.3.rst:1998
msgid ""
"It would be difficult to detect any resulting difference from Python "
"code, apart from a slight speed up when Python is run without "
":option:`-O`."
msgstr ""

#: ../../whatsnew/2.3.rst:2001
msgid ""
"C extensions that access the :attr:`f_lineno` field of frame objects "
"should instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This "
"will have the added effect of making the code work as desired under "
"\"python -O\" in earlier versions of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:2006
msgid ""
"A nifty new feature is that trace functions can now assign to the "
":attr:`f_lineno` attribute of frame objects, changing the line that will "
"be executed next.  A ``jump`` command has been added to the :mod:`pdb` "
"debugger taking advantage of this new feature. (Implemented by Richie "
"Hindle.)"
msgstr ""

#: ../../whatsnew/2.3.rst:2015
msgid "Porting to Python 2.3"
msgstr ""

#: ../../whatsnew/2.3.rst:2017 ../../whatsnew/2.4.rst:1512
#: ../../whatsnew/2.5.rst:2230
msgid ""
"This section lists previously described changes that may require changes "
"to your code:"
msgstr ""

#: ../../whatsnew/2.3.rst:2020
msgid ""
":keyword:`yield` is now always a keyword; if it's used as a variable name"
" in your code, a different name must be chosen."
msgstr ""

#: ../../whatsnew/2.3.rst:2023
msgid ""
"For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one "
"character long."
msgstr ""

#: ../../whatsnew/2.3.rst:2026
msgid ""
"The :func:`int` type constructor will now return a long integer instead "
"of raising an :exc:`OverflowError` when a string or floating-point number"
" is too large to fit into an integer."
msgstr ""

#: ../../whatsnew/2.3.rst:2030
msgid ""
"If you have Unicode strings that contain 8-bit characters, you must "
"declare the file's encoding (UTF-8, Latin-1, or whatever) by adding a "
"comment to the top of the file.  See section :ref:`section-encodings` for"
" more information."
msgstr ""

#: ../../whatsnew/2.3.rst:2034
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are "
"converted to their Python equivalent, if one exists, or wrapped with a "
":class:`_tkinter.Tcl_Obj` object if no Python equivalent exists."
msgstr ""

#: ../../whatsnew/2.3.rst:2039
msgid ""
"Large octal and hex literals such as ``0xffffffff`` now trigger a "
":exc:`FutureWarning`. Currently they're stored as 32-bit numbers and "
"result in a negative value, but in Python 2.4 they'll become positive "
"long integers."
msgstr ""

#: ../../whatsnew/2.3.rst:2043
msgid ""
"There are a few ways to fix this warning.  If you really need a positive "
"number, just add an ``L`` to the end of the literal.  If you're trying to"
" get a 32-bit integer with low bits set and have previously used an "
"expression such as ``~(1 << 31)``, it's probably clearest to start with "
"all bits set and clear the desired upper bits. For example, to clear just"
" the top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""

#: ../../whatsnew/2.3.rst:2050
msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr ""

#: ../../whatsnew/2.3.rst:2052
msgid ""
"The Distutils :func:`setup` function has gained various new keyword "
"arguments such as *depends*.  Old versions of the Distutils will abort if"
" passed unknown keywords.  A solution is to check for the presence of the"
" new :func:`get_distutil_options` function in your :file:`setup.py` and "
"only uses the new keywords with a version of the Distutils that supports "
"them::"
msgstr ""

#: ../../whatsnew/2.3.rst:2065
msgid ""
"Using ``None`` as a variable name will now result in a "
":exc:`SyntaxWarning` warning."
msgstr ""

#: ../../whatsnew/2.3.rst:2068
msgid ""
"Names of extension types defined by the modules included with Python now "
"contain the module and a ``'.'`` in front of the type name."
msgstr ""

#: ../../whatsnew/2.3.rst:2079
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this "
"article: Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, "
"Andrew Dalke, Scott David Daniels, Fred L. Drake, Jr., David Fraser,  "
"Kelly Gerber, Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef "
"Lannert, Martin von L√∂wis, Andrew MacIntyre, Lalo Martins, Chad Netzer, "
"Gustavo Niemeyer, Neal Norwitz, Hans Nowak, Chris Reedy, Francesco "
"Ricciardi, Vinay Sajip, Neil Schemenauer, Roman Suzi, Jason Tishler, Just"
" van Rossum."
msgstr ""

#: ../../whatsnew/2.4.rst:3
msgid "What's New in Python 2.4"
msgstr ""

#: ../../whatsnew/2.4.rst:14
msgid ""
"This article explains the new features in Python 2.4.1, released on March"
" 30, 2005."
msgstr ""

#: ../../whatsnew/2.4.rst:17
msgid ""
"Python 2.4 is a medium-sized release.  It doesn't introduce as many "
"changes as the radical Python 2.2, but introduces more features than the "
"conservative 2.3 release.  The most significant new language features are"
" function decorators and generator expressions; most other changes are to"
" the standard library."
msgstr ""

#: ../../whatsnew/2.4.rst:22
msgid ""
"According to the CVS change logs, there were 481 patches applied and 502 "
"bugs fixed between Python 2.3 and 2.4.  Both figures are likely to be "
"underestimates."
msgstr ""

#: ../../whatsnew/2.4.rst:25
msgid ""
"This article doesn't attempt to provide a complete specification of every"
" single new feature, but instead provides a brief introduction to each "
"feature.  For full details, you should refer to the documentation for "
"Python 2.4, such as the Python Library Reference and the Python Reference"
" Manual.  Often you will be referred to the PEP for a particular new "
"feature for explanations of the implementation and design rationale."
msgstr ""

#: ../../whatsnew/2.4.rst:36
msgid "PEP 218: Built-In Set Objects"
msgstr ""

#: ../../whatsnew/2.4.rst:38
msgid ""
"Python 2.3 introduced the :mod:`sets` module.  C implementations of set "
"data types have now been added to the Python core as two new built-in "
"types, ``set(iterable)`` and ``frozenset(iterable)``.  They provide high "
"speed operations for membership testing, for eliminating duplicates from "
"sequences, and for mathematical operations like unions, intersections, "
"differences, and symmetric differences. ::"
msgstr ""

#: ../../whatsnew/2.4.rst:71
msgid ""
"The :func:`frozenset` type is an immutable version of :func:`set`. Since "
"it is immutable and hashable, it may be used as a dictionary key or as a "
"member of another set."
msgstr ""

#: ../../whatsnew/2.4.rst:75
msgid ""
"The :mod:`sets` module remains in the standard library, and may be useful"
" if you wish to subclass the :class:`Set` or :class:`ImmutableSet` "
"classes.  There are currently no plans to deprecate the module."
msgstr ""

#: ../../whatsnew/2.4.rst:83
msgid ""
"Originally proposed by Greg Wilson and ultimately implemented by Raymond "
"Hettinger."
msgstr ""

#: ../../whatsnew/2.4.rst:92
msgid ""
"The lengthy transition process for this PEP, begun in Python 2.2, takes "
"another step forward in Python 2.4.  In 2.3, certain integer operations "
"that would behave differently after int/long unification triggered "
":exc:`FutureWarning` warnings and returned values limited to 32 or 64 "
"bits (depending on your platform).  In 2.4, these expressions no longer "
"produce a warning and instead produce a different result that's usually a"
" long integer."
msgstr ""

#: ../../whatsnew/2.4.rst:99
msgid ""
"The problematic expressions are primarily left shifts and lengthy "
"hexadecimal and octal constants.  For example, ``2 << 32`` results in a "
"warning in 2.3, evaluating to 0 on 32-bit platforms.  In Python 2.4, this"
" expression now returns the correct answer, 8589934592."
msgstr ""

#: ../../whatsnew/2.4.rst:108
msgid ""
"Original PEP written by Moshe Zadka and GvR.  The changes for 2.4 were "
"implemented by  Kalle Svensson."
msgstr ""

#: ../../whatsnew/2.4.rst:115
msgid "PEP 289: Generator Expressions"
msgstr ""

#: ../../whatsnew/2.4.rst:117
msgid ""
"The iterator feature introduced in Python 2.2 and the :mod:`itertools` "
"module make it easier to write programs that loop through large data sets"
" without having the entire data set in memory at one time.  List "
"comprehensions don't fit into this picture very well because they produce"
" a Python list object containing all of the items.  This unavoidably "
"pulls all of the objects into memory, which can be a problem if your data"
" set is very large.  When trying to write a functionally-styled program, "
"it would be natural to write something like::"
msgstr ""

#: ../../whatsnew/2.4.rst:129
msgid "instead of  ::"
msgstr ""

#: ../../whatsnew/2.4.rst:136
msgid ""
"The first form is more concise and perhaps more readable, but if you're "
"dealing with a large number of link objects you'd have to write the "
"second form to avoid having all link objects in memory at the same time."
msgstr ""

#: ../../whatsnew/2.4.rst:140
msgid ""
"Generator expressions work similarly to list comprehensions but don't "
"materialize the entire list; instead they create a generator that will "
"return elements one by one.  The above example could be written as::"
msgstr ""

#: ../../whatsnew/2.4.rst:148
msgid ""
"Generator expressions always have to be written inside parentheses, as in"
" the above example.  The parentheses signalling a function call also "
"count, so if you want to create an iterator that will be immediately "
"passed to a function you could write::"
msgstr ""

#: ../../whatsnew/2.4.rst:155
msgid ""
"Generator expressions differ from list comprehensions in various small "
"ways. Most notably, the loop variable (*obj* in the above example) is not"
" accessible outside of the generator expression.  List comprehensions "
"leave the variable assigned to its last value; future versions of Python "
"will change this, making list comprehensions match generator expressions "
"in this respect."
msgstr ""

#: ../../whatsnew/2.4.rst:165
msgid ":pep:`289` - Generator Expressions"
msgstr ""

#: ../../whatsnew/2.4.rst:165
msgid ""
"Proposed by Raymond Hettinger and implemented by Jiwon Seo with early "
"efforts steered by Hye-Shik Chang."
msgstr ""

#: ../../whatsnew/2.4.rst:172
msgid "PEP 292: Simpler String Substitutions"
msgstr ""

#: ../../whatsnew/2.4.rst:174
msgid ""
"Some new classes in the standard library provide an alternative mechanism"
" for substituting variables into strings; this style of substitution may "
"be better for applications where untrained users need to edit templates."
msgstr ""

#: ../../whatsnew/2.4.rst:178
msgid "The usual way of substituting variables by name is the ``%`` operator::"
msgstr ""

#: ../../whatsnew/2.4.rst:183
msgid ""
"When writing the template string, it can be easy to forget the ``i`` or "
"``s`` after the closing parenthesis.  This isn't a big problem if the "
"template is in a Python module, because you run the code, get an "
"\"Unsupported format character\" :exc:`ValueError`, and fix the problem."
"  However, consider an application such as Mailman where template strings"
" or translations are being edited by users who aren't aware of the Python"
" language.  The format string's syntax is complicated to explain to such "
"users, and if they make a mistake, it's difficult to provide helpful "
"feedback to them."
msgstr ""

#: ../../whatsnew/2.4.rst:192
msgid ""
"PEP 292 adds a :class:`Template` class to the :mod:`string` module that "
"uses ``$`` to indicate a substitution::"
msgstr ""

#: ../../whatsnew/2.4.rst:200
msgid ""
"If a key is missing from the dictionary, the :meth:`substitute` method "
"will raise a :exc:`KeyError`.  There's also a :meth:`safe_substitute` "
"method that ignores missing keys::"
msgstr ""

#: ../../whatsnew/2.4.rst:211
msgid ":pep:`292` - Simpler String Substitutions"
msgstr ""

#: ../../whatsnew/2.4.rst:212
msgid "Written and implemented  by Barry Warsaw."
msgstr ""

#: ../../whatsnew/2.4.rst:218
msgid "PEP 318: Decorators for Functions and Methods"
msgstr ""

#: ../../whatsnew/2.4.rst:220
msgid ""
"Python 2.2 extended Python's object model by adding static methods and "
"class methods, but it didn't extend Python's syntax to provide any new "
"way of defining static or class methods.  Instead, you had to write a "
":keyword:`def` statement in the usual way, and pass the resulting method "
"to a :func:`staticmethod` or :func:`classmethod` function that would wrap"
" up the function as a method of the new type. Your code would look like "
"this::"
msgstr ""

#: ../../whatsnew/2.4.rst:233
msgid ""
"If the method was very long, it would be easy to miss or forget the "
":func:`classmethod` invocation after the function body."
msgstr ""

#: ../../whatsnew/2.4.rst:236
msgid ""
"The intention was always to add some syntax to make such definitions more"
" readable, but at the time of 2.2's release a good syntax was not "
"obvious.  Today a good syntax *still* isn't obvious but users are asking "
"for easier access to the feature; a new syntactic feature has been added "
"to meet this need."
msgstr ""

#: ../../whatsnew/2.4.rst:241
msgid ""
"The new feature is called \"function decorators\".  The name comes from "
"the idea that :func:`classmethod`, :func:`staticmethod`, and friends are "
"storing additional information on a function object; they're *decorating*"
" functions with more details."
msgstr ""

#: ../../whatsnew/2.4.rst:246
msgid ""
"The notation borrows from Java and uses the ``'@'`` character as an "
"indicator. Using the new syntax, the example above would be written::"
msgstr ""

#: ../../whatsnew/2.4.rst:256
msgid ""
"The ``@classmethod`` is shorthand for the ``meth=classmethod(meth)`` "
"assignment. More generally, if you have the following::"
msgstr ""

#: ../../whatsnew/2.4.rst:265
msgid "It's equivalent to the following pre-decorator code::"
msgstr ""

#: ../../whatsnew/2.4.rst:270
msgid ""
"Decorators must come on the line before a function definition, one "
"decorator per line, and can't be on the same line as the def statement, "
"meaning that ``@A def f(): ...`` is illegal.  You can only decorate "
"function definitions, either at the module level or inside a class; you "
"can't decorate class definitions."
msgstr ""

#: ../../whatsnew/2.4.rst:275
msgid ""
"A decorator is just a function that takes the function to be decorated as"
" an argument and returns either the same function or some new object.  "
"The return value of the decorator need not be callable (though it "
"typically is), unless further decorators will be applied to the result.  "
"It's easy to write your own decorators.  The following simple example "
"just sets an attribute on the function object::"
msgstr ""

#: ../../whatsnew/2.4.rst:295
msgid ""
"As a slightly more realistic example, the following decorator checks that"
" the supplied argument is an integer::"
msgstr ""

#: ../../whatsnew/2.4.rst:313
msgid ""
"An example in :pep:`318` contains a fancier version of this idea that "
"lets you both specify the required type and check the returned type."
msgstr ""

#: ../../whatsnew/2.4.rst:316
msgid ""
"Decorator functions can take arguments.  If arguments are supplied, your "
"decorator function is called with only those arguments and must return a "
"new decorator function; this function must take a single function and "
"return a function, as previously described.  In other words, ``@A @B "
"@C(args)`` becomes::"
msgstr ""

#: ../../whatsnew/2.4.rst:325
msgid ""
"Getting this right can be slightly brain-bending, but it's not too "
"difficult."
msgstr ""

#: ../../whatsnew/2.4.rst:327
msgid ""
"A small related change makes the :attr:`func_name` attribute of functions"
" writable.  This attribute is used to display function names in "
"tracebacks, so decorators should change the name of any new function "
"that's constructed and returned."
msgstr ""

#: ../../whatsnew/2.4.rst:338
msgid ":pep:`318` - Decorators for Functions, Methods and Classes"
msgstr ""

#: ../../whatsnew/2.4.rst:336
msgid ""
"Written  by Kevin D. Smith, Jim Jewett, and Skip Montanaro.  Several "
"people wrote patches implementing function decorators, but the one that "
"was actually checked in was patch #979728, written by Mark Russell."
msgstr ""

#: ../../whatsnew/2.4.rst:340
msgid "https://wiki.python.org/moin/PythonDecoratorLibrary"
msgstr ""

#: ../../whatsnew/2.4.rst:341
msgid "This Wiki page contains several examples of decorators."
msgstr ""

#: ../../whatsnew/2.4.rst:347
msgid "PEP 322: Reverse Iteration"
msgstr ""

#: ../../whatsnew/2.4.rst:349
msgid ""
"A new built-in function, ``reversed(seq)``, takes a sequence and returns "
"an iterator that loops over the elements of the sequence  in reverse "
"order.   ::"
msgstr ""

#: ../../whatsnew/2.4.rst:359
msgid ""
"Compared to extended slicing, such as ``range(1,4)[::-1]``, "
":func:`reversed` is easier to read, runs faster, and uses substantially "
"less memory."
msgstr ""

#: ../../whatsnew/2.4.rst:362
msgid ""
"Note that :func:`reversed` only accepts sequences, not arbitrary "
"iterators.  If you want to reverse an iterator, first convert it to  a "
"list with :func:`list`. ::"
msgstr ""

#: ../../whatsnew/2.4.rst:376
msgid ":pep:`322` - Reverse Iteration"
msgstr ""

#: ../../whatsnew/2.4.rst:377
msgid "Written and implemented by Raymond Hettinger."
msgstr ""

#: ../../whatsnew/2.4.rst:383
msgid "PEP 324: New subprocess Module"
msgstr ""

#: ../../whatsnew/2.4.rst:385
msgid ""
"The standard library provides a number of ways to execute a subprocess, "
"offering different features and different levels of complexity. "
"``os.system(command)`` is easy to use, but slow (it runs a shell process "
"which executes the command) and dangerous (you have to be careful about "
"escaping the shell's metacharacters).  The :mod:`popen2` module offers "
"classes that can capture standard output and standard error from the "
"subprocess, but the naming is confusing.  The :mod:`subprocess` module "
"cleans  this up, providing a unified interface that offers all the "
"features you might need."
msgstr ""

#: ../../whatsnew/2.4.rst:394
msgid ""
"Instead of :mod:`popen2`'s collection of classes, :mod:`subprocess` "
"contains a single class called :class:`Popen`  whose constructor supports"
" a number of different keyword arguments. ::"
msgstr ""

#: ../../whatsnew/2.4.rst:404
msgid ""
"*args* is commonly a sequence of strings that will be the arguments to "
"the program executed as the subprocess.  (If the *shell* argument is "
"true, *args* can be a string which will then be passed on to the shell "
"for interpretation, just as :func:`os.system` does.)"
msgstr ""

#: ../../whatsnew/2.4.rst:409
msgid ""
"*stdin*, *stdout*, and *stderr* specify what the subprocess's input, "
"output, and error streams will be.  You can provide a file object or a "
"file descriptor, or you can use the constant ``subprocess.PIPE`` to "
"create a pipe between the subprocess and the parent."
msgstr ""

#: ../../whatsnew/2.4.rst:417
msgid "The constructor has a number of handy options:"
msgstr ""

#: ../../whatsnew/2.4.rst:419
msgid ""
"*close_fds* requests that all file descriptors be closed before running "
"the subprocess."
msgstr ""

#: ../../whatsnew/2.4.rst:422
msgid ""
"*cwd* specifies the working directory in which the subprocess will be "
"executed (defaulting to whatever the parent's working directory is)."
msgstr ""

#: ../../whatsnew/2.4.rst:425
msgid "*env* is a dictionary specifying environment variables."
msgstr ""

#: ../../whatsnew/2.4.rst:427
msgid "*preexec_fn* is a function that gets called before the child is started."
msgstr ""

#: ../../whatsnew/2.4.rst:429
msgid ""
"*universal_newlines* opens the child's input and output using Python's "
":term:`universal newlines` feature."
msgstr ""

#: ../../whatsnew/2.4.rst:432
msgid ""
"Once you've created the :class:`Popen` instance,  you can call its "
":meth:`wait` method to pause until the subprocess has exited, "
":meth:`poll` to check if it's exited without pausing,  or "
"``communicate(data)`` to send the string *data* to the subprocess's "
"standard input.   ``communicate(data)``  then reads any data that the "
"subprocess has sent to its standard output  or standard error, returning "
"a tuple ``(stdout_data, stderr_data)``."
msgstr ""

#: ../../whatsnew/2.4.rst:439
msgid ""
":func:`call` is a shortcut that passes its arguments along to the "
":class:`Popen` constructor, waits for the command to complete, and "
"returns the status code of the subprocess.  It can serve as a safer "
"analog to :func:`os.system`::"
msgstr ""

#: ../../whatsnew/2.4.rst:451
msgid ""
"The command is invoked without use of the shell.  If you really do want "
"to  use the shell, you can add ``shell=True`` as a keyword argument and "
"provide a string instead of a sequence::"
msgstr ""

#: ../../whatsnew/2.4.rst:457
msgid ""
"The PEP takes various examples of shell and Python code and shows how "
"they'd be translated into Python code that uses :mod:`subprocess`.  "
"Reading this section of the PEP is highly recommended."
msgstr ""

#: ../../whatsnew/2.4.rst:465
msgid ":pep:`324` - subprocess - New process module"
msgstr ""

#: ../../whatsnew/2.4.rst:465
msgid ""
"Written and implemented by Peter √Östrand, with assistance from Fredrik "
"Lundh and others."
msgstr ""

#: ../../whatsnew/2.4.rst:472
msgid "PEP 327: Decimal Data Type"
msgstr ""

#: ../../whatsnew/2.4.rst:474
msgid ""
"Python has always supported floating-point (FP) numbers, based on the "
"underlying C :c:type:`double` type, as a data type.  However, while most "
"programming languages provide a floating-point type, many people (even "
"programmers) are unaware that floating-point numbers don't represent "
"certain decimal fractions accurately.  The new :class:`Decimal` type can "
"represent these fractions accurately, up to a user-specified precision "
"limit."
msgstr ""

#: ../../whatsnew/2.4.rst:483
msgid "Why is Decimal needed?"
msgstr ""

#: ../../whatsnew/2.4.rst:485
msgid ""
"The limitations arise from the representation used for floating-point "
"numbers. FP numbers are made up of three components:"
msgstr ""

#: ../../whatsnew/2.4.rst:488
msgid "The sign, which is positive or negative."
msgstr ""

#: ../../whatsnew/2.4.rst:490
msgid ""
"The mantissa, which is a single-digit binary number   followed by a "
"fractional part.  For example, ``1.01`` in base-2 notation is ``1 + 0/2 +"
" 1/4``, or 1.25 in decimal notation."
msgstr ""

#: ../../whatsnew/2.4.rst:494
msgid ""
"The exponent, which tells where the decimal point is located in the "
"number represented."
msgstr ""

#: ../../whatsnew/2.4.rst:497
msgid ""
"For example, the number 1.25 has positive sign, a mantissa value of 1.01 "
"(in binary), and an exponent of 0 (the decimal point doesn't need to be "
"shifted). The number 5 has the same sign and mantissa, but the exponent "
"is 2 because the mantissa is multiplied by 4 (2 to the power of the "
"exponent 2); 1.25 \\* 4 equals 5."
msgstr ""

#: ../../whatsnew/2.4.rst:503
msgid ""
"Modern systems usually provide floating-point support that conforms to a "
"standard called IEEE 754.  C's :c:type:`double` type is usually "
"implemented as a 64-bit IEEE 754 number, which uses 52 bits of space for "
"the mantissa.  This means that numbers can only be specified to 52 bits "
"of precision.  If you're trying to represent numbers whose expansion "
"repeats endlessly, the expansion is cut off after 52 bits. Unfortunately,"
" most software needs to produce output in base 10, and common fractions "
"in base 10 are often repeating decimals in binary. For example, 1.1 "
"decimal is binary ``1.0001100110011 ...``; .1 = 1/16 + 1/32 + 1/256 plus "
"an infinite number of additional terms.  IEEE 754 has to chop off that "
"infinitely repeated decimal after 52 digits, so the representation is "
"slightly inaccurate."
msgstr ""

#: ../../whatsnew/2.4.rst:515
msgid "Sometimes you can see this inaccuracy when the number is printed::"
msgstr ""

#: ../../whatsnew/2.4.rst:520
msgid ""
"The inaccuracy isn't always visible when you print the number because the"
" FP-to-decimal-string conversion is provided by the C library, and most C"
" libraries try to produce sensible output.  Even if it's not displayed, "
"however, the inaccuracy is still there and subsequent operations can "
"magnify the error."
msgstr ""

#: ../../whatsnew/2.4.rst:525
msgid ""
"For many applications this doesn't matter.  If I'm plotting points and "
"displaying them on my monitor, the difference between 1.1 and "
"1.1000000000000001 is too small to be visible.  Reports often limit "
"output to a certain number of decimal places, and if you round the number"
" to two or three or even eight decimal places, the error is never "
"apparent.  However, for applications where it does matter,  it's a lot of"
" work to implement your own custom arithmetic routines."
msgstr ""

#: ../../whatsnew/2.4.rst:533
msgid "Hence, the :class:`Decimal` type was created."
msgstr ""

#: ../../whatsnew/2.4.rst:537
msgid "The :class:`Decimal` type"
msgstr ""

#: ../../whatsnew/2.4.rst:539
msgid ""
"A new module, :mod:`decimal`, was added to Python's standard library.  It"
" contains two classes, :class:`Decimal` and :class:`Context`.  "
":class:`Decimal` instances represent numbers, and :class:`Context` "
"instances are used to wrap up various settings such as the precision and "
"default rounding mode."
msgstr ""

#: ../../whatsnew/2.4.rst:544
msgid ""
":class:`Decimal` instances are immutable, like regular Python integers "
"and FP numbers; once it's been created, you can't change the value an "
"instance represents.  :class:`Decimal` instances can be created from "
"integers or strings::"
msgstr ""

#: ../../whatsnew/2.4.rst:555
msgid ""
"You can also provide tuples containing the sign, the mantissa represented"
"  as a tuple of decimal digits, and the exponent::"
msgstr ""

#: ../../whatsnew/2.4.rst:561
msgid ""
"Cautionary note: the sign bit is a Boolean value, so 0 is positive and 1 "
"is negative."
msgstr ""

#: ../../whatsnew/2.4.rst:564
msgid ""
"Converting from floating-point numbers poses a bit of a problem: should "
"the FP number representing 1.1 turn into the decimal number for exactly "
"1.1, or for 1.1 plus whatever inaccuracies are introduced? The decision "
"was to dodge the issue and leave such a conversion out of the API.  "
"Instead, you should convert the floating-point number into a string using"
" the desired precision and pass the string to the :class:`Decimal` "
"constructor::"
msgstr ""

#: ../../whatsnew/2.4.rst:577
msgid ""
"Once you have :class:`Decimal` instances, you can perform the usual "
"mathematical operations on them.  One limitation: exponentiation requires"
" an integer exponent::"
msgstr ""

#: ../../whatsnew/2.4.rst:598
msgid ""
"You can combine :class:`Decimal` instances with integers, but not with "
"floating-point numbers::"
msgstr ""

#: ../../whatsnew/2.4.rst:609
msgid ""
":class:`Decimal` numbers can be used with the :mod:`math` and "
":mod:`cmath` modules, but note that they'll be immediately converted to  "
"floating-point numbers before the operation is performed, resulting in a "
"possible loss of precision and accuracy.  You'll also get back a regular "
"floating-point number and not a :class:`Decimal`.   ::"
msgstr ""

#: ../../whatsnew/2.4.rst:622
msgid ""
":class:`Decimal` instances have a :meth:`sqrt` method that returns a "
":class:`Decimal`, but if you need other things such as trigonometric "
"functions you'll have to implement them. ::"
msgstr ""

#: ../../whatsnew/2.4.rst:631
msgid "The :class:`Context` type"
msgstr ""

#: ../../whatsnew/2.4.rst:633
msgid ""
"Instances of the :class:`Context` class encapsulate several settings for "
"decimal operations:"
msgstr ""

#: ../../whatsnew/2.4.rst:636
msgid ":attr:`prec` is the precision, the number of decimal places."
msgstr ""

#: ../../whatsnew/2.4.rst:638
msgid ""
":attr:`rounding` specifies the rounding mode.  The :mod:`decimal` module "
"has constants for the various possibilities: :const:`ROUND_DOWN`, "
":const:`ROUND_CEILING`,  :const:`ROUND_HALF_EVEN`, and various others."
msgstr ""

#: ../../whatsnew/2.4.rst:642
msgid ""
":attr:`traps` is a dictionary specifying what happens on encountering "
"certain error conditions: either  an exception is raised or  a value is "
"returned.  Some examples of error conditions are division by zero, loss "
"of precision, and overflow."
msgstr ""

#: ../../whatsnew/2.4.rst:647
msgid ""
"There's a thread-local default context available by calling "
":func:`getcontext`; you can change the properties of this context to "
"alter the default precision, rounding, or trap handling.  The following "
"example shows the effect of changing the precision of the default "
"context::"
msgstr ""

#: ../../whatsnew/2.4.rst:660
msgid ""
"The default action for error conditions is selectable; the module can "
"either return a special value such as infinity or not-a-number, or "
"exceptions can be raised::"
msgstr ""

#: ../../whatsnew/2.4.rst:673
msgid ""
"The :class:`Context` instance also has various methods for formatting  "
"numbers such as :meth:`to_eng_string` and :meth:`to_sci_string`."
msgstr ""

#: ../../whatsnew/2.4.rst:676
msgid ""
"For more information, see the documentation for the :mod:`decimal` "
"module, which includes a quick-start tutorial and a reference."
msgstr ""

#: ../../whatsnew/2.4.rst:684
msgid ":pep:`327` - Decimal Data Type"
msgstr ""

#: ../../whatsnew/2.4.rst:683
msgid ""
"Written by Facundo Batista and implemented by Facundo Batista, Eric "
"Price, Raymond Hettinger, Aahz, and Tim Peters."
msgstr ""

#: ../../whatsnew/2.4.rst:688
msgid "http://www.lahey.com/float.htm"
msgstr ""

#: ../../whatsnew/2.4.rst:687
msgid ""
"The article uses Fortran code to illustrate many of the problems that "
"floating-point inaccuracy can cause."
msgstr ""

#: ../../whatsnew/2.4.rst:692
msgid "http://speleotrove.com/decimal/"
msgstr ""

#: ../../whatsnew/2.4.rst:691
msgid ""
"A description of a decimal-based representation.  This representation is "
"being proposed as a standard, and underlies the new Python decimal type."
"  Much of this material was written by Mike Cowlishaw, designer of the "
"Rexx language."
msgstr ""

#: ../../whatsnew/2.4.rst:699
msgid "PEP 328: Multi-line Imports"
msgstr ""

#: ../../whatsnew/2.4.rst:701
msgid ""
"One language change is a small syntactic tweak aimed at making it easier "
"to import many names from a module.  In a ``from module import names`` "
"statement, *names* is a sequence of names separated by commas.  If the "
"sequence is  very long, you can either write multiple imports from the "
"same module, or you can use backslashes to escape the line endings like "
"this::"
msgstr ""

#: ../../whatsnew/2.4.rst:712
msgid ""
"The syntactic change in Python 2.4 simply allows putting the names within"
" parentheses.  Python ignores newlines within a parenthesized expression,"
" so the backslashes are no longer needed::"
msgstr ""

#: ../../whatsnew/2.4.rst:721
msgid ""
"The PEP also proposes that all :keyword:`import` statements be absolute "
"imports, with a leading ``.`` character to indicate a relative import.  "
"This part of the PEP was not implemented for Python 2.4, but was "
"completed for Python 2.5."
msgstr ""

#: ../../whatsnew/2.4.rst:728 ../../whatsnew/2.5.rst:331
msgid ":pep:`328` - Imports: Multi-Line and Absolute/Relative"
msgstr ""

#: ../../whatsnew/2.4.rst:729
msgid "Written by Aahz.  Multi-line imports were implemented by Dima Dorfman."
msgstr ""

#: ../../whatsnew/2.4.rst:735
msgid "PEP 331: Locale-Independent Float/String Conversions"
msgstr ""

#: ../../whatsnew/2.4.rst:737
msgid ""
"The :mod:`locale` modules lets Python software select various conversions"
" and display conventions that are localized to a particular country or "
"language. However, the module was careful to not change the numeric "
"locale because various functions in Python's implementation required that"
" the numeric locale remain set to the ``'C'`` locale.  Often this was "
"because the code was using the C library's :c:func:`atof` function."
msgstr ""

#: ../../whatsnew/2.4.rst:744
msgid ""
"Not setting the numeric locale caused trouble for extensions that used "
"third-party C libraries, however, because they wouldn't have the correct "
"locale set. The motivating example was GTK+, whose user interface widgets"
" weren't displaying numbers in the current locale."
msgstr ""

#: ../../whatsnew/2.4.rst:749
msgid ""
"The solution described in the PEP is to add three new functions to the "
"Python API that perform ASCII-only conversions, ignoring the locale "
"setting:"
msgstr ""

#: ../../whatsnew/2.4.rst:752
msgid ""
"``PyOS_ascii_strtod(str, ptr)``  and ``PyOS_ascii_atof(str, ptr)`` both "
"convert a string to a C :c:type:`double`."
msgstr ""

#: ../../whatsnew/2.4.rst:755
msgid ""
"``PyOS_ascii_formatd(buffer, buf_len, format, d)`` converts a "
":c:type:`double` to an ASCII string."
msgstr ""

#: ../../whatsnew/2.4.rst:758
msgid ""
"The code for these functions came from the GLib library "
"(https://developer.gnome.org/glib/stable/), whose developers kindly "
"relicensed the relevant functions and donated them to the Python Software"
" Foundation.  The :mod:`locale` module  can now change the numeric "
"locale, letting extensions such as GTK+  produce the correct results."
msgstr ""

#: ../../whatsnew/2.4.rst:767
msgid ":pep:`331` - Locale-Independent Float/String Conversions"
msgstr ""

#: ../../whatsnew/2.4.rst:768
msgid "Written by Christian R. Reis, and implemented by Gustavo Carneiro."
msgstr ""

#: ../../whatsnew/2.4.rst:776
msgid ""
"Here are all of the changes that Python 2.4 makes to the core Python "
"language."
msgstr ""

#: ../../whatsnew/2.4.rst:778
msgid "Decorators for functions and methods were added (:pep:`318`)."
msgstr ""

#: ../../whatsnew/2.4.rst:780
msgid ""
"Built-in :func:`set` and :func:`frozenset` types were  added "
"(:pep:`218`). Other new built-ins include the ``reversed(seq)`` function "
"(:pep:`322`)."
msgstr ""

#: ../../whatsnew/2.4.rst:783
msgid "Generator expressions were added (:pep:`289`)."
msgstr ""

#: ../../whatsnew/2.4.rst:785
msgid ""
"Certain numeric expressions no longer return values restricted to 32 or "
"64 bits (:pep:`237`)."
msgstr ""

#: ../../whatsnew/2.4.rst:788
msgid ""
"You can now put parentheses around the list of names in a ``from module "
"import names`` statement (:pep:`328`)."
msgstr ""

#: ../../whatsnew/2.4.rst:791
msgid ""
"The :meth:`dict.update` method now accepts the same argument forms as the"
" :class:`dict` constructor.  This includes any mapping, any iterable of "
"key/value pairs, and keyword arguments. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:795
msgid ""
"The string methods :meth:`ljust`, :meth:`rjust`, and :meth:`center` now "
"take an optional argument for specifying a fill character other than a "
"space. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:799
msgid ""
"Strings also gained an :meth:`rsplit` method that works like the "
":meth:`split` method but splits from the end of the string.   "
"(Contributed by Sean Reifschneider.) ::"
msgstr ""

#: ../../whatsnew/2.4.rst:808
msgid ""
"Three keyword parameters, *cmp*, *key*, and *reverse*, were added to the "
":meth:`sort` method of lists. These parameters make some common usages of"
" :meth:`sort` simpler. All of these parameters are optional."
msgstr ""

#: ../../whatsnew/2.4.rst:812
msgid ""
"For the *cmp* parameter, the value should be a comparison function that "
"takes two parameters and returns -1, 0, or +1 depending on how the "
"parameters compare. This function will then be used to sort the list.  "
"Previously this was the only parameter that could be provided to "
":meth:`sort`."
msgstr ""

#: ../../whatsnew/2.4.rst:817
msgid ""
"*key* should be a single-parameter function that takes a list element and"
" returns a comparison key for the element.  The list is then sorted using"
" the comparison keys.  The following example sorts a list case-"
"insensitively::"
msgstr ""

#: ../../whatsnew/2.4.rst:834
msgid ""
"The last example, which uses the *cmp* parameter, is the old way to "
"perform a case-insensitive sort.  It works but is slower than using a "
"*key* parameter. Using *key* calls :meth:`lower` method once for each "
"element in the list while using *cmp* will call it twice for each "
"comparison, so using *key* saves on invocations of the :meth:`lower` "
"method."
msgstr ""

#: ../../whatsnew/2.4.rst:840
msgid ""
"For simple key functions and comparison functions, it is often possible "
"to avoid a :keyword:`lambda` expression by using an unbound method "
"instead.  For example, the above case-insensitive sort is best written "
"as::"
msgstr ""

#: ../../whatsnew/2.4.rst:848
msgid ""
"Finally, the *reverse* parameter takes a Boolean value.  If the value is "
"true, the list will be sorted into reverse order. Instead of ``L.sort(); "
"L.reverse()``, you can now write ``L.sort(reverse=True)``."
msgstr ""

#: ../../whatsnew/2.4.rst:852
msgid ""
"The results of sorting are now guaranteed to be stable.  This means that "
"two entries with equal keys will be returned in the same order as they "
"were input. For example, you can sort a list of people by name, and then "
"sort the list by age, resulting in a list sorted by age where people with"
" the same age are in name-sorted order."
msgstr ""

#: ../../whatsnew/2.4.rst:858
msgid "(All changes to :meth:`sort` contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:860
msgid ""
"There is a new built-in function ``sorted(iterable)`` that works like the"
" in-place :meth:`list.sort` method but can be used in expressions.  The "
"differences are:"
msgstr ""

#: ../../whatsnew/2.4.rst:864
msgid "the input may be any iterable;"
msgstr ""

#: ../../whatsnew/2.4.rst:866
msgid "a newly formed copy is sorted, leaving the original intact; and"
msgstr ""

#: ../../whatsnew/2.4.rst:868
msgid "the expression returns the new sorted copy"
msgstr ""

#: ../../whatsnew/2.4.rst:893 ../../whatsnew/2.4.rst:1519
msgid ""
"Integer operations will no longer trigger an :exc:`OverflowWarning`. The "
":exc:`OverflowWarning` warning will disappear in Python 2.5."
msgstr ""

#: ../../whatsnew/2.4.rst:896
msgid ""
"The interpreter gained a new switch, :option:`-m`, that takes a name, "
"searches for the corresponding  module on ``sys.path``, and runs the "
"module as a script. For example,  you can now run the Python profiler "
"with ``python -m profile``. (Contributed by Nick Coghlan.)"
msgstr ""

#: ../../whatsnew/2.4.rst:901
msgid ""
"The ``eval(expr, globals, locals)`` and ``execfile(filename, globals, "
"locals)`` functions and the ``exec`` statement now accept any mapping "
"type for the *locals* parameter.  Previously this had to be a regular "
"Python dictionary.  (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:906
msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return "
"an empty list if called with no arguments. Previously they raised a "
":exc:`TypeError` exception.  This makes them more suitable for use with "
"variable length argument lists::"
msgstr ""

#: ../../whatsnew/2.4.rst:921
msgid ""
"Encountering a failure while importing a module no longer leaves a "
"partially-initialized module object in ``sys.modules``.  The incomplete "
"module object left behind would fool further imports of the same module "
"into succeeding, leading to confusing errors.   (Fixed by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.4.rst:926
msgid ""
":const:`None` is now a constant; code that binds a new value to  the name"
" ``None`` is now a syntax error. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:935
msgid ""
"The inner loops for list and tuple slicing were optimized and now run "
"about one-third faster.  The inner loops for dictionaries were also "
"optimized, resulting in performance boosts for :meth:`keys`, "
":meth:`values`, :meth:`items`, :meth:`iterkeys`, :meth:`itervalues`, and "
":meth:`iteritems`. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:941
msgid ""
"The machinery for growing and shrinking lists was optimized for speed and"
" for space efficiency.  Appending and popping from lists now runs faster "
"due to more efficient code paths and less frequent use of the underlying "
"system :c:func:`realloc`.  List comprehensions also benefit.   "
":meth:`list.extend` was also optimized and no longer converts its "
"argument into a temporary list before extending the base list.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:948
msgid ""
":func:`list`, :func:`tuple`, :func:`map`, :func:`filter`, and :func:`zip`"
" now run several times faster with non-sequence arguments that supply a "
":meth:`__len__` method.  (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:952
msgid ""
"The methods :meth:`list.__getitem__`, :meth:`dict.__getitem__`, and "
":meth:`dict.__contains__` are now implemented as "
":class:`method_descriptor` objects rather than "
":class:`wrapper_descriptor` objects.  This form of  access doubles their "
"performance and makes them more suitable for use as arguments to "
"functionals: ``map(mydict.__getitem__, keylist)``. (Contributed by "
"Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:959
msgid ""
"Added a new opcode, ``LIST_APPEND``, that simplifies the generated "
"bytecode for list comprehensions and speeds them up by about a third.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:963
msgid ""
"The peephole bytecode optimizer has been improved to  produce shorter, "
"faster bytecode; remarkably, the resulting bytecode is  more readable.  "
"(Enhanced by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:967
msgid ""
"String concatenations in statements of the form ``s = s + \"abc\"`` and "
"``s += \"abc\"`` are now performed more efficiently in certain "
"circumstances.  This optimization won't be present in other Python "
"implementations such as Jython, so you shouldn't rely on it; using the "
":meth:`join` method of strings is still recommended when you want to "
"efficiently glue a large number of strings together. (Contributed by "
"Armin Rigo.)"
msgstr ""

#: ../../whatsnew/2.4.rst:974
#, python-format
msgid ""
"The net result of the 2.4 optimizations is that Python 2.4 runs the "
"pystone benchmark around 5% faster than Python 2.3 and 35% faster than "
"Python 2.2. (pystone is not a particularly good benchmark, but it's the "
"most commonly used measurement of Python's performance.  Your own "
"applications may show greater or smaller benefits from Python 2.4.)"
msgstr ""

#: ../../whatsnew/2.4.rst:997
msgid ""
"The :mod:`asyncore` module's :func:`loop` function now has a *count* "
"parameter that lets you perform a limited number of passes through the "
"polling loop.  The default is still to loop forever."
msgstr ""

#: ../../whatsnew/2.4.rst:1001
msgid ""
"The :mod:`base64` module now has more complete :rfc:`3548` support for "
"Base64, Base32, and Base16 encoding and decoding, including optional case"
" folding and optional alternative alphabets. (Contributed by Barry "
"Warsaw.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1005
msgid ""
"The :mod:`bisect` module now has an underlying C implementation for "
"improved performance. (Contributed by Dmitry Vasiliev.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1008
msgid ""
"The CJKCodecs collections of East Asian codecs, maintained by Hye-Shik "
"Chang, was integrated into 2.4.   The new encodings are:"
msgstr ""

#: ../../whatsnew/2.4.rst:1011
msgid "Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz"
msgstr ""

#: ../../whatsnew/2.4.rst:1013
msgid "Chinese (ROC): big5, cp950"
msgstr ""

#: ../../whatsnew/2.4.rst:1017
msgid "Japanese: cp932, euc-jis-2004, euc-jp, euc-jisx0213, iso-2022-jp,"
msgstr ""

#: ../../whatsnew/2.4.rst:1016
msgid ""
"iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext, "
"iso-2022-jp-2004, shift-jis, shift-jisx0213, shift-jis-2004"
msgstr ""

#: ../../whatsnew/2.4.rst:1019
msgid "Korean: cp949, euc-kr, johab, iso-2022-kr"
msgstr ""

#: ../../whatsnew/2.4.rst:1021
msgid ""
"Some other new encodings were added: HP Roman8,  ISO_8859-11, "
"ISO_8859-16, PCTP-154, and TIS-620."
msgstr ""

#: ../../whatsnew/2.4.rst:1024
msgid ""
"The UTF-8 and UTF-16 codecs now cope better with receiving partial input."
" Previously the :class:`StreamReader` class would try to read more data, "
"making it impossible to resume decoding from the stream.  The "
":meth:`read` method will now return as much data as it can and future "
"calls will resume decoding where previous ones left off.  (Implemented by"
" Walter D√∂rwald.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1030
msgid ""
"There is a new :mod:`collections` module for  various specialized "
"collection datatypes.  Currently it contains just one type, "
":class:`deque`, a double-ended queue that supports efficiently adding and"
" removing elements from either end::"
msgstr ""

#: ../../whatsnew/2.4.rst:1050
msgid ""
"Several modules, such as the :mod:`Queue` and :mod:`threading` modules, "
"now take advantage of :class:`collections.deque` for improved "
"performance.  (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1054
msgid ""
"The :mod:`ConfigParser` classes have been enhanced slightly. The "
":meth:`read` method now returns a list of the files that were "
"successfully parsed, and the :meth:`set` method raises :exc:`TypeError` "
"if passed a *value* argument that isn't a string.   (Contributed by John "
"Belmonte and David Goodger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1059
msgid ""
"The :mod:`curses` module now supports the ncurses extension "
":func:`use_default_colors`.  On platforms where the terminal supports "
"transparency, this makes it possible to use a transparent background. "
"(Contributed by J√∂rg Lehmann.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1064
msgid ""
"The :mod:`difflib` module now includes an :class:`HtmlDiff` class that "
"creates an HTML table showing a side by side comparison of two versions "
"of a text. (Contributed by Dan Gass.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1068
msgid ""
"The :mod:`email` package was updated to version 3.0,  which dropped "
"various deprecated APIs and removes support for Python versions earlier "
"than 2.3.  The 3.0 version of the package uses a new incremental parser "
"for MIME messages, available in the :mod:`email.FeedParser` module.  The "
"new parser doesn't require reading the entire message into memory, and "
"doesn't raise exceptions if a message is malformed; instead it records "
"any problems in the  :attr:`defect` attribute of the message.  (Developed"
" by Anthony Baxter, Barry Warsaw, Thomas Wouters, and others.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1077
msgid ""
"The :mod:`heapq` module has been converted to C.  The resulting tenfold "
"improvement in speed makes the module suitable for handling high volumes "
"of data.  In addition, the module has two new functions :func:`nlargest` "
"and :func:`nsmallest` that use heaps to find the N largest or smallest "
"values in a dataset without the expense of a full sort.  (Contributed by "
"Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1083
msgid ""
"The :mod:`httplib` module now contains constants for HTTP status codes "
"defined in various HTTP-related RFC documents.  Constants have names such"
" as :const:`OK`, :const:`CREATED`, :const:`CONTINUE`, and "
":const:`MOVED_PERMANENTLY`; use pydoc to get a full list.  (Contributed "
"by Andrew Eland.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1089
msgid ""
"The :mod:`imaplib` module now supports IMAP's THREAD command (contributed"
" by Yves Dionne) and new :meth:`deleteacl` and :meth:`myrights` methods "
"(contributed by Arnaud Mazin)."
msgstr ""

#: ../../whatsnew/2.4.rst:1093
msgid ""
"The :mod:`itertools` module gained a ``groupby(iterable[, *func*])`` "
"function. *iterable* is something that can be iterated over to return a "
"stream of elements, and the optional *func* parameter is a function that "
"takes an element and returns a key value; if omitted, the key is simply "
"the element itself.  :func:`groupby` then groups the elements into "
"subsequences which have matching values of the key, and returns a series "
"of 2-tuples containing the key value and an iterator over the "
"subsequence."
msgstr ""

#: ../../whatsnew/2.4.rst:1101
msgid ""
"Here's an example to make this clearer.  The *key* function simply "
"returns whether a number is even or odd, so the result of :func:`groupby`"
" is to return consecutive runs of odd or even numbers. ::"
msgstr ""

#: ../../whatsnew/2.4.rst:1117
msgid ""
":func:`groupby` is typically used with sorted input.  The logic for "
":func:`groupby` is similar to the Unix ``uniq`` filter which makes it "
"handy for eliminating, counting, or identifying duplicate elements::"
msgstr ""

#: ../../whatsnew/2.4.rst:1140
msgid "(Contributed by Hye-Shik Chang.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1142
msgid ""
":mod:`itertools` also gained a function named ``tee(iterator, N)`` that "
"returns *N* independent iterators that replicate *iterator*.  If *N* is "
"omitted, the default is 2. ::"
msgstr ""

#: ../../whatsnew/2.4.rst:1155
msgid ""
"Note that :func:`tee` has to keep copies of the values returned  by the "
"iterator; in the worst case, it may need to keep all of them.   This "
"should therefore be used carefully if the leading iterator can run far "
"ahead of the trailing iterator in a long stream of inputs. If the "
"separation is large, then you might as well use  :func:`list` instead.  "
"When the iterators track closely with one another, :func:`tee` is ideal."
"  Possible applications include bookmarking, windowing, or lookahead "
"iterators. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1164
msgid ""
"A number of functions were added to the :mod:`locale`  module, such as "
":func:`bind_textdomain_codeset` to specify a particular encoding and a "
"family of :func:`l\\*gettext` functions that return messages in the "
"chosen encoding. (Contributed by Gustavo Niemeyer.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1169
msgid ""
"Some keyword arguments were added to the :mod:`logging` package's "
":func:`basicConfig` function to simplify log configuration.  The default "
"behavior is to log messages to standard error, but various keyword "
"arguments can be specified to log to a particular file, change the "
"logging format, or set the logging level. For example::"
msgstr ""

#: ../../whatsnew/2.4.rst:1180
msgid ""
"Other additions to the :mod:`logging` package include a ``log(level, "
"msg)`` convenience method, as well as a :class:`TimedRotatingFileHandler`"
" class that rotates its log files at a timed interval.  The module "
"already had :class:`RotatingFileHandler`, which rotated logs once the "
"file exceeded a certain size.  Both classes derive from a new "
":class:`BaseRotatingHandler` class that can be used to implement other "
"rotating handlers."
msgstr ""

#: ../../whatsnew/2.4.rst:1187
msgid "(Changes implemented by Vinay Sajip.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1189
msgid ""
"The :mod:`marshal` module now shares interned strings on unpacking a  "
"data structure.  This may shrink the size of certain pickle strings, but "
"the primary effect is to make :file:`.pyc` files significantly smaller. "
"(Contributed by Martin von L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1194
msgid ""
"The :mod:`nntplib` module's :class:`NNTP` class gained "
":meth:`description` and :meth:`descriptions` methods to retrieve  "
"newsgroup descriptions for a single group or for a range of groups. "
"(Contributed by J√ºrgen A. Erhard.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1198
msgid ""
"Two new functions were added to the :mod:`operator` module, "
"``attrgetter(attr)`` and ``itemgetter(index)``. Both functions return "
"callables that take a single argument and return the corresponding "
"attribute or item; these callables make excellent data extractors when "
"used with :func:`map` or :func:`sorted`.  For example::"
msgstr ""

#: ../../whatsnew/2.4.rst:1214
#, python-format
msgid ""
"The :mod:`optparse` module was updated in various ways.  The module now "
"passes its messages through :func:`gettext.gettext`, making it possible "
"to internationalize Optik's help and error messages.  Help messages for "
"options can now include the string ``'%default'``, which will be replaced"
" by the option's default value.  (Contributed by Greg Ward.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1220
msgid ""
"The long-term plan is to deprecate the :mod:`rfc822` module in some "
"future Python release in favor of the :mod:`email` package. To this end, "
"the :func:`email.Utils.formatdate` function has been changed to make it "
"usable as a replacement for :func:`rfc822.formatdate`.  You may want to "
"write new e-mail processing code with this in mind.  (Change implemented "
"by Anthony Baxter.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1226
msgid ""
"A new ``urandom(n)`` function was added to the :mod:`os` module, "
"returning a string containing *n* bytes of random data.  This function "
"provides access to platform-specific sources of randomness such as "
":file:`/dev/urandom` on Linux or the Windows CryptoAPI.  (Contributed by "
"Trevor Perrin.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1231
msgid ""
"Another new function: ``os.path.lexists(path)``  returns true if the file"
" specified by *path* exists, whether or not it's a symbolic link.  This "
"differs from the existing ``os.path.exists(path)`` function, which "
"returns false if *path* is a symlink that points to a destination that "
"doesn't exist. (Contributed by Beni Cherniavsky.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1237
msgid ""
"A new :func:`getsid` function was added to the :mod:`posix` module that "
"underlies the :mod:`os` module. (Contributed by J. Raynor.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1240
msgid ""
"The :mod:`poplib` module now supports POP over SSL.  (Contributed by "
"Hector Urtubia.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1243
msgid ""
"The :mod:`profile` module can now profile C extension functions. "
"(Contributed by Nick Bastin.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1246
msgid ""
"The :mod:`random` module has a new method called ``getrandbits(N)`` that "
"returns a long integer *N* bits in length.  The existing "
":meth:`randrange` method now uses :meth:`getrandbits` where appropriate, "
"making generation of arbitrarily large random numbers more efficient.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1252
msgid ""
"The regular expression language accepted by the :mod:`re` module was "
"extended with simple conditional expressions, written as "
"``(?(group)A|B)``.  *group* is either a numeric group ID or a group name "
"defined with ``(?P<group>...)`` earlier in the expression.  If the "
"specified group matched, the regular expression pattern *A* will be "
"tested against the string; if the group didn't match, the pattern *B* "
"will be used instead. (Contributed by Gustavo Niemeyer.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1259
msgid ""
"The :mod:`re` module is also no longer recursive, thanks to a massive "
"amount of work by Gustavo Niemeyer.  In a recursive regular expression "
"engine, certain patterns result in a large amount of C stack space being "
"consumed, and it was possible to overflow the stack. For example, if you "
"matched a 30000-byte string of ``a`` characters against the expression "
"``(a|b)+``, one stack frame was consumed per character.  Python 2.3 tried"
" to check for stack overflow and raise a :exc:`RuntimeError` exception, "
"but certain patterns could sidestep the checking and if you were unlucky "
"Python could segfault. Python 2.4's regular expression engine can match "
"this pattern without problems."
msgstr ""

#: ../../whatsnew/2.4.rst:1269
msgid ""
"The :mod:`signal` module now performs tighter error-checking on the "
"parameters to the :func:`signal.signal` function.  For example, you can't"
" set a handler on the :const:`SIGKILL` signal; previous versions of "
"Python would quietly accept this, but 2.4 will raise a "
":exc:`RuntimeError` exception."
msgstr ""

#: ../../whatsnew/2.4.rst:1274
msgid ""
"Two new functions were added to the :mod:`socket` module. "
":func:`socketpair` returns a pair of connected sockets and "
"``getservbyport(port)`` looks up the service name for a given port "
"number. (Contributed by Dave Cole and Barry Warsaw.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1279
msgid ""
"The :func:`sys.exitfunc` function has been deprecated.  Code should be "
"using the existing :mod:`atexit` module, which correctly handles calling "
"multiple exit functions.  Eventually :func:`sys.exitfunc` will become a "
"purely internal interface, accessed only by :mod:`atexit`."
msgstr ""

#: ../../whatsnew/2.4.rst:1284
msgid ""
"The :mod:`tarfile` module now generates GNU-format tar files by default. "
"(Contributed by Lars Gust√§bel.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1287
msgid ""
"The :mod:`threading` module now has an elegantly simple way to support "
"thread-local data.  The module contains a :class:`local` class whose "
"attribute values are local to different threads. ::"
msgstr ""

#: ../../whatsnew/2.4.rst:1297
msgid ""
"Other threads can assign and retrieve their own values for the "
":attr:`number` and :attr:`url` attributes.  You can subclass "
":class:`local` to initialize attributes or to add methods. (Contributed "
"by Jim Fulton.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1301
msgid ""
"The :mod:`timeit` module now automatically disables periodic garbage "
"collection during the timing loop.  This change makes consecutive timings"
" more comparable.  (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1305
msgid ""
"The :mod:`weakref` module now supports a wider variety of objects "
"including Python functions, class instances, sets, frozensets, deques, "
"arrays, files, sockets, and regular expression pattern objects. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1310
msgid ""
"The :mod:`xmlrpclib` module now supports a multi-call extension for "
"transmitting multiple XML-RPC calls in a single HTTP operation. "
"(Contributed by Brian Quinlan.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1314
msgid ""
"The :mod:`mpz`, :mod:`rotor`, and :mod:`xreadlines` modules have  been "
"removed."
msgstr ""

#: ../../whatsnew/2.4.rst:1323
msgid "cookielib"
msgstr ""

#: ../../whatsnew/2.4.rst:1325
msgid ""
"The :mod:`cookielib` library supports client-side handling for HTTP "
"cookies, mirroring the :mod:`Cookie` module's server-side cookie support."
" Cookies are stored in cookie jars; the library transparently stores "
"cookies offered by the web server in the cookie jar, and fetches the "
"cookie from the jar when connecting to the server. As in web browsers, "
"policy objects control whether cookies are accepted or not."
msgstr ""

#: ../../whatsnew/2.4.rst:1332
msgid ""
"In order to store cookies across sessions, two implementations of cookie "
"jars are provided: one that stores cookies in the Netscape format so "
"applications can use the Mozilla or Lynx cookie files, and one that "
"stores cookies in the same format as the Perl libwww library."
msgstr ""

#: ../../whatsnew/2.4.rst:1337
msgid ""
":mod:`urllib2` has been changed to interact with :mod:`cookielib`: "
":class:`HTTPCookieProcessor` manages a cookie jar that is used when "
"accessing URLs."
msgstr ""

#: ../../whatsnew/2.4.rst:1341
msgid "This module was contributed by John J. Lee."
msgstr ""

#: ../../whatsnew/2.4.rst:1347 ../../whatsnew/3.4.rst:776
#: ../../whatsnew/3.5.rst:1088
msgid "doctest"
msgstr ""

#: ../../whatsnew/2.4.rst:1349
msgid ""
"The :mod:`doctest` module underwent considerable refactoring thanks to "
"Edward Loper and Tim Peters.  Testing can still be as simple as running "
":func:`doctest.testmod`, but the refactorings allow customizing the "
"module's operation in various ways"
msgstr ""

#: ../../whatsnew/2.4.rst:1354
msgid ""
"The new :class:`DocTestFinder` class extracts the tests from a given  "
"object's docstrings::"
msgstr ""

#: ../../whatsnew/2.4.rst:1370
msgid ""
"The new :class:`DocTestRunner` class then runs individual tests and can "
"produce a summary of the results::"
msgstr ""

#: ../../whatsnew/2.4.rst:1379
msgid "The above example produces the following output::"
msgstr ""

#: ../../whatsnew/2.4.rst:1387
msgid ""
":class:`DocTestRunner` uses an instance of the :class:`OutputChecker` "
"class to compare the expected output with the actual output.  This class "
"takes a number of different flags that customize its behaviour; ambitious"
" users can also write a completely new subclass of "
":class:`OutputChecker`."
msgstr ""

#: ../../whatsnew/2.4.rst:1392
msgid ""
"The default output checker provides a number of handy features. For "
"example, with the :const:`doctest.ELLIPSIS` option flag, an ellipsis "
"(``...``) in the expected output matches any substring,  making it easier"
" to accommodate outputs that vary in minor ways::"
msgstr ""

#: ../../whatsnew/2.4.rst:1403
msgid "Another special string, ``<BLANKLINE>``, matches a blank line::"
msgstr ""

#: ../../whatsnew/2.4.rst:1411
msgid ""
"Another new capability is producing a diff-style display of the output by"
" specifying the :const:`doctest.REPORT_UDIFF` (unified diffs), "
":const:`doctest.REPORT_CDIFF` (context diffs), or "
":const:`doctest.REPORT_NDIFF` (delta-style) option flags.  For example::"
msgstr ""

#: ../../whatsnew/2.4.rst:1427
msgid ""
"Running the above function's tests with :const:`doctest.REPORT_UDIFF` "
"specified, you get the following output:"
msgstr ""

#: ../../whatsnew/2.4.rst:1450
msgid "Some of the changes to Python's build process and to the C API are:"
msgstr ""

#: ../../whatsnew/2.4.rst:1452
msgid ""
"Three new convenience macros were added for common return values from "
"extension functions: :c:macro:`Py_RETURN_NONE`, "
":c:macro:`Py_RETURN_TRUE`, and :c:macro:`Py_RETURN_FALSE`. (Contributed "
"by Brett Cannon.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1456
msgid ""
"Another new macro, :c:macro:`Py_CLEAR(obj)`,  decreases the reference "
"count of *obj* and sets *obj* to the null pointer.  (Contributed by Jim "
"Fulton.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1459
msgid ""
"A new function, ``PyTuple_Pack(N, obj1, obj2, ..., objN)``, constructs "
"tuples from a variable length argument list of Python objects.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1463
msgid ""
"A new function, ``PyDict_Contains(d, k)``, implements fast dictionary "
"lookups without masking exceptions raised during the look-up process. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1467
msgid ""
"The :c:macro:`Py_IS_NAN(X)` macro returns 1 if  its float or double "
"argument *X* is a NaN.   (Contributed by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1470
msgid ""
"C code can avoid unnecessary locking by using the new "
":c:func:`PyEval_ThreadsInitialized` function to tell  if any thread "
"operations have been performed.  If this function  returns false, no lock"
" operations are needed. (Contributed by Nick Coghlan.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1475
msgid ""
"A new function, :c:func:`PyArg_VaParseTupleAndKeywords`, is the same as "
":c:func:`PyArg_ParseTupleAndKeywords` but takes a  :c:type:`va_list` "
"instead of a number of arguments. (Contributed by Greg Chapman.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1479
msgid ""
"A new method flag, :const:`METH_COEXISTS`, allows a function defined in "
"slots to co-exist with a :c:type:`PyCFunction` having the same name.  "
"This can halve the access time for a method such as "
":meth:`set.__contains__`.  (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1484
msgid ""
"Python can now be built with additional profiling for the interpreter "
"itself, intended as an aid to people developing the Python core.  "
"Providing :option:`!--enable-profiling` to the :program:`configure` "
"script will let you profile the interpreter with :program:`gprof`, and "
"providing the :option:`!--with-tsc` switch enables profiling using the "
"Pentium's Time-Stamp-Counter register.  Note that the :option:`!--with-"
"tsc` switch is slightly misnamed, because the profiling feature also "
"works on the PowerPC platform, though that processor architecture doesn't"
" call that register \"the TSC register\".  (Contributed by Jeremy "
"Hylton.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1494
msgid ""
"The :c:type:`tracebackobject` type has been renamed to "
":c:type:`PyTracebackObject`."
msgstr ""

#: ../../whatsnew/2.4.rst:1503
msgid ""
"The Windows port now builds under MSVC++ 7.1 as well as version 6. "
"(Contributed by Martin von L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.4.rst:1510
msgid "Porting to Python 2.4"
msgstr ""

#: ../../whatsnew/2.4.rst:1515
msgid ""
"Left shifts and hexadecimal/octal constants that are too  large no longer"
" trigger a :exc:`FutureWarning` and return  a value limited to 32 or 64 "
"bits; instead they return a long integer."
msgstr ""

#: ../../whatsnew/2.4.rst:1522
msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return  "
"an empty list instead of raising a :exc:`TypeError` exception if called "
"with no arguments."
msgstr ""

#: ../../whatsnew/2.4.rst:1526
msgid ""
"You can no longer compare the :class:`date` and "
":class:`~datetime.datetime` instances provided by the :mod:`datetime` "
"module.  Two  instances of different classes will now always be unequal, "
"and  relative comparisons (``<``, ``>``) will raise a :exc:`TypeError`."
msgstr ""

#: ../../whatsnew/2.4.rst:1531
msgid ""
":func:`dircache.listdir` now passes exceptions to the caller instead of "
"returning empty lists."
msgstr ""

#: ../../whatsnew/2.4.rst:1534
msgid ""
":func:`LexicalHandler.startDTD` used to receive the public and system IDs"
" in the wrong order.  This has been corrected; applications relying on "
"the wrong order need to be fixed."
msgstr ""

#: ../../whatsnew/2.4.rst:1538
msgid ""
":func:`fcntl.ioctl` now warns if the *mutate*  argument is omitted and "
"relevant."
msgstr ""

#: ../../whatsnew/2.4.rst:1541
msgid "The :mod:`tarfile` module now generates GNU-format tar files by default."
msgstr ""

#: ../../whatsnew/2.4.rst:1543
msgid ""
"Encountering a failure while importing a module no longer leaves a "
"partially-initialized module object in ``sys.modules``."
msgstr ""

#: ../../whatsnew/2.4.rst:1546
msgid ""
":const:`None` is now a constant; code that binds a new value to  the name"
" ``None`` is now a syntax error."
msgstr ""

#: ../../whatsnew/2.4.rst:1549
msgid ""
"The :func:`signals.signal` function now raises a :exc:`RuntimeError` "
"exception for certain illegal values; previously these errors would pass "
"silently.  For example, you can no longer set a handler on the "
":const:`SIGKILL` signal."
msgstr ""

#: ../../whatsnew/2.4.rst:1561
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this "
"article: Koray Can, Hye-Shik Chang, Michael Dyck, Raymond Hettinger, "
"Brian Hurt, Hamish Lawson, Fredrik Lundh, Sean Reifschneider, Sadruddin "
"Rejeb."
msgstr ""

#: ../../whatsnew/2.5.rst:3
msgid "What's New in Python 2.5"
msgstr ""

#: ../../whatsnew/2.5.rst:12
msgid ""
"This article explains the new features in Python 2.5.  The final release "
"of Python 2.5 is scheduled for August 2006; :pep:`356` describes the "
"planned release schedule."
msgstr ""

#: ../../whatsnew/2.5.rst:16
msgid ""
"The changes in Python 2.5 are an interesting mix of language and library "
"improvements. The library enhancements will be more important to Python's"
" user community, I think, because several widely-useful packages were "
"added.  New modules include ElementTree for XML processing "
"(:mod:`xml.etree`), the SQLite database module (:mod:`sqlite`), and the "
":mod:`ctypes` module for calling C functions."
msgstr ""

#: ../../whatsnew/2.5.rst:23
msgid ""
"The language changes are of middling significance.  Some pleasant new "
"features were added, but most of them aren't features that you'll use "
"every day. Conditional expressions were finally added to the language "
"using a novel syntax; see section :ref:`pep-308`.  The new "
"':keyword:`with`' statement will make writing cleanup code easier "
"(section :ref:`pep-343`).  Values can now be passed into generators "
"(section :ref:`pep-342`).  Imports are now visible as either absolute or "
"relative (section :ref:`pep-328`).  Some corner cases of exception "
"handling are handled better (section :ref:`pep-341`).  All these "
"improvements are worthwhile, but they're improvements to one specific "
"language feature or another; none of them are broad modifications to "
"Python's semantics."
msgstr ""

#: ../../whatsnew/2.5.rst:34
msgid ""
"As well as the language and library additions, other improvements and "
"bugfixes were made throughout the source tree.  A search through the SVN "
"change logs finds there were 353 patches applied and 458 bugs fixed "
"between Python 2.4 and 2.5.  (Both figures are likely to be "
"underestimates.)"
msgstr ""

#: ../../whatsnew/2.5.rst:39
msgid ""
"This article doesn't try to be a complete specification of the new "
"features; instead changes are briefly introduced using helpful examples."
"  For full details, you should always refer to the documentation for "
"Python 2.5 at https://docs.python.org. If you want to understand the "
"complete implementation and design rationale, refer to the PEP for a "
"particular new feature."
msgstr ""

#: ../../whatsnew/2.5.rst:45
msgid ""
"Comments, suggestions, and error reports for this document are welcome; "
"please e-mail them to the author or open a bug in the Python bug tracker."
msgstr ""

#: ../../whatsnew/2.5.rst:54
msgid "PEP 308: Conditional Expressions"
msgstr ""

#: ../../whatsnew/2.5.rst:56
msgid ""
"For a long time, people have been requesting a way to write conditional "
"expressions, which are expressions that return value A or value B "
"depending on whether a Boolean value is true or false.  A conditional "
"expression lets you write a single assignment statement that has the same"
" effect as the following::"
msgstr ""

#: ../../whatsnew/2.5.rst:66
msgid ""
"There have been endless tedious discussions of syntax on both python-dev "
"and comp.lang.python.  A vote was even held that found the majority of "
"voters wanted conditional expressions in some form, but there was no "
"syntax that was preferred by a clear majority. Candidates included C's "
"``cond ? true_v : false_v``, ``if cond then true_v else false_v``, and 16"
" other variations."
msgstr ""

#: ../../whatsnew/2.5.rst:72
msgid "Guido van Rossum eventually chose a surprising syntax::"
msgstr ""

#: ../../whatsnew/2.5.rst:76
msgid ""
"Evaluation is still lazy as in existing Boolean expressions, so the order"
" of evaluation jumps around a bit.  The *condition* expression in the "
"middle is evaluated first, and the *true_value* expression is evaluated "
"only if the condition was true.  Similarly, the *false_value* expression "
"is only evaluated when the condition is false."
msgstr ""

#: ../../whatsnew/2.5.rst:82
msgid ""
"This syntax may seem strange and backwards; why does the condition go in "
"the *middle* of the expression, and not in the front as in C's ``c ? x : "
"y``?  The decision was checked by applying the new syntax to the modules "
"in the standard library and seeing how the resulting code read.  In many "
"cases where a conditional expression is used, one value seems to be the "
"'common case' and one value is an 'exceptional case', used only on rarer "
"occasions when the condition isn't met.  The conditional syntax makes "
"this pattern a bit more obvious::"
msgstr ""

#: ../../whatsnew/2.5.rst:92
msgid ""
"I read the above statement as meaning \"here *contents* is  usually "
"assigned a value of ``doc+'\\n'``; sometimes  *doc* is empty, in which "
"special case an empty string is returned.\"   I doubt I will use "
"conditional expressions very often where there  isn't a clear common and "
"uncommon case."
msgstr ""

#: ../../whatsnew/2.5.rst:97
msgid ""
"There was some discussion of whether the language should require "
"surrounding conditional expressions with parentheses.  The decision was "
"made to *not* require parentheses in the Python language's grammar, but "
"as a matter of style I think you should always use them. Consider these "
"two statements::"
msgstr ""

#: ../../whatsnew/2.5.rst:108
msgid ""
"In the first version, I think a reader's eye might group the statement "
"into 'level = 1', 'if logging', 'else 0', and think that the condition "
"decides whether the assignment to *level* is performed.  The second "
"version reads better, in my opinion, because it makes it clear that the "
"assignment is always performed and the choice is being made between two "
"values."
msgstr ""

#: ../../whatsnew/2.5.rst:114
msgid ""
"Another reason for including the brackets: a few odd combinations of list"
" comprehensions and lambdas could look like incorrect conditional "
"expressions. See :pep:`308` for some examples.  If you put parentheses "
"around your conditional expressions, you won't run into this case."
msgstr ""

#: ../../whatsnew/2.5.rst:123
msgid ":pep:`308` - Conditional Expressions"
msgstr ""

#: ../../whatsnew/2.5.rst:123
msgid ""
"PEP written by Guido van Rossum and Raymond D. Hettinger; implemented by "
"Thomas Wouters."
msgstr ""

#: ../../whatsnew/2.5.rst:132
msgid "PEP 309: Partial Function Application"
msgstr ""

#: ../../whatsnew/2.5.rst:134
msgid ""
"The :mod:`functools` module is intended to contain tools for functional-"
"style programming."
msgstr ""

#: ../../whatsnew/2.5.rst:137
msgid ""
"One useful tool in this module is the :func:`partial` function. For "
"programs written in a functional style, you'll sometimes want to "
"construct variants of existing functions that have some of the parameters"
" filled in.  Consider a Python function ``f(a, b, c)``; you could create "
"a new function ``g(b, c)`` that was equivalent to ``f(1, b, c)``.  This "
"is called \"partial function application\"."
msgstr ""

#: ../../whatsnew/2.5.rst:144
msgid ""
":func:`partial` takes the arguments ``(function, arg1, arg2, ... "
"kwarg1=value1, kwarg2=value2)``.  The resulting object is callable, so "
"you can just call it to invoke *function* with the filled-in arguments."
msgstr ""

#: ../../whatsnew/2.5.rst:148
msgid "Here's a small but realistic example::"
msgstr ""

#: ../../whatsnew/2.5.rst:160
msgid ""
"Here's another example, from a program that uses PyGTK.  Here a context-"
"sensitive pop-up menu is being constructed dynamically.  The callback "
"provided for the menu option is a partially applied version of the "
":meth:`open_item` method, where the first argument has been provided. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:173
msgid ""
"Another function in the :mod:`functools` module is the "
"``update_wrapper(wrapper, wrapped)`` function that helps you write well-"
"behaved decorators.  :func:`update_wrapper` copies the name, module, and "
"docstring attribute to a wrapper function so that tracebacks inside the "
"wrapped function are easier to understand.  For example, you might "
"write::"
msgstr ""

#: ../../whatsnew/2.5.rst:186
msgid ""
":func:`wraps` is a decorator that can be used inside your own decorators "
"to copy the wrapped function's information.  An alternate  version of the"
" previous example would be::"
msgstr ""

#: ../../whatsnew/2.5.rst:201
msgid ":pep:`309` - Partial Function Application"
msgstr ""

#: ../../whatsnew/2.5.rst:201
msgid ""
"PEP proposed and written by Peter Harris; implemented by Hye-Shik Chang "
"and Nick Coghlan, with adaptations by Raymond Hettinger."
msgstr ""

#: ../../whatsnew/2.5.rst:210
msgid "PEP 314: Metadata for Python Software Packages v1.1"
msgstr ""

#: ../../whatsnew/2.5.rst:212
msgid ""
"Some simple dependency support was added to Distutils.  The :func:`setup`"
" function now has ``requires``, ``provides``, and ``obsoletes`` keyword "
"parameters.  When you build a source distribution using the ``sdist`` "
"command, the dependency information will be recorded in the :file:`PKG-"
"INFO` file."
msgstr ""

#: ../../whatsnew/2.5.rst:217
msgid ""
"Another new keyword parameter is ``download_url``, which should be set to"
" a URL for the package's source code.  This means it's now possible to "
"look up an entry in the package index, determine the dependencies for a "
"package, and download the required packages. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:231
msgid ""
"Another new enhancement to the Python package index at https://pypi.org "
"is storing source and binary archives for a package.  The new "
":command:`upload` Distutils command will upload a package to the "
"repository."
msgstr ""

#: ../../whatsnew/2.5.rst:236
msgid ""
"Before a package can be uploaded, you must be able to build a "
"distribution using the :command:`sdist` Distutils command.  Once that "
"works, you can run ``python setup.py upload`` to add your package to the "
"PyPI archive.  Optionally you can GPG-sign the package by supplying the "
":option:`!--sign` and :option:`!--identity` options."
msgstr ""

#: ../../whatsnew/2.5.rst:242
msgid "Package uploading was implemented by Martin von L√∂wis and Richard Jones."
msgstr ""

#: ../../whatsnew/2.5.rst:248
msgid ":pep:`314` - Metadata for Python Software Packages v1.1"
msgstr ""

#: ../../whatsnew/2.5.rst:248
msgid ""
"PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred Drake;"
" implemented by Richard Jones and Fred Drake."
msgstr ""

#: ../../whatsnew/2.5.rst:257
msgid "PEP 328: Absolute and Relative Imports"
msgstr ""

#: ../../whatsnew/2.5.rst:259
msgid ""
"The simpler part of :pep:`328` was implemented in Python 2.4: parentheses"
" could now be used to enclose the names imported from a module using the "
"``from ... import ...`` statement, making it easier to import many "
"different names."
msgstr ""

#: ../../whatsnew/2.5.rst:263
msgid ""
"The more complicated part has been implemented in Python 2.5: importing a"
" module can be specified to use absolute or package-relative imports.  "
"The plan is to move toward making absolute imports the default in future "
"versions of Python."
msgstr ""

#: ../../whatsnew/2.5.rst:267
msgid "Let's say you have a package directory like this::"
msgstr ""

#: ../../whatsnew/2.5.rst:274
msgid ""
"This defines a package named :mod:`pkg` containing the :mod:`pkg.main` "
"and :mod:`pkg.string` submodules."
msgstr ""

#: ../../whatsnew/2.5.rst:277
msgid ""
"Consider the code in the :file:`main.py` module.  What happens if it "
"executes the statement ``import string``?  In Python 2.4 and earlier, it "
"will first look in the package's directory to perform a relative import, "
"finds :file:`pkg/string.py`, imports the contents of that file as the "
":mod:`pkg.string` module, and that module is bound to the name ``string``"
" in the :mod:`pkg.main` module's namespace."
msgstr ""

#: ../../whatsnew/2.5.rst:284
msgid ""
"That's fine if :mod:`pkg.string` was what you wanted.  But what if you "
"wanted Python's standard :mod:`string` module?  There's no clean way to "
"ignore :mod:`pkg.string` and look for the standard module; generally you "
"had to look at the contents of ``sys.modules``, which is slightly "
"unclean.    Holger Krekel's :mod:`py.std` package provides a tidier way "
"to perform imports from the standard library, ``import py; "
"py.std.string.join()``, but that package isn't available on all Python "
"installations."
msgstr ""

#: ../../whatsnew/2.5.rst:292
msgid ""
"Reading code which relies on relative imports is also less clear, because"
" a reader may be confused about which module, :mod:`string` or "
":mod:`pkg.string`, is intended to be used.  Python users soon learned not"
" to duplicate the names of standard library modules in the names of their"
" packages' submodules, but you can't protect against having your "
"submodule's name being used for a new module added in a future version of"
" Python."
msgstr ""

#: ../../whatsnew/2.5.rst:299
msgid ""
"In Python 2.5, you can switch :keyword:`import`'s behaviour to  absolute "
"imports using a ``from __future__ import absolute_import`` directive.  "
"This absolute-import behaviour will become the default in a future "
"version (probably Python 2.7).  Once absolute imports  are the default, "
"``import string`` will always find the standard library's version. It's "
"suggested that users should begin using absolute imports as much as "
"possible, so it's preferable to begin writing ``from pkg import string`` "
"in your code."
msgstr ""

#: ../../whatsnew/2.5.rst:307
msgid ""
"Relative imports are still possible by adding a leading period  to the "
"module name when using the ``from ... import`` form::"
msgstr ""

#: ../../whatsnew/2.5.rst:315
msgid ""
"This imports the :mod:`string` module relative to the current package, so"
" in :mod:`pkg.main` this will import *name1* and *name2* from "
":mod:`pkg.string`. Additional leading periods perform the relative import"
" starting from the parent of the current package.  For example, code in "
"the :mod:`A.B.C` module can do::"
msgstr ""

#: ../../whatsnew/2.5.rst:324
msgid ""
"Leading periods cannot be used with the ``import modname``  form of the "
"import statement, only the ``from ... import`` form."
msgstr ""

#: ../../whatsnew/2.5.rst:331
msgid "PEP written by Aahz; implemented by Thomas Wouters."
msgstr ""

#: ../../whatsnew/2.5.rst:333
msgid "https://pylib.readthedocs.io/"
msgstr ""

#: ../../whatsnew/2.5.rst:334
msgid "The py library by Holger Krekel, which contains the :mod:`py.std` package."
msgstr ""

#: ../../whatsnew/2.5.rst:342
msgid "PEP 338: Executing Modules as Scripts"
msgstr ""

#: ../../whatsnew/2.5.rst:344
msgid ""
"The :option:`-m` switch added in Python 2.4 to execute a module as a "
"script gained a few more abilities.  Instead of being implemented in C "
"code inside the Python interpreter, the switch now uses an implementation"
" in a new module, :mod:`runpy`."
msgstr ""

#: ../../whatsnew/2.5.rst:349
msgid ""
"The :mod:`runpy` module implements a more sophisticated import mechanism "
"so that it's now possible to run modules in a package such as "
":mod:`pychecker.checker`. The module also supports alternative import "
"mechanisms such as the :mod:`zipimport` module.  This means you can add a"
" .zip archive's path to ``sys.path`` and then use the :option:`-m` switch"
" to execute code from the archive."
msgstr ""

#: ../../whatsnew/2.5.rst:359
msgid ":pep:`338` - Executing modules as scripts"
msgstr ""

#: ../../whatsnew/2.5.rst:360
msgid "PEP written and  implemented by Nick Coghlan."
msgstr ""

#: ../../whatsnew/2.5.rst:368
msgid "PEP 341: Unified try/except/finally"
msgstr ""

#: ../../whatsnew/2.5.rst:370
msgid ""
"Until Python 2.5, the :keyword:`try` statement came in two flavours. You "
"could use a :keyword:`finally` block to ensure that code is always "
"executed, or one or more :keyword:`except` blocks to catch  specific "
"exceptions.  You couldn't combine both :keyword:`!except` blocks and a "
":keyword:`!finally` block, because generating the right bytecode for the "
"combined version was complicated and it wasn't clear what the semantics "
"of the combined statement should be."
msgstr ""

#: ../../whatsnew/2.5.rst:377
msgid ""
"Guido van Rossum spent some time working with Java, which does support "
"the equivalent of combining :keyword:`except` blocks and a "
":keyword:`finally` block, and this clarified what the statement should "
"mean.  In Python 2.5, you can now write::"
msgstr ""

#: ../../whatsnew/2.5.rst:393
msgid ""
"The code in *block-1* is executed.  If the code raises an exception, the "
"various :keyword:`except` blocks are tested: if the exception is of class"
" :class:`Exception1`, *handler-1* is executed; otherwise if it's of class"
" :class:`Exception2`, *handler-2* is executed, and so forth.  If no "
"exception is raised, the *else-block* is executed."
msgstr ""

#: ../../whatsnew/2.5.rst:399
msgid ""
"No matter what happened previously, the *final-block* is executed once "
"the code block is complete and any raised exceptions handled. Even if "
"there's an error in an exception handler or the *else-block* and a new "
"exception is raised, the code in the *final-block* is still run."
msgstr ""

#: ../../whatsnew/2.5.rst:407
msgid ":pep:`341` - Unifying try-except and try-finally"
msgstr ""

#: ../../whatsnew/2.5.rst:408
msgid "PEP written by Georg Brandl;  implementation by Thomas Lee."
msgstr ""

#: ../../whatsnew/2.5.rst:416
msgid "PEP 342: New Generator Features"
msgstr ""

#: ../../whatsnew/2.5.rst:418
msgid ""
"Python 2.5 adds a simple way to pass values *into* a generator. As "
"introduced in Python 2.3, generators only produce output; once a "
"generator's code was invoked to create an iterator, there was no way to "
"pass any new information into the function when its execution is resumed."
"  Sometimes the ability to pass in some information would be useful.  "
"Hackish solutions to this include making the generator's code look at a "
"global variable and then changing the global variable's value, or passing"
" in some mutable object that callers then modify."
msgstr ""

#: ../../whatsnew/2.5.rst:426
msgid "To refresh your memory of basic generators, here's a simple example::"
msgstr ""

#: ../../whatsnew/2.5.rst:434
msgid ""
"When you call ``counter(10)``, the result is an iterator that returns the"
" values from 0 up to 9.  On encountering the :keyword:`yield` statement, "
"the iterator returns the provided value and suspends the function's "
"execution, preserving the local variables. Execution resumes on the "
"following call to the iterator's :meth:`next` method, picking up after "
"the :keyword:`!yield` statement."
msgstr ""

#: ../../whatsnew/2.5.rst:440
msgid ""
"In Python 2.3, :keyword:`yield` was a statement; it didn't return any "
"value.  In 2.5, :keyword:`!yield` is now an expression, returning a value"
" that can be assigned to a variable or otherwise operated on::"
msgstr ""

#: ../../whatsnew/2.5.rst:446
msgid ""
"I recommend that you always put parentheses around a :keyword:`yield` "
"expression when you're doing something with the returned value, as in the"
" above example. The parentheses aren't always necessary, but it's easier "
"to always add them instead of having to remember when they're needed."
msgstr ""

#: ../../whatsnew/2.5.rst:451
msgid ""
"(:pep:`342` explains the exact rules, which are that a :keyword:`yield`\\"
" -expression must always be parenthesized except when it occurs at the "
"top-level expression on the right-hand side of an assignment.  This means"
" you can write ``val = yield i`` but have to use parentheses when there's"
" an operation, as in ``val = (yield i) + 12``.)"
msgstr ""

#: ../../whatsnew/2.5.rst:458
msgid ""
"Values are sent into a generator by calling its ``send(value)`` method.  "
"The generator's code is then resumed and the :keyword:`yield` expression "
"returns the specified *value*.  If the regular :meth:`next` method is "
"called, the :keyword:`!yield` returns :const:`None`."
msgstr ""

#: ../../whatsnew/2.5.rst:463
msgid ""
"Here's the previous example, modified to allow changing the value of the "
"internal counter. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:476
msgid "And here's an example of changing the counter::"
msgstr ""

#: ../../whatsnew/2.5.rst:493
msgid ""
":keyword:`yield` will usually return :const:`None`, so you should always "
"check for this case.  Don't just use its value in expressions unless "
"you're sure that the :meth:`send` method will be the only method used to "
"resume your generator function."
msgstr ""

#: ../../whatsnew/2.5.rst:498
msgid ""
"In addition to :meth:`send`, there are two other new methods on "
"generators:"
msgstr ""

#: ../../whatsnew/2.5.rst:500
msgid ""
"``throw(type, value=None, traceback=None)`` is used to raise an exception"
" inside the generator; the exception is raised by the :keyword:`yield` "
"expression where the generator's execution is paused."
msgstr ""

#: ../../whatsnew/2.5.rst:504
msgid ""
":meth:`close` raises a new :exc:`GeneratorExit` exception inside the "
"generator to terminate the iteration.  On receiving this exception, the "
"generator's code must either raise :exc:`GeneratorExit` or "
":exc:`StopIteration`.  Catching the :exc:`GeneratorExit` exception and "
"returning a value is illegal and will trigger a :exc:`RuntimeError`; if "
"the function raises some other exception, that exception is propagated to"
" the caller.  :meth:`close` will also be called by Python's garbage "
"collector when the generator is garbage-collected."
msgstr ""

#: ../../whatsnew/2.5.rst:512
msgid ""
"If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I "
"suggest using a ``try: ... finally:`` suite instead of  catching "
":exc:`GeneratorExit`."
msgstr ""

#: ../../whatsnew/2.5.rst:515
msgid ""
"The cumulative effect of these changes is to turn generators from one-way"
" producers of information into both producers and consumers."
msgstr ""

#: ../../whatsnew/2.5.rst:518
msgid ""
"Generators also become *coroutines*, a more generalized form of "
"subroutines. Subroutines are entered at one point and exited at another "
"point (the top of the function, and a :keyword:`return` statement), but "
"coroutines can be entered, exited, and resumed at many different points "
"(the :keyword:`yield` statements). We'll have to figure out patterns for "
"using coroutines effectively in Python."
msgstr ""

#: ../../whatsnew/2.5.rst:524
msgid ""
"The addition of the :meth:`close` method has one side effect that isn't "
"obvious. :meth:`close` is called when a generator is garbage-collected, "
"so this means the generator's code gets one last chance to run before the"
" generator is destroyed. This last chance means that ``try...finally`` "
"statements in generators can now be guaranteed to work; the "
":keyword:`finally` clause will now always get a chance to run.  The "
"syntactic restriction that you couldn't mix :keyword:`yield` statements "
"with a ``try...finally`` suite has therefore been removed.  This seems "
"like a minor bit of language trivia, but using generators and "
"``try...finally`` is actually necessary in order to implement the "
":keyword:`with` statement described by :pep:`343`.  I'll look at this new"
" statement in the following  section."
msgstr ""

#: ../../whatsnew/2.5.rst:536
msgid ""
"Another even more esoteric effect of this change: previously, the "
":attr:`gi_frame` attribute of a generator was always a frame object. It's"
" now possible for :attr:`gi_frame` to be ``None`` once the generator has "
"been exhausted."
msgstr ""

#: ../../whatsnew/2.5.rst:549
msgid ":pep:`342` - Coroutines via Enhanced Generators"
msgstr ""

#: ../../whatsnew/2.5.rst:545
msgid ""
"PEP written by  Guido van Rossum and Phillip J. Eby; implemented by "
"Phillip J. Eby.  Includes examples of  some fancier uses of generators as"
" coroutines."
msgstr ""

#: ../../whatsnew/2.5.rst:548
msgid ""
"Earlier versions of these features were proposed in  :pep:`288` by "
"Raymond Hettinger and :pep:`325` by Samuele Pedroni."
msgstr ""

#: ../../whatsnew/2.5.rst:552
msgid "https://en.wikipedia.org/wiki/Coroutine"
msgstr ""

#: ../../whatsnew/2.5.rst:552
msgid "The Wikipedia entry for  coroutines."
msgstr ""

#: ../../whatsnew/2.5.rst:554
msgid "http://www.sidhe.org/~dan/blog/archives/000178.html"
msgstr ""

#: ../../whatsnew/2.5.rst:555
msgid ""
"An explanation of coroutines from a Perl point of view, written by Dan "
"Sugalski."
msgstr ""

#: ../../whatsnew/2.5.rst:563 ../../whatsnew/2.6.rst:248
msgid "PEP 343: The 'with' statement"
msgstr ""

#: ../../whatsnew/2.5.rst:565 ../../whatsnew/2.6.rst:259
msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In "
"this section, I'll discuss the statement as it will commonly be used.  In"
" the next section, I'll examine the implementation details and show how "
"to write objects for use with this statement."
msgstr ""

#: ../../whatsnew/2.5.rst:571
msgid ""
"The ':keyword:`with`' statement is a new control-flow structure whose "
"basic structure is::"
msgstr ""

#: ../../whatsnew/2.5.rst:577
msgid ""
"The expression is evaluated, and it should result in an object that "
"supports the context management protocol (that is, has :meth:`__enter__` "
"and :meth:`__exit__` methods."
msgstr ""

#: ../../whatsnew/2.5.rst:581 ../../whatsnew/2.6.rst:275
msgid ""
"The object's :meth:`__enter__` is called before *with-block* is executed "
"and therefore can run set-up code. It also may return a value that is "
"bound to the name *variable*, if given.  (Note carefully that *variable* "
"is *not* assigned the result of *expression*.)"
msgstr ""

#: ../../whatsnew/2.5.rst:586 ../../whatsnew/2.6.rst:280
msgid ""
"After execution of the *with-block* is finished, the object's "
":meth:`__exit__` method is called, even if the block raised an exception,"
" and can therefore run clean-up code."
msgstr ""

#: ../../whatsnew/2.5.rst:590
msgid ""
"To enable the statement in Python 2.5, you need to add the following "
"directive to your module::"
msgstr ""

#: ../../whatsnew/2.5.rst:595
msgid "The statement will always be enabled in Python 2.6."
msgstr ""

#: ../../whatsnew/2.5.rst:597 ../../whatsnew/2.6.rst:284
msgid ""
"Some standard Python objects now support the context management protocol "
"and can be used with the ':keyword:`with`' statement. File objects are "
"one example::"
msgstr ""

#: ../../whatsnew/2.5.rst:605 ../../whatsnew/2.6.rst:292
msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception"
" part-way through the block."
msgstr ""

#: ../../whatsnew/2.5.rst:611 ../../whatsnew/2.6.rst:298
msgid ""
"In this case, *f* is the same object created by :func:`open`, because "
":meth:`file.__enter__` returns *self*."
msgstr ""

#: ../../whatsnew/2.5.rst:614 ../../whatsnew/2.6.rst:301
msgid ""
"The :mod:`threading` module's locks and condition variables  also support"
" the ':keyword:`with`' statement::"
msgstr ""

#: ../../whatsnew/2.5.rst:622 ../../whatsnew/2.6.rst:309
msgid ""
"The lock is acquired before the block is executed and always released "
"once  the block is complete."
msgstr ""

#: ../../whatsnew/2.5.rst:625
msgid ""
"The new :func:`localcontext` function in the :mod:`decimal` module makes "
"it easy to save and restore the current decimal context, which "
"encapsulates the desired precision and rounding characteristics for "
"computations::"
msgstr ""

#: ../../whatsnew/2.5.rst:644 ../../whatsnew/2.6.rst:331
msgid "Writing Context Managers"
msgstr ""

#: ../../whatsnew/2.5.rst:646 ../../whatsnew/2.6.rst:333
msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. "
"Most people will only use ':keyword:`!with`' in company with existing "
"objects and don't need to know these details, so you can skip the rest of"
" this section if you like.  Authors of new objects will need to "
"understand the details of the underlying implementation and should keep "
"reading."
msgstr ""

#: ../../whatsnew/2.5.rst:652 ../../whatsnew/2.6.rst:339
msgid "A high-level explanation of the context management protocol is:"
msgstr ""

#: ../../whatsnew/2.5.rst:654 ../../whatsnew/2.6.rst:341
msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`__enter__` and"
" :meth:`__exit__` methods."
msgstr ""

#: ../../whatsnew/2.5.rst:658
msgid ""
"The context manager's :meth:`__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``'as VAR'`` clause is present, the"
" value is simply discarded."
msgstr ""

#: ../../whatsnew/2.5.rst:662 ../../whatsnew/2.6.rst:349
msgid "The code in *BLOCK* is executed."
msgstr ""

#: ../../whatsnew/2.5.rst:664
msgid ""
"If *BLOCK* raises an exception, the ``__exit__(type, value, traceback)`` "
"is called with the exception details, the same values returned by "
":func:`sys.exc_info`.  The method's return value controls whether the "
"exception is re-raised: any false value re-raises the exception, and "
"``True`` will result in suppressing it.  You'll only rarely want to "
"suppress the exception, because if you do the author of the code "
"containing the ':keyword:`with`' statement will never realize anything "
"went wrong."
msgstr ""

#: ../../whatsnew/2.5.rst:672 ../../whatsnew/2.6.rst:360
msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`__exit__` method is "
"still called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""

#: ../../whatsnew/2.5.rst:675 ../../whatsnew/2.6.rst:363
msgid ""
"Let's think through an example.  I won't present detailed code but will "
"only sketch the methods necessary for a database that supports "
"transactions."
msgstr ""

#: ../../whatsnew/2.5.rst:678 ../../whatsnew/2.6.rst:366
msgid ""
"(For people unfamiliar with database terminology: a set of changes to the"
" database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or"
" rolled back, meaning that the changes are all discarded and the database"
" is unchanged.  See any database textbook for more information.)"
msgstr ""

#: ../../whatsnew/2.5.rst:684 ../../whatsnew/2.6.rst:372
msgid ""
"Let's assume there's an object representing a database connection. Our "
"goal will be to let the user write code like this::"
msgstr ""

#: ../../whatsnew/2.5.rst:693 ../../whatsnew/2.6.rst:381
msgid ""
"The transaction should be committed if the code in the block runs "
"flawlessly or rolled back if there's an exception. Here's the basic "
"interface for :class:`DatabaseConnection` that I'll assume::"
msgstr ""

#: ../../whatsnew/2.5.rst:706 ../../whatsnew/2.6.rst:394
msgid ""
"The :meth:`__enter__` method is pretty easy, having only to start a new "
"transaction.  For this application the resulting cursor object would be a"
" useful result, so the method will return it.  The user can then add ``as"
" cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:718 ../../whatsnew/2.6.rst:406
msgid ""
"The :meth:`__exit__` method is the most complicated because it's where "
"most of the work has to be done.  The method has to check if an exception"
" occurred.  If there was no exception, the transaction is committed.  The"
" transaction is rolled back if there was an exception."
msgstr ""

#: ../../whatsnew/2.5.rst:723 ../../whatsnew/2.6.rst:411
msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be "
"more explicit and add a :keyword:`return` statement at the marked "
"location. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:743 ../../whatsnew/2.6.rst:431
msgid "The contextlib module"
msgstr ""

#: ../../whatsnew/2.5.rst:745
msgid ""
"The new :mod:`contextlib` module provides some functions and a decorator "
"that are useful for writing objects for use with the ':keyword:`with`' "
"statement."
msgstr ""

#: ../../whatsnew/2.5.rst:748
msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a "
"single generator function instead of defining a new class.  The generator"
" should yield exactly one value.  The code up to the :keyword:`yield` "
"will be executed as the :meth:`__enter__` method, and the value yielded "
"will be the method's return value that will get bound to the variable in "
"the ':keyword:`with`' statement's :keyword:`!as` clause, if any.  The "
"code after the :keyword:`yield` will be executed in the :meth:`__exit__` "
"method.  Any exception raised in the block will be raised by the "
":keyword:`!yield` statement."
msgstr ""

#: ../../whatsnew/2.5.rst:757
msgid ""
"Our database example from the previous section could be written  using "
"this decorator as::"
msgstr ""

#: ../../whatsnew/2.5.rst:777 ../../whatsnew/2.6.rst:465
msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` "
"function that combines a number of context managers so you don't need to "
"write nested ':keyword:`with`' statements.  In this example, the single "
"':keyword:`!with`' statement both starts a database transaction and "
"acquires a thread lock::"
msgstr ""

#: ../../whatsnew/2.5.rst:786
msgid ""
"Finally, the ``closing(object)`` function returns *object* so that it can"
" be bound to a variable, and calls ``object.close`` at the end of the "
"block. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:803 ../../whatsnew/2.6.rst:492
msgid ":pep:`343` - The \"with\" statement"
msgstr ""

#: ../../whatsnew/2.5.rst:800 ../../whatsnew/2.6.rst:489
msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike "
"Bland, Guido van Rossum, and Neal Norwitz.  The PEP shows the code "
"generated for a ':keyword:`with`' statement, which can be helpful in "
"learning how the statement works."
msgstr ""

#: ../../whatsnew/2.5.rst:805 ../../whatsnew/2.6.rst:494
msgid "The documentation  for the :mod:`contextlib` module."
msgstr ""

#: ../../whatsnew/2.5.rst:813
msgid "PEP 352: Exceptions as New-Style Classes"
msgstr ""

#: ../../whatsnew/2.5.rst:815
msgid ""
"Exception classes can now be new-style classes, not just classic classes,"
" and the built-in :exc:`Exception` class and all the standard built-in "
"exceptions (:exc:`NameError`, :exc:`ValueError`, etc.) are now new-style "
"classes."
msgstr ""

#: ../../whatsnew/2.5.rst:819
msgid ""
"The inheritance hierarchy for exceptions has been rearranged a bit. In "
"2.5, the inheritance relationships are::"
msgstr ""

#: ../../whatsnew/2.5.rst:828
msgid ""
"This rearrangement was done because people often want to catch all "
"exceptions that indicate program errors.  :exc:`KeyboardInterrupt` and "
":exc:`SystemExit` aren't errors, though, and usually represent an "
"explicit action such as the user hitting :kbd:`Control-C` or code calling"
" :func:`sys.exit`.  A bare ``except:`` will catch all exceptions, so you "
"commonly need to list :exc:`KeyboardInterrupt` and :exc:`SystemExit` in "
"order to re-raise them.  The usual pattern is::"
msgstr ""

#: ../../whatsnew/2.5.rst:843
msgid ""
"In Python 2.5, you can now write ``except Exception`` to achieve the same"
" result, catching all the exceptions that usually indicate errors  but "
"leaving :exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in "
"previous versions, a bare ``except:`` still catches all exceptions."
msgstr ""

#: ../../whatsnew/2.5.rst:848
msgid ""
"The goal for Python 3.0 is to require any class raised as an exception to"
" derive from :exc:`BaseException` or some descendant of "
":exc:`BaseException`, and future releases in the Python 2.x series may "
"begin to enforce this constraint. Therefore, I suggest you begin making "
"all your exception classes derive from :exc:`Exception` now.  It's been "
"suggested that the bare ``except:`` form should be removed in Python 3.0,"
" but Guido van Rossum hasn't decided whether to do this or not."
msgstr ""

#: ../../whatsnew/2.5.rst:856
msgid ""
"Raising of strings as exceptions, as in the statement ``raise \"Error "
"occurred\"``, is deprecated in Python 2.5 and will trigger a warning.  "
"The aim is to be able to remove the string-exception feature in a few "
"releases."
msgstr ""

#: ../../whatsnew/2.5.rst:863
msgid ":pep:`352` - Required Superclass for Exceptions"
msgstr ""

#: ../../whatsnew/2.5.rst:864
msgid ""
"PEP written by  Brett Cannon and Guido van Rossum; implemented by Brett "
"Cannon."
msgstr ""

#: ../../whatsnew/2.5.rst:872
msgid "PEP 353: Using ssize_t as the index type"
msgstr ""

#: ../../whatsnew/2.5.rst:874
msgid ""
"A wide-ranging change to Python's C API, using a new  "
":c:type:`Py_ssize_t` type definition instead of :c:type:`int`,  will "
"permit the interpreter to handle more data on 64-bit platforms. This "
"change doesn't affect Python's capacity on 32-bit platforms."
msgstr ""

#: ../../whatsnew/2.5.rst:879
msgid ""
"Various pieces of the Python interpreter used C's :c:type:`int` type to "
"store sizes or counts; for example, the number of items in a list or "
"tuple were stored in an :c:type:`int`.  The C compilers for most 64-bit "
"platforms still define :c:type:`int` as a 32-bit type, so that meant that"
" lists could only hold up to ``2**31 - 1`` = 2147483647 items. (There are"
" actually a few different programming models that 64-bit C compilers can "
"use -- see http://www.unix.org/version2/whatsnew/lp64_wp.html for a "
"discussion -- but the most commonly available model leaves :c:type:`int` "
"as 32 bits.)"
msgstr ""

#: ../../whatsnew/2.5.rst:888
msgid ""
"A limit of 2147483647 items doesn't really matter on a 32-bit platform "
"because you'll run out of memory before hitting the length limit. Each "
"list item requires space for a pointer, which is 4 bytes, plus space for "
"a :c:type:`PyObject` representing the item.  2147483647\\*4 is already "
"more bytes than a 32-bit address space can contain."
msgstr ""

#: ../../whatsnew/2.5.rst:894
msgid ""
"It's possible to address that much memory on a 64-bit platform, however."
"  The pointers for a list that size would only require 16 GiB of space, "
"so it's not unreasonable that Python programmers might construct lists "
"that large. Therefore, the Python interpreter had to be changed to use "
"some type other than :c:type:`int`, and this will be a 64-bit type on "
"64-bit platforms.  The change will cause incompatibilities on 64-bit "
"machines, so it was deemed worth making the transition now, while the "
"number of 64-bit users is still relatively small. (In 5 or 10 years, we "
"may *all* be on 64-bit machines, and the transition would be more painful"
" then.)"
msgstr ""

#: ../../whatsnew/2.5.rst:904
msgid ""
"This change most strongly affects authors of C extension modules.   "
"Python strings and container types such as lists and tuples  now use "
":c:type:`Py_ssize_t` to store their size.   Functions such as "
":c:func:`PyList_Size`  now return :c:type:`Py_ssize_t`.  Code in "
"extension modules may therefore need to have some variables changed to "
":c:type:`Py_ssize_t`."
msgstr ""

#: ../../whatsnew/2.5.rst:910
msgid ""
"The :c:func:`PyArg_ParseTuple` and :c:func:`Py_BuildValue` functions have"
" a new conversion code, ``n``, for :c:type:`Py_ssize_t`.   "
":c:func:`PyArg_ParseTuple`'s ``s#`` and ``t#`` still output :c:type:`int`"
" by default, but you can define the macro  :c:macro:`PY_SSIZE_T_CLEAN` "
"before including :file:`Python.h`  to make them return "
":c:type:`Py_ssize_t`."
msgstr ""

#: ../../whatsnew/2.5.rst:916
msgid ""
":pep:`353` has a section on conversion guidelines that  extension authors"
" should read to learn about supporting 64-bit platforms."
msgstr ""

#: ../../whatsnew/2.5.rst:922
msgid ":pep:`353` - Using ssize_t as the index type"
msgstr ""

#: ../../whatsnew/2.5.rst:923
msgid "PEP written and implemented by Martin von L√∂wis."
msgstr ""

#: ../../whatsnew/2.5.rst:931
msgid "PEP 357: The '__index__' method"
msgstr ""

#: ../../whatsnew/2.5.rst:933
msgid ""
"The NumPy developers had a problem that could only be solved by adding a "
"new special method, :meth:`__index__`.  When using slice notation, as in "
"``[start:stop:step]``, the values of the *start*, *stop*, and *step* "
"indexes must all be either integers or long integers.  NumPy defines a "
"variety of specialized integer types corresponding to unsigned and signed"
" integers of 8, 16, 32, and 64 bits, but there was no way to signal that "
"these types could be used as slice indexes."
msgstr ""

#: ../../whatsnew/2.5.rst:941
msgid ""
"Slicing can't just use the existing :meth:`__int__` method because that "
"method is also used to implement coercion to integers.  If slicing used "
":meth:`__int__`, floating-point numbers would also become legal slice "
"indexes and that's clearly an undesirable behaviour."
msgstr ""

#: ../../whatsnew/2.5.rst:946
msgid ""
"Instead, a new special method called :meth:`__index__` was added.  It "
"takes no arguments and returns an integer giving the slice index to use."
"  For example::"
msgstr ""

#: ../../whatsnew/2.5.rst:953
msgid ""
"The return value must be either a Python integer or long integer. The "
"interpreter will check that the type returned is correct, and raises a "
":exc:`TypeError` if this requirement isn't met."
msgstr ""

#: ../../whatsnew/2.5.rst:957
msgid ""
"A corresponding :attr:`nb_index` slot was added to the C-level "
":c:type:`PyNumberMethods` structure to let C extensions implement this "
"protocol. ``PyNumber_Index(obj)`` can be used in extension code to call "
"the :meth:`__index__` function and retrieve its result."
msgstr ""

#: ../../whatsnew/2.5.rst:965
msgid ":pep:`357` - Allowing Any Object to be Used for Slicing"
msgstr ""

#: ../../whatsnew/2.5.rst:966
msgid "PEP written  and implemented by Travis Oliphant."
msgstr ""

#: ../../whatsnew/2.5.rst:976
msgid ""
"Here are all of the changes that Python 2.5 makes to the core Python "
"language."
msgstr ""

#: ../../whatsnew/2.5.rst:978
msgid ""
"The :class:`dict` type has a new hook for letting subclasses provide a "
"default value when a key isn't contained in the dictionary. When a key "
"isn't found, the dictionary's ``__missing__(key)`` method will be called."
"  This hook is used to implement the new :class:`defaultdict` class in "
"the :mod:`collections` module.  The following example defines a "
"dictionary  that returns zero for any missing key::"
msgstr ""

#: ../../whatsnew/2.5.rst:993
msgid ""
"Both 8-bit and Unicode strings have new ``partition(sep)``  and "
"``rpartition(sep)`` methods that simplify a common use case."
msgstr ""

#: ../../whatsnew/2.5.rst:996
msgid ""
"The ``find(S)`` method is often used to get an index which is then used "
"to slice the string and obtain the pieces that are before and after the "
"separator. ``partition(sep)`` condenses this pattern into a single method"
" call that returns a 3-tuple containing the substring before the "
"separator, the separator itself, and the substring after the separator.  "
"If the separator isn't found, the first element of the tuple is the "
"entire string and the other two elements are empty.  ``rpartition(sep)`` "
"also returns a 3-tuple but starts searching from the end of the string; "
"the ``r`` stands for 'reverse'."
msgstr ""

#: ../../whatsnew/2.5.rst:1005
msgid "Some examples::"
msgstr ""

#: ../../whatsnew/2.5.rst:1018
msgid ""
"(Implemented by Fredrik Lundh following a suggestion by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1020
msgid ""
"The :meth:`startswith` and :meth:`endswith` methods of string types now "
"accept tuples of strings to check for. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:1026
msgid "(Implemented by Georg Brandl following a suggestion by Tom Lynn.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1030
msgid ""
"The :func:`min` and :func:`max` built-in functions gained a ``key`` "
"keyword parameter analogous to the ``key`` argument for :meth:`sort`.  "
"This parameter supplies a function that takes a single argument and is "
"called for every value in the list; :func:`min`/:func:`max` will return "
"the element with the smallest/largest return value from this function. "
"For example, to find the longest string in a list, you can do::"
msgstr ""

#: ../../whatsnew/2.5.rst:1043
msgid "(Contributed by Steven Bethard and Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1045
msgid ""
"Two new built-in functions, :func:`any` and :func:`all`, evaluate whether"
" an iterator contains any true or false values.  :func:`any` returns "
":const:`True` if any value returned by the iterator is true; otherwise it"
" will return :const:`False`.  :func:`all` returns :const:`True` only if "
"all of the values returned by the iterator evaluate as true. (Suggested "
"by Guido van Rossum, and implemented by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1052
msgid ""
"The result of a class's :meth:`__hash__` method can now be either a long "
"integer or a regular integer.  If a long integer is returned, the hash of"
" that value is taken.  In earlier versions the hash value was required to"
" be a regular integer, but in 2.5 the :func:`id` built-in was changed to "
"always return non-negative numbers, and users often seem to use "
"``id(self)`` in :meth:`__hash__` methods (though this is discouraged)."
msgstr ""

#: ../../whatsnew/2.5.rst:1061
msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error "
"if a module contains string literals with 8-bit characters but doesn't "
"have an encoding declaration.  In Python 2.4 this triggered a warning, "
"not a syntax error.  See :pep:`263`  for how to declare a module's "
"encoding; for example, you might add  a line like this near the top of "
"the source file::"
msgstr ""

#: ../../whatsnew/2.5.rst:1069
msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to"
" compare a Unicode string and an 8-bit string  that can't be converted to"
" Unicode using the default ASCII encoding.   The result of the comparison"
" is false::"
msgstr ""

#: ../../whatsnew/2.5.rst:1081
msgid ""
"Previously this would raise a :class:`UnicodeDecodeError` exception, but "
"in 2.5 this could result in puzzling problems when accessing a "
"dictionary.  If you looked up ``unichr(128)`` and ``chr(128)`` was being "
"used as a key, you'd get a :class:`UnicodeDecodeError` exception.  Other "
"changes in 2.5 resulted in this exception being raised instead of "
"suppressed by the code in :file:`dictobject.c` that implements "
"dictionaries."
msgstr ""

#: ../../whatsnew/2.5.rst:1088
msgid ""
"Raising an exception for such a comparison is strictly correct, but the "
"change might have broken code, so instead  :class:`UnicodeWarning` was "
"introduced."
msgstr ""

#: ../../whatsnew/2.5.rst:1091
msgid "(Implemented by Marc-Andr√© Lemburg.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1093
msgid ""
"One error that Python programmers sometimes make is forgetting to include"
" an :file:`__init__.py` module in a package directory. Debugging this "
"mistake can be confusing, and usually requires running Python with the "
":option:`-v` switch to log all the paths searched. In Python 2.5, a new "
":exc:`ImportWarning` warning is triggered when an import would have "
"picked up a directory as a package but no :file:`__init__.py` was found."
"  This warning is silently ignored by default; provide the :option:`-Wd "
"<-W>` option when running the Python executable to display the warning "
"message. (Implemented by Thomas Wouters.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1102
msgid ""
"The list of base classes in a class definition can now be empty.   As an "
"example, this is now legal::"
msgstr ""

#: ../../whatsnew/2.5.rst:1108
msgid "(Implemented by Brett Cannon.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1116
msgid "Interactive Interpreter Changes"
msgstr ""

#: ../../whatsnew/2.5.rst:1118
msgid ""
"In the interactive interpreter, ``quit`` and ``exit``  have long been "
"strings so that new users get a somewhat helpful message when they try to"
" quit::"
msgstr ""

#: ../../whatsnew/2.5.rst:1124
msgid ""
"In Python 2.5, ``quit`` and ``exit`` are now objects that still produce "
"string representations of themselves, but are also callable. Newbies who "
"try ``quit()`` or ``exit()`` will now exit the interpreter as they "
"expect.  (Implemented by Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1129
msgid ""
"The Python executable now accepts the standard long options  "
":option:`--help` and :option:`--version`; on Windows,  it also accepts "
"the :option:`/? <-?>` option for displaying a help message. (Implemented "
"by Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1141
msgid ""
"Several of the optimizations were developed at the NeedForSpeed sprint, "
"an event held in Reykjavik, Iceland, from May 21--28 2006. The sprint "
"focused on speed enhancements to the CPython implementation and was "
"funded by EWT LLC with local support from CCP Games.  Those optimizations"
" added at this sprint are specially marked in the following list."
msgstr ""

#: ../../whatsnew/2.5.rst:1147
msgid ""
"When they were introduced  in Python 2.4, the built-in :class:`set` and "
":class:`frozenset` types were built on top of Python's dictionary type."
"   In 2.5 the internal data structure has been customized for "
"implementing sets, and as a result sets will use a third less memory and "
"are somewhat faster. (Implemented by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1153
msgid ""
"The speed of some Unicode operations, such as finding substrings, string "
"splitting, and character map encoding and decoding, has been improved. "
"(Substring search and splitting improvements were added by Fredrik Lundh "
"and Andrew Dalke at the NeedForSpeed sprint. Character maps were improved"
" by Walter D√∂rwald and Martin von L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1161
msgid ""
"The ``long(str, base)`` function is now faster on long digit strings "
"because fewer intermediate results are calculated.  The peak is for "
"strings of around 800--1000 digits where  the function is 6 times faster."
" (Contributed by Alan McIntyre and committed at the NeedForSpeed sprint.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1168
msgid ""
"It's now illegal to mix iterating over a file  with ``for line in file`` "
"and calling  the file object's "
":meth:`read`/:meth:`readline`/:meth:`readlines` methods.  Iteration uses "
"an internal buffer and the  :meth:`read\\*` methods don't use that "
"buffer.   Instead they would return the data following the buffer, "
"causing the data to appear out of order.  Mixing iteration and these "
"methods will now trigger a :exc:`ValueError` from the :meth:`read\\*` "
"method. (Implemented by Thomas Wouters.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1178
#, python-format
msgid ""
"The :mod:`struct` module now compiles structure format  strings into an "
"internal representation and caches this representation, yielding a 20% "
"speedup. (Contributed by Bob Ippolito at the NeedForSpeed sprint.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1182
#, python-format
msgid ""
"The :mod:`re` module got a 1 or 2% speedup by switching to  Python's "
"allocator functions instead of the system's  :c:func:`malloc` and "
":c:func:`free`. (Contributed by Jack Diederich at the NeedForSpeed "
"sprint.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1186
msgid ""
"The code generator's peephole optimizer now performs simple constant "
"folding in expressions.  If you write something like ``a = 2+3``, the "
"code generator will do the arithmetic and produce code corresponding to "
"``a = 5``.  (Proposed and implemented  by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1191
msgid ""
"Function calls are now faster because code objects now keep  the most "
"recently finished frame (a \"zombie frame\") in an internal field of the "
"code object, reusing it the next time the code object is invoked.  "
"(Original patch by Michael Hudson, modified by Armin Rigo and Richard "
"Jones; committed at the NeedForSpeed sprint.)  Frame objects are also "
"slightly smaller, which may improve cache locality and reduce memory "
"usage a bit.  (Contributed by Neal Norwitz.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1201
#, python-format
msgid ""
"Python's built-in exceptions are now new-style classes, a change that "
"speeds up instantiation considerably.  Exception handling in Python 2.5 "
"is therefore about 30% faster than in 2.4. (Contributed by Richard Jones,"
" Georg Brandl and Sean Reifschneider at the NeedForSpeed sprint.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1206
msgid ""
"Importing now caches the paths tried, recording whether  they exist or "
"not so that the interpreter makes fewer  :c:func:`open` and "
":c:func:`stat` calls on startup. (Contributed by Martin von L√∂wis and "
"Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1218
msgid "New, Improved, and Removed Modules"
msgstr ""

#: ../../whatsnew/2.5.rst:1220
msgid ""
"The standard library received many enhancements and bug fixes in Python "
"2.5. Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the SVN "
"logs for all the details."
msgstr ""

#: ../../whatsnew/2.5.rst:1225
msgid ""
"The :mod:`audioop` module now supports the a-LAW encoding, and the code "
"for u-LAW encoding has been improved.  (Contributed by Lars Immisch.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1228
msgid ""
"The :mod:`codecs` module gained support for incremental codecs.  The "
":func:`codec.lookup` function now returns a :class:`CodecInfo` instance "
"instead of a tuple. :class:`CodecInfo` instances behave like a 4-tuple to"
" preserve backward compatibility but also have the attributes "
":attr:`encode`, :attr:`decode`, :attr:`incrementalencoder`, "
":attr:`incrementaldecoder`, :attr:`streamwriter`, and "
":attr:`streamreader`.  Incremental codecs  can receive input and produce "
"output in multiple chunks; the output is the same as if the entire input "
"was fed to the non-incremental codec. See the :mod:`codecs` module "
"documentation for details. (Designed and implemented by Walter D√∂rwald.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1240
msgid ""
"The :mod:`collections` module gained a new type, :class:`defaultdict`, "
"that subclasses the standard :class:`dict` type.  The new type mostly "
"behaves like a dictionary but constructs a default value when a key isn't"
" present, automatically adding it to the dictionary for the requested key"
" value."
msgstr ""

#: ../../whatsnew/2.5.rst:1245
msgid ""
"The first argument to :class:`defaultdict`'s constructor is a factory "
"function that gets called whenever a key is requested but not found. This"
" factory function receives no arguments, so you can use built-in type "
"constructors such as :func:`list` or :func:`int`.  For example,  you can "
"make an index of words based on their initial letter like this::"
msgstr ""

#: ../../whatsnew/2.5.rst:1261
msgid "Printing ``index`` results in the following output::"
msgstr ""

#: ../../whatsnew/2.5.rst:1269
msgid "(Contributed by Guido van Rossum.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1271
msgid ""
"The :class:`deque` double-ended queue type supplied by the "
":mod:`collections` module now has a ``remove(value)`` method that removes"
" the first occurrence of *value* in the queue, raising :exc:`ValueError` "
"if the value isn't found. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1276
msgid ""
"New module: The :mod:`contextlib` module contains helper functions for "
"use with the new ':keyword:`with`' statement.  See section "
":ref:`contextlibmod` for more about this module."
msgstr ""

#: ../../whatsnew/2.5.rst:1280
msgid ""
"New module: The :mod:`cProfile` module is a C implementation of  the "
"existing :mod:`profile` module that has much lower overhead. The module's"
" interface is the same as :mod:`profile`: you run "
"``cProfile.run('main()')`` to profile a function, can save profile data "
"to a file, etc.  It's not yet known if the Hotshot profiler, which is "
"also written in C but doesn't match the :mod:`profile` module's "
"interface, will continue to be maintained in future versions of Python.  "
"(Contributed by Armin Rigo.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1288
msgid ""
"Also, the :mod:`pstats` module for analyzing the data measured by the "
"profiler now supports directing the output to any file object by "
"supplying a *stream* argument to the :class:`Stats` constructor. "
"(Contributed by Skip Montanaro.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1292
msgid ""
"The :mod:`csv` module, which parses files in comma-separated value "
"format, received several enhancements and a number of bugfixes.  You can "
"now set the maximum size in bytes of a field by calling the "
"``csv.field_size_limit(new_limit)`` function; omitting the *new_limit* "
"argument will return the currently-set limit.  The :class:`reader` class "
"now has a :attr:`line_num` attribute that counts the number of physical "
"lines read from the source; records can span multiple physical lines, so "
":attr:`line_num` is not the same as the number of records read."
msgstr ""

#: ../../whatsnew/2.5.rst:1301
msgid ""
"The CSV parser is now stricter about multi-line quoted fields. "
"Previously, if a line ended within a quoted field without a terminating "
"newline character, a newline would be inserted into the returned field. "
"This behavior caused problems when reading files that contained carriage "
"return characters within fields, so the code was changed to return the "
"field without inserting newlines. As a consequence, if newlines embedded "
"within fields are important, the input should be split into lines in a "
"manner that preserves the newline characters."
msgstr ""

#: ../../whatsnew/2.5.rst:1309
msgid "(Contributed by Skip Montanaro and Andrew McNamara.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1311
msgid ""
"The :class:`~datetime.datetime` class in the :mod:`datetime`  module now "
"has a ``strptime(string, format)``  method for parsing date strings, "
"contributed by Josh Spoerri. It uses the same format characters as "
":func:`time.strptime` and :func:`time.strftime`::"
msgstr ""

#: ../../whatsnew/2.5.rst:1321
msgid ""
"The :meth:`SequenceMatcher.get_matching_blocks` method in the "
":mod:`difflib` module now guarantees to return a minimal list of blocks "
"describing matching subsequences.  Previously, the algorithm would "
"occasionally break a block of matching elements into two list entries. "
"(Enhancement by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1326
msgid ""
"The :mod:`doctest` module gained a ``SKIP`` option that keeps an example "
"from being executed at all.  This is intended for code snippets that are "
"usage examples intended for the reader and aren't actually test cases."
msgstr ""

#: ../../whatsnew/2.5.rst:1330
msgid ""
"An *encoding* parameter was added to the :func:`testfile` function and "
"the :class:`DocFileSuite` class to specify the file's encoding.  This "
"makes it easier to use non-ASCII characters in  tests contained within a "
"docstring. (Contributed by Bjorn Tillenius.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1337
msgid ""
"The :mod:`email` package has been updated to version 4.0. (Contributed by"
" Barry Warsaw.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1345
msgid ""
"The :mod:`fileinput` module was made more flexible. Unicode filenames are"
" now supported, and a *mode* parameter that defaults to ``\"r\"`` was "
"added to the :func:`input` function to allow opening files in binary or "
":term:`universal newlines` mode.  Another new parameter, *openhook*, lets"
" you use a function other than :func:`open`  to open the input files.  "
"Once you're iterating over the set of files, the :class:`FileInput` "
"object's new :meth:`fileno` returns the file descriptor for the currently"
" opened file. (Contributed by Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1354
msgid ""
"In the :mod:`gc` module, the new :func:`get_count` function returns a "
"3-tuple containing the current collection counts for the three GC "
"generations.  This is accounting information for the garbage collector; "
"when these counts reach a specified threshold, a garbage collection sweep"
" will be made.  The existing :func:`gc.collect` function now takes an "
"optional *generation* argument of 0, 1, or 2 to specify which generation "
"to collect. (Contributed by Barry Warsaw.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1361
msgid ""
"The :func:`nsmallest` and  :func:`nlargest` functions in the :mod:`heapq`"
" module  now support a ``key`` keyword parameter similar to the one "
"provided by the :func:`min`/:func:`max` functions and the :meth:`sort` "
"methods.  For example::"
msgstr ""

#: ../../whatsnew/2.5.rst:1375
msgid ""
"The :func:`itertools.islice` function now accepts ``None`` for the start "
"and step arguments.  This makes it more compatible with the attributes of"
" slice objects, so that you can now write the following::"
msgstr ""

#: ../../whatsnew/2.5.rst:1384
msgid ""
"The :func:`format` function in the :mod:`locale` module has been modified"
" and two new functions were added, :func:`format_string` and "
":func:`currency`."
msgstr ""

#: ../../whatsnew/2.5.rst:1387
#, python-format
msgid ""
"The :func:`format` function's *val* parameter could previously be a "
"string as long as no more than one %char specifier appeared; now the "
"parameter must be exactly one %char specifier with no surrounding text.  "
"An optional *monetary* parameter was also added which, if ``True``, will "
"use the locale's rules for formatting currency in placing a separator "
"between groups of three digits."
msgstr ""

#: ../../whatsnew/2.5.rst:1393
#, python-format
msgid ""
"To format strings with multiple %char specifiers, use the new "
":func:`format_string` function that works like :func:`format` but also "
"supports mixing %char specifiers with arbitrary text."
msgstr ""

#: ../../whatsnew/2.5.rst:1397
msgid ""
"A new :func:`currency` function was also added that formats a number "
"according to the current locale's settings."
msgstr ""

#: ../../whatsnew/2.5.rst:1400
msgid "(Contributed by Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1404
msgid ""
"The :mod:`mailbox` module underwent a massive rewrite to add the "
"capability to modify mailboxes in addition to reading them.  A new set of"
" classes that include :class:`mbox`, :class:`MH`, and :class:`Maildir` "
"are used to read mailboxes, and have an ``add(message)`` method to add "
"messages, ``remove(key)`` to remove messages, and "
":meth:`lock`/:meth:`unlock` to lock/unlock the mailbox. The following "
"example converts a maildir-format mailbox into an mbox-format one::"
msgstr ""

#: ../../whatsnew/2.5.rst:1422
msgid ""
"(Contributed by Gregory K. Johnson.  Funding was provided by Google's "
"2005 Summer of Code.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1425
msgid ""
"New module: the :mod:`msilib` module allows creating Microsoft Installer "
":file:`.msi` files and CAB files.  Some support for reading the "
":file:`.msi` database is also included. (Contributed by Martin von "
"L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1429
msgid ""
"The :mod:`nis` module now supports accessing domains other than the "
"system default domain by supplying a *domain* argument to the "
":func:`nis.match` and :func:`nis.maps` functions. (Contributed by Ben "
"Bell.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1433
msgid ""
"The :mod:`operator` module's :func:`itemgetter`  and :func:`attrgetter` "
"functions now support multiple fields.   A call such as "
"``operator.attrgetter('a', 'b')`` will return a function  that retrieves "
"the :attr:`a` and :attr:`b` attributes.  Combining  this new feature with"
" the :meth:`sort` method's ``key`` parameter  lets you easily sort lists "
"using multiple fields. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1440
msgid ""
"The :mod:`optparse` module was updated to version 1.5.1 of the Optik "
"library. The :class:`OptionParser` class gained an :attr:`epilog` "
"attribute, a string that will be printed after the help message, and a "
":meth:`destroy` method to break reference cycles created by the object. "
"(Contributed by Greg Ward.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1445
msgid ""
"The :mod:`os` module underwent several changes.  The "
":attr:`stat_float_times` variable now defaults to true, meaning that "
":func:`os.stat` will now return time values as floats.  (This doesn't "
"necessarily mean that :func:`os.stat` will return times that are precise "
"to fractions of a second; not all systems support such precision.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1451
msgid ""
"Constants named :attr:`os.SEEK_SET`, :attr:`os.SEEK_CUR`, and "
":attr:`os.SEEK_END` have been added; these are the parameters to the "
":func:`os.lseek` function.  Two new constants for locking are "
":attr:`os.O_SHLOCK` and :attr:`os.O_EXLOCK`."
msgstr ""

#: ../../whatsnew/2.5.rst:1456
msgid ""
"Two new functions, :func:`wait3` and :func:`wait4`, were added.  They're "
"similar the :func:`waitpid` function which waits for a child process to "
"exit and returns a tuple of the process ID and its exit status, but "
":func:`wait3` and :func:`wait4` return additional information.  "
":func:`wait3` doesn't take a process ID as input, so it waits for any "
"child process to exit and returns a 3-tuple of *process-id*, *exit-"
"status*, *resource-usage* as returned from the :func:`resource.getrusage`"
" function. ``wait4(pid)`` does take a process ID. (Contributed by Chad J."
" Schroeder.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1465
msgid ""
"On FreeBSD, the :func:`os.stat` function now returns  times with "
"nanosecond resolution, and the returned object now has :attr:`st_gen` and"
" :attr:`st_birthtime`. The :attr:`st_flags` attribute is also available, "
"if the platform supports it. (Contributed by Antti Louko and  Diego "
"Petten√≤.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1472
msgid ""
"The Python debugger provided by the :mod:`pdb` module can now store lists"
" of commands to execute when a breakpoint is reached and execution stops."
"  Once breakpoint #1 has been created, enter ``commands 1`` and enter a "
"series of commands to be executed, finishing the list with ``end``.  The "
"command list can include commands that resume execution, such as "
"``continue`` or ``next``. (Contributed by Gr√©goire Dooms.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1481
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules no longer accept a return "
"value of ``None`` from the :meth:`__reduce__` method; the method must "
"return a tuple of arguments instead.  The ability to return ``None`` was "
"deprecated in Python 2.4, so this completes the removal of the feature."
msgstr ""

#: ../../whatsnew/2.5.rst:1486
msgid ""
"The :mod:`pkgutil` module, containing various utility functions for "
"finding packages, was enhanced to support :pep:`302`'s import hooks and "
"now also works for packages stored in ZIP-format archives. (Contributed "
"by Phillip J. Eby.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1490
msgid ""
"The pybench benchmark suite by Marc-Andr√© Lemburg is now included in the "
":file:`Tools/pybench` directory.  The pybench suite is an improvement on "
"the commonly used :file:`pystone.py` program because pybench provides a "
"more detailed measurement of the interpreter's speed.  It times "
"particular operations such as function calls, tuple slicing, method "
"lookups, and numeric operations, instead of performing many different "
"operations and reducing the result to a single number as "
":file:`pystone.py` does."
msgstr ""

#: ../../whatsnew/2.5.rst:1498
msgid ""
"The :mod:`pyexpat` module now uses version 2.0 of the Expat parser. "
"(Contributed by Trent Mick.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1501
msgid ""
"The :class:`~queue.Queue` class provided by the :mod:`Queue` module "
"gained two new methods.  :meth:`join` blocks until all items in the queue"
" have been retrieved and all processing work on the items  have been "
"completed.  Worker threads call the other new method,  :meth:`task_done`,"
" to signal that processing for an item has been completed.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1507
msgid ""
"The old :mod:`regex` and :mod:`regsub` modules, which have been  "
"deprecated ever since Python 2.0, have finally been deleted.   Other "
"deleted modules: :mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`."
msgstr ""

#: ../../whatsnew/2.5.rst:1511
msgid ""
"Also deleted: the :file:`lib-old` directory, which includes ancient "
"modules such as :mod:`dircmp` and :mod:`ni`, was removed.  :file:`lib-"
"old` wasn't on the default ``sys.path``, so unless your programs "
"explicitly added the directory to ``sys.path``, this removal shouldn't "
"affect your code."
msgstr ""

#: ../../whatsnew/2.5.rst:1516
msgid ""
"The :mod:`rlcompleter` module is no longer  dependent on importing the "
":mod:`readline` module and therefore now works on non-Unix platforms. "
"(Patch from Robert Kiendl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1522
msgid ""
"The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now "
"have a :attr:`rpc_paths` attribute that constrains XML-RPC operations to "
"a limited set of URL paths; the default is to allow only ``'/'`` and "
"``'/RPC2'``.  Setting :attr:`rpc_paths` to ``None`` or an empty tuple "
"disables  this path checking."
msgstr ""

#: ../../whatsnew/2.5.rst:1529
msgid ""
"The :mod:`socket` module now supports :const:`AF_NETLINK` sockets on "
"Linux, thanks to a patch from Philippe Biondi.   Netlink sockets are a "
"Linux-specific mechanism for communications between a user-space process "
"and kernel code; an introductory  article about them is at "
"https://www.linuxjournal.com/article/7356. In Python code, netlink "
"addresses are represented as a tuple of 2 integers, ``(pid, "
"group_mask)``."
msgstr ""

#: ../../whatsnew/2.5.rst:1536
msgid ""
"Two new methods on socket objects, ``recv_into(buffer)`` and "
"``recvfrom_into(buffer)``, store the received data in an object  that "
"supports the buffer protocol instead of returning the data as a string.  "
"This means you can put the data directly into an array or a memory-mapped"
" file."
msgstr ""

#: ../../whatsnew/2.5.rst:1541
msgid ""
"Socket objects also gained :meth:`getfamily`, :meth:`gettype`, and "
":meth:`getproto` accessor methods to retrieve the family, type, and "
"protocol values for the socket."
msgstr ""

#: ../../whatsnew/2.5.rst:1545
msgid ""
"New module: the :mod:`spwd` module provides functions for accessing the "
"shadow password database on systems that support  shadow passwords."
msgstr ""

#: ../../whatsnew/2.5.rst:1548
msgid ""
"The :mod:`struct` is now faster because it  compiles format strings into "
":class:`Struct` objects with :meth:`pack` and :meth:`unpack` methods.  "
"This is similar to how the :mod:`re` module lets you create compiled "
"regular expression objects.  You can still use the module-level  "
":func:`pack` and :func:`unpack` functions; they'll create  "
":class:`Struct` objects and cache them.  Or you can use  :class:`Struct` "
"instances directly::"
msgstr ""

#: ../../whatsnew/2.5.rst:1560
msgid ""
"You can also pack and unpack data to and from buffer objects directly "
"using the ``pack_into(buffer, offset, v1, v2, ...)`` and "
"``unpack_from(buffer, offset)`` methods.  This lets you store data "
"directly into an array or a memory-mapped file."
msgstr ""

#: ../../whatsnew/2.5.rst:1565
msgid ""
"(:class:`Struct` objects were implemented by Bob Ippolito at the "
"NeedForSpeed sprint.  Support for buffer objects was added by Martin "
"Blais, also at the NeedForSpeed sprint.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1569
msgid ""
"The Python developers switched from CVS to Subversion during the 2.5 "
"development process.  Information about the exact build version is "
"available as the ``sys.subversion`` variable, a 3-tuple of "
"``(interpreter-name, branch-name, revision-range)``.  For example, at the"
" time of writing my copy of 2.5 was reporting ``('CPython', 'trunk', "
"'45313:45315')``."
msgstr ""

#: ../../whatsnew/2.5.rst:1575
msgid ""
"This information is also available to C extensions via the "
":c:func:`Py_GetBuildInfo` function that returns a  string of build "
"information like this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``."
"   (Contributed by Barry Warsaw.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1580
msgid ""
"Another new function, :func:`sys._current_frames`, returns the current "
"stack frames for all running threads as a dictionary mapping thread "
"identifiers to the topmost stack frame currently active in that thread at"
" the time the function is called.  (Contributed by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1585
msgid ""
"The :class:`TarFile` class in the :mod:`tarfile` module now has an "
":meth:`extractall` method that extracts all members from the archive into"
" the current working directory.  It's also possible to set a different "
"directory as the extraction target, and to unpack only a subset of the "
"archive's members."
msgstr ""

#: ../../whatsnew/2.5.rst:1590
msgid ""
"The compression used for a tarfile opened in stream mode can now be "
"autodetected using the mode ``'r|*'``. (Contributed by Lars Gust√§bel.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1595
msgid ""
"The :mod:`threading` module now lets you set the stack size used when new"
" threads are created. The ``stack_size([*size*])`` function returns the "
"currently configured stack size, and supplying the optional *size* "
"parameter sets a new value.  Not all platforms support changing the stack"
" size, but Windows, POSIX threading, and OS/2 all do. (Contributed by "
"Andrew MacIntyre.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1603
msgid ""
"The :mod:`unicodedata` module has been updated to use version 4.1.0 of "
"the Unicode character database.  Version 3.2.0 is required  by some "
"specifications, so it's still available as  "
":attr:`unicodedata.ucd_3_2_0`."
msgstr ""

#: ../../whatsnew/2.5.rst:1607
msgid ""
"New module: the  :mod:`uuid` module generates  universally unique "
"identifiers (UUIDs) according to :rfc:`4122`.  The RFC defines several "
"different UUID versions that are generated from a starting string, from "
"system properties, or purely randomly.  This module contains a "
":class:`UUID` class and  functions named :func:`uuid1`, :func:`uuid3`, "
":func:`uuid4`,  and  :func:`uuid5` to generate different versions of "
"UUID.  (Version 2 UUIDs  are not specified in :rfc:`4122` and are not "
"supported by this module.) ::"
msgstr ""

#: ../../whatsnew/2.5.rst:1632
msgid "(Contributed by Ka-Ping Yee.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1634
msgid ""
"The :mod:`weakref` module's :class:`WeakKeyDictionary` and "
":class:`WeakValueDictionary` types gained new methods for iterating over "
"the weak references contained in the dictionary.  :meth:`iterkeyrefs` and"
" :meth:`keyrefs` methods were added to :class:`WeakKeyDictionary`, and "
":meth:`itervaluerefs` and :meth:`valuerefs` were added to "
":class:`WeakValueDictionary`.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1641
msgid ""
"The :mod:`webbrowser` module received a number of enhancements. It's now "
"usable as a script with ``python -m webbrowser``, taking a URL as the "
"argument; there are a number of switches  to control the behaviour "
"(:option:`!-n` for a new browser window,  :option:`!-t` for a new tab).  "
"New module-level functions, :func:`open_new` and :func:`open_new_tab`, "
"were added  to support this.  The module's :func:`open` function supports"
" an additional feature, an *autoraise* parameter that signals whether to "
"raise the open window when possible. A number of additional browsers were"
" added to the supported list such as Firefox, Opera, Konqueror, and "
"elinks.  (Contributed by Oleg Broytmann and Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1653
msgid ""
"The :mod:`xmlrpclib` module now supports returning  "
":class:`~datetime.datetime` objects for the XML-RPC date type.  Supply  "
"``use_datetime=True`` to the :func:`loads` function or the "
":class:`Unmarshaller` class to enable this feature. (Contributed by Skip "
"Montanaro.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1660
msgid ""
"The :mod:`zipfile` module now supports the ZIP64 version of the  format, "
"meaning that a .zip archive can now be larger than 4 GiB and can contain "
"individual files larger than 4 GiB.  (Contributed by Ronald Oussoren.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1666
msgid ""
"The :mod:`zlib` module's :class:`Compress` and :class:`Decompress` "
"objects now support a :meth:`copy` method that makes a copy of the  "
"object's internal state and returns a new  :class:`Compress` or "
":class:`Decompress` object. (Contributed by Chris AtLee.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1679
msgid "The ctypes package"
msgstr ""

#: ../../whatsnew/2.5.rst:1681
msgid ""
"The :mod:`ctypes` package, written by Thomas Heller, has been added  to "
"the standard library.  :mod:`ctypes` lets you call arbitrary functions  "
"in shared libraries or DLLs.  Long-time users may remember the :mod:`dl` "
"module, which provides functions for loading shared libraries and calling"
" functions in them. The :mod:`ctypes` package is much fancier."
msgstr ""

#: ../../whatsnew/2.5.rst:1687
msgid ""
"To load a shared library or DLL, you must create an instance of the "
":class:`CDLL` class and provide the name or path of the shared library or"
" DLL. Once that's done, you can call arbitrary functions by accessing "
"them as attributes of the :class:`CDLL` object.   ::"
msgstr ""

#: ../../whatsnew/2.5.rst:1697
msgid ""
"Type constructors for the various C types are provided: :func:`c_int`, "
":func:`c_float`, :func:`c_double`, :func:`c_char_p` (equivalent to "
":c:type:`char \\*`), and so forth.  Unlike Python's types, the C versions"
" are all mutable; you can assign to their :attr:`value` attribute to "
"change the wrapped value.  Python integers and strings will be "
"automatically converted to the corresponding C types, but for other types"
" you  must call the correct type constructor.  (And I mean *must*;  "
"getting it wrong will often result in the interpreter crashing with a "
"segmentation fault.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1706
msgid ""
"You shouldn't use :func:`c_char_p` with a Python string when the C "
"function will be modifying the memory area, because Python strings are  "
"supposed to be immutable; breaking this rule will cause puzzling bugs.  "
"When you need a modifiable memory area, use "
":func:`create_string_buffer`::"
msgstr ""

#: ../../whatsnew/2.5.rst:1715
msgid ""
"C functions are assumed to return integers, but you can set the "
":attr:`restype` attribute of the function object to  change this::"
msgstr ""

#: ../../whatsnew/2.5.rst:1724
msgid ""
":mod:`ctypes` also provides a wrapper for Python's C API  as the "
"``ctypes.pythonapi`` object.  This object does *not*  release the global "
"interpreter lock before calling a function, because the lock must be held"
" when calling into the interpreter's code.   There's a "
":class:`py_object()` type constructor that will create a  "
":c:type:`PyObject \\*` pointer.  A simple usage::"
msgstr ""

#: ../../whatsnew/2.5.rst:1737
msgid ""
"Don't forget to use :class:`py_object()`; if it's omitted you end  up "
"with a segmentation fault."
msgstr ""

#: ../../whatsnew/2.5.rst:1740
msgid ""
":mod:`ctypes` has been around for a while, but people still write  and "
"distribution hand-coded extension modules because you can't rely on "
":mod:`ctypes` being present. Perhaps developers will begin to write  "
"Python wrappers atop a library accessed through :mod:`ctypes` instead of "
"extension modules, now that :mod:`ctypes` is included with core Python."
msgstr ""

#: ../../whatsnew/2.5.rst:1750
msgid "http://starship.python.net/crew/theller/ctypes/"
msgstr ""

#: ../../whatsnew/2.5.rst:1750
msgid "The ctypes web page, with a tutorial, reference, and FAQ."
msgstr ""

#: ../../whatsnew/2.5.rst:1752
msgid "The documentation  for the :mod:`ctypes` module."
msgstr ""

#: ../../whatsnew/2.5.rst:1760
msgid "The ElementTree package"
msgstr ""

#: ../../whatsnew/2.5.rst:1762
msgid ""
"A subset of Fredrik Lundh's ElementTree library for processing XML has "
"been added to the standard library as :mod:`xml.etree`.  The available "
"modules are :mod:`ElementTree`, :mod:`ElementPath`, and "
":mod:`ElementInclude` from ElementTree 1.2.6.    The :mod:`cElementTree` "
"accelerator module is also included."
msgstr ""

#: ../../whatsnew/2.5.rst:1768
msgid ""
"The rest of this section will provide a brief overview of using "
"ElementTree. Full documentation for ElementTree is available at "
"http://effbot.org/zone/element-index.htm."
msgstr ""

#: ../../whatsnew/2.5.rst:1772
msgid ""
"ElementTree represents an XML document as a tree of element nodes. The "
"text content of the document is stored as the :attr:`text` and "
":attr:`tail` attributes of  (This is one of the major differences between"
" ElementTree and the Document Object Model; in the DOM there are many "
"different types of node, including :class:`TextNode`.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1778
msgid ""
"The most commonly used parsing function is :func:`parse`, that takes "
"either a string (assumed to contain a filename) or a file-like object and"
" returns an :class:`ElementTree` instance::"
msgstr ""

#: ../../whatsnew/2.5.rst:1790
msgid ""
"Once you have an :class:`ElementTree` instance, you can call its "
":meth:`getroot` method to get the root :class:`Element` node."
msgstr ""

#: ../../whatsnew/2.5.rst:1793
msgid ""
"There's also an :func:`XML` function that takes a string literal and "
"returns an :class:`Element` node (not an :class:`ElementTree`).   This "
"function provides a tidy way to incorporate XML fragments, approaching "
"the convenience of an XML literal::"
msgstr ""

#: ../../whatsnew/2.5.rst:1803
msgid ""
"Each XML element supports some dictionary-like and some list-like access "
"methods.  Dictionary-like operations are used to access attribute values,"
" and list-like operations are used to access child nodes."
msgstr ""

#: ../../whatsnew/2.5.rst:1808
msgid "Result"
msgstr ""

#: ../../whatsnew/2.5.rst:1810
msgid "``elem[n]``"
msgstr ""

#: ../../whatsnew/2.5.rst:1810
msgid "Returns n'th child element."
msgstr ""

#: ../../whatsnew/2.5.rst:1812
msgid "``elem[m:n]``"
msgstr ""

#: ../../whatsnew/2.5.rst:1812
msgid "Returns list of m'th through n'th child elements."
msgstr ""

#: ../../whatsnew/2.5.rst:1815
msgid "``len(elem)``"
msgstr ""

#: ../../whatsnew/2.5.rst:1815
msgid "Returns number of child elements."
msgstr ""

#: ../../whatsnew/2.5.rst:1817
msgid "``list(elem)``"
msgstr ""

#: ../../whatsnew/2.5.rst:1817
msgid "Returns list of child elements."
msgstr ""

#: ../../whatsnew/2.5.rst:1819
msgid "``elem.append(elem2)``"
msgstr ""

#: ../../whatsnew/2.5.rst:1819
msgid "Adds *elem2* as a child."
msgstr ""

#: ../../whatsnew/2.5.rst:1821
msgid "``elem.insert(index, elem2)``"
msgstr ""

#: ../../whatsnew/2.5.rst:1821
msgid "Inserts *elem2* at the specified location."
msgstr ""

#: ../../whatsnew/2.5.rst:1823
msgid "``del elem[n]``"
msgstr ""

#: ../../whatsnew/2.5.rst:1823
msgid "Deletes n'th child element."
msgstr ""

#: ../../whatsnew/2.5.rst:1825
msgid "``elem.keys()``"
msgstr ""

#: ../../whatsnew/2.5.rst:1825
msgid "Returns list of attribute names."
msgstr ""

#: ../../whatsnew/2.5.rst:1827
msgid "``elem.get(name)``"
msgstr ""

#: ../../whatsnew/2.5.rst:1827
msgid "Returns value of attribute *name*."
msgstr ""

#: ../../whatsnew/2.5.rst:1829
msgid "``elem.set(name, value)``"
msgstr ""

#: ../../whatsnew/2.5.rst:1829
msgid "Sets new value for attribute *name*."
msgstr ""

#: ../../whatsnew/2.5.rst:1831
msgid "``elem.attrib``"
msgstr ""

#: ../../whatsnew/2.5.rst:1831
msgid "Retrieves the dictionary containing attributes."
msgstr ""

#: ../../whatsnew/2.5.rst:1834
msgid "``del elem.attrib[name]``"
msgstr ""

#: ../../whatsnew/2.5.rst:1834
msgid "Deletes attribute *name*."
msgstr ""

#: ../../whatsnew/2.5.rst:1837
msgid ""
"Comments and processing instructions are also represented as "
":class:`Element` nodes.  To check if a node is a comment or processing "
"instructions::"
msgstr ""

#: ../../whatsnew/2.5.rst:1845
msgid ""
"To generate XML output, you should call the :meth:`ElementTree.write` "
"method. Like :func:`parse`, it can take either a string or a file-like "
"object::"
msgstr ""

#: ../../whatsnew/2.5.rst:1855
msgid ""
"(Caution: the default encoding used for output is ASCII.  For general XML"
" work, where an element's name may contain arbitrary Unicode characters, "
"ASCII isn't a very useful encoding because it will raise an exception if "
"an element's name contains any characters with values greater than 127.  "
"Therefore, it's best to specify a different encoding such as UTF-8 that "
"can handle any Unicode character.)"
msgstr ""

#: ../../whatsnew/2.5.rst:1862
msgid ""
"This section is only a partial description of the ElementTree interfaces."
" Please read the package's official documentation for more details."
msgstr ""

#: ../../whatsnew/2.5.rst:1868
msgid "http://effbot.org/zone/element-index.htm"
msgstr ""

#: ../../whatsnew/2.5.rst:1869
msgid "Official documentation for ElementTree."
msgstr ""

#: ../../whatsnew/2.5.rst:1877
msgid "The hashlib package"
msgstr ""

#: ../../whatsnew/2.5.rst:1879
msgid ""
"A new :mod:`hashlib` module, written by Gregory P. Smith,  has been added"
" to replace the :mod:`md5` and :mod:`sha` modules.  :mod:`hashlib` adds "
"support for additional secure hashes (SHA-224, SHA-256, SHA-384, and "
"SHA-512). When available, the module uses OpenSSL for fast platform "
"optimized implementations of algorithms."
msgstr ""

#: ../../whatsnew/2.5.rst:1885
msgid ""
"The old :mod:`md5` and :mod:`sha` modules still exist as wrappers around "
"hashlib to preserve backwards compatibility.  The new module's interface "
"is very close to that of the old modules, but not identical. The most "
"significant difference is that the constructor functions for creating new"
" hashing objects are named differently. ::"
msgstr ""

#: ../../whatsnew/2.5.rst:1914
msgid ""
"Once a hash object has been created, its methods are the same as before: "
"``update(string)`` hashes the specified string into the  current digest "
"state, :meth:`digest` and :meth:`hexdigest` return the digest value as a "
"binary string or a string of hex digits, and :meth:`copy` returns a new "
"hashing object with the same digest state."
msgstr ""

#: ../../whatsnew/2.5.rst:1923
msgid "The documentation  for the :mod:`hashlib` module."
msgstr ""

#: ../../whatsnew/2.5.rst:1931
msgid "The sqlite3 package"
msgstr ""

#: ../../whatsnew/2.5.rst:1933
msgid ""
"The pysqlite module (http://www.pysqlite.org), a wrapper for the SQLite "
"embedded database, has been added to the standard library under the "
"package name :mod:`sqlite3`."
msgstr ""

#: ../../whatsnew/2.5.rst:1937
msgid ""
"SQLite is a C library that provides a lightweight disk-based database "
"that doesn't require a separate server process and allows accessing the "
"database using a nonstandard variant of the SQL query language. Some "
"applications can use SQLite for internal data storage.  It's also "
"possible to prototype an application using SQLite and then port the code "
"to a larger database such as PostgreSQL or Oracle."
msgstr ""

#: ../../whatsnew/2.5.rst:1944
msgid ""
"pysqlite was written by Gerhard H√§ring and provides a SQL interface "
"compliant with the DB-API 2.0 specification described by :pep:`249`."
msgstr ""

#: ../../whatsnew/2.5.rst:1947
msgid ""
"If you're compiling the Python source yourself, note that the source tree"
" doesn't include the SQLite code, only the wrapper module. You'll need to"
" have the SQLite libraries and headers installed before compiling Python,"
" and the build process will compile the module when the necessary headers"
" are available."
msgstr ""

#: ../../whatsnew/2.5.rst:1952
msgid ""
"To use the module, you must first create a :class:`Connection` object "
"that represents the database.  Here the data will be stored in the "
":file:`/tmp/example` file::"
msgstr ""

#: ../../whatsnew/2.5.rst:1958
msgid ""
"You can also supply the special name ``:memory:`` to create a database in"
" RAM."
msgstr ""

#: ../../whatsnew/2.5.rst:1960
msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`execute` method to perform SQL commands::"
msgstr ""

#: ../../whatsnew/2.5.rst:1974
msgid ""
"Usually your SQL operations will need to use values from Python "
"variables.  You shouldn't assemble your query using Python's string "
"operations because doing so is insecure; it makes your program vulnerable"
" to an SQL injection attack."
msgstr ""

#: ../../whatsnew/2.5.rst:1978
#, python-format
msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of"
" values as the second argument to the cursor's :meth:`execute` method.  "
"(Other database modules may use a different placeholder, such as ``%s`` "
"or ``:1``.) For example::"
msgstr ""

#: ../../whatsnew/2.5.rst:1998
msgid ""
"To retrieve data after executing a SELECT statement, you can either  "
"treat the cursor as an iterator, call the cursor's :meth:`fetchone` "
"method to retrieve a single matching row,  or call :meth:`fetchall` to "
"get a list of the matching rows."
msgstr ""

#: ../../whatsnew/2.5.rst:2003
msgid "This example uses the iterator form::"
msgstr ""

#: ../../whatsnew/2.5.rst:2016
msgid ""
"For more information about the SQL dialect supported by SQLite, see "
"https://www.sqlite.org."
msgstr ""

#: ../../whatsnew/2.5.rst:2023
msgid "http://www.pysqlite.org"
msgstr ""

#: ../../whatsnew/2.5.rst:2023
msgid "The pysqlite web page."
msgstr ""

#: ../../whatsnew/2.5.rst:2027
msgid "https://www.sqlite.org"
msgstr ""

#: ../../whatsnew/2.5.rst:2026
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""

#: ../../whatsnew/2.5.rst:2029
msgid "The documentation  for the :mod:`sqlite3` module."
msgstr ""

#: ../../whatsnew/2.5.rst:2031
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ""

#: ../../whatsnew/2.5.rst:2032
msgid "PEP written by Marc-Andr√© Lemburg."
msgstr ""

#: ../../whatsnew/2.5.rst:2040
msgid "The wsgiref package"
msgstr ""

#: ../../whatsnew/2.5.rst:2042
msgid ""
"The Web Server Gateway Interface (WSGI) v1.0 defines a standard interface"
" between web servers and Python web applications and is described in "
":pep:`333`. The :mod:`wsgiref` package is a reference implementation of "
"the WSGI specification."
msgstr ""

#: ../../whatsnew/2.5.rst:2049
msgid ""
"The package includes a basic HTTP server that will run a WSGI "
"application; this server is useful for debugging but isn't intended for  "
"production use.  Setting up a server takes only a few lines of code::"
msgstr ""

#: ../../whatsnew/2.5.rst:2069
msgid "http://www.wsgi.org"
msgstr ""

#: ../../whatsnew/2.5.rst:2069
msgid "A central web site for WSGI-related resources."
msgstr ""

#: ../../whatsnew/2.5.rst:2071
msgid ":pep:`333` - Python Web Server Gateway Interface v1.0"
msgstr ""

#: ../../whatsnew/2.5.rst:2072
msgid "PEP written by Phillip J. Eby."
msgstr ""

#: ../../whatsnew/2.5.rst:2084
msgid ""
"The Python source tree was converted from CVS to Subversion,  in a "
"complex migration procedure that was supervised and flawlessly carried "
"out by Martin von L√∂wis.  The procedure was developed as :pep:`347`."
msgstr ""

#: ../../whatsnew/2.5.rst:2088
msgid ""
"Coverity, a company that markets a source code analysis tool called "
"Prevent, provided the results of their examination of the Python source "
"code.  The analysis found about 60 bugs that  were quickly fixed.  Many "
"of the bugs were refcounting problems, often occurring in error-handling "
"code.  See https://scan.coverity.com for the statistics."
msgstr ""

#: ../../whatsnew/2.5.rst:2094
msgid ""
"The largest change to the C API came from :pep:`353`, which modifies the "
"interpreter to use a :c:type:`Py_ssize_t` type definition instead of "
":c:type:`int`.  See the earlier section :ref:`pep-353` for a discussion "
"of this change."
msgstr ""

#: ../../whatsnew/2.5.rst:2099
msgid ""
"The design of the bytecode compiler has changed a great deal,  no longer "
"generating bytecode by traversing the parse tree.  Instead the parse tree"
" is converted to an abstract syntax tree (or AST), and it is  the "
"abstract syntax tree that's traversed to produce the bytecode."
msgstr ""

#: ../../whatsnew/2.5.rst:2104
msgid ""
"It's possible for Python code to obtain AST objects by using the "
":func:`compile` built-in and specifying ``_ast.PyCF_ONLY_AST`` as the "
"value of the  *flags* parameter::"
msgstr ""

#: ../../whatsnew/2.5.rst:2117
msgid ""
"No official documentation has been written for the AST code yet, but "
":pep:`339` discusses the design.  To start learning about the code, read "
"the definition of the various AST nodes in :file:`Parser/Python.asdl`.  A"
" Python script reads this file and generates a set of C structure "
"definitions in :file:`Include/Python-ast.h`.  The "
":c:func:`PyParser_ASTFromString` and :c:func:`PyParser_ASTFromFile`, "
"defined in :file:`Include/pythonrun.h`, take Python source as input and "
"return the root of an AST representing the contents. This AST can then be"
" turned into a code object by :c:func:`PyAST_Compile`.  For more "
"information, read the source code, and then ask questions on python-dev."
msgstr ""

#: ../../whatsnew/2.5.rst:2127
msgid ""
"The AST code was developed under Jeremy Hylton's management, and "
"implemented by (in alphabetical order) Brett Cannon, Nick Coghlan, Grant "
"Edwards, John Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin "
"Rigo, and Neil Schemenauer, plus the participants in a number of AST "
"sprints at conferences such as PyCon."
msgstr ""

#: ../../whatsnew/2.5.rst:2136
msgid ""
"Evan Jones's patch to obmalloc, first described in a talk at PyCon DC "
"2005, was applied.  Python 2.4 allocated small objects in 256K-sized "
"arenas, but never freed arenas.  With this patch, Python will free arenas"
" when they're empty.  The net effect is that on some platforms, when you "
"allocate many objects, Python's memory usage may actually drop when you "
"delete them and the memory may be returned to the operating system.  "
"(Implemented by Evan Jones, and reworked by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2144
msgid ""
"Note that this change means extension modules must be more careful when "
"allocating memory.  Python's API has many different functions for "
"allocating memory that are grouped into families.  For example, "
":c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and :c:func:`PyMem_Free`"
" are one family that allocates raw memory, while "
":c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and "
":c:func:`PyObject_Free` are another family that's supposed to be used for"
" creating Python objects."
msgstr ""

#: ../../whatsnew/2.5.rst:2152
msgid ""
"Previously these different families all reduced to the platform's "
":c:func:`malloc` and :c:func:`free` functions.  This meant  it didn't "
"matter if you got things wrong and allocated memory with the "
":c:func:`PyMem` function but freed it with the :c:func:`PyObject` "
"function.  With 2.5's changes to obmalloc, these families now do "
"different things and mismatches will probably result in a segfault.  You "
"should carefully test your C extension modules with Python 2.5."
msgstr ""

#: ../../whatsnew/2.5.rst:2159
msgid ""
"The built-in set types now have an official C API.  Call "
":c:func:`PySet_New` and :c:func:`PyFrozenSet_New` to create a new set, "
":c:func:`PySet_Add` and :c:func:`PySet_Discard` to add and remove "
"elements, and :c:func:`PySet_Contains` and :c:func:`PySet_Size` to "
"examine the set's state. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2165
msgid ""
"C code can now obtain information about the exact revision of the Python "
"interpreter by calling the  :c:func:`Py_GetBuildInfo` function that "
"returns a string of build information like this: ``\"trunk:45355:45356M, "
"Apr 13 2006, 07:42:19\"``.   (Contributed by Barry Warsaw.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2170
msgid ""
"Two new macros can be used to indicate C functions that are local to the "
"current file so that a faster calling convention can be used. "
"``Py_LOCAL(type)`` declares the function as returning a value of the "
"specified *type* and uses a fast-calling qualifier. "
"``Py_LOCAL_INLINE(type)`` does the same thing and also requests the "
"function be inlined.  If :c:func:`PY_LOCAL_AGGRESSIVE` is defined before "
":file:`python.h` is included, a set of more aggressive optimizations are "
"enabled for the module; you should benchmark the results to find out if "
"these optimizations actually make the code faster.  (Contributed by "
"Fredrik Lundh at the NeedForSpeed sprint.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2181
msgid ""
"``PyErr_NewException(name, base, dict)`` can now accept a tuple of base "
"classes as its *base* argument.  (Contributed by Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2184
msgid ""
"The :c:func:`PyErr_Warn` function for issuing warnings is now deprecated "
"in favour of ``PyErr_WarnEx(category, message, stacklevel)`` which lets "
"you specify the number of stack frames separating this function and the "
"caller.  A *stacklevel* of 1 is the function calling "
":c:func:`PyErr_WarnEx`, 2 is the function above that, and so forth.  "
"(Added by Neal Norwitz.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2190
msgid ""
"The CPython interpreter is still written in C, but  the code can now be "
"compiled with a C++ compiler without errors.   (Implemented by Anthony "
"Baxter, Martin von L√∂wis, Skip Montanaro.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2194
msgid ""
"The :c:func:`PyRange_New` function was removed.  It was never documented,"
" never used in the core code, and had dangerously lax error checking.  In"
" the unlikely case that your extensions were using it, you can replace it"
" by something like the following::"
msgstr ""

#: ../../whatsnew/2.5.rst:2210
msgid ""
"MacOS X (10.3 and higher): dynamic loading of modules now uses the "
":c:func:`dlopen` function instead of MacOS-specific functions."
msgstr ""

#: ../../whatsnew/2.5.rst:2213
msgid ""
"MacOS X: an :option:`!--enable-universalsdk` switch was added to the "
":program:`configure` script that compiles the interpreter as a universal "
"binary able to run on both PowerPC and Intel processors. (Contributed by "
"Ronald Oussoren; :issue:`2573`.)"
msgstr ""

#: ../../whatsnew/2.5.rst:2218
msgid ""
"Windows: :file:`.dll` is no longer supported as a filename extension for "
"extension modules.  :file:`.pyd` is now the only filename extension that "
"will be searched for."
msgstr ""

#: ../../whatsnew/2.5.rst:2228
msgid "Porting to Python 2.5"
msgstr ""

#: ../../whatsnew/2.5.rst:2233
msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error "
"if a module contains string literals with 8-bit characters but doesn't "
"have an encoding declaration.  In Python 2.4 this triggered a warning, "
"not a syntax error."
msgstr ""

#: ../../whatsnew/2.5.rst:2238
msgid ""
"Previously, the :attr:`gi_frame` attribute of a generator was always a "
"frame object.  Because of the :pep:`342` changes described in section "
":ref:`pep-342`, it's now possible for :attr:`gi_frame` to be ``None``."
msgstr ""

#: ../../whatsnew/2.5.rst:2242
msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to"
" compare a Unicode string and an 8-bit string that can't be converted to "
"Unicode using the default ASCII encoding.  Previously such comparisons "
"would raise a :class:`UnicodeDecodeError` exception."
msgstr ""

#: ../../whatsnew/2.5.rst:2247
msgid ""
"Library: the :mod:`csv` module is now stricter about multi-line quoted "
"fields. If your files contain newlines embedded within fields, the input "
"should be split into lines in a manner which preserves the newline "
"characters."
msgstr ""

#: ../../whatsnew/2.5.rst:2251
#, python-format
msgid ""
"Library: the :mod:`locale` module's  :func:`format` function's would "
"previously  accept any string as long as no more than one %char specifier"
" appeared.  In Python 2.5, the argument must be exactly one %char "
"specifier with no surrounding text."
msgstr ""

#: ../../whatsnew/2.5.rst:2256
msgid ""
"Library: The :mod:`pickle` and :mod:`cPickle` modules no longer accept a "
"return value of ``None`` from the :meth:`__reduce__` method; the method "
"must return a tuple of arguments instead.  The modules also no longer "
"accept the deprecated *bin* keyword parameter."
msgstr ""

#: ../../whatsnew/2.5.rst:2261
msgid ""
"Library: The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  "
"classes now have a :attr:`rpc_paths` attribute that constrains XML-RPC "
"operations to a limited set of URL paths; the default is to allow only "
"``'/'`` and ``'/RPC2'``. Setting  :attr:`rpc_paths` to ``None`` or an "
"empty tuple disables  this path checking."
msgstr ""

#: ../../whatsnew/2.5.rst:2267
msgid ""
"C API: Many functions now use :c:type:`Py_ssize_t`  instead of "
":c:type:`int` to allow processing more data on 64-bit machines.  "
"Extension code may need to make the same change to avoid warnings and to "
"support 64-bit machines.  See the earlier section :ref:`pep-353` for a "
"discussion of this change."
msgstr ""

#: ../../whatsnew/2.5.rst:2272
msgid ""
"C API:  The obmalloc changes mean that  you must be careful to not mix "
"usage of the :c:func:`PyMem_\\*` and :c:func:`PyObject_\\*` families of "
"functions. Memory allocated with  one family's :c:func:`\\*_Malloc` must "
"be  freed with the corresponding family's :c:func:`\\*_Free` function."
msgstr ""

#: ../../whatsnew/2.5.rst:2283
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this "
"article: Georg Brandl, Nick Coghlan, Phillip J. Eby, Lars Gust√§bel, "
"Raymond Hettinger, Ralf W. Grosse-Kunstleve, Kent Johnson, Iain Lowe, "
"Martin von L√∂wis, Fredrik Lundh, Andrew McNamara, Skip Montanaro, Gustavo"
" Niemeyer, Paul Prescod, James Pryor, Mike Rovner, Scott Weikart, Barry "
"Warsaw, Thomas Wouters."
msgstr ""

#: ../../whatsnew/2.6.rst:5
msgid "What's New in Python 2.6"
msgstr ""

#: ../../whatsnew/2.6.rst:9 ../../whatsnew/2.7.rst:5
msgid "A.M. Kuchling (amk at amk.ca)"
msgstr ""

#: ../../whatsnew/2.6.rst:52
msgid ""
"This article explains the new features in Python 2.6, released on October"
" 1 2008.  The release schedule is described in :pep:`361`."
msgstr ""

#: ../../whatsnew/2.6.rst:55
msgid ""
"The major theme of Python 2.6 is preparing the migration path to Python "
"3.0, a major redesign of the language.  Whenever possible, Python 2.6 "
"incorporates new features and syntax from 3.0 while remaining compatible "
"with existing code by not removing older features or syntax.  When it's "
"not possible to do that, Python 2.6 tries to do what it can, adding "
"compatibility functions in a :mod:`future_builtins` module and a "
":option:`!-3` switch to warn about usages that will become unsupported in"
" 3.0."
msgstr ""

#: ../../whatsnew/2.6.rst:64
msgid ""
"Some significant new packages have been added to the standard library, "
"such as the :mod:`multiprocessing` and :mod:`json` modules, but there "
"aren't many new features that aren't related to Python 3.0 in some way."
msgstr ""

#: ../../whatsnew/2.6.rst:69
msgid ""
"Python 2.6 also sees a number of improvements and bugfixes throughout the"
" source.  A search through the change logs finds there were 259 patches "
"applied and 612 bugs fixed between Python 2.5 and 2.6.  Both figures are "
"likely to be underestimates."
msgstr ""

#: ../../whatsnew/2.6.rst:74
msgid ""
"This article doesn't attempt to provide a complete specification of the "
"new features, but instead provides a convenient overview.  For full "
"details, you should refer to the documentation for Python 2.6. If you "
"want to understand the rationale for the design and implementation, refer"
" to the PEP for a particular new feature. Whenever possible, \"What's New"
" in Python\" links to the bug/patch item for each change."
msgstr ""

#: ../../whatsnew/2.6.rst:90
msgid "Python 3.0"
msgstr ""

#: ../../whatsnew/2.6.rst:92
msgid ""
"The development cycle for Python versions 2.6 and 3.0 was synchronized, "
"with the alpha and beta releases for both versions being made on the same"
" days.  The development of 3.0 has influenced many features in 2.6."
msgstr ""

#: ../../whatsnew/2.6.rst:97
msgid ""
"Python 3.0 is a far-ranging redesign of Python that breaks compatibility "
"with the 2.x series.  This means that existing Python code will need some"
" conversion in order to run on Python 3.0.  However, not all the changes "
"in 3.0 necessarily break compatibility.  In cases where new features "
"won't cause existing code to break, they've been backported to 2.6 and "
"are described in this document in the appropriate place.  Some of the "
"3.0-derived features are:"
msgstr ""

#: ../../whatsnew/2.6.rst:106
msgid "A :meth:`__complex__` method for converting objects to a complex number."
msgstr ""

#: ../../whatsnew/2.6.rst:107
msgid "Alternate syntax for catching exceptions: ``except TypeError as exc``."
msgstr ""

#: ../../whatsnew/2.6.rst:108
msgid ""
"The addition of :func:`functools.reduce` as a synonym for the built-in "
":func:`reduce` function."
msgstr ""

#: ../../whatsnew/2.6.rst:111
msgid ""
"Python 3.0 adds several new built-in functions and changes the semantics "
"of some existing builtins.  Functions that are new in 3.0 such as "
":func:`bin` have simply been added to Python 2.6, but existing builtins "
"haven't been changed; instead, the :mod:`future_builtins` module has "
"versions with the new 3.0 semantics.  Code written to be compatible with "
"3.0 can do ``from future_builtins import hex, map`` as necessary."
msgstr ""

#: ../../whatsnew/2.6.rst:119
msgid ""
"A new command-line switch, :option:`!-3`, enables warnings about features"
" that will be removed in Python 3.0.  You can run code with this switch "
"to see how much work will be necessary to port code to 3.0.  The value of"
" this switch is available to Python code as the boolean variable "
":data:`sys.py3kwarning`, and to C extension code as "
":c:data:`Py_Py3kWarningFlag`."
msgstr ""

#: ../../whatsnew/2.6.rst:128
msgid ""
"The 3xxx series of PEPs, which contains proposals for Python 3.0. "
":pep:`3000` describes the development process for Python 3.0. Start with "
":pep:`3100` that describes the general goals for Python 3.0, and then "
"explore the higher-numbered PEPS that propose specific features."
msgstr ""

#: ../../whatsnew/2.6.rst:136
msgid "Changes to the Development Process"
msgstr ""

#: ../../whatsnew/2.6.rst:138
msgid ""
"While 2.6 was being developed, the Python development process underwent "
"two significant changes: we switched from SourceForge's issue tracker to "
"a customized Roundup installation, and the documentation was converted "
"from LaTeX to reStructuredText."
msgstr ""

#: ../../whatsnew/2.6.rst:145
msgid "New Issue Tracker: Roundup"
msgstr ""

#: ../../whatsnew/2.6.rst:147
msgid ""
"For a long time, the Python developers had been growing increasingly "
"annoyed by SourceForge's bug tracker.  SourceForge's hosted solution "
"doesn't permit much customization; for example, it wasn't possible to "
"customize the life cycle of issues."
msgstr ""

#: ../../whatsnew/2.6.rst:152
msgid ""
"The infrastructure committee of the Python Software Foundation therefore "
"posted a call for issue trackers, asking volunteers to set up different "
"products and import some of the bugs and patches from SourceForge.  Four "
"different trackers were examined: `Jira "
"<https://www.atlassian.com/software/jira/>`__, `Launchpad "
"<https://launchpad.net/>`__, `Roundup "
"<http://roundup.sourceforge.net/>`__, and `Trac "
"<https://trac.edgewall.org/>`__. The committee eventually settled on Jira"
" and Roundup as the two candidates.  Jira is a commercial product that "
"offers no-cost hosted instances to free-software projects; Roundup is an "
"open-source project that requires volunteers to administer it and a "
"server to host it."
msgstr ""

#: ../../whatsnew/2.6.rst:166
msgid ""
"After posting a call for volunteers, a new Roundup installation was set "
"up at https://bugs.python.org.  One installation of Roundup can host "
"multiple trackers, and this server now also hosts issue trackers for "
"Jython and for the Python web site.  It will surely find other uses in "
"the future.  Where possible, this edition of \"What's New in Python\" "
"links to the bug/patch item for each change."
msgstr ""

#: ../../whatsnew/2.6.rst:174
msgid ""
"Hosting of the Python bug tracker is kindly provided by `Upfront Systems "
"<http://www.upfrontsoftware.co.za>`__ of Stellenbosch, South Africa.  "
"Martin von L√∂wis put a lot of effort into importing existing bugs and "
"patches from SourceForge; his scripts for this import operation are at "
"http://svn.python.org/view/tracker/importer/ and may be useful to other "
"projects wishing to move from SourceForge to Roundup."
msgstr ""

#: ../../whatsnew/2.6.rst:185
msgid "https://bugs.python.org"
msgstr ""

#: ../../whatsnew/2.6.rst:185
msgid "The Python bug tracker."
msgstr ""

#: ../../whatsnew/2.6.rst:188
msgid "http://bugs.jython.org:"
msgstr ""

#: ../../whatsnew/2.6.rst:188
msgid "The Jython bug tracker."
msgstr ""

#: ../../whatsnew/2.6.rst:191
msgid "http://roundup.sourceforge.net/"
msgstr ""

#: ../../whatsnew/2.6.rst:191
msgid "Roundup downloads and documentation."
msgstr ""

#: ../../whatsnew/2.6.rst:193
msgid "http://svn.python.org/view/tracker/importer/"
msgstr ""

#: ../../whatsnew/2.6.rst:194
msgid "Martin von L√∂wis's conversion scripts."
msgstr ""

#: ../../whatsnew/2.6.rst:197
msgid "New Documentation Format: reStructuredText Using Sphinx"
msgstr ""

#: ../../whatsnew/2.6.rst:199
msgid ""
"The Python documentation was written using LaTeX since the project "
"started around 1989.  In the 1980s and early 1990s, most documentation "
"was printed out for later study, not viewed online. LaTeX was widely used"
" because it provided attractive printed output while remaining "
"straightforward to write once the basic rules of the markup were learned."
msgstr ""

#: ../../whatsnew/2.6.rst:206
msgid ""
"Today LaTeX is still used for writing publications destined for printing,"
" but the landscape for programming tools has shifted.  We no longer print"
" out reams of documentation; instead, we browse through it online and "
"HTML has become the most important format to support. Unfortunately, "
"converting LaTeX to HTML is fairly complicated and Fred L. Drake Jr., the"
" long-time Python documentation editor, spent a lot of time maintaining "
"the conversion process.  Occasionally people would suggest converting the"
" documentation into SGML and later XML, but performing a good conversion "
"is a major task and no one ever committed the time required to finish the"
" job."
msgstr ""

#: ../../whatsnew/2.6.rst:217
msgid ""
"During the 2.6 development cycle, Georg Brandl put a lot of effort into "
"building a new toolchain for processing the documentation.  The resulting"
" package is called Sphinx, and is available from http://sphinx-doc.org/."
msgstr ""

#: ../../whatsnew/2.6.rst:222
msgid ""
"Sphinx concentrates on HTML output, producing attractively styled and "
"modern HTML; printed output is still supported through conversion to "
"LaTeX.  The input format is reStructuredText, a markup syntax supporting "
"custom extensions and directives that is commonly used in the Python "
"community."
msgstr ""

#: ../../whatsnew/2.6.rst:228
msgid ""
"Sphinx is a standalone package that can be used for writing, and almost "
"two dozen other projects (`listed on the Sphinx web site <https://www"
".sphinx-doc.org/en/master/examples.html>`__) have adopted Sphinx as their"
" documentation tool."
msgstr ""

#: ../../whatsnew/2.6.rst:236
msgid "`Documenting Python <https://devguide.python.org/documenting/>`__"
msgstr ""

#: ../../whatsnew/2.6.rst:236
msgid "Describes how to write for Python's documentation."
msgstr ""

#: ../../whatsnew/2.6.rst:239
msgid "`Sphinx <http://sphinx-doc.org/>`__"
msgstr ""

#: ../../whatsnew/2.6.rst:239
msgid "Documentation and code for the Sphinx toolchain."
msgstr ""

#: ../../whatsnew/2.6.rst:241
msgid "`Docutils <http://docutils.sourceforge.net>`__"
msgstr ""

#: ../../whatsnew/2.6.rst:242
msgid "The underlying reStructuredText parser and toolset."
msgstr ""

#: ../../whatsnew/2.6.rst:250
msgid ""
"The previous version, Python 2.5, added the ':keyword:`with`' statement "
"as an optional feature, to be enabled by a ``from __future__ import "
"with_statement`` directive.  In 2.6 the statement no longer needs to be "
"specially enabled; this means that :keyword:`!with` is now always a "
"keyword.  The rest of this section is a copy of the corresponding section"
" from the \"What's New in Python 2.5\" document; if you're familiar with "
"the ':keyword:`!with`' statement from Python 2.5, you can skip this "
"section."
msgstr ""

#: ../../whatsnew/2.6.rst:265
msgid ""
"The ':keyword:`with`' statement is a control-flow structure whose basic "
"structure is::"
msgstr ""

#: ../../whatsnew/2.6.rst:271
msgid ""
"The expression is evaluated, and it should result in an object that "
"supports the context management protocol (that is, has :meth:`__enter__` "
"and :meth:`__exit__` methods)."
msgstr ""

#: ../../whatsnew/2.6.rst:312
msgid ""
"The :func:`localcontext` function in the :mod:`decimal` module makes it "
"easy to save and restore the current decimal context, which encapsulates "
"the desired precision and rounding characteristics for computations::"
msgstr ""

#: ../../whatsnew/2.6.rst:345
msgid ""
"The context manager's :meth:`__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``as VAR`` clause is present, the "
"value is simply discarded."
msgstr ""

#: ../../whatsnew/2.6.rst:351
msgid ""
"If *BLOCK* raises an exception, the context manager's :meth:`__exit__` "
"method is called with three arguments, the exception details (``type, "
"value, traceback``, the same values returned by :func:`sys.exc_info`, "
"which can also be ``None`` if no exception occurred).  The method's "
"return value controls whether an exception is re-raised: any false value "
"re-raises the exception, and ``True`` will result in suppressing it.  "
"You'll only rarely want to suppress the exception, because if you do the "
"author of the code containing the ':keyword:`with`' statement will never "
"realize anything went wrong."
msgstr ""

#: ../../whatsnew/2.6.rst:433
msgid ""
"The :mod:`contextlib` module provides some functions and a decorator that"
" are useful when writing objects for use with the ':keyword:`with`' "
"statement."
msgstr ""

#: ../../whatsnew/2.6.rst:436
msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a "
"single generator function instead of defining a new class.  The generator"
" should yield exactly one value.  The code up to the :keyword:`yield` "
"will be executed as the :meth:`__enter__` method, and the value yielded "
"will be the method's return value that will get bound to the variable in "
"the ':keyword:`with`' statement's :keyword:`!as` clause, if any.  The "
"code after the :keyword:`!yield` will be executed in the :meth:`__exit__`"
" method.  Any exception raised in the block will be raised by the "
":keyword:`!yield` statement."
msgstr ""

#: ../../whatsnew/2.6.rst:445
msgid ""
"Using this decorator, our database example from the previous section "
"could be written as::"
msgstr ""

#: ../../whatsnew/2.6.rst:474
msgid ""
"Finally, the :func:`closing` function returns its argument so that it can"
" be bound to a variable, and calls the argument's ``.close()`` method at "
"the end of the block. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:501
msgid "PEP 366: Explicit Relative Imports From a Main Module"
msgstr ""

#: ../../whatsnew/2.6.rst:503
msgid ""
"Python's :option:`-m` switch allows running a module as a script. When "
"you ran a module that was located inside a package, relative imports "
"didn't work correctly."
msgstr ""

#: ../../whatsnew/2.6.rst:507
msgid ""
"The fix for Python 2.6 adds a :attr:`__package__` attribute to modules.  "
"When this attribute is present, relative imports will be relative to the "
"value of this attribute instead of the :attr:`__name__` attribute."
msgstr ""

#: ../../whatsnew/2.6.rst:512
msgid ""
"PEP 302-style importers can then set :attr:`__package__` as necessary. "
"The :mod:`runpy` module that implements the :option:`-m` switch now does "
"this, so relative imports will now work correctly in scripts running from"
" inside a package."
msgstr ""

#: ../../whatsnew/2.6.rst:522
msgid "PEP 370: Per-user ``site-packages`` Directory"
msgstr ""

#: ../../whatsnew/2.6.rst:524
msgid ""
"When you run Python, the module search path ``sys.path`` usually includes"
" a directory whose path ends in ``\"site-packages\"``.  This directory is"
" intended to hold locally-installed packages available to all users using"
" a machine or a particular site installation."
msgstr ""

#: ../../whatsnew/2.6.rst:529
msgid ""
"Python 2.6 introduces a convention for user-specific site directories. "
"The directory varies depending on the platform:"
msgstr ""

#: ../../whatsnew/2.6.rst:532
msgid "Unix and Mac OS X: :file:`~/.local/`"
msgstr ""

#: ../../whatsnew/2.6.rst:533
msgid "Windows: :file:`%APPDATA%/Python`"
msgstr ""

#: ../../whatsnew/2.6.rst:535
msgid ""
"Within this directory, there will be version-specific subdirectories, "
"such as :file:`lib/python2.6/site-packages` on Unix/Mac OS and "
":file:`Python26/site-packages` on Windows."
msgstr ""

#: ../../whatsnew/2.6.rst:539
msgid ""
"If you don't like the default directory, it can be overridden by an "
"environment variable.  :envvar:`PYTHONUSERBASE` sets the root directory "
"used for all Python versions supporting this feature.  On Windows, the "
"directory for application-specific data can be changed by setting the "
":envvar:`APPDATA` environment variable.  You can also modify the "
":file:`site.py` file for your Python installation."
msgstr ""

#: ../../whatsnew/2.6.rst:546
msgid ""
"The feature can be disabled entirely by running Python with the "
":option:`-s` option or setting the :envvar:`PYTHONNOUSERSITE` environment"
" variable."
msgstr ""

#: ../../whatsnew/2.6.rst:552
msgid ":pep:`370` - Per-user ``site-packages`` Directory"
msgstr ""

#: ../../whatsnew/2.6.rst:553
msgid "PEP written and implemented by Christian Heimes."
msgstr ""

#: ../../whatsnew/2.6.rst:561
msgid "PEP 371: The ``multiprocessing`` Package"
msgstr ""

#: ../../whatsnew/2.6.rst:563
msgid ""
"The new :mod:`multiprocessing` package lets Python programs create new "
"processes that will perform a computation and return a result to the "
"parent.  The parent and child processes can communicate using queues and "
"pipes, synchronize their operations using locks and semaphores, and can "
"share simple arrays of data."
msgstr ""

#: ../../whatsnew/2.6.rst:569
msgid ""
"The :mod:`multiprocessing` module started out as an exact emulation of "
"the :mod:`threading` module using processes instead of threads.  That "
"goal was discarded along the path to Python 2.6, but the general approach"
" of the module is still similar.  The fundamental class is the "
":class:`Process`, which is passed a callable object and a collection of "
"arguments.  The :meth:`start` method sets the callable running in a "
"subprocess, after which you can call the :meth:`is_alive` method to check"
" whether the subprocess is still running and the :meth:`join` method to "
"wait for the process to exit."
msgstr ""

#: ../../whatsnew/2.6.rst:579
msgid ""
"Here's a simple example where the subprocess will calculate a factorial."
"  The function doing the calculation is written strangely so that it "
"takes significantly longer when the input argument is a multiple of 4."
msgstr ""

#: ../../whatsnew/2.6.rst:616
msgid ""
"A :class:`~queue.Queue` is used to communicate the result of the "
"factorial. The :class:`~queue.Queue` object is stored in a global "
"variable. The child process will use the value of the variable when the "
"child was created; because it's a :class:`~queue.Queue`, parent and child"
" can use the object to communicate.  (If the parent were to change the "
"value of the global variable, the child's value would be unaffected, and "
"vice versa.)"
msgstr ""

#: ../../whatsnew/2.6.rst:624
msgid ""
"Two other classes, :class:`Pool` and :class:`Manager`, provide higher-"
"level interfaces.  :class:`Pool` will create a fixed number of worker "
"processes, and requests can then be distributed to the workers by calling"
" :meth:`apply` or :meth:`apply_async` to add a single request, and "
":meth:`map` or :meth:`map_async` to add a number of requests.  The "
"following code uses a :class:`Pool` to spread requests across 5 worker "
"processes and retrieve a list of results::"
msgstr ""

#: ../../whatsnew/2.6.rst:651
msgid ""
"The other high-level interface, the :class:`Manager` class, creates a "
"separate server process that can hold master copies of Python data "
"structures.  Other processes can then access and modify these data "
"structures using proxy objects.  The following example creates a shared "
"dictionary by calling the :meth:`dict` method; the worker processes then "
"insert values into the dictionary.  (Locking is not done for you "
"automatically, which doesn't matter in this example. :class:`Manager`'s "
"methods also include :meth:`Lock`, :meth:`RLock`, and :meth:`Semaphore` "
"to create shared locks.)"
msgstr ""

#: ../../whatsnew/2.6.rst:695
msgid "This will produce the output::"
msgstr ""

#: ../../whatsnew/2.6.rst:706
msgid "The documentation for the :mod:`multiprocessing` module."
msgstr ""

#: ../../whatsnew/2.6.rst:709
msgid ":pep:`371` - Addition of the multiprocessing package"
msgstr ""

#: ../../whatsnew/2.6.rst:709
msgid ""
"PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard "
"Oudkerk and Jesse Noller."
msgstr ""

#: ../../whatsnew/2.6.rst:718
msgid "PEP 3101: Advanced String Formatting"
msgstr ""

#: ../../whatsnew/2.6.rst:720
msgid ""
"In Python 3.0, the `%` operator is supplemented by a more powerful string"
" formatting method, :meth:`format`.  Support for the :meth:`str.format` "
"method has been backported to Python 2.6."
msgstr ""

#: ../../whatsnew/2.6.rst:724
msgid ""
"In 2.6, both 8-bit and Unicode strings have a `.format()` method that "
"treats the string as a template and takes the arguments to be formatted. "
"The formatting template uses curly brackets (`{`, `}`) as special "
"characters::"
msgstr ""

#: ../../whatsnew/2.6.rst:737
msgid "Curly brackets can be escaped by doubling them::"
msgstr ""

#: ../../whatsnew/2.6.rst:742
msgid ""
"Field names can be integers indicating positional arguments, such as "
"``{0}``, ``{1}``, etc. or names of keyword arguments.  You can also "
"supply compound field names that read attributes or access dictionary "
"keys::"
msgstr ""

#: ../../whatsnew/2.6.rst:756
msgid ""
"Note that when using dictionary-style notation such as ``[.mp4]``, you "
"don't need to put any quotation marks around the string; it will look up "
"the value using ``.mp4`` as the key.  Strings beginning with a number "
"will be converted to an integer.  You can't write more complicated "
"expressions inside a format string."
msgstr ""

#: ../../whatsnew/2.6.rst:762
msgid ""
"So far we've shown how to specify which field to substitute into the "
"resulting string.  The precise formatting used is also controllable by "
"adding a colon followed by a format specifier.  For example::"
msgstr ""

#: ../../whatsnew/2.6.rst:776
msgid "Format specifiers can reference other fields through nesting::"
msgstr ""

#: ../../whatsnew/2.6.rst:786
msgid "The alignment of a field within the desired width can be specified:"
msgstr ""

#: ../../whatsnew/2.6.rst:789
msgid "Character"
msgstr ""

#: ../../whatsnew/2.6.rst:789
msgid "Effect"
msgstr ""

#: ../../whatsnew/2.6.rst:791
msgid "< (default)"
msgstr ""

#: ../../whatsnew/2.6.rst:791
msgid "Left-align"
msgstr ""

#: ../../whatsnew/2.6.rst:792
msgid ">"
msgstr ""

#: ../../whatsnew/2.6.rst:792
msgid "Right-align"
msgstr ""

#: ../../whatsnew/2.6.rst:793
msgid "^"
msgstr ""

#: ../../whatsnew/2.6.rst:793
msgid "Center"
msgstr ""

#: ../../whatsnew/2.6.rst:794
msgid "="
msgstr ""

#: ../../whatsnew/2.6.rst:794
msgid "(For numeric types only) Pad after the sign."
msgstr ""

#: ../../whatsnew/2.6.rst:797
msgid ""
"Format specifiers can also include a presentation type, which controls "
"how the value is formatted.  For example, floating-point numbers can be "
"formatted as a general number or in exponential notation::"
msgstr ""

#: ../../whatsnew/2.6.rst:806
msgid ""
"A variety of presentation types are available.  Consult the 2.6 "
"documentation for a :ref:`complete list <formatstrings>`; here's a "
"sample:"
msgstr ""

#: ../../whatsnew/2.6.rst:810
msgid "``b``"
msgstr ""

#: ../../whatsnew/2.6.rst:810
msgid "Binary. Outputs the number in base 2."
msgstr ""

#: ../../whatsnew/2.6.rst:811
msgid "``c``"
msgstr ""

#: ../../whatsnew/2.6.rst:811
msgid ""
"Character. Converts the integer to the corresponding Unicode character "
"before printing."
msgstr ""

#: ../../whatsnew/2.6.rst:813
msgid "``d``"
msgstr ""

#: ../../whatsnew/2.6.rst:813
msgid "Decimal Integer. Outputs the number in base 10."
msgstr ""

#: ../../whatsnew/2.6.rst:814
msgid "``o``"
msgstr ""

#: ../../whatsnew/2.6.rst:814
msgid "Octal format. Outputs the number in base 8."
msgstr ""

#: ../../whatsnew/2.6.rst:815
msgid "``x``"
msgstr ""

#: ../../whatsnew/2.6.rst:815
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for "
"the digits above 9."
msgstr ""

#: ../../whatsnew/2.6.rst:817
msgid "``e``"
msgstr ""

#: ../../whatsnew/2.6.rst:817
msgid ""
"Exponent notation. Prints the number in scientific notation using the "
"letter 'e' to indicate the exponent."
msgstr ""

#: ../../whatsnew/2.6.rst:819
msgid "``g``"
msgstr ""

#: ../../whatsnew/2.6.rst:819
msgid ""
"General format. This prints the number as a fixed-point number, unless "
"the number is too large, in which case it switches to 'e' exponent "
"notation."
msgstr ""

#: ../../whatsnew/2.6.rst:822
msgid "``n``"
msgstr ""

#: ../../whatsnew/2.6.rst:822
msgid ""
"Number. This is the same as 'g' (for floats) or 'd' (for integers), "
"except that it uses the current locale setting to insert the appropriate "
"number separator characters."
msgstr ""

#: ../../whatsnew/2.6.rst:825
msgid "``%``"
msgstr ""

#: ../../whatsnew/2.6.rst:825
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed ('f') "
"format, followed by a percent sign."
msgstr ""

#: ../../whatsnew/2.6.rst:829
msgid ""
"Classes and types can define a :meth:`__format__` method to control how "
"they're formatted.  It receives a single argument, the format specifier::"
msgstr ""

#: ../../whatsnew/2.6.rst:838
msgid ""
"There's also a :func:`format` builtin that will format a single value.  "
"It calls the type's :meth:`__format__` method with the provided "
"specifier::"
msgstr ""

#: ../../whatsnew/2.6.rst:849
msgid ":ref:`formatstrings`"
msgstr ""

#: ../../whatsnew/2.6.rst:849
msgid "The reference documentation for format fields."
msgstr ""

#: ../../whatsnew/2.6.rst:851
msgid ":pep:`3101` - Advanced String Formatting"
msgstr ""

#: ../../whatsnew/2.6.rst:852
msgid "PEP written by Talin. Implemented by Eric Smith."
msgstr ""

#: ../../whatsnew/2.6.rst:859
msgid "PEP 3105: ``print`` As a Function"
msgstr ""

#: ../../whatsnew/2.6.rst:861
msgid ""
"The ``print`` statement becomes the :func:`print` function in Python 3.0."
" Making :func:`print` a function makes it possible to replace the "
"function by doing ``def print(...)`` or importing a new function from "
"somewhere else."
msgstr ""

#: ../../whatsnew/2.6.rst:865
msgid ""
"Python 2.6 has a ``__future__`` import that removes ``print`` as language"
" syntax, letting you use the functional form instead.  For example::"
msgstr ""

#: ../../whatsnew/2.6.rst:871
msgid "The signature of the new function is::"
msgstr ""

#: ../../whatsnew/2.6.rst:876
msgid "The parameters are:"
msgstr ""

#: ../../whatsnew/2.6.rst:878
msgid "*args*: positional arguments whose values will be printed out."
msgstr ""

#: ../../whatsnew/2.6.rst:879
msgid "*sep*: the separator, which will be printed between arguments."
msgstr ""

#: ../../whatsnew/2.6.rst:880
msgid ""
"*end*: the ending text, which will be printed after all of the arguments "
"have been output."
msgstr ""

#: ../../whatsnew/2.6.rst:882
msgid "*file*: the file object to which the output will be sent."
msgstr ""

#: ../../whatsnew/2.6.rst:886
msgid ":pep:`3105` - Make print a function"
msgstr ""

#: ../../whatsnew/2.6.rst:887
msgid "PEP written by Georg Brandl."
msgstr ""

#: ../../whatsnew/2.6.rst:894
msgid "PEP 3110: Exception-Handling Changes"
msgstr ""

#: ../../whatsnew/2.6.rst:896
msgid ""
"One error that Python programmers occasionally make is writing the "
"following code::"
msgstr ""

#: ../../whatsnew/2.6.rst:904
msgid ""
"The author is probably trying to catch both :exc:`TypeError` and "
":exc:`ValueError` exceptions, but this code actually does something "
"different: it will catch :exc:`TypeError` and bind the resulting "
"exception object to the local name ``\"ValueError\"``.  The "
":exc:`ValueError` exception will not be caught at all.  The correct code "
"specifies a tuple of exceptions::"
msgstr ""

#: ../../whatsnew/2.6.rst:916
msgid ""
"This error happens because the use of the comma here is ambiguous: does "
"it indicate two different nodes in the parse tree, or a single node "
"that's a tuple?"
msgstr ""

#: ../../whatsnew/2.6.rst:920
msgid ""
"Python 3.0 makes this unambiguous by replacing the comma with the word "
"\"as\".  To catch an exception and store the exception object in the "
"variable ``exc``, you must write::"
msgstr ""

#: ../../whatsnew/2.6.rst:929
msgid ""
"Python 3.0 will only support the use of \"as\", and therefore interprets "
"the first example as catching two different exceptions.  Python 2.6 "
"supports both the comma and \"as\", so existing code will continue to "
"work.  We therefore suggest using \"as\" when writing new Python code "
"that will only be executed with 2.6."
msgstr ""

#: ../../whatsnew/2.6.rst:937
msgid ":pep:`3110` - Catching Exceptions in Python 3000"
msgstr ""

#: ../../whatsnew/2.6.rst:938
msgid "PEP written and implemented by Collin Winter."
msgstr ""

#: ../../whatsnew/2.6.rst:945
msgid "PEP 3112: Byte Literals"
msgstr ""

#: ../../whatsnew/2.6.rst:947
msgid ""
"Python 3.0 adopts Unicode as the language's fundamental string type and "
"denotes 8-bit literals differently, either as ``b'string'`` or using a "
":class:`bytes` constructor.  For future compatibility, Python 2.6 adds "
":class:`bytes` as a synonym for the :class:`str` type, and it also "
"supports the ``b''`` notation."
msgstr ""

#: ../../whatsnew/2.6.rst:954
msgid ""
"The 2.6 :class:`str` differs from 3.0's :class:`bytes` type in various "
"ways; most notably, the constructor is completely different.  In 3.0, "
"``bytes([65, 66, 67])`` is 3 elements long, containing the bytes "
"representing ``ABC``; in 2.6, ``bytes([65, 66, 67])`` returns the 12-byte"
" string representing the :func:`str` of the list."
msgstr ""

#: ../../whatsnew/2.6.rst:960
msgid ""
"The primary use of :class:`bytes` in 2.6 will be to write tests of object"
" type such as ``isinstance(x, bytes)``.  This will help the 2to3 "
"converter, which can't tell whether 2.x code intends strings to contain "
"either characters or 8-bit bytes; you can now use either :class:`bytes` "
"or :class:`str` to represent your intention exactly, and the resulting "
"code will also be correct in Python 3.0."
msgstr ""

#: ../../whatsnew/2.6.rst:967
msgid ""
"There's also a ``__future__`` import that causes all string literals to "
"become Unicode strings.  This means that ``\\u`` escape sequences can be "
"used to include Unicode characters::"
msgstr ""

#: ../../whatsnew/2.6.rst:979
msgid ""
"At the C level, Python 3.0 will rename the existing 8-bit string type, "
"called :c:type:`PyStringObject` in Python 2.x, to "
":c:type:`PyBytesObject`.  Python 2.6 uses ``#define`` to support using "
"the names :c:func:`PyBytesObject`, :c:func:`PyBytes_Check`, "
":c:func:`PyBytes_FromStringAndSize`, and all the other functions and "
"macros used with strings."
msgstr ""

#: ../../whatsnew/2.6.rst:986
msgid ""
"Instances of the :class:`bytes` type are immutable just as strings are.  "
"A new :class:`bytearray` type stores a mutable sequence of bytes::"
msgstr ""

#: ../../whatsnew/2.6.rst:1001
msgid ""
"Byte arrays support most of the methods of string types, such as "
":meth:`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, and some"
" of the methods of lists, such as :meth:`append`, :meth:`pop`,  and "
":meth:`reverse`."
msgstr ""

#: ../../whatsnew/2.6.rst:1014
msgid ""
"There's also a corresponding C API, with "
":c:func:`PyByteArray_FromObject`, "
":c:func:`PyByteArray_FromStringAndSize`, and various other functions."
msgstr ""

#: ../../whatsnew/2.6.rst:1021
msgid ":pep:`3112` - Bytes literals in Python 3000"
msgstr ""

#: ../../whatsnew/2.6.rst:1022
msgid "PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes."
msgstr ""

#: ../../whatsnew/2.6.rst:1029
msgid "PEP 3116: New I/O Library"
msgstr ""

#: ../../whatsnew/2.6.rst:1031
msgid ""
"Python's built-in file objects support a number of methods, but file-like"
" objects don't necessarily support all of them.  Objects that imitate "
"files usually support :meth:`read` and :meth:`write`, but they may not "
"support :meth:`readline`, for example.  Python 3.0 introduces a layered "
"I/O library in the :mod:`io` module that separates buffering and text-"
"handling features from the fundamental read and write operations."
msgstr ""

#: ../../whatsnew/2.6.rst:1039
msgid ""
"There are three levels of abstract base classes provided by the :mod:`io`"
" module:"
msgstr ""

#: ../../whatsnew/2.6.rst:1042
msgid ""
":class:`RawIOBase` defines raw I/O operations: :meth:`read`, "
":meth:`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, "
":meth:`truncate`, and :meth:`close`. Most of the methods of this class "
"will often map to a single system call. There are also :meth:`readable`, "
":meth:`writable`, and :meth:`seekable` methods for determining what "
"operations a given object will allow."
msgstr ""

#: ../../whatsnew/2.6.rst:1050
msgid ""
"Python 3.0 has concrete implementations of this class for files and "
"sockets, but Python 2.6 hasn't restructured its file and socket objects "
"in this way."
msgstr ""

#: ../../whatsnew/2.6.rst:1056
msgid ""
":class:`BufferedIOBase` is an abstract base class that buffers data in "
"memory to reduce the number of system calls used, making I/O processing "
"more efficient. It supports all of the methods of :class:`RawIOBase`, and"
" adds a :attr:`raw` attribute holding the underlying raw object."
msgstr ""

#: ../../whatsnew/2.6.rst:1062
msgid ""
"There are five concrete classes implementing this ABC. "
":class:`BufferedWriter` and :class:`BufferedReader` are for objects that "
"support write-only or read-only usage that have a :meth:`seek` method for"
" random access.  :class:`BufferedRandom` objects support read and write "
"access upon the same underlying stream, and :class:`BufferedRWPair` is "
"for objects such as TTYs that have both read and write operations acting "
"upon unconnected streams of data. The :class:`BytesIO` class supports "
"reading, writing, and seeking over an in-memory buffer."
msgstr ""

#: ../../whatsnew/2.6.rst:1075
msgid ""
":class:`TextIOBase`: Provides functions for reading and writing strings "
"(remember, strings will be Unicode in Python 3.0), and supporting "
":term:`universal newlines`.  :class:`TextIOBase` defines the "
":meth:`readline` method and supports iteration upon objects."
msgstr ""

#: ../../whatsnew/2.6.rst:1081
msgid ""
"There are two concrete implementations.  :class:`TextIOWrapper` wraps a "
"buffered I/O object, supporting all of the methods for text I/O and "
"adding a :attr:`buffer` attribute for access to the underlying object.  "
":class:`StringIO` simply buffers everything in memory without ever "
"writing anything to disk."
msgstr ""

#: ../../whatsnew/2.6.rst:1087
msgid ""
"(In Python 2.6, :class:`io.StringIO` is implemented in pure Python, so "
"it's pretty slow.   You should therefore stick with the existing "
":mod:`StringIO` module or :mod:`cStringIO` for now.  At some point Python"
" 3.0's :mod:`io` module will be rewritten into C for speed, and perhaps "
"the C implementation will be  backported to the 2.x releases.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1093
msgid ""
"In Python 2.6, the underlying implementations haven't been restructured "
"to build on top of the :mod:`io` module's classes.  The module is being "
"provided to make it easier to write code that's forward-compatible with "
"3.0, and to save developers the effort of writing their own "
"implementations of buffering and text I/O."
msgstr ""

#: ../../whatsnew/2.6.rst:1103
msgid ":pep:`3116` - New I/O"
msgstr ""

#: ../../whatsnew/2.6.rst:1102
msgid ""
"PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum. Code"
" by Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, "
"Martin von L√∂wis, Tony Lownds, and others."
msgstr ""

#: ../../whatsnew/2.6.rst:1111
msgid "PEP 3118: Revised Buffer Protocol"
msgstr ""

#: ../../whatsnew/2.6.rst:1113
msgid ""
"The buffer protocol is a C-level API that lets Python types exchange "
"pointers into their internal representations.  A memory-mapped file can "
"be viewed as a buffer of characters, for example, and this lets another "
"module such as :mod:`re` treat memory-mapped files as a string of "
"characters to be searched."
msgstr ""

#: ../../whatsnew/2.6.rst:1119
msgid ""
"The primary users of the buffer protocol are numeric-processing packages "
"such as NumPy, which expose the internal representation of arrays so that"
" callers can write data directly into an array instead of going through a"
" slower API.  This PEP updates the buffer protocol in light of experience"
" from NumPy development, adding a number of new features such as "
"indicating the shape of an array or locking a memory region."
msgstr ""

#: ../../whatsnew/2.6.rst:1126
msgid ""
"The most important new C API function is ``PyObject_GetBuffer(PyObject "
"*obj, Py_buffer *view, int flags)``, which takes an object and a set of "
"flags, and fills in the ``Py_buffer`` structure with information about "
"the object's memory representation.  Objects can use this operation to "
"lock memory in place while an external caller could be modifying the "
"contents, so there's a corresponding ``PyBuffer_Release(Py_buffer "
"*view)`` to indicate that the external caller is done."
msgstr ""

#: ../../whatsnew/2.6.rst:1138
msgid ""
"The *flags* argument to :c:func:`PyObject_GetBuffer` specifies "
"constraints upon the memory returned.  Some examples are:"
msgstr ""

#: ../../whatsnew/2.6.rst:1141
msgid ":const:`PyBUF_WRITABLE` indicates that the memory must be writable."
msgstr ""

#: ../../whatsnew/2.6.rst:1143
msgid ":const:`PyBUF_LOCK` requests a read-only or exclusive lock on the memory."
msgstr ""

#: ../../whatsnew/2.6.rst:1145
msgid ""
":const:`PyBUF_C_CONTIGUOUS` and :const:`PyBUF_F_CONTIGUOUS` requests a "
"C-contiguous (last dimension varies the fastest) or Fortran-contiguous "
"(first dimension varies the fastest) array layout."
msgstr ""

#: ../../whatsnew/2.6.rst:1149
msgid ""
"Two new argument codes for :c:func:`PyArg_ParseTuple`, ``s*`` and ``z*``,"
" return locked buffer objects for a parameter."
msgstr ""

#: ../../whatsnew/2.6.rst:1155
msgid ":pep:`3118` - Revising the buffer protocol"
msgstr ""

#: ../../whatsnew/2.6.rst:1155
msgid ""
"PEP written by Travis Oliphant and Carl Banks; implemented by Travis "
"Oliphant."
msgstr ""

#: ../../whatsnew/2.6.rst:1164
msgid "PEP 3119: Abstract Base Classes"
msgstr ""

#: ../../whatsnew/2.6.rst:1166
msgid ""
"Some object-oriented languages such as Java support interfaces, declaring"
" that a class has a given set of methods or supports a given access "
"protocol.  Abstract Base Classes (or ABCs) are an equivalent feature for "
"Python. The ABC support consists of an :mod:`abc` module containing a "
"metaclass called :class:`ABCMeta`, special handling of this metaclass by "
"the :func:`isinstance` and :func:`issubclass` builtins, and a collection "
"of basic ABCs that the Python developers think will be widely useful.  "
"Future versions of Python will probably add more ABCs."
msgstr ""

#: ../../whatsnew/2.6.rst:1176
msgid ""
"Let's say you have a particular class and wish to know whether it "
"supports dictionary-style access.  The phrase \"dictionary-style\" is "
"vague, however. It probably means that accessing items with ``obj[1]`` "
"works. Does it imply that setting items with ``obj[2] = value`` works? Or"
" that the object will have :meth:`keys`, :meth:`values`, and "
":meth:`items` methods?  What about the iterative variants  such as "
":meth:`iterkeys`?  :meth:`copy` and :meth:`update`?  Iterating over the "
"object with :func:`iter`?"
msgstr ""

#: ../../whatsnew/2.6.rst:1184
msgid ""
"The Python 2.6 :mod:`collections` module includes a number of different "
"ABCs that represent these distinctions.  :class:`Iterable` indicates that"
" a class defines :meth:`__iter__`, and :class:`Container` means the class"
" defines a :meth:`__contains__` method and therefore supports ``x in y`` "
"expressions.  The basic dictionary interface of getting items, setting "
"items, and :meth:`keys`, :meth:`values`, and :meth:`items`, is defined by"
" the :class:`MutableMapping` ABC."
msgstr ""

#: ../../whatsnew/2.6.rst:1193
msgid ""
"You can derive your own classes from a particular ABC to indicate they "
"support that ABC's interface::"
msgstr ""

#: ../../whatsnew/2.6.rst:1202
msgid ""
"Alternatively, you could write the class without deriving from the "
"desired ABC and instead register the class by calling the ABC's "
":meth:`register` method::"
msgstr ""

#: ../../whatsnew/2.6.rst:1213
msgid ""
"For classes that you write, deriving from the ABC is probably clearer. "
"The :meth:`register`  method is useful when you've written a new ABC that"
" can describe an existing type or class, or if you want to declare that "
"some third-party class implements an ABC. For example, if you defined a "
":class:`PrintableType` ABC, it's legal to do::"
msgstr ""

#: ../../whatsnew/2.6.rst:1225
msgid ""
"Classes should obey the semantics specified by an ABC, but Python can't "
"check this; it's up to the class author to understand the ABC's "
"requirements and to implement the code accordingly."
msgstr ""

#: ../../whatsnew/2.6.rst:1229
msgid ""
"To check whether an object supports a particular interface, you can now "
"write::"
msgstr ""

#: ../../whatsnew/2.6.rst:1236
msgid ""
"Don't feel that you must now begin writing lots of checks as in the above"
" example.  Python has a strong tradition of duck-typing, where explicit "
"type-checking is never done and code simply calls methods on an object, "
"trusting that those methods will be there and raising an exception if "
"they aren't.  Be judicious in checking for ABCs and only do it where it's"
" absolutely necessary."
msgstr ""

#: ../../whatsnew/2.6.rst:1243
msgid ""
"You can write your own ABCs by using ``abc.ABCMeta`` as the metaclass in "
"a class definition::"
msgstr ""

#: ../../whatsnew/2.6.rst:1264
msgid ""
"In the :class:`Drawable` ABC above, the :meth:`draw_doubled` method "
"renders the object at twice its size and can be implemented in terms of "
"other methods described in :class:`Drawable`.  Classes implementing this "
"ABC therefore don't need to provide their own implementation of "
":meth:`draw_doubled`, though they can do so.  An implementation of "
":meth:`draw` is necessary, though; the ABC can't provide a useful generic"
" implementation."
msgstr ""

#: ../../whatsnew/2.6.rst:1272
msgid ""
"You can apply the ``@abstractmethod`` decorator to methods such as "
":meth:`draw` that must be implemented; Python will then raise an "
"exception for classes that don't define the method. Note that the "
"exception is only raised when you actually try to create an instance of a"
" subclass lacking the method::"
msgstr ""

#: ../../whatsnew/2.6.rst:1287
msgid ""
"Abstract data attributes can be declared using the ``@abstractproperty`` "
"decorator::"
msgstr ""

#: ../../whatsnew/2.6.rst:1297
msgid "Subclasses must then define a :meth:`readonly` property."
msgstr ""

#: ../../whatsnew/2.6.rst:1303
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ""

#: ../../whatsnew/2.6.rst:1302
msgid ""
"PEP written by Guido van Rossum and Talin. Implemented by Guido van "
"Rossum. Backported to 2.6 by Benjamin Aranguren, with Alex Martelli."
msgstr ""

#: ../../whatsnew/2.6.rst:1311
msgid "PEP 3127: Integer Literal Support and Syntax"
msgstr ""

#: ../../whatsnew/2.6.rst:1313
msgid ""
"Python 3.0 changes the syntax for octal (base-8) integer literals, "
"prefixing them with \"0o\" or \"0O\" instead of a leading zero, and adds "
"support for binary (base-2) integer literals, signalled by a \"0b\" or "
"\"0B\" prefix."
msgstr ""

#: ../../whatsnew/2.6.rst:1318
msgid ""
"Python 2.6 doesn't drop support for a leading 0 signalling an octal "
"number, but it does add support for \"0o\" and \"0b\"::"
msgstr ""

#: ../../whatsnew/2.6.rst:1326
msgid ""
"The :func:`oct` builtin still returns numbers prefixed with a leading "
"zero, and a new :func:`bin` builtin returns the binary representation for"
" a number::"
msgstr ""

#: ../../whatsnew/2.6.rst:1337
msgid ""
"The :func:`int` and :func:`long` builtins will now accept the \"0o\" and "
"\"0b\" prefixes when base-8 or base-2 are requested, or when the *base* "
"argument is zero (signalling that the base used should be determined from"
" the string)::"
msgstr ""

#: ../../whatsnew/2.6.rst:1355
msgid ":pep:`3127` - Integer Literal Support and Syntax"
msgstr ""

#: ../../whatsnew/2.6.rst:1355
msgid "PEP written by Patrick Maupin; backported to 2.6 by Eric Smith."
msgstr ""

#: ../../whatsnew/2.6.rst:1363
msgid "PEP 3129: Class Decorators"
msgstr ""

#: ../../whatsnew/2.6.rst:1365
msgid ""
"Decorators have been extended from functions to classes.  It's now legal "
"to write::"
msgstr ""

#: ../../whatsnew/2.6.rst:1373
msgid "This is equivalent to::"
msgstr ""

#: ../../whatsnew/2.6.rst:1382
msgid ":pep:`3129` - Class Decorators"
msgstr ""

#: ../../whatsnew/2.6.rst:1383
msgid "PEP written by Collin Winter."
msgstr ""

#: ../../whatsnew/2.6.rst:1390
msgid "PEP 3141: A Type Hierarchy for Numbers"
msgstr ""

#: ../../whatsnew/2.6.rst:1392
msgid ""
"Python 3.0 adds several abstract base classes for numeric types inspired "
"by Scheme's numeric tower.  These classes were backported to 2.6 as the "
":mod:`numbers` module."
msgstr ""

#: ../../whatsnew/2.6.rst:1396
msgid ""
"The most general ABC is :class:`Number`.  It defines no operations at "
"all, and only exists to allow checking if an object is a number by doing "
"``isinstance(obj, Number)``."
msgstr ""

#: ../../whatsnew/2.6.rst:1400
msgid ""
":class:`Complex` is a subclass of :class:`Number`.  Complex numbers can "
"undergo the basic operations of addition, subtraction, multiplication, "
"division, and exponentiation, and you can retrieve the real and imaginary"
" parts and obtain a number's conjugate.  Python's built-in complex type "
"is an implementation of :class:`Complex`."
msgstr ""

#: ../../whatsnew/2.6.rst:1406
msgid ""
":class:`Real` further derives from :class:`Complex`, and adds operations "
"that only work on real numbers: :func:`floor`, :func:`trunc`, rounding, "
"taking the remainder mod N, floor division, and comparisons."
msgstr ""

#: ../../whatsnew/2.6.rst:1411
msgid ""
":class:`Rational` numbers derive from :class:`Real`, have "
":attr:`numerator` and :attr:`denominator` properties, and can be "
"converted to floats.  Python 2.6 adds a simple rational-number class, "
":class:`Fraction`, in the :mod:`fractions` module.  (It's called "
":class:`Fraction` instead of :class:`Rational` to avoid a name clash with"
" :class:`numbers.Rational`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1418
msgid ""
":class:`Integral` numbers derive from :class:`Rational`, and can be "
"shifted left and right with ``<<`` and ``>>``, combined using bitwise "
"operations such as ``&`` and ``|``, and can be used as array indexes and "
"slice boundaries."
msgstr ""

#: ../../whatsnew/2.6.rst:1423
msgid ""
"In Python 3.0, the PEP slightly redefines the existing builtins "
":func:`round`, :func:`math.floor`, :func:`math.ceil`, and adds a new one,"
" :func:`math.trunc`, that's been backported to Python 2.6. "
":func:`math.trunc` rounds toward zero, returning the closest "
":class:`Integral` that's between the function's argument and zero."
msgstr ""

#: ../../whatsnew/2.6.rst:1432
msgid ":pep:`3141` - A Type Hierarchy for Numbers"
msgstr ""

#: ../../whatsnew/2.6.rst:1432
msgid "PEP written by Jeffrey Yasskin."
msgstr ""

#: ../../whatsnew/2.6.rst:1434
msgid ""
"`Scheme's numerical tower "
"<https://www.gnu.org/software/guile/manual/html_node/Numerical-Tower.html"
"#Numerical-Tower>`__, from the Guile manual."
msgstr ""

#: ../../whatsnew/2.6.rst:1436
msgid ""
"`Scheme's number datatypes "
"<http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2>`__"
" from the R5RS Scheme specification."
msgstr ""

#: ../../whatsnew/2.6.rst:1440
msgid "The :mod:`fractions` Module"
msgstr ""

#: ../../whatsnew/2.6.rst:1442
msgid ""
"To fill out the hierarchy of numeric types, the :mod:`fractions` module "
"provides a rational-number class.  Rational numbers store their values as"
" a numerator and denominator forming a fraction, and can exactly "
"represent numbers such as ``2/3`` that floating-point numbers can only "
"approximate."
msgstr ""

#: ../../whatsnew/2.6.rst:1448
msgid ""
"The :class:`Fraction` constructor takes two :class:`Integral` values that"
" will be the numerator and denominator of the resulting fraction. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:1461
msgid ""
"For converting floating-point numbers to rationals, the float type now "
"has an :meth:`as_integer_ratio()` method that returns the numerator and "
"denominator for a fraction that evaluates to the same floating-point "
"value::"
msgstr ""

#: ../../whatsnew/2.6.rst:1473
msgid ""
"Note that values that can only be approximated by floating-point numbers,"
" such as 1./3, are not simplified to the number being approximated; the "
"fraction attempts to match the floating-point value **exactly**."
msgstr ""

#: ../../whatsnew/2.6.rst:1478
msgid ""
"The :mod:`fractions` module is based upon an implementation by Sjoerd "
"Mullender that was in Python's :file:`Demo/classes/` directory for a long"
" time.  This implementation was significantly updated by Jeffrey Yasskin."
msgstr ""

#: ../../whatsnew/2.6.rst:1487 ../../whatsnew/2.7.rst:674
#: ../../whatsnew/3.1.rst:118 ../../whatsnew/3.2.rst:437
#: ../../whatsnew/3.3.rst:778 ../../whatsnew/3.4.rst:403
#: ../../whatsnew/3.5.rst:703 ../../whatsnew/3.6.rst:740
msgid "Some smaller changes made to the core Python language are:"
msgstr ""

#: ../../whatsnew/2.6.rst:1489
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can "
"now be executed directly by passing their name to the interpreter. The "
"directory or zip archive is automatically inserted as the first entry in "
"sys.path.  (Suggestion and initial patch by Andy Chu, subsequently "
"revised by Phillip J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1496
msgid ""
"The :func:`hasattr` function was catching and ignoring all errors, under "
"the assumption that they meant a :meth:`__getattr__` method was failing "
"somehow and the return value of :func:`hasattr` would therefore be "
"``False``.  This logic shouldn't be applied to :exc:`KeyboardInterrupt` "
"and :exc:`SystemExit`, however; Python 2.6 will no longer discard such "
"exceptions when :func:`hasattr` encounters them.  (Fixed by Benjamin "
"Peterson; :issue:`2196`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1504
msgid ""
"When calling a function using the ``**`` syntax to provide keyword "
"arguments, you are no longer required to use a Python dictionary; any "
"mapping will now work::"
msgstr ""

#: ../../whatsnew/2.6.rst:1517
msgid "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1519
msgid ""
"It's also become legal to provide keyword arguments after a ``*args`` "
"argument to a function call. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:1528
msgid ""
"Previously this would have been a syntax error. (Contributed by Amaury "
"Forgeot d'Arc; :issue:`3473`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1531
msgid ""
"A new builtin, ``next(iterator, [default])`` returns the next item from "
"the specified iterator.  If the *default* argument is supplied, it will "
"be returned if *iterator* has been exhausted; otherwise, the "
":exc:`StopIteration` exception will be raised.  (Backported in "
":issue:`2719`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1537
msgid ""
"Tuples now have :meth:`index` and :meth:`count` methods matching the list"
" type's :meth:`index` and :meth:`count` methods::"
msgstr ""

#: ../../whatsnew/2.6.rst:1546
msgid "(Contributed by Raymond Hettinger)"
msgstr ""

#: ../../whatsnew/2.6.rst:1548
msgid ""
"The built-in types now have improved support for extended slicing syntax,"
" accepting various combinations of ``(start, stop, step)``. Previously, "
"the support was partial and certain corner cases wouldn't work. "
"(Implemented by Thomas Wouters.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1555
msgid ""
"Properties now have three attributes, :attr:`getter`, :attr:`setter` and "
":attr:`deleter`, that are decorators providing useful shortcuts for "
"adding a getter, setter or deleter function to an existing property. You "
"would use them like this::"
msgstr ""

#: ../../whatsnew/2.6.rst:1582
msgid ""
"Several methods of the built-in set types now accept multiple iterables: "
":meth:`intersection`, :meth:`intersection_update`, :meth:`union`, "
":meth:`update`, :meth:`difference` and :meth:`difference_update`."
msgstr ""

#: ../../whatsnew/2.6.rst:1598
msgid ""
"Many floating-point features were added.  The :func:`float` function will"
" now turn the string ``nan`` into an IEEE 754 Not A Number value, and "
"``+inf`` and ``-inf`` into positive or negative infinity.  This works on "
"any platform with IEEE 754 semantics.  (Contributed by Christian Heimes; "
":issue:`1635`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1604
msgid ""
"Other functions in the :mod:`math` module, :func:`isinf` and "
":func:`isnan`, return true if their floating-point argument is infinite "
"or Not A Number.  (:issue:`1640`)"
msgstr ""

#: ../../whatsnew/2.6.rst:1608
msgid ""
"Conversion functions were added to convert floating-point numbers into "
"hexadecimal strings (:issue:`3008`).  These functions convert floats to "
"and from a string representation without introducing rounding errors from"
" the conversion between decimal and binary.  Floats have a :meth:`hex` "
"method that returns a string representation, and the ``float.fromhex()`` "
"method converts a string back into a number::"
msgstr ""

#: ../../whatsnew/2.6.rst:1625
msgid ""
"A numerical nicety: when creating a complex number from two floats on "
"systems that support signed zeros (-0 and +0), the :func:`complex` "
"constructor will now preserve the sign of the zero.  (Fixed by Mark T. "
"Dickinson; :issue:`1507`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1630
msgid ""
"Classes that inherit a :meth:`__hash__` method from a parent class can "
"set ``__hash__ = None`` to indicate that the class isn't hashable.  This "
"will make ``hash(obj)`` raise a :exc:`TypeError` and the class will not "
"be indicated as implementing the :class:`Hashable` ABC."
msgstr ""

#: ../../whatsnew/2.6.rst:1636
msgid ""
"You should do this when you've defined a :meth:`__cmp__` or "
":meth:`__eq__` method that compares objects by their value rather than by"
" identity.  All objects have a default hash method that uses ``id(obj)`` "
"as the hash value.  There's no tidy way to remove the :meth:`__hash__` "
"method inherited from a parent class, so assigning ``None`` was "
"implemented as an override.  At the C level, extensions can set "
"``tp_hash`` to :c:func:`PyObject_HashNotImplemented`. (Fixed by Nick "
"Coghlan and Amaury Forgeot d'Arc; :issue:`2235`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1646
msgid ""
"The :exc:`GeneratorExit` exception now subclasses :exc:`BaseException` "
"instead of :exc:`Exception`.  This means that an exception handler that "
"does ``except Exception:`` will not inadvertently catch "
":exc:`GeneratorExit`. (Contributed by Chad Austin; :issue:`1537`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1652
msgid ""
"Generator objects now have a :attr:`gi_code` attribute that refers to the"
" original code object backing the generator. (Contributed by Collin "
"Winter; :issue:`1473257`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1656
msgid ""
"The :func:`compile` built-in function now accepts keyword arguments as "
"well as positional parameters.  (Contributed by Thomas Wouters; "
":issue:`1444529`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1660
msgid ""
"The :func:`complex` constructor now accepts strings containing "
"parenthesized complex numbers, meaning that ``complex(repr(cplx))`` will "
"now round-trip values.  For example, ``complex('(3+4j)')`` now returns "
"the value (3+4j).  (:issue:`1491866`)"
msgstr ""

#: ../../whatsnew/2.6.rst:1665
msgid ""
"The string :meth:`translate` method now accepts ``None`` as the "
"translation table parameter, which is treated as the identity "
"transformation.   This makes it easier to carry out operations that only "
"delete characters.  (Contributed by Bengt Richter and implemented by "
"Raymond Hettinger; :issue:`1193128`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1671
msgid ""
"The built-in :func:`dir` function now checks for a :meth:`__dir__` method"
" on the objects it receives.  This method must return a list of strings "
"containing the names of valid attributes for the object, and lets the "
"object control the value that :func:`dir` produces. Objects that have "
":meth:`__getattr__` or :meth:`__getattribute__` methods can use this to "
"advertise pseudo-attributes they will honor. (:issue:`1591665`)"
msgstr ""

#: ../../whatsnew/2.6.rst:1679
msgid ""
"Instance method objects have new attributes for the object and function "
"comprising the method; the new synonym for :attr:`im_self` is "
":attr:`__self__`, and :attr:`im_func` is also available as "
":attr:`__func__`. The old names are still supported in Python 2.6, but "
"are gone in 3.0."
msgstr ""

#: ../../whatsnew/2.6.rst:1684
msgid ""
"An obscure change: when you use the :func:`locals` function inside a "
":keyword:`class` statement, the resulting dictionary no longer returns "
"free variables.  (Free variables, in this case, are variables referenced "
"in the :keyword:`!class` statement  that aren't attributes of the class.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1695
msgid ""
"The :mod:`warnings` module has been rewritten in C.  This makes it "
"possible to invoke warnings from the parser, and may also make the "
"interpreter's startup faster. (Contributed by Neal Norwitz and Brett "
"Cannon; :issue:`1631171`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1700
msgid ""
"Type objects now have a cache of methods that can reduce the work "
"required to find the correct method implementation for a particular "
"class; once cached, the interpreter doesn't need to traverse base classes"
" to figure out the right method to call. The cache is cleared if a base "
"class or the class itself is modified, so the cache should remain correct"
" even in the face of Python's dynamic nature. (Original optimization "
"implemented by Armin Rigo, updated for Python 2.6 by Kevin Jacobs; "
":issue:`1700288`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1710
msgid ""
"By default, this change is only applied to types that are included with "
"the Python core.  Extension modules may not necessarily be compatible "
"with this cache, so they must explicitly add "
":c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` to the module's ``tp_flags`` field"
" to enable the method cache. (To be compatible with the method cache, the"
" extension module's code must not directly access and modify the "
"``tp_dict`` member of any of the types it implements.  Most modules don't"
" do this, but it's impossible for the Python interpreter to determine "
"that. See :issue:`1878` for some discussion.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1721
msgid ""
"Function calls that use keyword arguments are significantly faster by "
"doing a quick pointer comparison, usually saving the time of a full "
"string comparison.  (Contributed by Raymond Hettinger, after an initial "
"implementation by Antoine Pitrou; :issue:`1819`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1726
msgid ""
"All of the functions in the :mod:`struct` module have been rewritten in "
"C, thanks to work at the Need For Speed sprint. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1730
msgid ""
"Some of the standard built-in types now set a bit in their type objects."
"  This speeds up checking whether an object is a subclass of one of these"
" types.  (Contributed by Neal Norwitz.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1734
msgid ""
"Unicode strings now use faster code for detecting whitespace and line "
"breaks; this speeds up the :meth:`split` method by about 25% and "
":meth:`splitlines` by 35%. (Contributed by Antoine Pitrou.)  Memory usage"
" is reduced by using pymalloc for the Unicode string's data."
msgstr ""

#: ../../whatsnew/2.6.rst:1740
msgid ""
"The ``with`` statement now stores the :meth:`__exit__` method on the "
"stack, producing a small speedup.  (Implemented by Jeffrey Yasskin.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1743
msgid ""
"To reduce memory usage, the garbage collector will now clear internal "
"free lists when garbage-collecting the highest generation of objects. "
"This may return memory to the operating system sooner."
msgstr ""

#: ../../whatsnew/2.6.rst:1752 ../../whatsnew/2.7.rst:907
msgid "Interpreter Changes"
msgstr ""

#: ../../whatsnew/2.6.rst:1754
msgid ""
"Two command-line options have been reserved for use by other Python "
"implementations.  The :option:`-J` switch has been reserved for use by "
"Jython for Jython-specific options, such as switches that are passed to "
"the underlying JVM.  :option:`-X` has been reserved for options specific "
"to a particular implementation of Python such as CPython, Jython, or "
"IronPython.  If either option is used with Python 2.6, the interpreter "
"will report that the option isn't currently used."
msgstr ""

#: ../../whatsnew/2.6.rst:1762
msgid ""
"Python can now be prevented from writing :file:`.pyc` or :file:`.pyo` "
"files by supplying the :option:`-B` switch to the Python interpreter, or "
"by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable "
"before running the interpreter.  This setting is available to Python "
"programs as the ``sys.dont_write_bytecode`` variable, and Python code can"
" change the value to modify the interpreter's behaviour.  (Contributed by"
" Neal Norwitz and Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1770
msgid ""
"The encoding used for standard input, output, and standard error can be "
"specified by setting the :envvar:`PYTHONIOENCODING` environment variable "
"before running the interpreter.  The value should be a string in the form"
" ``<encoding>`` or ``<encoding>:<errorhandler>``. The *encoding* part "
"specifies the encoding's name, e.g. ``utf-8`` or ``latin-1``; the "
"optional *errorhandler* part specifies what to do with characters that "
"can't be handled by the encoding, and  should be one of \"error\", "
"\"ignore\", or \"replace\".   (Contributed by Martin von L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1785 ../../whatsnew/2.7.rst:1027
msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the "
":file:`Misc/NEWS` file in the source tree for a more complete list of "
"changes, or look through the Subversion logs for all the details."
msgstr ""

#: ../../whatsnew/2.6.rst:1791
msgid ""
"The :mod:`asyncore` and :mod:`asynchat` modules are being actively "
"maintained again, and a number of patches and bugfixes were applied.  "
"(Maintained by Josiah Carlson; see :issue:`1736190` for one patch.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1796
msgid ""
"The :mod:`bsddb` module also has a new maintainer, Jes√∫s Cea Avi√≥n, and "
"the package is now available as a standalone package.  The web page for "
"the package is `www.jcea.es/programacion/pybsddb.htm "
"<https://www.jcea.es/programacion/pybsddb.htm>`__. The plan is to remove "
"the package from the standard library in Python 3.0, because its pace of "
"releases is much more frequent than Python's."
msgstr ""

#: ../../whatsnew/2.6.rst:1804
msgid ""
"The :mod:`bsddb.dbshelve` module now uses the highest pickling protocol "
"available, instead of restricting itself to protocol 1. (Contributed by "
"W. Barnes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1808
msgid ""
"The :mod:`cgi` module will now read variables from the query string of an"
" HTTP POST request.  This makes it possible to use form actions with URLs"
" that include query strings such as \"/cgi-bin/add.py?category=1\".  "
"(Contributed by Alexandre Fiori and Nubis; :issue:`1817`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1814
msgid ""
"The :func:`parse_qs` and :func:`parse_qsl` functions have been relocated "
"from the :mod:`cgi` module to the :mod:`urlparse` module. The versions "
"still available in the :mod:`cgi` module will trigger "
":exc:`PendingDeprecationWarning` messages in 2.6 (:issue:`600362`)."
msgstr ""

#: ../../whatsnew/2.6.rst:1820
msgid ""
"The :mod:`cmath` module underwent extensive revision, contributed by Mark"
" Dickinson and Christian Heimes. Five new functions were added:"
msgstr ""

#: ../../whatsnew/2.6.rst:1824
msgid ""
":func:`polar` converts a complex number to polar form, returning the "
"modulus and argument of the complex number."
msgstr ""

#: ../../whatsnew/2.6.rst:1827
msgid ""
":func:`rect` does the opposite, turning a modulus, argument pair back "
"into the corresponding complex number."
msgstr ""

#: ../../whatsnew/2.6.rst:1830
msgid ""
":func:`phase` returns the argument (also called the angle) of a complex "
"number."
msgstr ""

#: ../../whatsnew/2.6.rst:1833
msgid ""
":func:`isnan` returns True if either the real or imaginary part of its "
"argument is a NaN."
msgstr ""

#: ../../whatsnew/2.6.rst:1836
msgid ""
":func:`isinf` returns True if either the real or imaginary part of its "
"argument is infinite."
msgstr ""

#: ../../whatsnew/2.6.rst:1839
msgid ""
"The revisions also improved the numerical soundness of the :mod:`cmath` "
"module.  For all functions, the real and imaginary parts of the results "
"are accurate to within a few units of least precision (ulps) whenever "
"possible.  See :issue:`1381` for the details.  The branch cuts for "
":func:`asinh`, :func:`atanh`: and :func:`atan` have also been corrected."
msgstr ""

#: ../../whatsnew/2.6.rst:1846
msgid ""
"The tests for the module have been greatly expanded; nearly 2000 new test"
" cases exercise the algebraic functions."
msgstr ""

#: ../../whatsnew/2.6.rst:1849
msgid ""
"On IEEE 754 platforms, the :mod:`cmath` module now handles IEEE 754 "
"special values and floating-point exceptions in a manner consistent with "
"Annex 'G' of the C99 standard."
msgstr ""

#: ../../whatsnew/2.6.rst:1853
msgid ""
"A new data type in the :mod:`collections` module: "
":class:`namedtuple(typename, fieldnames)` is a factory function that "
"creates subclasses of the standard tuple whose fields are accessible by "
"name as well as index.  For example::"
msgstr ""

#: ../../whatsnew/2.6.rst:1875
msgid ""
"Several places in the standard library that returned tuples have been "
"modified to return :class:`namedtuple` instances.  For example, the "
":meth:`Decimal.as_tuple` method now returns a named tuple with "
":attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr ""

#: ../../whatsnew/2.6.rst:1882
msgid ""
"Another change to the :mod:`collections` module is that the "
":class:`deque` type now supports an optional *maxlen* parameter; if "
"supplied, the deque's size will be restricted to no more than *maxlen* "
"items.  Adding more items to a full deque causes old items to be "
"discarded."
msgstr ""

#: ../../whatsnew/2.6.rst:1903
msgid ""
"The :mod:`Cookie` module's :class:`Morsel` objects now support an "
":attr:`httponly` attribute.  In some browsers. cookies with this "
"attribute set cannot be accessed or manipulated by JavaScript code. "
"(Contributed by Arvin Schnell; :issue:`1638033`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1908
msgid ""
"A new window method in the :mod:`curses` module, :meth:`chgat`, changes "
"the display attributes for a certain number of characters on a single "
"line.  (Contributed by Fabian Kreutz.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1918
msgid ""
"The :class:`Textbox` class in the :mod:`curses.textpad` module now "
"supports editing in insert mode as well as overwrite mode. Insert mode is"
" enabled by supplying a true value for the *insert_mode* parameter when "
"creating the :class:`Textbox` instance."
msgstr ""

#: ../../whatsnew/2.6.rst:1923
#, python-format
msgid ""
"The :mod:`datetime` module's :meth:`strftime` methods now support a "
"``%f`` format code that expands to the number of microseconds in the "
"object, zero-padded on the left to six places.  (Contributed by Skip "
"Montanaro; :issue:`1158`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1928
msgid ""
"The :mod:`decimal` module was updated to version 1.66 of `the General "
"Decimal Specification <http://speleotrove.com/decimal/decarith.html>`__."
"  New features include some methods for some basic mathematical functions"
" such as :meth:`exp` and :meth:`log10`::"
msgstr ""

#: ../../whatsnew/2.6.rst:1940
msgid ""
"The :meth:`as_tuple` method of :class:`Decimal` objects now returns a "
"named tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` "
"fields."
msgstr ""

#: ../../whatsnew/2.6.rst:1943
msgid ""
"(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support "
"added by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1946
msgid ""
"The :mod:`difflib` module's :class:`SequenceMatcher` class now returns "
"named tuples representing matches, with :attr:`a`, :attr:`b`, and "
":attr:`size` attributes. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1951
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in "
"seconds, was added to the :class:`ftplib.FTP` class constructor as well "
"as the :meth:`connect` method.  (Added by Facundo Batista.) Also, the "
":class:`FTP` class's :meth:`storbinary` and :meth:`storlines` now take an"
" optional *callback* parameter that will be called with each block of "
"data after the data has been sent. (Contributed by Phil Schwartz; "
":issue:`1221598`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1959
msgid ""
"The :func:`reduce` built-in function is also available in the "
":mod:`functools` module.  In Python 3.0, the builtin has been dropped and"
" :func:`reduce` is only available from :mod:`functools`; currently there "
"are no plans to drop the builtin in the 2.x series. (Patched by Christian"
" Heimes; :issue:`1739906`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1965
msgid ""
"When possible, the :mod:`getpass` module will now use :file:`/dev/tty` to"
" print a prompt message and read the password, falling back to standard "
"error and standard input.  If the password may be echoed to the terminal,"
" a warning is printed before the prompt is displayed.  (Contributed by "
"Gregory P. Smith.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1971
msgid ""
"The :func:`glob.glob` function can now return Unicode filenames if a "
"Unicode path was used and Unicode filenames are matched within the "
"directory.  (:issue:`1001604`)"
msgstr ""

#: ../../whatsnew/2.6.rst:1975
msgid ""
"A new function in the :mod:`heapq` module, ``merge(iter1, iter2, ...)``, "
"takes any number of iterables returning data in sorted order, and returns"
" a new generator that returns the contents of all the iterators, also in "
"sorted order.  For example::"
msgstr ""

#: ../../whatsnew/2.6.rst:1983
msgid ""
"Another new function, ``heappushpop(heap, item)``, pushes *item* onto "
"*heap*, then pops off and returns the smallest item. This is more "
"efficient than making a call to :func:`heappush` and then "
":func:`heappop`."
msgstr ""

#: ../../whatsnew/2.6.rst:1988
msgid ""
":mod:`heapq` is now implemented to only use less-than comparison, instead"
" of the less-than-or-equal comparison it previously used. This makes "
":mod:`heapq`'s usage of a type match the :meth:`list.sort` method. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1994
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in "
"seconds, was added to the :class:`httplib.HTTPConnection` and "
":class:`HTTPSConnection` class constructors.  (Added by Facundo Batista.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1999
msgid ""
"Most of the :mod:`inspect` module's functions, such as "
":func:`getmoduleinfo` and :func:`getargs`, now return named tuples. In "
"addition to behaving like tuples, the elements of the  return value can "
"also be accessed as attributes. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2005
msgid ""
"Some new functions in the module include :func:`isgenerator`, "
":func:`isgeneratorfunction`, and :func:`isabstract`."
msgstr ""

#: ../../whatsnew/2.6.rst:2009
msgid "The :mod:`itertools` module gained several new functions."
msgstr ""

#: ../../whatsnew/2.6.rst:2011
msgid ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` makes tuples from each "
"of the elements; if some of the iterables are shorter than others, the "
"missing values are set to *fillvalue*.  For example::"
msgstr ""

#: ../../whatsnew/2.6.rst:2018
msgid ""
"``product(iter1, iter2, ..., [repeat=N])`` returns the Cartesian product "
"of the supplied iterables, a set of tuples containing every possible "
"combination of the elements returned from each iterable. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:2027
msgid ""
"The optional *repeat* keyword argument is used for taking the product of "
"an iterable or a set of iterables with themselves, repeated *N* times.  "
"With a single iterable argument, *N*-tuples are returned::"
msgstr ""

#: ../../whatsnew/2.6.rst:2036
msgid "With two iterables, *2N*-tuples are returned. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:2044
msgid ""
"``combinations(iterable, r)`` returns sub-sequences of length *r* from "
"the elements of *iterable*. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:2055
msgid ""
"``permutations(iter[, r])`` returns all the permutations of length *r* of"
" the iterable's elements.  If *r* is not specified, it will default to "
"the number of elements produced by the iterable. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:2065
msgid ""
"``itertools.chain(*iterables)`` is an existing function in "
":mod:`itertools` that gained a new constructor in Python 2.6. "
"``itertools.chain.from_iterable(iterable)`` takes a single iterable that "
"should return other iterables.  :func:`chain` will then return all the "
"elements of the first iterable, then all the elements of the second, and "
"so on. ::"
msgstr ""

#: ../../whatsnew/2.6.rst:2075
msgid "(All contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2077
msgid ""
"The :mod:`logging` module's :class:`FileHandler` class and its subclasses"
" :class:`WatchedFileHandler`, :class:`RotatingFileHandler`, and "
":class:`TimedRotatingFileHandler` now have an optional *delay* parameter "
"to their constructors.  If *delay* is true, opening of the log file is "
"deferred until the first :meth:`emit` call is made.  (Contributed by "
"Vinay Sajip.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2084
msgid ""
":class:`TimedRotatingFileHandler` also has a *utc* constructor parameter."
"  If the argument is true, UTC time will be used in determining when "
"midnight occurs and in generating filenames; otherwise local time will be"
" used."
msgstr ""

#: ../../whatsnew/2.6.rst:2089
msgid "Several new functions were added to the :mod:`math` module:"
msgstr ""

#: ../../whatsnew/2.6.rst:2091
msgid ""
":func:`~math.isinf` and :func:`~math.isnan` determine whether a given "
"float is a (positive or negative) infinity or a NaN (Not a Number), "
"respectively."
msgstr ""

#: ../../whatsnew/2.6.rst:2094
msgid ""
":func:`~math.copysign` copies the sign bit of an IEEE 754 number, "
"returning the absolute value of *x* combined with the sign bit of *y*.  "
"For example, ``math.copysign(1, -0.0)`` returns -1.0. (Contributed by "
"Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2099
msgid ""
":func:`~math.factorial` computes the factorial of a number. (Contributed "
"by Raymond Hettinger; :issue:`2138`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2102
msgid ""
":func:`~math.fsum` adds up the stream of numbers from an iterable, and is"
" careful to avoid loss of precision through using partial sums. "
"(Contributed by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; "
":issue:`2819`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2107
msgid ""
":func:`~math.acosh`, :func:`~math.asinh` and :func:`~math.atanh` compute "
"the inverse hyperbolic functions."
msgstr ""

#: ../../whatsnew/2.6.rst:2110
msgid ":func:`~math.log1p` returns the natural logarithm of *1+x* (base *e*)."
msgstr ""

#: ../../whatsnew/2.6.rst:2113
msgid ""
":func:`trunc` rounds a number toward zero, returning the closest "
":class:`Integral` that's between the function's argument and zero. Added "
"as part of the backport of `PEP 3141's type hierarchy for numbers "
"<#pep-3141>`__."
msgstr ""

#: ../../whatsnew/2.6.rst:2118
msgid ""
"The :mod:`math` module has been improved to give more consistent "
"behaviour across platforms, especially with respect to handling of "
"floating-point exceptions and IEEE 754 special values."
msgstr ""

#: ../../whatsnew/2.6.rst:2122
msgid ""
"Whenever possible, the module follows the recommendations of the C99 "
"standard about 754's special values.  For example, ``sqrt(-1.)`` should "
"now give a :exc:`ValueError` across almost all platforms, while "
"``sqrt(float('NaN'))`` should return a NaN on all IEEE 754 platforms.  "
"Where Annex 'F' of the C99 standard recommends signaling 'divide-by-zero'"
" or 'invalid', Python will raise :exc:`ValueError`. Where Annex 'F' of "
"the C99 standard recommends signaling 'overflow', Python will raise "
":exc:`OverflowError`.  (See :issue:`711019` and :issue:`1640`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2132
msgid "(Contributed by Christian Heimes and Mark Dickinson.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2134
msgid ""
":class:`~mmap.mmap` objects now have a :meth:`rfind` method that searches"
" for a substring beginning at the end of the string and searching "
"backwards.  The :meth:`find` method also gained an *end* parameter giving"
" an index at which to stop searching. (Contributed by John Lenton.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2140
msgid ""
"The :mod:`operator` module gained a :func:`methodcaller` function that "
"takes a name and an optional set of arguments, returning a callable that "
"will call the named function on any arguments passed to it.  For "
"example::"
msgstr ""

#: ../../whatsnew/2.6.rst:2150
msgid "(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2152
msgid ""
"The :func:`attrgetter` function now accepts dotted names and performs the"
" corresponding attribute lookups::"
msgstr ""

#: ../../whatsnew/2.6.rst:2162
msgid "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2164
msgid ""
"The :mod:`os` module now wraps several new system calls. ``fchmod(fd, "
"mode)`` and ``fchown(fd, uid, gid)`` change the mode and ownership of an "
"opened file, and ``lchmod(path, mode)`` changes the mode of a symlink.  "
"(Contributed by Georg Brandl and Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2170
msgid ""
":func:`chflags` and :func:`lchflags` are wrappers for the corresponding "
"system calls (where they're available), changing the flags set on a file."
"  Constants for the flag values are defined in the :mod:`stat` module; "
"some possible values include :const:`UF_IMMUTABLE` to signal the file may"
" not be changed and :const:`UF_APPEND` to indicate that data can only be "
"appended to the file.  (Contributed by M. Levinson.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2178
msgid ""
"``os.closerange(low, high)`` efficiently closes all file descriptors from"
" *low* to *high*, ignoring any errors and not including *high* itself. "
"This function is now used by the :mod:`subprocess` module to make "
"starting processes faster.  (Contributed by Georg Brandl; "
":issue:`1663329`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2183
msgid ""
"The ``os.environ`` object's :meth:`clear` method will now unset the "
"environment variables using :func:`os.unsetenv` in addition to clearing "
"the object's keys.  (Contributed by Martin Horcicka; :issue:`1181`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2187
msgid ""
"The :func:`os.walk` function now has a ``followlinks`` parameter. If set "
"to True, it will follow symlinks pointing to directories and visit the "
"directory's contents.  For backward compatibility, the parameter's "
"default value is false.  Note that the function can fall into an infinite"
" recursion if there's a symlink that points to a parent directory.  "
"(:issue:`1273829`)"
msgstr ""

#: ../../whatsnew/2.6.rst:2194
msgid ""
"In the :mod:`os.path` module, the :func:`splitext` function has been "
"changed to not split on leading period characters. This produces better "
"results when operating on Unix's dot-files. For example, "
"``os.path.splitext('.ipython')`` now returns ``('.ipython', '')`` instead"
" of ``('', '.ipython')``. (:issue:`1115886`)"
msgstr ""

#: ../../whatsnew/2.6.rst:2201
msgid ""
"A new function, ``os.path.relpath(path, start='.')``, returns a relative "
"path from the ``start`` path, if it's supplied, or from the current "
"working directory to the destination ``path``.  (Contributed by Richard "
"Barran; :issue:`1339796`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2206
msgid ""
"On Windows, :func:`os.path.expandvars` will now expand environment "
"variables given in the form \"%var%\", and \"~user\" will be expanded "
"into the user's home directory path.  (Contributed by Josiah Carlson; "
":issue:`957650`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2211
msgid ""
"The Python debugger provided by the :mod:`pdb` module gained a new "
"command: \"run\" restarts the Python program being debugged and can "
"optionally take new command-line arguments for the program. (Contributed "
"by Rocky Bernstein; :issue:`1393667`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2216
msgid ""
"The :func:`pdb.post_mortem` function, used to begin debugging a "
"traceback, will now use the traceback returned by :func:`sys.exc_info` if"
" no traceback is supplied.   (Contributed by Facundo Batista; "
":issue:`1106316`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2221
msgid ""
"The :mod:`pickletools` module now has an :func:`optimize` function that "
"takes a string containing a pickle and removes some unused opcodes, "
"returning a shorter pickle that contains the same data structure. "
"(Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2226
msgid ""
"A :func:`get_data` function was added to the :mod:`pkgutil` module that "
"returns the contents of resource files included with an installed Python "
"package.  For example::"
msgstr ""

#: ../../whatsnew/2.6.rst:2241
msgid "(Contributed by Paul Moore; :issue:`2439`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2243
msgid ""
"The :mod:`pyexpat` module's :class:`Parser` objects now allow setting "
"their :attr:`buffer_size` attribute to change the size of the buffer used"
" to hold character data. (Contributed by Achim Gaedke; :issue:`1137`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2248
msgid ""
"The :mod:`Queue` module now provides queue variants that retrieve entries"
" in different orders.  The :class:`PriorityQueue` class stores queued "
"items in a heap and retrieves them in priority order, and "
":class:`LifoQueue` retrieves the most recently added entries first, "
"meaning that it behaves like a stack. (Contributed by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2255
msgid ""
"The :mod:`random` module's :class:`Random` objects can now be pickled on "
"a 32-bit system and unpickled on a 64-bit system, and vice versa.  "
"Unfortunately, this change also means that Python 2.6's :class:`Random` "
"objects can't be unpickled correctly on earlier versions of Python. "
"(Contributed by Shawn Ligocki; :issue:`1727780`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2262
msgid ""
"The new ``triangular(low, high, mode)`` function returns random numbers "
"following a triangular distribution.   The returned values are between "
"*low* and *high*, not including *high* itself, and with *mode* as the "
"most frequently occurring value in the distribution.  (Contributed by "
"Wladmir van der Laan and Raymond Hettinger; :issue:`1681432`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2269
msgid ""
"Long regular expression searches carried out by the  :mod:`re` module "
"will check for signals being delivered, so time-consuming searches can "
"now be interrupted. (Contributed by Josh Hoyt and Ralf Schmitt; "
":issue:`846388`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2274
msgid ""
"The regular expression module is implemented by compiling bytecodes for a"
" tiny regex-specific virtual machine.  Untrusted code could create "
"malicious strings of bytecode directly and cause crashes, so Python 2.6 "
"includes a verifier for the regex bytecode. (Contributed by Guido van "
"Rossum from work for Google App Engine; :issue:`3487`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2281
msgid ""
"The :mod:`rlcompleter` module's :meth:`Completer.complete()` method will "
"now ignore exceptions triggered while evaluating a name. (Fixed by Lorenz"
" Quack; :issue:`2250`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2285
msgid ""
"The :mod:`sched` module's :class:`scheduler` instances now have a read-"
"only :attr:`queue` attribute that returns the contents of the scheduler's"
" queue, represented as a list of named tuples with the fields ``(time, "
"priority, action, argument)``. (Contributed by Raymond Hettinger; "
":issue:`1861`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2291
msgid ""
"The :mod:`select` module now has wrapper functions for the Linux "
":c:func:`epoll` and BSD :c:func:`kqueue` system calls. :meth:`modify` "
"method was added to the existing :class:`poll` objects; "
"``pollobj.modify(fd, eventmask)`` takes a file descriptor or file object "
"and an event mask, modifying the recorded event mask for that file. "
"(Contributed by Christian Heimes; :issue:`1657`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2299
msgid ""
"The :func:`shutil.copytree` function now has an optional *ignore* "
"argument that takes a callable object.  This callable will receive each "
"directory path and a list of the directory's contents, and returns a list"
" of names that will be ignored, not copied."
msgstr ""

#: ../../whatsnew/2.6.rst:2304
msgid ""
"The :mod:`shutil` module also provides an :func:`ignore_patterns` "
"function for use with this new parameter.  :func:`ignore_patterns` takes "
"an arbitrary number of glob-style patterns and returns a callable that "
"will ignore any files and directories that match any of these patterns.  "
"The following example copies a directory tree, but skips both "
":file:`.svn` directories and Emacs backup files, which have names ending "
"with '~'::"
msgstr ""

#: ../../whatsnew/2.6.rst:2315
msgid "(Contributed by Tarek Ziad√©; :issue:`2663`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2317
msgid ""
"Integrating signal handling with GUI handling event loops like those used"
" by Tkinter or GTk+ has long been a problem; most software ends up "
"polling, waking up every fraction of a second to check if any GUI events "
"have occurred. The :mod:`signal` module can now make this more efficient."
" Calling ``signal.set_wakeup_fd(fd)`` sets a file descriptor to be used; "
"when a signal is received, a byte is written to that file descriptor.  "
"There's also a C-level function, :c:func:`PySignal_SetWakeupFd`, for "
"setting the descriptor."
msgstr ""

#: ../../whatsnew/2.6.rst:2327
msgid ""
"Event loops will use this by opening a pipe to create two descriptors, "
"one for reading and one for writing.  The writable descriptor will be "
"passed to :func:`set_wakeup_fd`, and the readable descriptor will be "
"added to the list of descriptors monitored by the event loop via "
":c:func:`select` or :c:func:`poll`. On receiving a signal, a byte will be"
" written and the main event loop will be woken up, avoiding the need to "
"poll."
msgstr ""

#: ../../whatsnew/2.6.rst:2335
msgid "(Contributed by Adam Olsen; :issue:`1583`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2337
msgid ""
"The :func:`siginterrupt` function is now available from Python code, and "
"allows changing whether signals can interrupt system calls or not. "
"(Contributed by Ralf Schmitt.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2341
msgid ""
"The :func:`setitimer` and :func:`getitimer` functions have also been "
"added (where they're available).  :func:`setitimer` allows setting "
"interval timers that will cause a signal to be delivered to the process "
"after a specified time, measured in wall-clock time, consumed process "
"time, or combined process+system time.  (Contributed by Guilherme Polo; "
":issue:`2240`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2348
msgid ""
"The :mod:`smtplib` module now supports SMTP over SSL thanks to the "
"addition of the :class:`SMTP_SSL` class. This class supports an interface"
" identical to the existing :class:`SMTP` class. (Contributed by Monty "
"Taylor.)  Both class constructors also have an optional ``timeout`` "
"parameter that specifies a timeout for the initial connection attempt, "
"measured in seconds.  (Contributed by Facundo Batista.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2356
msgid ""
"An implementation of the LMTP protocol (:rfc:`2033`) was also added to "
"the module.  LMTP is used in place of SMTP when transferring e-mail "
"between agents that don't manage a mail queue.  (LMTP implemented by Leif"
" Hedstrom; :issue:`957003`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2361
msgid ""
":meth:`SMTP.starttls` now complies with :rfc:`3207` and forgets any "
"knowledge obtained from the server not obtained from the TLS negotiation "
"itself.  (Patch contributed by Bill Fenner; :issue:`829951`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2366
msgid ""
"The :mod:`socket` module now supports TIPC "
"(http://tipc.sourceforge.net/), a high-performance non-IP-based protocol "
"designed for use in clustered environments.  TIPC addresses are 4- or "
"5-tuples. (Contributed by Alberto Bertogli; :issue:`1646`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2371
msgid ""
"A new function, :func:`create_connection`, takes an address and connects "
"to it using an optional timeout value, returning the connected socket "
"object.  This function also looks up the address's type and connects to "
"it using IPv4 or IPv6 as appropriate.  Changing your code to use "
":func:`create_connection` instead of ``socket(socket.AF_INET, ...)`` may "
"be all that's required to make your code work with IPv6."
msgstr ""

#: ../../whatsnew/2.6.rst:2379
msgid ""
"The base classes in the :mod:`SocketServer` module now support calling a "
":meth:`handle_timeout` method after a span of inactivity specified by the"
" server's :attr:`timeout` attribute.  (Contributed by Michael Pomraning.)"
"  The :meth:`serve_forever` method now takes an optional poll interval "
"measured in seconds, controlling how often the server will check for a "
"shutdown request. (Contributed by Pedro Werneck and Jeffrey Yasskin; "
":issue:`742598`, :issue:`1193577`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2388
msgid ""
"The :mod:`sqlite3` module, maintained by Gerhard H√§ring, has been updated"
" from version 2.3.2 in Python 2.5 to version 2.4.1."
msgstr ""

#: ../../whatsnew/2.6.rst:2392
msgid ""
"The :mod:`struct` module now supports the C99 :c:type:`_Bool` type, using"
" the format character ``'?'``. (Contributed by David Remahl.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2396
msgid ""
"The :class:`Popen` objects provided by the :mod:`subprocess` module now "
"have :meth:`terminate`, :meth:`kill`, and :meth:`send_signal` methods. On"
" Windows, :meth:`send_signal` only supports the :const:`SIGTERM` signal, "
"and all these methods are aliases for the Win32 API function "
":c:func:`TerminateProcess`. (Contributed by Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2403
msgid ""
"A new variable in the :mod:`sys` module, :attr:`float_info`, is an object"
" containing information derived from the :file:`float.h` file about the "
"platform's floating-point support.  Attributes of this object include "
":attr:`mant_dig` (number of digits in the mantissa), :attr:`epsilon` "
"(smallest difference between 1.0 and the next largest value "
"representable), and several others.  (Contributed by Christian Heimes; "
":issue:`1534`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2411
msgid ""
"Another new variable, :attr:`dont_write_bytecode`, controls whether "
"Python writes any :file:`.pyc` or :file:`.pyo` files on importing a "
"module. If this variable is true, the compiled files are not written.  "
"The variable is initially set on start-up by supplying the :option:`-B` "
"switch to the Python interpreter, or by setting the "
":envvar:`PYTHONDONTWRITEBYTECODE` environment variable before running the"
" interpreter.  Python code can subsequently change the value of this "
"variable to control whether bytecode files are written or not. "
"(Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2422
msgid ""
"Information about the command-line arguments supplied to the Python "
"interpreter is available by reading attributes of a named tuple available"
" as ``sys.flags``.  For example, the :attr:`verbose` attribute is true if"
" Python was executed in verbose mode, :attr:`debug` is true in debugging "
"mode, etc. These attributes are all read-only. (Contributed by Christian "
"Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2430
msgid ""
"A new function, :func:`getsizeof`, takes a Python object and returns the "
"amount of memory used by the object, measured in bytes.  Built-in objects"
" return correct results; third-party extensions may not, but can define a"
" :meth:`__sizeof__` method to return the object's size. (Contributed by "
"Robert Schuppenies; :issue:`2898`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2437
msgid ""
"It's now possible to determine the current profiler and tracer functions "
"by calling :func:`sys.getprofile` and :func:`sys.gettrace`. (Contributed "
"by Georg Brandl; :issue:`1648`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2441
msgid ""
"The :mod:`tarfile` module now supports POSIX.1-2001 (pax) tarfiles in "
"addition to the POSIX.1-1988 (ustar) and GNU tar formats that were "
"already supported.  The default format is GNU tar; specify the ``format``"
" parameter to open a file using a different format::"
msgstr ""

#: ../../whatsnew/2.6.rst:2449
msgid ""
"The new ``encoding`` and ``errors`` parameters specify an encoding and an"
" error handling scheme for character conversions.  ``'strict'``, "
"``'ignore'``, and ``'replace'`` are the three standard ways Python can "
"handle errors,; ``'utf-8'`` is a special value that replaces bad "
"characters with their UTF-8 representation.  (Character conversions occur"
" because the PAX format supports Unicode filenames, defaulting to UTF-8 "
"encoding.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2457
msgid ""
"The :meth:`TarFile.add` method now accepts an ``exclude`` argument that's"
" a function that can be used to exclude certain filenames from an "
"archive. The function must take a filename and return true if the file "
"should be excluded or false if it should be archived. The function is "
"applied to both the name initially passed to :meth:`add` and to the names"
" of files in recursively-added directories."
msgstr ""

#: ../../whatsnew/2.6.rst:2465
msgid "(All changes contributed by Lars Gust√§bel)."
msgstr ""

#: ../../whatsnew/2.6.rst:2467
msgid ""
"An optional ``timeout`` parameter was added to the "
":class:`telnetlib.Telnet` class constructor, specifying a timeout "
"measured in seconds.  (Added by Facundo Batista.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2471
msgid ""
"The :class:`tempfile.NamedTemporaryFile` class usually deletes the "
"temporary file it created when the file is closed.  This behaviour can "
"now be changed by passing ``delete=False`` to the constructor.  "
"(Contributed by Damien Miller; :issue:`1537850`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2476
msgid ""
"A new class, :class:`SpooledTemporaryFile`, behaves like a temporary file"
" but stores its data in memory until a maximum size is exceeded.  On "
"reaching that limit, the contents will be written to an on-disk temporary"
" file.  (Contributed by Dustin J. Mitchell.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2481
msgid ""
"The :class:`NamedTemporaryFile` and :class:`SpooledTemporaryFile` classes"
" both work as context managers, so you can write ``with "
"tempfile.NamedTemporaryFile() as tmp: ...``. (Contributed by Alexander "
"Belopolsky; :issue:`2021`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2486
msgid ""
"The :mod:`test.test_support` module gained a number of context managers "
"useful for writing tests. :func:`EnvironmentVarGuard` is a context "
"manager that temporarily changes environment variables and automatically "
"restores them to their old values."
msgstr ""

#: ../../whatsnew/2.6.rst:2492
msgid ""
"Another context manager, :class:`TransientResource`, can surround calls "
"to resources that may or may not be available; it will catch and ignore a"
" specified list of exceptions.  For example, a network test may ignore "
"certain failures when connecting to an external web site::"
msgstr ""

#: ../../whatsnew/2.6.rst:2503
msgid ""
"Finally, :func:`check_warnings` resets the :mod:`warning` module's "
"warning filters and returns an object that will record all warning "
"messages triggered (:issue:`3781`)::"
msgstr ""

#: ../../whatsnew/2.6.rst:2513 ../../whatsnew/3.1.rst:413
msgid "(Contributed by Brett Cannon.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2515
msgid ""
"The :mod:`textwrap` module can now preserve existing whitespace at the "
"beginnings and ends of the newly-created lines by specifying "
"``drop_whitespace=False`` as an argument::"
msgstr ""

#: ../../whatsnew/2.6.rst:2534
msgid "(Contributed by Dwayne Bailey; :issue:`1581073`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2536
msgid ""
"The :mod:`threading` module API is being changed to use properties such "
"as :attr:`daemon` instead of :meth:`setDaemon` and :meth:`isDaemon` "
"methods, and some methods have been renamed to use underscores instead of"
" camel-case; for example, the :meth:`activeCount` method is renamed to "
":meth:`active_count`.  Both the 2.6 and 3.0 versions of the module "
"support the same properties and renamed methods, but don't remove the old"
" methods.  No date has been set for the deprecation of the old APIs in "
"Python 3.x; the old APIs won't be removed in any 2.x version. (Carried "
"out by several people, most notably Benjamin Peterson.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2547
msgid ""
"The :mod:`threading` module's :class:`Thread` objects gained an "
":attr:`ident` property that returns the thread's identifier, a nonzero "
"integer.  (Contributed by Gregory P. Smith; :issue:`2871`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2552
msgid ""
"The :mod:`timeit` module now accepts callables as well as strings for the"
" statement being timed and for the setup code. Two convenience functions "
"were added for creating :class:`Timer` instances: ``repeat(stmt, setup, "
"time, repeat, number)`` and ``timeit(stmt, setup, time, number)`` create "
"an instance and call the corresponding method. (Contributed by Erik "
"Demaine; :issue:`1533909`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2561
msgid ""
"The :mod:`Tkinter` module now accepts lists and tuples for options, "
"separating the elements by spaces before passing the resulting value to "
"Tcl/Tk. (Contributed by Guilherme Polo; :issue:`2906`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2566
msgid ""
"The :mod:`turtle` module for turtle graphics was greatly enhanced by "
"Gregor Lingl.  New features in the module include:"
msgstr ""

#: ../../whatsnew/2.6.rst:2569
msgid "Better animation of turtle movement and rotation."
msgstr ""

#: ../../whatsnew/2.6.rst:2570
msgid ""
"Control over turtle movement using the new :meth:`delay`, :meth:`tracer`,"
" and :meth:`speed` methods."
msgstr ""

#: ../../whatsnew/2.6.rst:2572
msgid ""
"The ability to set new shapes for the turtle, and to define a new "
"coordinate system."
msgstr ""

#: ../../whatsnew/2.6.rst:2574
msgid "Turtles now have an :meth:`undo()` method that can roll back actions."
msgstr ""

#: ../../whatsnew/2.6.rst:2575
msgid ""
"Simple support for reacting to input events such as mouse and keyboard "
"activity, making it possible to write simple games."
msgstr ""

#: ../../whatsnew/2.6.rst:2577
msgid ""
"A :file:`turtle.cfg` file can be used to customize the starting "
"appearance of the turtle's screen."
msgstr ""

#: ../../whatsnew/2.6.rst:2579
msgid ""
"The module's docstrings can be replaced by new docstrings that have been "
"translated into another language."
msgstr ""

#: ../../whatsnew/2.6.rst:2582
msgid "(:issue:`1513695`)"
msgstr ""

#: ../../whatsnew/2.6.rst:2584
msgid ""
"An optional ``timeout`` parameter was added to the :func:`urllib.urlopen`"
" function and the :class:`urllib.ftpwrapper` class constructor, as well "
"as the :func:`urllib2.urlopen` function.  The parameter specifies a "
"timeout measured in seconds.   For example::"
msgstr ""

#: ../../whatsnew/2.6.rst:2597
msgid "(Added by Facundo Batista.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2599
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module has been "
"updated to version 5.1.0.  (Updated by Martin von L√∂wis; :issue:`3811`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2603
msgid ""
"The :mod:`warnings` module's :func:`formatwarning` and "
":func:`showwarning` gained an optional *line* argument that can be used "
"to supply the line of source code.  (Added as part of :issue:`1631171`, "
"which re-implemented part of the :mod:`warnings` module in C code.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2608
msgid ""
"A new function, :func:`catch_warnings`, is a context manager intended for"
" testing purposes that lets you temporarily modify the warning filters "
"and then restore their original values (:issue:`3781`)."
msgstr ""

#: ../../whatsnew/2.6.rst:2612
msgid ""
"The XML-RPC :class:`SimpleXMLRPCServer` and :class:`DocXMLRPCServer` "
"classes can now be prevented from immediately opening and binding to "
"their socket by passing ``False`` as the *bind_and_activate* constructor "
"parameter.  This can be used to modify the instance's "
":attr:`allow_reuse_address` attribute before calling the "
":meth:`server_bind` and :meth:`server_activate` methods to open the "
"socket and begin listening for connections. (Contributed by Peter "
"Parente; :issue:`1599845`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2621
msgid ""
":class:`SimpleXMLRPCServer` also has a :attr:`_send_traceback_header` "
"attribute; if true, the exception and formatted traceback are returned as"
" HTTP headers \"X-Exception\" and \"X-Traceback\".  This feature is for "
"debugging purposes only and should not be used on production servers "
"because the tracebacks might reveal passwords or other sensitive "
"information.  (Contributed by Alan McIntyre as part of his project for "
"Google's Summer of Code 2007.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2629
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts "
":class:`datetime.date` and :class:`datetime.time` to the "
":class:`xmlrpclib.DateTime` type; the conversion semantics were not "
"necessarily correct for all applications.  Code using :mod:`xmlrpclib` "
"should convert :class:`date` and :class:`~datetime.time` instances. "
"(:issue:`1330538`)  The code can also handle dates before 1900 "
"(contributed by Ralf Schmitt; :issue:`2014`) and 64-bit integers "
"represented by using ``<i8>`` in XML-RPC responses (contributed by Riku "
"Lindblad; :issue:`2985`)."
msgstr ""

#: ../../whatsnew/2.6.rst:2639
msgid ""
"The :mod:`zipfile` module's :class:`ZipFile` class now has "
":meth:`extract` and :meth:`extractall` methods that will unpack a single "
"file or all the files in the archive to the current directory, or to a "
"specified directory::"
msgstr ""

#: ../../whatsnew/2.6.rst:2653
msgid "(Contributed by Alan McIntyre; :issue:`467924`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2655
msgid ""
"The :meth:`open`, :meth:`read` and :meth:`extract` methods can now take "
"either a filename or a :class:`ZipInfo` object.  This is useful when an "
"archive accidentally contains a duplicated filename. (Contributed by "
"Graham Horler; :issue:`1775025`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2660
msgid ""
"Finally, :mod:`zipfile` now supports using Unicode filenames for archived"
" files.  (Contributed by Alexey Borzenkov; :issue:`1734346`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2667
msgid "The :mod:`ast` module"
msgstr ""

#: ../../whatsnew/2.6.rst:2669
msgid ""
"The :mod:`ast` module provides an Abstract Syntax Tree representation of "
"Python code, and Armin Ronacher contributed a set of helper functions "
"that perform a variety of common tasks.  These will be useful for HTML "
"templating packages, code analyzers, and similar tools that process "
"Python code."
msgstr ""

#: ../../whatsnew/2.6.rst:2676
msgid ""
"The :func:`parse` function takes an expression and returns an AST. The "
":func:`dump` function outputs a representation of a tree, suitable for "
"debugging::"
msgstr ""

#: ../../whatsnew/2.6.rst:2690
msgid "This outputs a deeply nested tree::"
msgstr ""

#: ../../whatsnew/2.6.rst:2723
msgid ""
"The :func:`literal_eval` method takes a string or an AST representing a "
"literal expression, parses and evaluates it, and returns the resulting "
"value.  A literal expression is a Python expression containing only "
"strings, numbers, dictionaries, etc. but no statements or function calls."
"  If you need to evaluate an expression but cannot accept the security "
"risk of using an :func:`eval` call, :func:`literal_eval` will handle it "
"safely::"
msgstr ""

#: ../../whatsnew/2.6.rst:2739
msgid ""
"The module also includes :class:`NodeVisitor` and "
":class:`NodeTransformer` classes for traversing and modifying an AST, and"
" functions for common transformations such as changing line numbers."
msgstr ""

#: ../../whatsnew/2.6.rst:2747
msgid "The :mod:`future_builtins` module"
msgstr ""

#: ../../whatsnew/2.6.rst:2749
msgid ""
"Python 3.0 makes many changes to the repertoire of built-in functions, "
"and most of the changes can't be introduced in the Python 2.x series "
"because they would break compatibility. The :mod:`future_builtins` module"
" provides versions of these built-in functions that can be imported when "
"writing 3.0-compatible code."
msgstr ""

#: ../../whatsnew/2.6.rst:2756
msgid "The functions in this module currently include:"
msgstr ""

#: ../../whatsnew/2.6.rst:2758
msgid ""
"``ascii(obj)``: equivalent to :func:`repr`.  In Python 3.0, :func:`repr` "
"will return a Unicode string, while :func:`ascii` will return a pure "
"ASCII bytestring."
msgstr ""

#: ../../whatsnew/2.6.rst:2762
msgid ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: the 3.0 "
"versions return iterators, unlike the 2.x builtins which return lists."
msgstr ""

#: ../../whatsnew/2.6.rst:2766
msgid ""
"``hex(value)``, ``oct(value)``: instead of calling the :meth:`__hex__` or"
" :meth:`__oct__` methods, these versions will call the :meth:`__index__` "
"method and convert the result to hexadecimal or octal.  :func:`oct` will "
"use the new ``0o`` notation for its result."
msgstr ""

#: ../../whatsnew/2.6.rst:2775
msgid "The :mod:`json` module: JavaScript Object Notation"
msgstr ""

#: ../../whatsnew/2.6.rst:2777
msgid ""
"The new :mod:`json` module supports the encoding and decoding of Python "
"types in JSON (Javascript Object Notation). JSON is a lightweight "
"interchange format often used in web applications. For more information "
"about JSON, see http://www.json.org."
msgstr ""

#: ../../whatsnew/2.6.rst:2782
msgid ""
":mod:`json` comes with support for decoding and encoding most built-in "
"Python types. The following example encodes and decodes a dictionary::"
msgstr ""

#: ../../whatsnew/2.6.rst:2793
msgid ""
"It's also possible to write your own decoders and encoders to support "
"more types. Pretty-printing of the JSON strings is also supported."
msgstr ""

#: ../../whatsnew/2.6.rst:2796
msgid ":mod:`json` (originally called simplejson) was written by Bob Ippolito."
msgstr ""

#: ../../whatsnew/2.6.rst:2803
msgid "The :mod:`plistlib` module: A Property-List Parser"
msgstr ""

#: ../../whatsnew/2.6.rst:2805
msgid ""
"The ``.plist`` format is commonly used on Mac OS X to store basic data "
"types (numbers, strings, lists, and dictionaries) by serializing them "
"into an XML-based format. It resembles the XML-RPC serialization of data "
"types."
msgstr ""

#: ../../whatsnew/2.6.rst:2810
msgid ""
"Despite being primarily used on Mac OS X, the format has nothing Mac-"
"specific about it and the Python implementation works on any platform "
"that Python supports, so the :mod:`plistlib` module has been promoted to "
"the standard library."
msgstr ""

#: ../../whatsnew/2.6.rst:2815
msgid "Using the module is simple::"
msgstr ""

#: ../../whatsnew/2.6.rst:2842
msgid "ctypes Enhancements"
msgstr ""

#: ../../whatsnew/2.6.rst:2844
msgid "Thomas Heller continued to maintain and enhance the :mod:`ctypes` module."
msgstr ""

#: ../../whatsnew/2.6.rst:2847
msgid ""
":mod:`ctypes` now supports a :class:`c_bool` datatype that represents the"
" C99 ``bool`` type.  (Contributed by David Remahl; :issue:`1649190`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2851
msgid ""
"The :mod:`ctypes` string, buffer and array types have improved support "
"for extended slicing syntax, where various combinations of ``(start, "
"stop, step)`` are supplied. (Implemented by Thomas Wouters.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2858
msgid ""
"All :mod:`ctypes` data types now support :meth:`from_buffer` and "
":meth:`from_buffer_copy` methods that create a ctypes instance based on a"
" provided buffer object.  :meth:`from_buffer_copy` copies the contents of"
" the object, while :meth:`from_buffer` will share the same memory area."
msgstr ""

#: ../../whatsnew/2.6.rst:2865
msgid ""
"A new calling convention tells :mod:`ctypes` to clear the ``errno`` or "
"Win32 LastError variables at the outset of each wrapped call. "
"(Implemented by Thomas Heller; :issue:`1798`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2869
msgid ""
"You can now retrieve the Unix ``errno`` variable after a function call.  "
"When creating a wrapped function, you can supply ``use_errno=True`` as a "
"keyword parameter to the :func:`DLL` function and then call the module-"
"level methods :meth:`set_errno` and :meth:`get_errno` to set and retrieve"
" the error value."
msgstr ""

#: ../../whatsnew/2.6.rst:2875
msgid ""
"The Win32 LastError variable is similarly supported by the :func:`DLL`, "
":func:`OleDLL`, and :func:`WinDLL` functions. You supply "
"``use_last_error=True`` as a keyword parameter and then call the module-"
"level methods :meth:`set_last_error` and :meth:`get_last_error`."
msgstr ""

#: ../../whatsnew/2.6.rst:2881
msgid ""
"The :func:`byref` function, used to retrieve a pointer to a ctypes "
"instance, now has an optional *offset* parameter that is a byte count "
"that will be added to the returned pointer."
msgstr ""

#: ../../whatsnew/2.6.rst:2888
msgid "Improved SSL Support"
msgstr ""

#: ../../whatsnew/2.6.rst:2890
msgid ""
"Bill Janssen made extensive improvements to Python 2.6's support for the "
"Secure Sockets Layer by adding a new module, :mod:`ssl`, that's built "
"atop the `OpenSSL <https://www.openssl.org/>`__ library. This new module "
"provides more control over the protocol negotiated, the X.509 "
"certificates used, and has better support for writing SSL servers (as "
"opposed to clients) in Python.  The existing SSL support in the "
":mod:`socket` module hasn't been removed and continues to work, though it"
" will be removed in Python 3.0."
msgstr ""

#: ../../whatsnew/2.6.rst:2899
msgid ""
"To use the new module, you must first create a TCP connection in the "
"usual way and then pass it to the :func:`ssl.wrap_socket` function. It's "
"possible to specify whether a certificate is required, and to obtain "
"certificate info by calling the :meth:`getpeercert` method."
msgstr ""

#: ../../whatsnew/2.6.rst:2906
msgid "The documentation for the :mod:`ssl` module."
msgstr ""

#: ../../whatsnew/2.6.rst:2911
msgid "Deprecations and Removals"
msgstr ""

#: ../../whatsnew/2.6.rst:2913 ../../whatsnew/2.6.rst:3241
msgid ""
"String exceptions have been removed.  Attempting to use them raises a "
":exc:`TypeError`."
msgstr ""

#: ../../whatsnew/2.6.rst:2916
msgid ""
"Changes to the :class:`Exception` interface as dictated by :pep:`352` "
"continue to be made.  For 2.6, the :attr:`message` attribute is being "
"deprecated in favor of the :attr:`args` attribute."
msgstr ""

#: ../../whatsnew/2.6.rst:2921
msgid ""
"(3.0-warning mode) Python 3.0 will feature a reorganized standard library"
" that will drop many outdated modules and rename others. Python 2.6 "
"running in 3.0-warning mode will warn about these modules when they are "
"imported."
msgstr ""

#: ../../whatsnew/2.6.rst:2926
msgid ""
"The list of deprecated modules is: :mod:`audiodev`, :mod:`bgenlocations`,"
" :mod:`buildtools`, :mod:`bundlebuilder`, :mod:`Canvas`, :mod:`compiler`,"
" :mod:`dircache`, :mod:`dl`, :mod:`fpformat`, :mod:`gensuitemodule`, "
":mod:`ihooks`, :mod:`imageop`, :mod:`imgfile`, :mod:`linuxaudiodev`, "
":mod:`mhlib`, :mod:`mimetools`, :mod:`multifile`, :mod:`new`, "
":mod:`pure`, :mod:`statvfs`, :mod:`sunaudiodev`, :mod:`test.testall`, and"
" :mod:`toaiff`."
msgstr ""

#: ../../whatsnew/2.6.rst:2951
msgid "The :mod:`gopherlib` module has been removed."
msgstr ""

#: ../../whatsnew/2.6.rst:2953
msgid ""
"The :mod:`MimeWriter` module and :mod:`mimify` module have been "
"deprecated; use the :mod:`email` package instead."
msgstr ""

#: ../../whatsnew/2.6.rst:2957
msgid ""
"The :mod:`md5` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""

#: ../../whatsnew/2.6.rst:2960
msgid ""
"The :mod:`posixfile` module has been deprecated; :func:`fcntl.lockf` "
"provides better locking."
msgstr ""

#: ../../whatsnew/2.6.rst:2963
msgid ""
"The :mod:`popen2` module has been deprecated; use the :mod:`subprocess` "
"module."
msgstr ""

#: ../../whatsnew/2.6.rst:2966
msgid "The :mod:`rgbimg` module has been removed."
msgstr ""

#: ../../whatsnew/2.6.rst:2968
msgid ""
"The :mod:`sets` module has been deprecated; it's better to use the built-"
"in :class:`set` and :class:`frozenset` types."
msgstr ""

#: ../../whatsnew/2.6.rst:2971
msgid ""
"The :mod:`sha` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""

#: ../../whatsnew/2.6.rst:2983
msgid ""
"Python now must be compiled with C89 compilers (after 19 years!).  This "
"means that the Python source tree has dropped its own implementations of "
":c:func:`memmove` and :c:func:`strerror`, which are in the C89 standard "
"library."
msgstr ""

#: ../../whatsnew/2.6.rst:2988
msgid ""
"Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), "
"and this is the new default compiler.  See the :file:`PCbuild` directory "
"for the build files.  (Implemented by Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2993
msgid ""
"On Mac OS X, Python 2.6 can be compiled as a 4-way universal build. The "
":program:`configure` script can take a :option:`!--with-universal-"
"archs=[32-bit|64-bit|all]` switch, controlling whether the binaries are "
"built for 32-bit architectures (x86, PowerPC), 64-bit (x86-64 and "
"PPC-64), or both. (Contributed by Ronald Oussoren.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3000
msgid ""
"The BerkeleyDB module now has a C API object, available as "
"``bsddb.db.api``.   This object can be used by other C extensions that "
"wish to use the :mod:`bsddb` module for their own purposes. (Contributed "
"by Duncan Grisby.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3005
msgid ""
"The new buffer interface, previously described in `the PEP 3118 section "
"<#pep-3118-revised-buffer-protocol>`__, adds :c:func:`PyObject_GetBuffer`"
" and :c:func:`PyBuffer_Release`, as well as a few other functions."
msgstr ""

#: ../../whatsnew/2.6.rst:3010
msgid ""
"Python's use of the C stdio library is now thread-safe, or at least as "
"thread-safe as the underlying library is.  A long-standing potential bug "
"occurred if one thread closed a file object while another thread was "
"reading from or writing to the object.  In 2.6 file objects have a "
"reference count, manipulated by the :c:func:`PyFile_IncUseCount` and "
":c:func:`PyFile_DecUseCount` functions.  File objects can't be closed "
"unless the reference count is zero.  :c:func:`PyFile_IncUseCount` should "
"be called while the GIL is still held, before carrying out an I/O "
"operation using the ``FILE *`` pointer, and :c:func:`PyFile_DecUseCount` "
"should be called immediately after the GIL is re-acquired. (Contributed "
"by Antoine Pitrou and Gregory P. Smith.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3023
msgid ""
"Importing modules simultaneously in two different threads no longer "
"deadlocks; it will now raise an :exc:`ImportError`.  A new API function, "
":c:func:`PyImport_ImportModuleNoBlock`, will look for a module in "
"``sys.modules`` first, then try to import it after acquiring an import "
"lock.  If the import lock is held by another thread, an "
":exc:`ImportError` is raised. (Contributed by Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3031
msgid ""
"Several functions return information about the platform's floating-point "
"support.  :c:func:`PyFloat_GetMax` returns the maximum representable "
"floating point value, and :c:func:`PyFloat_GetMin` returns the minimum "
"positive value.  :c:func:`PyFloat_GetInfo` returns an object containing "
"more information from the :file:`float.h` file, such as ``\"mant_dig\"`` "
"(number of digits in the mantissa), ``\"epsilon\"`` (smallest difference "
"between 1.0 and the next largest value representable), and several "
"others. (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3042
msgid ""
"C functions and methods that use :c:func:`PyComplex_AsCComplex` will now "
"accept arguments that have a :meth:`__complex__` method.  In particular, "
"the functions in the :mod:`cmath` module will now accept objects with "
"this method. This is a backport of a Python 3.0 change. (Contributed by "
"Mark Dickinson; :issue:`1675423`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3049
msgid ""
"Python's C API now includes two functions for case-insensitive string "
"comparisons, ``PyOS_stricmp(char*, char*)`` and ``PyOS_strnicmp(char*, "
"char*, Py_ssize_t)``. (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3054
msgid ""
"Many C extensions define their own little macro for adding integers and "
"strings to the module's dictionary in the ``init*`` function.  Python 2.6"
" finally defines standard macros for adding values to a module, "
":c:macro:`PyModule_AddStringMacro` and :c:macro:`PyModule_AddIntMacro()`."
"  (Contributed by Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3061
msgid ""
"Some macros were renamed in both 3.0 and 2.6 to make it clearer that they"
" are macros, not functions.  :c:macro:`Py_Size()` became "
":c:macro:`Py_SIZE()`, :c:macro:`Py_Type()` became :c:macro:`Py_TYPE()`, "
"and :c:macro:`Py_Refcnt()` became :c:macro:`Py_REFCNT()`. The mixed-case "
"macros are still available in Python 2.6 for backward compatibility. "
"(:issue:`1629`)"
msgstr ""

#: ../../whatsnew/2.6.rst:3070
msgid ""
"Distutils now places C extensions it builds in a different directory when"
" running on a debug version of Python. (Contributed by Collin Winter; "
":issue:`1530959`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3074
msgid ""
"Several basic data types, such as integers and strings, maintain internal"
" free lists of objects that can be re-used.  The data structures for "
"these free lists now follow a naming convention: the variable is always "
"named ``free_list``, the counter is always named ``numfree``, and a macro"
" ``Py<typename>_MAXFREELIST`` is always defined."
msgstr ""

#: ../../whatsnew/2.6.rst:3081
msgid ""
"A new Makefile target, \"make patchcheck\", prepares the Python source "
"tree for making a patch: it fixes trailing whitespace in all modified "
"``.py`` files, checks whether the documentation has been changed, and "
"reports whether the :file:`Misc/ACKS` and :file:`Misc/NEWS` files have "
"been updated. (Contributed by Brett Cannon.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3088
msgid ""
"Another new target, \"make profile-opt\", compiles a Python binary using "
"GCC's profile-guided optimization.  It compiles Python with profiling "
"enabled, runs the test suite to obtain a set of profiling results, and "
"then compiles using these results for optimization. (Contributed by "
"Gregory P. Smith.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3097 ../../whatsnew/2.7.rst:2325
msgid "Port-Specific Changes: Windows"
msgstr ""

#: ../../whatsnew/2.6.rst:3099
msgid ""
"The support for Windows 95, 98, ME and NT4 has been dropped. Python 2.6 "
"requires at least Windows 2000 SP4."
msgstr ""

#: ../../whatsnew/2.6.rst:3102
#, python-format
msgid ""
"The new default compiler on Windows is Visual Studio 2008 (version 9.0). "
"The build directories for Visual Studio 2003 (version 7.1) and 2005 "
"(version 8.0) were moved into the PC/ directory. The new :file:`PCbuild` "
"directory supports cross compilation for X64, debug builds and Profile "
"Guided Optimization (PGO). PGO builds are roughly 10% faster than normal "
"builds.  (Contributed by Christian Heimes with help from Amaury Forgeot "
"d'Arc and Martin von L√∂wis.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3110
msgid ""
"The :mod:`msvcrt` module now supports both the normal and wide char "
"variants of the console I/O API.  The :func:`getwch` function reads a "
"keypress and returns a Unicode value, as does the :func:`getwche` "
"function.  The :func:`putwch` function takes a Unicode character and "
"writes it to the console. (Contributed by Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3117
msgid ""
":func:`os.path.expandvars` will now expand environment variables in the "
"form \"%var%\", and \"~user\" will be expanded into the user's home "
"directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3121
msgid ""
"The :mod:`socket` module's socket objects now have an :meth:`ioctl` "
"method that provides a limited interface to the :c:func:`WSAIoctl` system"
" interface."
msgstr ""

#: ../../whatsnew/2.6.rst:3125
msgid ""
"The :mod:`_winreg` module now has a function, "
":func:`ExpandEnvironmentStrings`, that expands environment variable "
"references such as ``%NAME%`` in an input string.  The handle objects "
"provided by this module now support the context protocol, so they can be "
"used in :keyword:`with` statements. (Contributed by Christian Heimes.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3132
msgid ""
":mod:`_winreg` also has better support for x64 systems, exposing the "
":func:`DisableReflectionKey`, :func:`EnableReflectionKey`, and "
":func:`QueryReflectionKey` functions, which enable and disable registry "
"reflection for 32-bit processes running on 64-bit systems. "
"(:issue:`1753245`)"
msgstr ""

#: ../../whatsnew/2.6.rst:3138
msgid ""
"The :mod:`msilib` module's :class:`Record` object gained "
":meth:`GetInteger` and :meth:`GetString` methods that return field values"
" as an integer or a string. (Contributed by Floris Bruynooghe; "
":issue:`2125`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3146 ../../whatsnew/2.7.rst:2363
msgid "Port-Specific Changes: Mac OS X"
msgstr ""

#: ../../whatsnew/2.6.rst:3148
msgid ""
"When compiling a framework build of Python, you can now specify the "
"framework name to be used by providing the :option:`!--with-framework-"
"name=` option to the :program:`configure` script."
msgstr ""

#: ../../whatsnew/2.6.rst:3153
msgid ""
"The :mod:`macfs` module has been removed.  This in turn required the "
":func:`macostools.touched` function to be removed because it depended on "
"the :mod:`macfs` module.  (:issue:`1490190`)"
msgstr ""

#: ../../whatsnew/2.6.rst:3157
msgid ""
"Many other Mac OS modules have been deprecated and will be removed in "
"Python 3.0: :mod:`_builtinSuites`, :mod:`aepack`, :mod:`aetools`, "
":mod:`aetypes`, :mod:`applesingle`, :mod:`appletrawmain`, "
":mod:`appletrunner`, :mod:`argvemulator`, :mod:`Audio_mac`, "
":mod:`autoGIL`, :mod:`Carbon`, :mod:`cfmfile`, :mod:`CodeWarrior`, "
":mod:`ColorPicker`, :mod:`EasyDialogs`, :mod:`Explorer`, :mod:`Finder`, "
":mod:`FrameWork`, :mod:`findertools`, :mod:`ic`, :mod:`icglue`, "
":mod:`icopen`, :mod:`macerrors`, :mod:`MacOS`, :mod:`macfs`, "
":mod:`macostools`, :mod:`macresource`, :mod:`MiniAEFrame`, :mod:`Nav`, "
":mod:`Netscape`, :mod:`OSATerminology`, :mod:`pimp`, "
":mod:`PixMapWrapper`, :mod:`StdSuites`, :mod:`SystemEvents`, "
":mod:`Terminal`, and :mod:`terminalcommand`."
msgstr ""

#: ../../whatsnew/2.6.rst:3200
msgid "Port-Specific Changes: IRIX"
msgstr ""

#: ../../whatsnew/2.6.rst:3202
msgid ""
"A number of old IRIX-specific modules were deprecated and will be removed"
" in Python 3.0: :mod:`al` and :mod:`AL`, :mod:`cd`, :mod:`cddb`, "
":mod:`cdplayer`, :mod:`CL` and :mod:`cl`, :mod:`DEVICE`, :mod:`ERRNO`, "
":mod:`FILE`, :mod:`FL` and :mod:`fl`, :mod:`flp`, :mod:`fm`, :mod:`GET`, "
":mod:`GLWS`, :mod:`GL` and :mod:`gl`, :mod:`IN`, :mod:`IOCTL`, "
":mod:`jpeg`, :mod:`panelparser`, :mod:`readcd`, :mod:`SV` and :mod:`sv`, "
":mod:`torgb`, :mod:`videoreader`, and :mod:`WAIT`."
msgstr ""

#: ../../whatsnew/2.6.rst:3232
msgid "Porting to Python 2.6"
msgstr ""

#: ../../whatsnew/2.6.rst:3234 ../../whatsnew/2.7.rst:2437
#: ../../whatsnew/3.1.rst:523 ../../whatsnew/3.2.rst:2606
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code:"
msgstr ""

#: ../../whatsnew/2.6.rst:3237
msgid ""
"Classes that aren't supposed to be hashable should set ``__hash__ = "
"None`` in their definitions to indicate the fact."
msgstr ""

#: ../../whatsnew/2.6.rst:3244
msgid ""
"The :meth:`__init__` method of :class:`collections.deque` now clears any "
"existing contents of the deque before adding elements from the iterable."
"  This change makes the behavior match ``list.__init__()``."
msgstr ""

#: ../../whatsnew/2.6.rst:3249
msgid ""
":meth:`object.__init__` previously accepted arbitrary arguments and "
"keyword arguments, ignoring them.  In Python 2.6, this is no longer "
"allowed and will result in a :exc:`TypeError`.  This will affect "
":meth:`__init__` methods that end up calling the corresponding method on "
":class:`object` (perhaps through using :func:`super`). See "
":issue:`1683368` for discussion."
msgstr ""

#: ../../whatsnew/2.6.rst:3256
msgid ""
"The :class:`Decimal` constructor now accepts leading and trailing "
"whitespace when passed a string.  Previously it would raise an "
":exc:`InvalidOperation` exception.  On the other hand, the "
":meth:`create_decimal` method of :class:`Context` objects now explicitly "
"disallows extra whitespace, raising a :exc:`ConversionSyntax` exception."
msgstr ""

#: ../../whatsnew/2.6.rst:3263
msgid ""
"Due to an implementation accident, if you passed a file path to the "
"built-in  :func:`__import__` function, it would actually import the "
"specified file.  This was never intended to work, however, and the "
"implementation now explicitly checks for this case and raises an "
":exc:`ImportError`."
msgstr ""

#: ../../whatsnew/2.6.rst:3269
msgid ""
"C API: the :c:func:`PyImport_Import` and :c:func:`PyImport_ImportModule` "
"functions now default to absolute imports, not relative imports. This "
"will affect C extensions that import other modules."
msgstr ""

#: ../../whatsnew/2.6.rst:3273
msgid ""
"C API: extension data types that shouldn't be hashable should define "
"their ``tp_hash`` slot to :c:func:`PyObject_HashNotImplemented`."
msgstr ""

#: ../../whatsnew/2.6.rst:3277
msgid ""
"The :mod:`socket` module exception :exc:`socket.error` now inherits from "
":exc:`IOError`.  Previously it wasn't a subclass of :exc:`StandardError` "
"but now it is, through :exc:`IOError`. (Implemented by Gregory P. Smith; "
":issue:`1706815`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3282
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts "
":class:`datetime.date` and :class:`datetime.time` to the "
":class:`xmlrpclib.DateTime` type; the conversion semantics were not "
"necessarily correct for all applications.  Code using :mod:`xmlrpclib` "
"should convert :class:`date` and :class:`~datetime.time` instances. "
"(:issue:`1330538`)"
msgstr ""

#: ../../whatsnew/2.6.rst:3289
msgid ""
"(3.0-warning mode) The :class:`Exception` class now warns when accessed "
"using slicing or index access; having :class:`Exception` behave like a "
"tuple is being phased out."
msgstr ""

#: ../../whatsnew/2.6.rst:3293
msgid ""
"(3.0-warning mode) inequality comparisons between two dictionaries or two"
" objects that don't implement comparison methods are reported as "
"warnings.  ``dict1 == dict2`` still works, but ``dict1 < dict2`` is being"
" phased out."
msgstr ""

#: ../../whatsnew/2.6.rst:3298
msgid ""
"Comparisons between cells, which are an implementation detail of Python's"
" scoping rules, also cause warnings because such comparisons are "
"forbidden entirely in 3.0."
msgstr ""

#: ../../whatsnew/2.6.rst:3310
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this "
"article: Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim "
"Jewett, Kent Johnson, Chris Lambacher,  Martin Michlmayr, Antoine Pitrou,"
" Brian Warner."
msgstr ""

#: ../../whatsnew/2.7.rst:3
msgid "What's New in Python 2.7"
msgstr ""

#: ../../whatsnew/2.7.rst:52
msgid ""
"This article explains the new features in Python 2.7.  Python 2.7 was "
"released on July 3, 2010."
msgstr ""

#: ../../whatsnew/2.7.rst:55
msgid ""
"Numeric handling has been improved in many ways, for both floating-point "
"numbers and for the :class:`~decimal.Decimal` class. There are some "
"useful additions to the standard library, such as a greatly enhanced "
":mod:`unittest` module, the :mod:`argparse` module for parsing command-"
"line options, convenient :class:`~collections.OrderedDict` and "
":class:`~collections.Counter` classes in the :mod:`collections` module, "
"and many other improvements."
msgstr ""

#: ../../whatsnew/2.7.rst:63
msgid ""
"Python 2.7 is planned to be the last of the 2.x releases, so we worked on"
" making it a good release for the long term.  To help with porting to "
"Python 3, several new features from the Python 3.x series have been "
"included in 2.7."
msgstr ""

#: ../../whatsnew/2.7.rst:68
msgid ""
"This article doesn't attempt to provide a complete specification of the "
"new features, but instead provides a convenient overview.  For full "
"details, you should refer to the documentation for Python 2.7 at "
"https://docs.python.org. If you want to understand the rationale for the "
"design and implementation, refer to the PEP for a particular new feature "
"or the issue on https://bugs.python.org in which a change was discussed."
"  Whenever possible, \"What's New in Python\" links to the bug/patch item"
" for each change."
msgstr ""

#: ../../whatsnew/2.7.rst:80
msgid "The Future for Python 2.x"
msgstr ""

#: ../../whatsnew/2.7.rst:82
msgid ""
"Python 2.7 is the last major release in the 2.x series, as the Python "
"maintainers have shifted the focus of their new feature development "
"efforts to the Python 3.x series. This means that while Python 2 "
"continues to receive bug fixes, and to be updated to build correctly on "
"new hardware and versions of supported operated systems, there will be no"
" new full feature releases for the language or standard library."
msgstr ""

#: ../../whatsnew/2.7.rst:89
msgid ""
"However, while there is a large common subset between Python 2.7 and "
"Python 3, and many of the changes involved in migrating to that common "
"subset, or directly to Python 3, can be safely automated, some other "
"changes (notably those associated with Unicode handling) may require "
"careful consideration, and preferably robust automated regression test "
"suites, to migrate effectively."
msgstr ""

#: ../../whatsnew/2.7.rst:96
msgid ""
"This means that Python 2.7 will remain in place for a long time, "
"providing a stable and supported base platform for production systems "
"that have not yet been ported to Python 3. The full expected lifecycle of"
" the Python 2.7 series is detailed in :pep:`373`."
msgstr ""

#: ../../whatsnew/2.7.rst:101
msgid "Some key consequences of the long-term significance of 2.7 are:"
msgstr ""

#: ../../whatsnew/2.7.rst:103
msgid ""
"As noted above, the 2.7 release has a much longer period of maintenance "
"when compared to earlier 2.x versions. Python 2.7 is currently expected "
"to remain supported by the core development team (receiving security "
"updates and other bug fixes) until at least 2020 (10 years after its "
"initial release, compared to the more typical support period of 18--24 "
"months)."
msgstr ""

#: ../../whatsnew/2.7.rst:109
msgid ""
"As the Python 2.7 standard library ages, making effective use of the "
"Python Package Index (either directly or via a redistributor) becomes "
"more important for Python 2 users. In addition to a wide variety of third"
" party packages for various tasks, the available packages include "
"backports of new modules and features from the Python 3 standard library "
"that are compatible with Python 2, as well as various tools and libraries"
" that can make it easier to migrate to Python 3. The `Python Packaging "
"User Guide <https://packaging.python.org>`__ provides guidance on "
"downloading and installing software from the Python Package Index."
msgstr ""

#: ../../whatsnew/2.7.rst:119
msgid ""
"While the preferred approach to enhancing Python 2 is now the publication"
" of new packages on the Python Package Index, this approach doesn't "
"necessarily work in all cases, especially those related to network "
"security. In exceptional cases that cannot be handled adequately by "
"publishing new or updated packages on PyPI, the Python Enhancement "
"Proposal process may be used to make the case for adding new features "
"directly to the Python 2 standard library. Any such additions, and the "
"maintenance releases where they were added, will be noted in the "
":ref:`py27-maintenance-enhancements` section below."
msgstr ""

#: ../../whatsnew/2.7.rst:129
msgid ""
"For projects wishing to migrate from Python 2 to Python 3, or for library"
" and framework developers wishing to support users on both Python 2 and "
"Python 3, there are a variety of tools and guides available to help "
"decide on a suitable approach and manage some of the technical details "
"involved. The recommended starting point is the :ref:`pyporting-howto` "
"HOWTO guide."
msgstr ""

#: ../../whatsnew/2.7.rst:137
msgid "Changes to the Handling of Deprecation Warnings"
msgstr ""

#: ../../whatsnew/2.7.rst:139
msgid ""
"For Python 2.7, a policy decision was made to silence warnings only of "
"interest to developers by default.  :exc:`DeprecationWarning` and its "
"descendants are now ignored unless otherwise requested, preventing users "
"from seeing warnings triggered by an application.  This change was also "
"made in the branch that became Python 3.2. (Discussed on stdlib-sig and "
"carried out in :issue:`7319`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:146
msgid ""
"In previous releases, :exc:`DeprecationWarning` messages were enabled by "
"default, providing Python developers with a clear indication of where "
"their code may break in a future major version of Python."
msgstr ""

#: ../../whatsnew/2.7.rst:151
msgid ""
"However, there are increasingly many users of Python-based applications "
"who are not directly involved in the development of those applications.  "
":exc:`DeprecationWarning` messages are irrelevant to such users, making "
"them worry about an application that's actually working correctly and "
"burdening application developers with responding to these concerns."
msgstr ""

#: ../../whatsnew/2.7.rst:158
msgid ""
"You can re-enable display of :exc:`DeprecationWarning` messages by "
"running Python with the :option:`-Wdefault <-W>` (short form: "
":option:`-Wd <-W>`) switch, or by setting the :envvar:`PYTHONWARNINGS` "
"environment variable to ``\"default\"`` (or ``\"d\"``) before running "
"Python.  Python code can also re-enable them by calling "
"``warnings.simplefilter('default')``."
msgstr ""

#: ../../whatsnew/2.7.rst:165
msgid ""
"The ``unittest`` module also automatically reenables deprecation warnings"
" when running tests."
msgstr ""

#: ../../whatsnew/2.7.rst:170
msgid "Python 3.1 Features"
msgstr ""

#: ../../whatsnew/2.7.rst:172
msgid ""
"Much as Python 2.6 incorporated features from Python 3.0, version 2.7 "
"incorporates some of the new features in Python 3.1.  The 2.x series "
"continues to provide tools for migrating to the 3.x series."
msgstr ""

#: ../../whatsnew/2.7.rst:177
msgid "A partial list of 3.1 features that were backported to 2.7:"
msgstr ""

#: ../../whatsnew/2.7.rst:179
msgid "The syntax for set literals (``{1,2,3}`` is a mutable set)."
msgstr ""

#: ../../whatsnew/2.7.rst:180
msgid "Dictionary and set comprehensions (``{i: i*2 for i in range(3)}``)."
msgstr ""

#: ../../whatsnew/2.7.rst:181
msgid "Multiple context managers in a single :keyword:`with` statement."
msgstr ""

#: ../../whatsnew/2.7.rst:182
msgid "A new version of the :mod:`io` library, rewritten in C for performance."
msgstr ""

#: ../../whatsnew/2.7.rst:183
msgid "The ordered-dictionary type described in :ref:`pep-0372`."
msgstr ""

#: ../../whatsnew/2.7.rst:184
msgid "The new ``\",\"`` format specifier described in :ref:`pep-0378`."
msgstr ""

#: ../../whatsnew/2.7.rst:185
msgid "The :class:`memoryview` object."
msgstr ""

#: ../../whatsnew/2.7.rst:186
msgid ""
"A small subset of the :mod:`importlib` module, `described below "
"<#importlib-section>`__."
msgstr ""

#: ../../whatsnew/2.7.rst:188
msgid ""
"The :func:`repr` of a float ``x`` is shorter in many cases: it's now "
"based on the shortest decimal string that's guaranteed to round back to "
"``x``.  As in previous versions of Python, it's guaranteed that "
"``float(repr(x))`` recovers ``x``."
msgstr ""

#: ../../whatsnew/2.7.rst:192
msgid ""
"Float-to-string and string-to-float conversions are correctly rounded. "
"The :func:`round` function is also now correctly rounded."
msgstr ""

#: ../../whatsnew/2.7.rst:194
msgid ""
"The :c:type:`PyCapsule` type, used to provide a C API for extension "
"modules."
msgstr ""

#: ../../whatsnew/2.7.rst:195
msgid "The :c:func:`PyLong_AsLongAndOverflow` C API function."
msgstr ""

#: ../../whatsnew/2.7.rst:197
msgid "Other new Python3-mode warnings include:"
msgstr ""

#: ../../whatsnew/2.7.rst:199
msgid ""
":func:`operator.isCallable` and :func:`operator.sequenceIncludes`, which "
"are not supported in 3.x, now trigger warnings."
msgstr ""

#: ../../whatsnew/2.7.rst:201
msgid ""
"The :option:`!-3` switch now automatically enables the :option:`!-Qwarn` "
"switch that causes warnings about using classic division with integers "
"and long integers."
msgstr ""

#: ../../whatsnew/2.7.rst:214
msgid "PEP 372: Adding an Ordered Dictionary to collections"
msgstr ""

#: ../../whatsnew/2.7.rst:216
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary "
"order. Over the years, a number of authors have written alternative "
"implementations that remember the order that the keys were originally "
"inserted.  Based on the experiences from those implementations, 2.7 "
"introduces a new :class:`~collections.OrderedDict` class in the "
":mod:`collections` module."
msgstr ""

#: ../../whatsnew/2.7.rst:222
msgid ""
"The :class:`~collections.OrderedDict` API provides the same interface as "
"regular dictionaries but iterates over keys and values in a guaranteed "
"order depending on when a key was first inserted::"
msgstr ""

#: ../../whatsnew/2.7.rst:233
msgid ""
"If a new entry overwrites an existing entry, the original insertion "
"position is left unchanged::"
msgstr ""

#: ../../whatsnew/2.7.rst:240
msgid "Deleting an entry and reinserting it will move it to the end::"
msgstr ""

#: ../../whatsnew/2.7.rst:247
msgid ""
"The :meth:`~collections.OrderedDict.popitem` method has an optional "
"*last* argument that defaults to ``True``.  If *last* is true, the most "
"recently added key is returned and removed; if it's false, the oldest key"
" is selected::"
msgstr ""

#: ../../whatsnew/2.7.rst:262
msgid ""
"Comparing two ordered dictionaries checks both the keys and values, and "
"requires that the insertion order was the same::"
msgstr ""

#: ../../whatsnew/2.7.rst:278
msgid ""
"Comparing an :class:`~collections.OrderedDict` with a regular dictionary "
"ignores the insertion order and just compares the keys and values."
msgstr ""

#: ../../whatsnew/2.7.rst:281
msgid ""
"How does the :class:`~collections.OrderedDict` work?  It maintains a "
"doubly-linked list of keys, appending new keys to the list as they're "
"inserted. A secondary dictionary maps keys to their corresponding list "
"node, so deletion doesn't have to traverse the entire linked list and "
"therefore remains O(1)."
msgstr ""

#: ../../whatsnew/2.7.rst:287
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules."
msgstr ""

#: ../../whatsnew/2.7.rst:290
msgid ""
"The :mod:`ConfigParser` module uses them by default, meaning that "
"configuration files can now be read, modified, and then written back in "
"their original order."
msgstr ""

#: ../../whatsnew/2.7.rst:294
msgid ""
"The :meth:`~collections.somenamedtuple._asdict()` method for "
":func:`collections.namedtuple` now returns an ordered dictionary with the"
" values appearing in the same order as the underlying tuple indices."
msgstr ""

#: ../../whatsnew/2.7.rst:298
msgid ""
"The :mod:`json` module's :class:`~json.JSONDecoder` class constructor was"
" extended with an *object_pairs_hook* parameter to allow "
":class:`OrderedDict` instances to be built by the decoder. Support was "
"also added for third-party tools like `PyYAML <http://pyyaml.org/>`_."
msgstr ""

#: ../../whatsnew/2.7.rst:307
msgid ":pep:`372` - Adding an ordered dictionary to collections"
msgstr ""

#: ../../whatsnew/2.7.rst:307
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger; implemented by "
"Raymond Hettinger."
msgstr ""

#: ../../whatsnew/2.7.rst:313 ../../whatsnew/3.1.rst:84
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr ""

#: ../../whatsnew/2.7.rst:315
msgid ""
"To make program output more readable, it can be useful to add separators "
"to large numbers, rendering them as 18,446,744,073,709,551,616 instead of"
" 18446744073709551616."
msgstr ""

#: ../../whatsnew/2.7.rst:319
msgid ""
"The fully general solution for doing this is the :mod:`locale` module, "
"which can use different separators (\",\" in North America, \".\" in "
"Europe) and different grouping sizes, but :mod:`locale` is complicated to"
" use and unsuitable for multi-threaded applications where different "
"threads are producing output for different locales."
msgstr ""

#: ../../whatsnew/2.7.rst:325
msgid ""
"Therefore, a simple comma-grouping mechanism has been added to the mini-"
"language used by the :meth:`str.format` method.  When formatting a "
"floating-point number, simply include a comma between the width and the "
"precision::"
msgstr ""

#: ../../whatsnew/2.7.rst:333
msgid "When formatting an integer, include the comma after the width:"
msgstr ""

#: ../../whatsnew/2.7.rst:338
msgid ""
"This mechanism is not adaptable at all; commas are always used as the "
"separator and the grouping is always into three-digit groups.  The comma-"
"formatting mechanism isn't as general as the :mod:`locale` module, but "
"it's easier to use."
msgstr ""

#: ../../whatsnew/2.7.rst:345 ../../whatsnew/3.1.rst:111
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ""

#: ../../whatsnew/2.7.rst:346
msgid "PEP written by Raymond Hettinger; implemented by Eric Smith."
msgstr ""

#: ../../whatsnew/2.7.rst:349
msgid "PEP 389: The argparse Module for Parsing Command Lines"
msgstr ""

#: ../../whatsnew/2.7.rst:351
msgid ""
"The :mod:`argparse` module for parsing command-line arguments was added "
"as a more powerful replacement for the :mod:`optparse` module."
msgstr ""

#: ../../whatsnew/2.7.rst:355
msgid ""
"This means Python now supports three different modules for parsing "
"command-line arguments: :mod:`getopt`, :mod:`optparse`, and "
":mod:`argparse`.  The :mod:`getopt` module closely resembles the C "
"library's :c:func:`getopt` function, so it remains useful if you're "
"writing a Python prototype that will eventually be rewritten in C. "
":mod:`optparse` becomes redundant, but there are no plans to remove it "
"because there are many scripts still using it, and there's no automated "
"way to update these scripts.  (Making the :mod:`argparse` API consistent "
"with :mod:`optparse`'s interface was discussed but rejected as too messy "
"and difficult.)"
msgstr ""

#: ../../whatsnew/2.7.rst:366
msgid ""
"In short, if you're writing a new script and don't need to worry about "
"compatibility with earlier versions of Python, use :mod:`argparse` "
"instead of :mod:`optparse`."
msgstr ""

#: ../../whatsnew/2.7.rst:370
msgid "Here's an example::"
msgstr ""

#: ../../whatsnew/2.7.rst:393
msgid ""
"Unless you override it, :option:`!-h` and :option:`!--help` switches are "
"automatically added, and produce neatly formatted output::"
msgstr ""

#: ../../whatsnew/2.7.rst:410
msgid ""
"As with :mod:`optparse`, the command-line switches and arguments are "
"returned as an object with attributes named by the *dest* parameters::"
msgstr ""

#: ../../whatsnew/2.7.rst:425
msgid ""
":mod:`argparse` has much fancier validation than :mod:`optparse`; you can"
" specify an exact number of arguments as an integer, 0 or more arguments "
"by passing ``'*'``, 1 or more by passing ``'+'``, or an optional argument"
" with ``'?'``.  A top-level parser can contain sub-parsers to define "
"subcommands that have different sets of switches, as in ``svn commit``, "
"``svn checkout``, etc.  You can specify an argument's type as "
":class:`~argparse.FileType`, which will automatically open files for you "
"and understands that ``'-'`` means standard input or output."
msgstr ""

#: ../../whatsnew/2.7.rst:438
msgid ":mod:`argparse` documentation"
msgstr ""

#: ../../whatsnew/2.7.rst:438
msgid "The documentation page of the argparse module."
msgstr ""

#: ../../whatsnew/2.7.rst:442
msgid ":ref:`upgrading-optparse-code`"
msgstr ""

#: ../../whatsnew/2.7.rst:441
msgid ""
"Part of the Python documentation, describing how to convert code that "
"uses :mod:`optparse`."
msgstr ""

#: ../../whatsnew/2.7.rst:444
msgid ":pep:`389` - argparse - New Command Line Parsing Module"
msgstr ""

#: ../../whatsnew/2.7.rst:445
msgid "PEP written and implemented by Steven Bethard."
msgstr ""

#: ../../whatsnew/2.7.rst:448
msgid "PEP 391: Dictionary-Based Configuration For Logging"
msgstr ""

#: ../../whatsnew/2.7.rst:450
msgid ""
"The :mod:`logging` module is very flexible; applications can define a "
"tree of logging subsystems, and each logger in this tree can filter out "
"certain messages, format them differently, and direct messages to a "
"varying number of handlers."
msgstr ""

#: ../../whatsnew/2.7.rst:455
msgid ""
"All this flexibility can require a lot of configuration.  You can write "
"Python statements to create objects and set their properties, but a "
"complex set-up requires verbose but boring code. :mod:`logging` also "
"supports a :func:`~logging.fileConfig` function that parses a file, but "
"the file format doesn't support configuring filters, and it's messier to "
"generate programmatically."
msgstr ""

#: ../../whatsnew/2.7.rst:462
msgid ""
"Python 2.7 adds a :func:`~logging.dictConfig` function that uses a "
"dictionary to configure logging.  There are many ways to produce a "
"dictionary from different sources: construct one with code; parse a file "
"containing JSON; or use a YAML parsing library if one is installed.  For "
"more information see :ref:`logging-config-api`."
msgstr ""

#: ../../whatsnew/2.7.rst:468
msgid ""
"The following example configures two loggers, the root logger and a "
"logger named \"network\".  Messages sent to the root logger will be sent "
"to the system log using the syslog protocol, and messages to the "
"\"network\" logger will be written to a :file:`network.log` file that "
"will be rotated once the log reaches 1MB."
msgstr ""

#: ../../whatsnew/2.7.rst:518
msgid ""
"Three smaller enhancements to the :mod:`logging` module, all implemented "
"by Vinay Sajip, are:"
msgstr ""

#: ../../whatsnew/2.7.rst:523
msgid ""
"The :class:`~logging.handlers.SysLogHandler` class now supports "
"syslogging over TCP.  The constructor has a *socktype* parameter giving "
"the type of socket to use, either :const:`socket.SOCK_DGRAM` for UDP or "
":const:`socket.SOCK_STREAM` for TCP.  The default protocol remains UDP."
msgstr ""

#: ../../whatsnew/2.7.rst:529
msgid ""
":class:`~logging.Logger` instances gained a "
":meth:`~logging.Logger.getChild` method that retrieves a descendant "
"logger using a relative path. For example, once you retrieve a logger by "
"doing ``log = getLogger('app')``, calling "
"``log.getChild('network.listen')`` is equivalent to "
"``getLogger('app.network.listen')``."
msgstr ""

#: ../../whatsnew/2.7.rst:535
msgid ""
"The :class:`~logging.LoggerAdapter` class gained an "
":meth:`~logging.LoggerAdapter.isEnabledFor` method that takes a *level* "
"and returns whether the underlying logger would process a message of that"
" level of importance."
msgstr ""

#: ../../whatsnew/2.7.rst:544
msgid ":pep:`391` - Dictionary-Based Configuration For Logging"
msgstr ""

#: ../../whatsnew/2.7.rst:545
msgid "PEP written and implemented by Vinay Sajip."
msgstr ""

#: ../../whatsnew/2.7.rst:548
msgid "PEP 3106: Dictionary Views"
msgstr ""

#: ../../whatsnew/2.7.rst:550
msgid ""
"The dictionary methods :meth:`~dict.keys`, :meth:`~dict.values`, and "
":meth:`~dict.items` are different in Python 3.x.  They return an object "
"called a :dfn:`view` instead of a fully materialized list."
msgstr ""

#: ../../whatsnew/2.7.rst:554
msgid ""
"It's not possible to change the return values of :meth:`~dict.keys`, "
":meth:`~dict.values`, and :meth:`~dict.items` in Python 2.7 because too "
"much code would break.  Instead the 3.x versions were added under the new"
" names :meth:`~dict.viewkeys`, :meth:`~dict.viewvalues`, and "
":meth:`~dict.viewitems`."
msgstr ""

#: ../../whatsnew/2.7.rst:568
msgid ""
"Views can be iterated over, but the key and item views also behave like "
"sets.  The ``&`` operator performs intersection, and ``|`` performs a "
"union::"
msgstr ""

#: ../../whatsnew/2.7.rst:579
msgid ""
"The view keeps track of the dictionary and its contents change as the "
"dictionary is modified::"
msgstr ""

#: ../../whatsnew/2.7.rst:589
msgid ""
"However, note that you can't add or remove keys while you're iterating "
"over the view::"
msgstr ""

#: ../../whatsnew/2.7.rst:599
msgid ""
"You can use the view methods in Python 2.x code, and the 2to3 converter "
"will change them to the standard :meth:`~dict.keys`, "
":meth:`~dict.values`, and :meth:`~dict.items` methods."
msgstr ""

#: ../../whatsnew/2.7.rst:606
msgid ":pep:`3106` - Revamping dict.keys(), .values() and .items()"
msgstr ""

#: ../../whatsnew/2.7.rst:606
msgid ""
"PEP written by Guido van Rossum. Backported to 2.7 by Alexandre "
"Vassalotti; :issue:`1967`."
msgstr ""

#: ../../whatsnew/2.7.rst:611
msgid "PEP 3137: The memoryview Object"
msgstr ""

#: ../../whatsnew/2.7.rst:613
msgid ""
"The :class:`memoryview` object provides a view of another object's memory"
" content that matches the :class:`bytes` type's interface."
msgstr ""

#: ../../whatsnew/2.7.rst:631
msgid ""
"The content of the view can be converted to a string of bytes or a list "
"of integers:"
msgstr ""

#: ../../whatsnew/2.7.rst:643
msgid ""
":class:`memoryview` objects allow modifying the underlying object if it's"
" a mutable object."
msgstr ""

#: ../../whatsnew/2.7.rst:666
msgid ":pep:`3137` - Immutable Bytes and Mutable Buffer"
msgstr ""

#: ../../whatsnew/2.7.rst:665
msgid ""
"PEP written by Guido van Rossum. Implemented by Travis Oliphant, Antoine "
"Pitrou and others. Backported to 2.7 by Antoine Pitrou; :issue:`2396`."
msgstr ""

#: ../../whatsnew/2.7.rst:676
msgid ""
"The syntax for set literals has been backported from Python 3.x. Curly "
"brackets are used to surround the contents of the resulting mutable set; "
"set literals are distinguished from dictionaries by not containing colons"
" and values. ``{}`` continues to represent an empty dictionary; use "
"``set()`` for an empty set."
msgstr ""

#: ../../whatsnew/2.7.rst:693
msgid "Backported by Alexandre Vassalotti; :issue:`2335`."
msgstr ""

#: ../../whatsnew/2.7.rst:695
msgid ""
"Dictionary and set comprehensions are another feature backported from "
"3.x, generalizing list/generator comprehensions to use the literal syntax"
" for sets and dictionaries."
msgstr ""

#: ../../whatsnew/2.7.rst:707
msgid "Backported by Alexandre Vassalotti; :issue:`2333`."
msgstr ""

#: ../../whatsnew/2.7.rst:709
msgid ""
"The :keyword:`with` statement can now use multiple context managers in "
"one statement.  Context managers are processed from left to right and "
"each one is treated as beginning a new :keyword:`!with` statement. This "
"means that::"
msgstr ""

#: ../../whatsnew/2.7.rst:717
msgid "is equivalent to::"
msgstr ""

#: ../../whatsnew/2.7.rst:723
msgid ""
"The :func:`contextlib.nested` function provides a very similar function, "
"so it's no longer necessary and has been deprecated."
msgstr ""

#: ../../whatsnew/2.7.rst:726
msgid ""
"(Proposed in https://codereview.appspot.com/53094; implemented by Georg "
"Brandl.)"
msgstr ""

#: ../../whatsnew/2.7.rst:729
msgid ""
"Conversions between floating-point numbers and strings are now correctly "
"rounded on most platforms.  These conversions occur in many different "
"places: :func:`str` on floats and complex numbers; the :class:`float` and"
" :class:`complex` constructors; numeric formatting; serializing and "
"deserializing floats and complex numbers using the :mod:`marshal`, "
":mod:`pickle` and :mod:`json` modules; parsing of float and imaginary "
"literals in Python code; and :class:`~decimal.Decimal`-to-float "
"conversion."
msgstr ""

#: ../../whatsnew/2.7.rst:741
msgid ""
"Related to this, the :func:`repr` of a floating-point number *x* now "
"returns a result based on the shortest decimal string that's guaranteed "
"to round back to *x* under correct rounding (with round-half-to-even "
"rounding mode).  Previously it gave a string based on rounding x to 17 "
"decimal digits."
msgstr ""

#: ../../whatsnew/2.7.rst:749
msgid ""
"The rounding library responsible for this improvement works on Windows "
"and on Unix platforms using the gcc, icc, or suncc compilers.  There may "
"be a small number of platforms where correct operation of this code "
"cannot be guaranteed, so the code is not used on such systems.  You can "
"find out which code is being used by checking "
":data:`sys.float_repr_style`,  which will be ``short`` if the new code is"
" in use and ``legacy`` if it isn't."
msgstr ""

#: ../../whatsnew/2.7.rst:757
msgid ""
"Implemented by Eric Smith and Mark Dickinson, using David Gay's "
":file:`dtoa.c` library; :issue:`7117`."
msgstr ""

#: ../../whatsnew/2.7.rst:760
msgid ""
"Conversions from long integers and regular integers to floating point now"
" round differently, returning the floating-point number closest to the "
"number.  This doesn't matter for small integers that can be converted "
"exactly, but for large numbers that will unavoidably lose precision, "
"Python 2.7 now approximates more closely.  For example, Python 2.6 "
"computed the following::"
msgstr ""

#: ../../whatsnew/2.7.rst:773
msgid ""
"Python 2.7's floating-point result is larger, but much closer to the true"
" value::"
msgstr ""

#: ../../whatsnew/2.7.rst:782
msgid "(Implemented by Mark Dickinson; :issue:`3166`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:784
msgid ""
"Integer division is also more accurate in its rounding behaviours.  (Also"
" implemented by Mark Dickinson; :issue:`1811`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:787
msgid ""
"Implicit coercion for complex numbers has been removed; the interpreter "
"will no longer ever attempt to call a :meth:`__coerce__` method on "
"complex objects.  (Removed by Meador Inge and Mark Dickinson; "
":issue:`5211`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:791
#, python-format
msgid ""
"The :meth:`str.format` method now supports automatic numbering of the "
"replacement fields.  This makes using :meth:`str.format` more closely "
"resemble using ``%s`` formatting::"
msgstr ""

#: ../../whatsnew/2.7.rst:800
msgid ""
"The auto-numbering takes the fields from left to right, so the first "
"``{...}`` specifier will use the first argument to :meth:`str.format`, "
"the next specifier will use the next argument, and so on.  You can't mix "
"auto-numbering and explicit numbering -- either number all of your "
"specifier fields or none of them -- but you can mix auto-numbering and "
"named fields, as in the second example above.  (Contributed by Eric "
"Smith; :issue:`5237`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:807
msgid ""
"Complex numbers now correctly support usage with :func:`format`, and "
"default to being right-aligned. Specifying a precision or comma-"
"separation applies to both the real and imaginary parts of the number, "
"but a specified field width and alignment is applied to the whole of the "
"resulting ``1.5+3j`` output.  (Contributed by Eric Smith; :issue:`1588` "
"and :issue:`7988`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:814
msgid ""
"The 'F' format code now always formats its output using uppercase "
"characters, so it will now produce 'INF' and 'NAN'. (Contributed by Eric "
"Smith; :issue:`3382`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:818
msgid ""
"A low-level change: the :meth:`object.__format__` method now triggers a "
":exc:`PendingDeprecationWarning` if it's passed a format string, because "
"the :meth:`__format__` method for :class:`object` converts the object to "
"a string representation and formats that.  Previously the method silently"
" applied the format string to the string representation, but that could "
"hide mistakes in Python code.  If you're supplying formatting information"
" such as an alignment or precision, presumably you're expecting the "
"formatting to be applied in some object-specific way.  (Fixed by Eric "
"Smith; :issue:`7994`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:828
msgid ""
"The :func:`int` and :func:`long` types gained a ``bit_length`` method "
"that returns the number of bits necessary to represent its argument in "
"binary::"
msgstr ""

#: ../../whatsnew/2.7.rst:843
msgid "(Contributed by Fredrik Johansson and Victor Stinner; :issue:`3439`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:845
msgid ""
"The :keyword:`import` statement will no longer try an absolute import if "
"a relative import (e.g. ``from .os import sep``) fails.  This fixes a "
"bug, but could possibly break certain :keyword:`!import` statements that "
"were only working by accident.  (Fixed by Meador Inge; :issue:`7902`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:851
msgid ""
"It's now possible for a subclass of the built-in :class:`unicode` type to"
" override the :meth:`__unicode__` method.  (Implemented by Victor "
"Stinner; :issue:`1583863`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:855
msgid ""
"The :class:`bytearray` type's :meth:`~bytearray.translate` method now "
"accepts ``None`` as its first argument.  (Fixed by Georg Brandl; "
":issue:`4759`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:861
msgid ""
"When using ``@classmethod`` and ``@staticmethod`` to wrap methods as "
"class or static methods, the wrapper object now exposes the wrapped "
"function as their :attr:`__func__` attribute. (Contributed by Amaury "
"Forgeot d'Arc, after a suggestion by George Sakkis; :issue:`5982`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:867 ../../whatsnew/2.7.rst:2462
msgid ""
"When a restricted set of attributes were set using ``__slots__``, "
"deleting an unset attribute would not raise :exc:`AttributeError` as you "
"would expect.  Fixed by Benjamin Peterson; :issue:`7604`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:871
msgid ""
"Two new encodings are now supported: \"cp720\", used primarily for Arabic"
" text; and \"cp858\", a variant of CP 850 that adds the euro symbol.  "
"(CP720 contributed by Alexander Belchenko and Amaury Forgeot d'Arc in "
":issue:`1616979`; CP858 contributed by Tim Hatch in :issue:`8016`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:877
msgid ""
"The :class:`file` object will now set the :attr:`filename` attribute on "
"the :exc:`IOError` exception when trying to open a directory on POSIX "
"platforms (noted by Jan Kaliszewski; :issue:`4764`), and now explicitly "
"checks for and forbids writing to read-only file objects instead of "
"trusting the C library to catch and report the error (fixed by Stefan "
"Krah; :issue:`5677`)."
msgstr ""

#: ../../whatsnew/2.7.rst:884
msgid ""
"The Python tokenizer now translates line endings itself, so the "
":func:`compile` built-in function now accepts code using any line-ending "
"convention.  Additionally, it no longer requires that the code end in a "
"newline."
msgstr ""

#: ../../whatsnew/2.7.rst:889
msgid ""
"Extra parentheses in function definitions are illegal in Python 3.x, "
"meaning that you get a syntax error from ``def f((x)): pass``.  In "
"Python3-warning mode, Python 2.7 will now warn about this odd usage. "
"(Noted by James Lingard; :issue:`7362`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:894
msgid ""
"It's now possible to create weak references to old-style class objects.  "
"New-style classes were always weak-referenceable.  (Fixed by Antoine "
"Pitrou; :issue:`8268`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:898
msgid ""
"When a module object is garbage-collected, the module's dictionary is now"
" only cleared if no one else is holding a reference to the dictionary "
"(:issue:`7140`)."
msgstr ""

#: ../../whatsnew/2.7.rst:909
msgid ""
"A new environment variable, :envvar:`PYTHONWARNINGS`, allows controlling "
"warnings.  It should be set to a string containing warning settings, "
"equivalent to those used with the :option:`-W` switch, separated by "
"commas. (Contributed by Brian Curtin; :issue:`7301`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:915
msgid ""
"For example, the following setting will print warnings every time they "
"occur, but turn warnings from the :mod:`Cookie` module into an error.  "
"(The exact syntax for setting an environment variable varies across "
"operating systems and shells.)"
msgstr ""

#: ../../whatsnew/2.7.rst:930
msgid "Several performance enhancements have been added:"
msgstr ""

#: ../../whatsnew/2.7.rst:932
msgid ""
"A new opcode was added to perform the initial setup for :keyword:`with` "
"statements, looking up the :meth:`__enter__` and :meth:`__exit__` "
"methods.  (Contributed by Benjamin Peterson.)"
msgstr ""

#: ../../whatsnew/2.7.rst:936
#, python-format
msgid ""
"The garbage collector now performs better for one common usage pattern: "
"when many objects are being allocated without deallocating any of them.  "
"This would previously take quadratic time for garbage collection, but now"
" the number of full garbage collections is reduced as the number of "
"objects on the heap grows. The new logic only performs a full garbage "
"collection pass when the middle generation has been collected 10 times "
"and when the number of survivor objects from the middle generation "
"exceeds 10% of the number of objects in the oldest generation.  "
"(Suggested by Martin von L√∂wis and implemented by Antoine Pitrou; "
":issue:`4074`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:947
msgid ""
"The garbage collector tries to avoid tracking simple containers which "
"can't be part of a cycle. In Python 2.7, this is now true for tuples and "
"dicts containing atomic types (such as ints, strings, etc.). "
"Transitively, a dict containing tuples of atomic types won't be tracked "
"either. This helps reduce the cost of each garbage collection by "
"decreasing the number of objects to be considered and traversed by the "
"collector. (Contributed by Antoine Pitrou; :issue:`4688`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:956
msgid ""
"Long integers are now stored internally either in base 2**15 or in base "
"2**30, the base being determined at build time.  Previously, they were "
"always stored in base 2**15.  Using base 2**30 gives significant "
"performance improvements on 64-bit machines, but benchmark results on "
"32-bit machines have been mixed.  Therefore, the default is to use base "
"2**30 on 64-bit machines and base 2**15 on 32-bit machines; on Unix, "
"there's a new configure option :option:`!--enable-big-digits` that can be"
" used to override this default."
msgstr ""

#: ../../whatsnew/2.7.rst:965
msgid ""
"Apart from the performance improvements this change should be invisible "
"to end users, with one exception: for testing and debugging purposes "
"there's a new structseq :data:`sys.long_info` that provides information "
"about the internal format, giving the number of bits per digit and the "
"size in bytes of the C type used to store each digit::"
msgstr ""

#: ../../whatsnew/2.7.rst:976 ../../whatsnew/3.1.rst:496
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:978
msgid ""
"Another set of changes made long objects a few bytes smaller: 2 bytes "
"smaller on 32-bit systems and 6 bytes on 64-bit. (Contributed by Mark "
"Dickinson; :issue:`5260`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:982
#, python-format
msgid ""
"The division algorithm for long integers has been made faster by "
"tightening the inner loop, doing shifts instead of multiplications, and "
"fixing an unnecessary extra iteration. Various benchmarks show speedups "
"of between 50% and 150% for long integer divisions and modulo operations."
" (Contributed by Mark Dickinson; :issue:`5512`.) Bitwise operations are "
"also significantly faster (initial patch by Gregory Smith; "
":issue:`1087418`)."
msgstr ""

#: ../../whatsnew/2.7.rst:991
msgid ""
"The implementation of ``%`` checks for the left-side operand being a "
"Python string and special-cases it; this results in a 1--3% performance "
"increase for applications that frequently use ``%`` with strings, such as"
" templating libraries. (Implemented by Collin Winter; :issue:`5176`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:997
msgid ""
"List comprehensions with an ``if`` condition are compiled into faster "
"bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey "
"Yasskin; :issue:`4715`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1001
msgid ""
"Converting an integer or long integer to a decimal string was made faster"
" by special-casing base 10 instead of using a generalized conversion "
"function that supports arbitrary bases. (Patch by Gawain Bolton; "
":issue:`6713`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1006
msgid ""
"The :meth:`split`, :meth:`replace`, :meth:`rindex`, :meth:`rpartition`, "
"and :meth:`rsplit` methods of string-like types (strings, Unicode "
"strings, and :class:`bytearray` objects) now use a fast reverse-search "
"algorithm instead of a character-by-character scan.  This is sometimes "
"faster by a factor of 10.  (Added by Florent Xicluna; :issue:`7462` and "
":issue:`7622`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1013
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules now automatically intern the"
" strings used for attribute names, reducing memory usage of the objects "
"resulting from unpickling.  (Contributed by Jake McGuire; :issue:`5084`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1018
msgid ""
"The :mod:`cPickle` module now special-cases dictionaries, nearly halving "
"the time required to pickle them. (Contributed by Collin Winter; "
":issue:`5670`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1033
msgid ""
"The :mod:`bdb` module's base debugging class :class:`~bdb.Bdb` gained a "
"feature for skipping modules.  The constructor now takes an iterable "
"containing glob-style patterns such as ``django.*``; the debugger will "
"not step into stack frames from a module that matches one of these "
"patterns. (Contributed by Maru Newby after a suggestion by Senthil "
"Kumaran; :issue:`5142`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1041
msgid ""
"The :mod:`binascii` module now supports the buffer API, so it can be used"
" with :class:`memoryview` instances and other similar buffer objects. "
"(Backported from 3.x by Florent Xicluna; :issue:`7703`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1045
msgid ""
"Updated module: the :mod:`bsddb` module has been updated from 4.7.2devel9"
" to version 4.8.4 of `the pybsddb package "
"<https://www.jcea.es/programacion/pybsddb.htm>`__. The new version "
"features better Python 3.x compatibility, various bug fixes, and adds "
"several new BerkeleyDB flags and methods. (Updated by Jes√∫s Cea Avi√≥n; "
":issue:`8156`.  The pybsddb changelog can be read at "
"http://hg.jcea.es/pybsddb/file/tip/ChangeLog.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1053
msgid ""
"The :mod:`bz2` module's :class:`~bz2.BZ2File` now supports the context "
"management protocol, so you can write ``with bz2.BZ2File(...) as f:``. "
"(Contributed by Hagen F√ºrstenau; :issue:`3860`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1057
msgid ""
"New class: the :class:`~collections.Counter` class in the "
":mod:`collections` module is useful for tallying data.  "
":class:`~collections.Counter` instances behave mostly like dictionaries "
"but return zero for missing keys instead of raising a :exc:`KeyError`:"
msgstr ""

#: ../../whatsnew/2.7.rst:1079
msgid ""
"There are three additional :class:`~collections.Counter` methods. "
":meth:`~collections.Counter.most_common` returns the N most common "
"elements and their counts.  :meth:`~collections.Counter.elements` returns"
" an iterator over the contained elements, repeating each element as many "
"times as its count. :meth:`~collections.Counter.subtract` takes an "
"iterable and subtracts one for each element instead of adding; if the "
"argument is a dictionary or another :class:`Counter`, the counts are "
"subtracted. ::"
msgstr ""

#: ../../whatsnew/2.7.rst:1102
msgid "Contributed by Raymond Hettinger; :issue:`1696199`."
msgstr ""

#: ../../whatsnew/2.7.rst:1106
msgid ""
"New class: :class:`~collections.OrderedDict` is described in the earlier "
"section :ref:`pep-0372`."
msgstr ""

#: ../../whatsnew/2.7.rst:1109
msgid ""
"New method: The :class:`~collections.deque` data type now has a "
":meth:`~collections.deque.count` method that returns the number of "
"contained elements equal to the supplied argument *x*, and a "
":meth:`~collections.deque.reverse` method that reverses the elements of "
"the deque in-place.  :class:`~collections.deque` also exposes its maximum"
" length as the read-only :attr:`~collections.deque.maxlen` attribute. "
"(Both features added by Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1117
msgid ""
"The :class:`~collections.namedtuple` class now has an optional *rename* "
"parameter. If *rename* is true, field names that are invalid because "
"they've been repeated or aren't legal Python identifiers will be renamed "
"to legal names that are derived from the field's position within the list"
" of fields:"
msgstr ""

#: ../../whatsnew/2.7.rst:1128
msgid "(Added by Raymond Hettinger; :issue:`1818`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1130
msgid ""
"Finally, the :class:`~collections.Mapping` abstract base class now "
"returns :const:`NotImplemented` if a mapping is compared to another type "
"that isn't a :class:`Mapping`. (Fixed by Daniel Stutzbach; "
":issue:`8729`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1135
msgid ""
"Constructors for the parsing classes in the :mod:`ConfigParser` module "
"now take an *allow_no_value* parameter, defaulting to false; if true, "
"options without values will be allowed.  For example::"
msgstr ""

#: ../../whatsnew/2.7.rst:1157
msgid "(Contributed by Mats Kindahl; :issue:`7005`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1159
msgid ""
"Deprecated function: :func:`contextlib.nested`, which allows handling "
"more than one context manager with a single :keyword:`with` statement, "
"has been deprecated, because the :keyword:`!with` statement now supports "
"multiple context managers."
msgstr ""

#: ../../whatsnew/2.7.rst:1164
msgid ""
"The :mod:`cookielib` module now ignores cookies that have an invalid "
"version field, one that doesn't contain an integer value.  (Fixed by John"
" J. Lee; :issue:`3924`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1168
msgid ""
"The :mod:`copy` module's :func:`~copy.deepcopy` function will now "
"correctly copy bound instance methods.  (Implemented by Robert Collins; "
":issue:`1515`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1172
msgid ""
"The :mod:`ctypes` module now always converts ``None`` to a C ``NULL`` "
"pointer for arguments declared as pointers.  (Changed by Thomas Heller; "
":issue:`4606`.)  The underlying `libffi library "
"<https://sourceware.org/libffi/>`__ has been updated to version 3.0.9, "
"containing various fixes for different platforms.  (Updated by Matthias "
"Klose; :issue:`8142`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1179
msgid ""
"New method: the :mod:`datetime` module's :class:`~datetime.timedelta` "
"class gained a :meth:`~datetime.timedelta.total_seconds` method that "
"returns the number of seconds in the duration.  (Contributed by Brian "
"Quinlan; :issue:`5788`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1183
msgid ""
"New method: the :class:`~decimal.Decimal` class gained a "
":meth:`~decimal.Decimal.from_float` class method that performs an exact "
"conversion of a floating-point number to a :class:`~decimal.Decimal`. "
"This exact conversion strives for the closest decimal approximation to "
"the floating-point representation's value; the resulting decimal value "
"will therefore still include the inaccuracy, if any. For example, "
"``Decimal.from_float(0.1)`` returns "
"``Decimal('0.1000000000000000055511151231257827021181583404541015625')``."
" (Implemented by Raymond Hettinger; :issue:`4796`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1194
msgid ""
"Comparing instances of :class:`~decimal.Decimal` with floating-point "
"numbers now produces sensible results based on the numeric values of the "
"operands.  Previously such comparisons would fall back to Python's "
"default rules for comparing objects, which produced arbitrary results "
"based on their type.  Note that you still cannot combine :class:`Decimal`"
" and floating-point in other operations such as addition, since you "
"should be explicitly choosing how to convert between float and "
":class:`~decimal.Decimal`.  (Fixed by Mark Dickinson; :issue:`2531`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1203
msgid ""
"The constructor for :class:`~decimal.Decimal` now accepts floating-point "
"numbers (added by Raymond Hettinger; :issue:`8257`) and non-European "
"Unicode characters such as Arabic-Indic digits (contributed by Mark "
"Dickinson; :issue:`6595`)."
msgstr ""

#: ../../whatsnew/2.7.rst:1208
msgid ""
"Most of the methods of the :class:`~decimal.Context` class now accept "
"integers as well as :class:`~decimal.Decimal` instances; the only "
"exceptions are the :meth:`~decimal.Context.canonical` and "
":meth:`~decimal.Context.is_canonical` methods.  (Patch by Juan Jos√© "
"Conti; :issue:`7633`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1213
msgid ""
"When using :class:`~decimal.Decimal` instances with a string's "
":meth:`~str.format` method, the default alignment was previously left-"
"alignment.  This has been changed to right-alignment, which is more "
"sensible for numeric types.  (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1218
msgid ""
"Comparisons involving a signaling NaN value (or ``sNAN``) now signal "
":const:`InvalidOperation` instead of silently returning a true or false "
"value depending on the comparison operator.  Quiet NaN values (or "
"``NaN``) are now hashable.  (Fixed by Mark Dickinson; :issue:`7279`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1224
msgid ""
"The :mod:`difflib` module now produces output that is more compatible "
"with modern :command:`diff`/:command:`patch` tools through one small "
"change, using a tab character instead of spaces as a separator in the "
"header giving the filename.  (Fixed by Anatoly Techtonik; :issue:`7585`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1230
msgid ""
"The Distutils ``sdist`` command now always regenerates the "
":file:`MANIFEST` file, since even if the :file:`MANIFEST.in` or "
":file:`setup.py` files haven't been modified, the user might have created"
" some new files that should be included. (Fixed by Tarek Ziad√©; "
":issue:`8688`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1236
msgid ""
"The :mod:`doctest` module's :const:`IGNORE_EXCEPTION_DETAIL` flag will "
"now ignore the name of the module containing the exception being tested."
"  (Patch by Lennart Regebro; :issue:`7490`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1240
msgid ""
"The :mod:`email` module's :class:`~email.message.Message` class will now "
"accept a Unicode-valued payload, automatically converting the payload to "
"the encoding specified by :attr:`output_charset`. (Added by R. David "
"Murray; :issue:`1368247`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1245
msgid ""
"The :class:`~fractions.Fraction` class now accepts a single float or "
":class:`~decimal.Decimal` instance, or two rational numbers, as arguments"
" to its constructor.  (Implemented by Mark Dickinson; rationals added in "
":issue:`5812`, and float/decimal in :issue:`8294`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1251
msgid ""
"Ordering comparisons (``<``, ``<=``, ``>``, ``>=``) between fractions and"
" complex numbers now raise a :exc:`TypeError`. This fixes an oversight, "
"making the :class:`~fractions.Fraction` match the other numeric types."
msgstr ""

#: ../../whatsnew/2.7.rst:1258
msgid ""
"New class: :class:`~ftplib.FTP_TLS` in the :mod:`ftplib` module provides "
"secure FTP connections using TLS encapsulation of authentication as well "
"as subsequent control and data transfers. (Contributed by Giampaolo "
"Rodola; :issue:`2054`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1264
msgid ""
"The :meth:`~ftplib.FTP.storbinary` method for binary uploads can now "
"restart uploads thanks to an added *rest* parameter (patch by Pablo "
"Mouzo; :issue:`6845`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1268
msgid ""
"New class decorator: :func:`~functools.total_ordering` in the "
":mod:`functools` module takes a class that defines an :meth:`__eq__` "
"method and one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, or "
":meth:`__ge__`, and generates the missing comparison methods.  Since the "
":meth:`__cmp__` method is being deprecated in Python 3.x, this decorator "
"makes it easier to define ordered classes. (Added by Raymond Hettinger; "
":issue:`5479`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1276
msgid ""
"New function: :func:`~functools.cmp_to_key` will take an old-style "
"comparison function that expects two arguments and return a new callable "
"that can be used as the *key* parameter to functions such as "
":func:`sorted`, :func:`min` and :func:`max`, etc.  The primary intended "
"use is to help with making code compatible with Python 3.x. (Added by "
"Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1283
msgid ""
"New function: the :mod:`gc` module's :func:`~gc.is_tracked` returns true "
"if a given instance is tracked by the garbage collector, false otherwise."
" (Contributed by Antoine Pitrou; :issue:`4688`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1287
msgid ""
"The :mod:`gzip` module's :class:`~gzip.GzipFile` now supports the context"
" management protocol, so you can write ``with gzip.GzipFile(...) as f:`` "
"(contributed by Hagen F√ºrstenau; :issue:`3860`), and it now implements "
"the :class:`io.BufferedIOBase` ABC, so you can wrap it with "
":class:`io.BufferedReader` for faster processing (contributed by Nir "
"Aides; :issue:`7471`). It's also now possible to override the "
"modification time recorded in a gzipped file by providing an optional "
"timestamp to the constructor.  (Contributed by Jacques Frechet; "
":issue:`4272`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1297
msgid ""
"Files in gzip format can be padded with trailing zero bytes; the "
":mod:`gzip` module will now consume these trailing bytes.  (Fixed by "
"Tadek Pietraszek and Brian Curtin; :issue:`2846`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1301
msgid ""
"New attribute: the :mod:`hashlib` module now has an "
":attr:`~hashlib.hashlib.algorithms` attribute containing a tuple naming "
"the supported algorithms. In Python 2.7, ``hashlib.algorithms`` contains "
"``('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')``. (Contributed"
" by Carl Chenet; :issue:`7418`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1307
msgid ""
"The default :class:`~httplib.HTTPResponse` class used by the "
":mod:`httplib` module now supports buffering, resulting in much faster "
"reading of HTTP responses. (Contributed by Kristj√°n Valur J√≥nsson; "
":issue:`4879`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1311
msgid ""
"The :class:`~httplib.HTTPConnection` and "
":class:`~httplib.HTTPSConnection` classes now support a *source_address* "
"parameter, a ``(host, port)`` 2-tuple giving the source address that will"
" be used for the connection. (Contributed by Eldon Ziegler; "
":issue:`3972`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1316
msgid ""
"The :mod:`ihooks` module now supports relative imports.  Note that "
":mod:`ihooks` is an older module for customizing imports, superseded by "
"the :mod:`imputil` module added in Python 2.0. (Relative import support "
"added by Neil Schemenauer.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1323
msgid ""
"The :mod:`imaplib` module now supports IPv6 addresses. (Contributed by "
"Derek Morr; :issue:`1655`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1326
msgid ""
"New function: the :mod:`inspect` module's :func:`~inspect.getcallargs` "
"takes a callable and its positional and keyword arguments, and figures "
"out which of the callable's parameters will receive each argument, "
"returning a dictionary mapping argument names to their values.  For "
"example::"
msgstr ""

#: ../../whatsnew/2.7.rst:1343
msgid "Contributed by George Sakkis; :issue:`3135`."
msgstr ""

#: ../../whatsnew/2.7.rst:1345
msgid ""
"Updated module: The :mod:`io` library has been upgraded to the version "
"shipped with Python 3.1.  For 3.1, the I/O library was entirely rewritten"
" in C and is 2 to 20 times faster depending on the task being performed."
"  The original Python version was renamed to the :mod:`_pyio` module."
msgstr ""

#: ../../whatsnew/2.7.rst:1350
msgid ""
"One minor resulting change: the :class:`io.TextIOBase` class now has an "
":attr:`errors` attribute giving the error setting used for encoding and "
"decoding errors (one of ``'strict'``, ``'replace'``, ``'ignore'``)."
msgstr ""

#: ../../whatsnew/2.7.rst:1355
msgid ""
"The :class:`io.FileIO` class now raises an :exc:`OSError` when passed an "
"invalid file descriptor.  (Implemented by Benjamin Peterson; "
":issue:`4991`.)  The :meth:`~io.IOBase.truncate` method now preserves the"
" file position; previously it would change the file position to the end "
"of the new file.  (Fixed by Pascal Chambon; :issue:`6939`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1361
msgid ""
"New function: ``itertools.compress(data, selectors)`` takes two "
"iterators.  Elements of *data* are returned if the corresponding value in"
" *selectors* is true::"
msgstr ""

#: ../../whatsnew/2.7.rst:1370
msgid ""
"New function: ``itertools.combinations_with_replacement(iter, r)`` "
"returns all the possible *r*-length combinations of elements from the "
"iterable *iter*.  Unlike :func:`~itertools.combinations`, individual "
"elements can be repeated in the generated combinations::"
msgstr ""

#: ../../whatsnew/2.7.rst:1379
msgid ""
"Note that elements are treated as unique depending on their position in "
"the input, not their actual values."
msgstr ""

#: ../../whatsnew/2.7.rst:1382
msgid ""
"The :func:`itertools.count` function now has a *step* argument that "
"allows incrementing by values other than 1.  :func:`~itertools.count` "
"also now allows keyword arguments, and using non-integer values such as "
"floats or :class:`~decimal.Decimal` instances.  (Implemented by Raymond "
"Hettinger; :issue:`5032`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1388
msgid ""
":func:`itertools.combinations` and :func:`itertools.product` previously "
"raised :exc:`ValueError` for values of *r* larger than the input "
"iterable.  This was deemed a specification error, so they now return an "
"empty iterator.  (Fixed by Raymond Hettinger; :issue:`4816`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1393
msgid ""
"Updated module: The :mod:`json` module was upgraded to version 2.0.9 of "
"the simplejson package, which includes a C extension that makes encoding "
"and decoding faster. (Contributed by Bob Ippolito; :issue:`4136`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1398
msgid ""
"To support the new :class:`collections.OrderedDict` type, "
":func:`json.load` now has an optional *object_pairs_hook* parameter that "
"will be called with any object literal that decodes to a list of pairs. "
"(Contributed by Raymond Hettinger; :issue:`5381`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1403
msgid ""
"The :mod:`mailbox` module's :class:`~mailbox.Maildir` class now records "
"the timestamp on the directories it reads, and only re-reads them if the "
"modification time has subsequently changed.  This improves performance by"
" avoiding unneeded directory scans.  (Fixed by A.M. Kuchling and Antoine "
"Pitrou; :issue:`1607951`, :issue:`6896`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1409
msgid ""
"New functions: the :mod:`math` module gained :func:`~math.erf` and "
":func:`~math.erfc` for the error function and the complementary error "
"function, :func:`~math.expm1` which computes ``e**x - 1`` with more "
"precision than using :func:`~math.exp` and subtracting 1, "
":func:`~math.gamma` for the Gamma function, and :func:`~math.lgamma` for "
"the natural log of the Gamma function. (Contributed by Mark Dickinson and"
" nirinA raseliarison; :issue:`3366`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1417
msgid ""
"The :mod:`multiprocessing` module's :class:`Manager*` classes can now be "
"passed a callable that will be called whenever a subprocess is started, "
"along with a set of arguments that will be passed to the callable. "
"(Contributed by lekma; :issue:`5585`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1423
msgid ""
"The :class:`~multiprocessing.Pool` class, which controls a pool of worker"
" processes, now has an optional *maxtasksperchild* parameter.  Worker "
"processes will perform the specified number of tasks and then exit, "
"causing the :class:`~multiprocessing.Pool` to start a new worker.  This "
"is useful if tasks may leak memory or other resources, or if some tasks "
"will cause the worker to become very large. (Contributed by Charles "
"Cazabon; :issue:`6963`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1431
msgid ""
"The :mod:`nntplib` module now supports IPv6 addresses. (Contributed by "
"Derek Morr; :issue:`1664`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1434
msgid ""
"New functions: the :mod:`os` module wraps the following POSIX system "
"calls: :func:`~os.getresgid` and :func:`~os.getresuid`, which return the "
"real, effective, and saved GIDs and UIDs; :func:`~os.setresgid` and "
":func:`~os.setresuid`, which set real, effective, and saved GIDs and UIDs"
" to new values; :func:`~os.initgroups`, which initialize the group access"
" list for the current process.  (GID/UID functions contributed by Travis "
"H.; :issue:`6508`.  Support for initgroups added by Jean-Paul Calderone; "
":issue:`7333`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1444
msgid ""
"The :func:`os.fork` function now re-initializes the import lock in the "
"child process; this fixes problems on Solaris when :func:`~os.fork` is "
"called from a thread.  (Fixed by Zsolt Cserna; :issue:`7242`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1448
msgid ""
"In the :mod:`os.path` module, the :func:`~os.path.normpath` and "
":func:`~os.path.abspath` functions now preserve Unicode; if their input "
"path is a Unicode string, the return value is also a Unicode string. "
"(:meth:`~os.path.normpath` fixed by Matt Giuca in :issue:`5827`; "
":meth:`~os.path.abspath` fixed by Ezio Melotti in :issue:`3426`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1454
msgid ""
"The :mod:`pydoc` module now has help for the various symbols that Python "
"uses.  You can now do ``help('<<')`` or ``help('@')``, for example. "
"(Contributed by David Laban; :issue:`4739`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1458
msgid ""
"The :mod:`re` module's :func:`~re.split`, :func:`~re.sub`, and "
":func:`~re.subn` now accept an optional *flags* argument, for consistency"
" with the other functions in the module.  (Added by Gregory P. Smith.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1462
msgid ""
"New function: :func:`~runpy.run_path` in the :mod:`runpy` module will "
"execute the code at a provided *path* argument.  *path* can be the path "
"of a Python source file (:file:`example.py`), a compiled bytecode file "
"(:file:`example.pyc`), a directory (:file:`./package/`), or a zip archive"
" (:file:`example.zip`).  If a directory or zip path is provided, it will "
"be added to the front of ``sys.path`` and the module :mod:`__main__` will"
" be imported.  It's expected that the directory or zip contains a "
":file:`__main__.py`; if it doesn't, some other :file:`__main__.py` might "
"be imported from a location later in ``sys.path``.  This makes more of "
"the machinery of :mod:`runpy` available to scripts that want to mimic the"
" way Python's command line processes an explicit path name. (Added by "
"Nick Coghlan; :issue:`6816`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1476
msgid ""
"New function: in the :mod:`shutil` module, :func:`~shutil.make_archive` "
"takes a filename, archive type (zip or tar-format), and a directory path,"
" and creates an archive containing the directory's contents. (Added by "
"Tarek Ziad√©.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1481
msgid ""
":mod:`shutil`'s :func:`~shutil.copyfile` and :func:`~shutil.copytree` "
"functions now raise a :exc:`~shutil.SpecialFileError` exception when "
"asked to copy a named pipe.  Previously the code would treat named pipes "
"like a regular file by opening them for reading, and this would block "
"indefinitely.  (Fixed by Antoine Pitrou; :issue:`3002`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1487
msgid ""
"The :mod:`signal` module no longer re-installs the signal handler unless "
"this is truly necessary, which fixes a bug that could make it impossible "
"to catch the EINTR signal robustly.  (Fixed by Charles-Francois Natali; "
":issue:`8354`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1492
msgid ""
"New functions: in the :mod:`site` module, three new functions return "
"various site- and user-specific paths. :func:`~site.getsitepackages` "
"returns a list containing all global site-packages directories, "
":func:`~site.getusersitepackages` returns the path of the user's site-"
"packages directory, and :func:`~site.getuserbase` returns the value of "
"the :envvar:`USER_BASE` environment variable, giving the path to a "
"directory that can be used to store data. (Contributed by Tarek Ziad√©; "
":issue:`6693`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1503
msgid ""
"The :mod:`site` module now reports exceptions occurring when the "
":mod:`sitecustomize` module is imported, and will no longer catch and "
"swallow the :exc:`KeyboardInterrupt` exception.  (Fixed by Victor "
"Stinner; :issue:`3137`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1508
msgid ""
"The :func:`~socket.create_connection` function gained a *source_address* "
"parameter, a ``(host, port)`` 2-tuple giving the source address that will"
" be used for the connection. (Contributed by Eldon Ziegler; "
":issue:`3972`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1513
msgid ""
"The :meth:`~socket.socket.recv_into` and "
":meth:`~socket.socket.recvfrom_into` methods will now write into objects "
"that support the buffer API, most usefully the :class:`bytearray` and "
":class:`memoryview` objects.  (Implemented by Antoine Pitrou; "
":issue:`8104`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1518
msgid ""
"The :mod:`SocketServer` module's :class:`~SocketServer.TCPServer` class "
"now supports socket timeouts and disabling the Nagle algorithm. The "
":attr:`~SocketServer.TCPServer.disable_nagle_algorithm` class attribute "
"defaults to ``False``; if overridden to be true, new request connections "
"will have the TCP_NODELAY option set to prevent buffering many small "
"sends into a single TCP packet. The "
":attr:`~SocketServer.BaseServer.timeout` class attribute can hold a "
"timeout in seconds that will be applied to the request socket; if no "
"request is received within that time, "
":meth:`~SocketServer.BaseServer.handle_timeout` will be called and "
":meth:`~SocketServer.BaseServer.handle_request` will return. (Contributed"
" by Kristj√°n Valur J√≥nsson; :issue:`6192` and :issue:`6267`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1530
msgid ""
"Updated module: the :mod:`sqlite3` module has been updated to version "
"2.6.0 of the `pysqlite package <https://github.com/ghaering/pysqlite>`__."
" Version 2.6.0 includes a number of bugfixes, and adds the ability to "
"load SQLite extensions from shared libraries. Call the "
"``enable_load_extension(True)`` method to enable extensions, and then "
"call :meth:`~sqlite3.Connection.load_extension` to load a particular "
"shared library. (Updated by Gerhard H√§ring.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1537
msgid ""
"The :mod:`ssl` module's :class:`~ssl.SSLSocket` objects now support the "
"buffer API, which fixed a test suite failure (fix by Antoine Pitrou; "
":issue:`7133`) and automatically set OpenSSL's "
":c:macro:`SSL_MODE_AUTO_RETRY`, which will prevent an error code being "
"returned from :meth:`recv` operations that trigger an SSL renegotiation "
"(fix by Antoine Pitrou; :issue:`8222`)."
msgstr ""

#: ../../whatsnew/2.7.rst:1544
msgid ""
"The :func:`ssl.wrap_socket` constructor function now takes a *ciphers* "
"argument that's a string listing the encryption algorithms to be allowed;"
" the format of the string is described `in the OpenSSL documentation "
"<https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-"
"FORMAT>`__. (Added by Antoine Pitrou; :issue:`8322`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1551
msgid ""
"Another change makes the extension load all of OpenSSL's ciphers and "
"digest algorithms so that they're all available.  Some SSL certificates "
"couldn't be verified, reporting an \"unknown algorithm\" error.  "
"(Reported by Beda Kosata, and fixed by Antoine Pitrou; :issue:`8484`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1557
msgid ""
"The version of OpenSSL being used is now available as the module "
"attributes :data:`ssl.OPENSSL_VERSION` (a string), "
":data:`ssl.OPENSSL_VERSION_INFO` (a 5-tuple), and "
":data:`ssl.OPENSSL_VERSION_NUMBER` (an integer).  (Added by Antoine "
"Pitrou; :issue:`8321`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1563
msgid ""
"The :mod:`struct` module will no longer silently ignore overflow errors "
"when a value is too large for a particular integer format code (one of "
"``bBhHiIlLqQ``); it now always raises a :exc:`struct.error` exception.  "
"(Changed by Mark Dickinson; :issue:`1523`.)  The :func:`~struct.pack` "
"function will also attempt to use :meth:`__index__` to convert and pack "
"non-integers before trying the :meth:`__int__` method or reporting an "
"error. (Changed by Mark Dickinson; :issue:`8300`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1572
msgid ""
"New function: the :mod:`subprocess` module's "
":func:`~subprocess.check_output` runs a command with a specified set of "
"arguments and returns the command's output as a string when the command "
"runs without error, or raises a :exc:`~subprocess.CalledProcessError` "
"exception otherwise."
msgstr ""

#: ../../whatsnew/2.7.rst:1587
msgid "(Contributed by Gregory P. Smith.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1589
msgid ""
"The :mod:`subprocess` module will now retry its internal system calls on "
"receiving an :const:`EINTR` signal.  (Reported by several people; final "
"patch by Gregory P. Smith in :issue:`1068268`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1593
msgid ""
"New function: :func:`~symtable.Symbol.is_declared_global` in the "
":mod:`symtable` module returns true for variables that are explicitly "
"declared to be global, false for ones that are implicitly global. "
"(Contributed by Jeremy Hylton.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1598 ../../whatsnew/2.7.rst:2496
msgid ""
"The :mod:`syslog` module will now use the value of ``sys.argv[0]`` as the"
" identifier instead of the previous default value of ``'python'``. "
"(Changed by Sean Reifschneider; :issue:`8451`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1602
msgid ""
"The ``sys.version_info`` value is now a named tuple, with attributes "
"named :attr:`major`, :attr:`minor`, :attr:`micro`, :attr:`releaselevel`, "
"and :attr:`serial`.  (Contributed by Ross Light; :issue:`4285`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1607
msgid ""
":func:`sys.getwindowsversion` also returns a named tuple, with attributes"
" named :attr:`major`, :attr:`minor`, :attr:`build`, :attr:`platform`, "
":attr:`service_pack`, :attr:`service_pack_major`, "
":attr:`service_pack_minor`, :attr:`suite_mask`, and :attr:`product_type`."
"  (Contributed by Brian Curtin; :issue:`7766`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1613 ../../whatsnew/2.7.rst:2500
msgid ""
"The :mod:`tarfile` module's default error handling has changed, to no "
"longer suppress fatal errors.  The default error level was previously 0, "
"which meant that errors would only result in a message being written to "
"the debug log, but because the debug log is not activated by default, "
"these errors go unnoticed.  The default error level is now 1, which "
"raises an exception if there's an error. (Changed by Lars Gust√§bel; "
":issue:`7357`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1621
msgid ""
":mod:`tarfile` now supports filtering the :class:`~tarfile.TarInfo` "
"objects being added to a tar file.  When you call "
":meth:`~tarfile.TarFile.add`, you may supply an optional *filter* "
"argument that's a callable.  The *filter* callable will be passed the "
":class:`~tarfile.TarInfo` for every file being added, and can modify and "
"return it. If the callable returns ``None``, the file will be excluded "
"from the resulting archive.  This is more powerful than the existing "
"*exclude* argument, which has therefore been deprecated. (Added by Lars "
"Gust√§bel; :issue:`6856`.) The :class:`~tarfile.TarFile` class also now "
"supports the context management protocol. (Added by Lars Gust√§bel; "
":issue:`7232`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1633
msgid ""
"The :meth:`~threading.Event.wait` method of the :class:`threading.Event` "
"class now returns the internal flag on exit.  This means the method will "
"usually return true because :meth:`~threading.Event.wait` is supposed to "
"block until the internal flag becomes true.  The return value will only "
"be false if a timeout was provided and the operation timed out. "
"(Contributed by Tim Lesher; :issue:`1674032`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1640
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module is now "
"used internally to determine which characters are numeric, whitespace, or"
" represent line breaks.  The database also includes information from the "
":file:`Unihan.txt` data file (patch by Anders Chrigstr√∂m and Amaury "
"Forgeot d'Arc; :issue:`1571184`) and has been updated to version 5.2.0 "
"(updated by Florent Xicluna; :issue:`8024`)."
msgstr ""

#: ../../whatsnew/2.7.rst:1648 ../../whatsnew/2.7.rst:2508
msgid ""
"The :mod:`urlparse` module's :func:`~urlparse.urlsplit` now handles "
"unknown URL schemes in a fashion compliant with :rfc:`3986`: if the URL "
"is of the form ``\"<something>://...\"``, the text before the ``://`` is "
"treated as the scheme, even if it's a made-up scheme that the module "
"doesn't know about.  This change may break code that worked around the "
"old behaviour.  For example, Python 2.6.4 or 2.5 will return the "
"following:"
msgstr ""

#: ../../whatsnew/2.7.rst:1663 ../../whatsnew/2.7.rst:2523
msgid "Python 2.7 (and Python 2.6.5) will return:"
msgstr ""

#: ../../whatsnew/2.7.rst:1672 ../../whatsnew/2.7.rst:2532
msgid ""
"(Python 2.7 actually produces slightly different output, since it returns"
" a named tuple instead of a standard tuple.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1675
msgid ""
"The :mod:`urlparse` module also supports IPv6 literal addresses as "
"defined by :rfc:`2732` (contributed by Senthil Kumaran; :issue:`2987`)."
msgstr ""

#: ../../whatsnew/2.7.rst:1685
msgid ""
"New class: the :class:`~weakref.WeakSet` class in the :mod:`weakref` "
"module is a set that only holds weak references to its elements; elements"
" will be removed once there are no references pointing to them. "
"(Originally implemented in Python 3.x by Raymond Hettinger, and "
"backported to 2.7 by Michael Foord.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1691
msgid ""
"The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands "
"and angle brackets when outputting an XML processing instruction (which "
"looks like ``<?xml-stylesheet href=\"#style1\"?>``) or comment (which "
"looks like ``<!-- comment -->``). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1697
msgid ""
"The XML-RPC client and server, provided by the :mod:`xmlrpclib` and "
":mod:`SimpleXMLRPCServer` modules, have improved performance by "
"supporting HTTP/1.1 keep-alive and by optionally using gzip encoding to "
"compress the XML being exchanged.  The gzip compression is controlled by "
"the :attr:`encode_threshold` attribute of "
":class:`SimpleXMLRPCRequestHandler`, which contains a size in bytes; "
"responses larger than this will be compressed. (Contributed by Kristj√°n "
"Valur J√≥nsson; :issue:`6267`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1706
msgid ""
"The :mod:`zipfile` module's :class:`~zipfile.ZipFile` now supports the "
"context management protocol, so you can write ``with zipfile.ZipFile(...)"
" as f:``. (Contributed by Brian Curtin; :issue:`5511`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1710
msgid ""
":mod:`zipfile` now also supports archiving empty directories and extracts"
" them correctly.  (Fixed by Kuba Wieczorek; :issue:`4710`.) Reading files"
" out of an archive is faster, and interleaving "
":meth:`~zipfile.ZipFile.read` and :meth:`~zipfile.ZipFile.readline` now "
"works correctly. (Contributed by Nir Aides; :issue:`7610`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1716
msgid ""
"The :func:`~zipfile.is_zipfile` function now accepts a file object, in "
"addition to the path names accepted in earlier versions.  (Contributed by"
" Gabriel Genellina; :issue:`4756`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1720
msgid ""
"The :meth:`~zipfile.ZipFile.writestr` method now has an optional "
"*compress_type* parameter that lets you override the default compression "
"method specified in the :class:`~zipfile.ZipFile` constructor.  "
"(Contributed by Ronald Oussoren; :issue:`6003`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1733
msgid "New module: importlib"
msgstr ""

#: ../../whatsnew/2.7.rst:1735
msgid ""
"Python 3.1 includes the :mod:`importlib` package, a re-implementation of "
"the logic underlying Python's :keyword:`import` statement. "
":mod:`importlib` is useful for implementors of Python interpreters and to"
" users who wish to write new importers that can participate in the import"
" process.  Python 2.7 doesn't contain the complete :mod:`importlib` "
"package, but instead has a tiny subset that contains a single function, "
":func:`~importlib.import_module`."
msgstr ""

#: ../../whatsnew/2.7.rst:1743
msgid ""
"``import_module(name, package=None)`` imports a module.  *name* is a "
"string containing the module or package's name.  It's possible to do "
"relative imports by providing a string that begins with a ``.`` "
"character, such as ``..utils.errors``.  For relative imports, the "
"*package* argument must be provided and is the name of the package that "
"will be used as the anchor for the relative import.  "
":func:`~importlib.import_module` both inserts the imported module into "
"``sys.modules`` and returns the module object."
msgstr ""

#: ../../whatsnew/2.7.rst:1752
msgid "Here are some examples::"
msgstr ""

#: ../../whatsnew/2.7.rst:1763
msgid ""
":mod:`importlib` was implemented by Brett Cannon and introduced in Python"
" 3.1."
msgstr ""

#: ../../whatsnew/2.7.rst:1768
msgid "New module: sysconfig"
msgstr ""

#: ../../whatsnew/2.7.rst:1770
msgid ""
"The :mod:`sysconfig` module has been pulled out of the Distutils package,"
" becoming a new top-level module in its own right. :mod:`sysconfig` "
"provides functions for getting information about Python's build process: "
"compiler switches, installation paths, the platform name, and whether "
"Python is running from its source directory."
msgstr ""

#: ../../whatsnew/2.7.rst:1777
msgid "Some of the functions in the module are:"
msgstr ""

#: ../../whatsnew/2.7.rst:1779
msgid ""
":func:`~sysconfig.get_config_var` returns variables from Python's "
"Makefile and the :file:`pyconfig.h` file."
msgstr ""

#: ../../whatsnew/2.7.rst:1781
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary containing all of"
" the configuration variables."
msgstr ""

#: ../../whatsnew/2.7.rst:1783
msgid ""
":func:`~sysconfig.get_path` returns the configured path for a particular "
"type of module: the standard library, site-specific modules, platform-"
"specific modules, etc."
msgstr ""

#: ../../whatsnew/2.7.rst:1786
msgid ""
":func:`~sysconfig.is_python_build` returns true if you're running a "
"binary from a Python source tree, and false otherwise."
msgstr ""

#: ../../whatsnew/2.7.rst:1789
msgid ""
"Consult the :mod:`sysconfig` documentation for more details and for a "
"complete list of functions."
msgstr ""

#: ../../whatsnew/2.7.rst:1792
msgid ""
"The Distutils package and :mod:`sysconfig` are now maintained by Tarek "
"Ziad√©, who has also started a Distutils2 package (source repository at "
"https://hg.python.org/distutils2/) for developing a next-generation "
"version of Distutils."
msgstr ""

#: ../../whatsnew/2.7.rst:1799
msgid "ttk: Themed Widgets for Tk"
msgstr ""

#: ../../whatsnew/2.7.rst:1801
msgid ""
"Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk "
"widgets but have a more customizable appearance and can therefore more "
"closely resemble the native platform's widgets.  This widget set was "
"originally called Tile, but was renamed to Ttk (for \"themed Tk\") on "
"being added to Tcl/Tck release 8.5."
msgstr ""

#: ../../whatsnew/2.7.rst:1807
msgid ""
"To learn more, read the :mod:`ttk` module documentation.  You may also "
"wish to read the Tcl/Tk manual page describing the Ttk theme engine, "
"available at https://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm. Some "
"screenshots of the Python/Ttk code in use are at "
"https://code.google.com/archive/p/python-ttk/wikis/Screenshots.wiki."
msgstr ""

#: ../../whatsnew/2.7.rst:1814
msgid ""
"The :mod:`ttk` module was written by Guilherme Polo and added in "
":issue:`2983`.  An alternate version called ``Tile.py``, written by "
"Martin Franklin and maintained by Kevin Walzer, was proposed for "
"inclusion in :issue:`2618`, but the authors argued that Guilherme Polo's "
"work was more comprehensive."
msgstr ""

#: ../../whatsnew/2.7.rst:1824
msgid "Updated module: unittest"
msgstr ""

#: ../../whatsnew/2.7.rst:1826
msgid ""
"The :mod:`unittest` module was greatly enhanced; many new features were "
"added.  Most of these features were implemented by Michael Foord, unless "
"otherwise noted.  The enhanced version of the module is downloadable "
"separately for use with Python versions 2.4 to 2.6, packaged as the "
":mod:`unittest2` package, from https://pypi.org/project/unittest2."
msgstr ""

#: ../../whatsnew/2.7.rst:1833
msgid ""
"When used from the command line, the module can automatically discover "
"tests.  It's not as fancy as `py.test <http://pytest.org>`__ or `nose "
"<https://nose.readthedocs.io/>`__, but provides a simple way to run tests"
" kept within a set of package directories.  For example, the following "
"command will search the :file:`test/` subdirectory for any importable "
"test files named ``test*.py``::"
msgstr ""

#: ../../whatsnew/2.7.rst:1842
msgid ""
"Consult the :mod:`unittest` module documentation for more details. "
"(Developed in :issue:`6001`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1845
msgid "The :func:`~unittest.main` function supports some other new options:"
msgstr ""

#: ../../whatsnew/2.7.rst:1847
msgid ""
":option:`-b <unittest -b>` or :option:`!--buffer` will buffer the "
"standard output and standard error streams during each test.  If the test"
" passes, any resulting output will be discarded; on failure, the buffered"
" output will be displayed."
msgstr ""

#: ../../whatsnew/2.7.rst:1852
msgid ""
":option:`-c <unittest -c>` or :option:`!--catch` will cause the control-C"
" interrupt to be handled more gracefully.  Instead of interrupting the "
"test process immediately, the currently running test will be completed "
"and then the partial results up to the interruption will be reported. If "
"you're impatient, a second press of control-C will cause an immediate "
"interruption."
msgstr ""

#: ../../whatsnew/2.7.rst:1859
msgid ""
"This control-C handler tries to avoid causing problems when the code "
"being tested or the tests being run have defined a signal handler of "
"their own, by noticing that a signal handler was already set and calling "
"it.  If this doesn't work for you, there's a "
":func:`~unittest.removeHandler` decorator that can be used to mark tests "
"that should have the control-C handling disabled."
msgstr ""

#: ../../whatsnew/2.7.rst:1866
msgid ""
":option:`-f <unittest -f>` or :option:`!--failfast` makes test execution "
"stop immediately when a test fails instead of continuing to execute "
"further tests.  (Suggested by Cliff Dyer and implemented by Michael "
"Foord; :issue:`8074`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1871
msgid ""
"The progress messages now show 'x' for expected failures and 'u' for "
"unexpected successes when run in verbose mode. (Contributed by Benjamin "
"Peterson.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1875
msgid ""
"Test cases can raise the :exc:`~unittest.SkipTest` exception to skip a "
"test (:issue:`1034053`)."
msgstr ""

#: ../../whatsnew/2.7.rst:1878
msgid ""
"The error messages for :meth:`~unittest.TestCase.assertEqual`, "
":meth:`~unittest.TestCase.assertTrue`, and "
":meth:`~unittest.TestCase.assertFalse` failures now provide more "
"information.  If you set the :attr:`~unittest.TestCase.longMessage` "
"attribute of your :class:`~unittest.TestCase` classes to true, both the "
"standard error message and any additional message you provide will be "
"printed for failures.  (Added by Michael Foord; :issue:`5663`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1885
msgid ""
"The :meth:`~unittest.TestCase.assertRaises` method now returns a context "
"handler when called without providing a callable object to run.  For "
"example, you can write this::"
msgstr ""

#: ../../whatsnew/2.7.rst:1892
msgid "(Implemented by Antoine Pitrou; :issue:`4444`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1896
msgid ""
"Module- and class-level setup and teardown fixtures are now supported. "
"Modules can contain :func:`~unittest.setUpModule` and "
":func:`~unittest.tearDownModule` functions.  Classes can have "
":meth:`~unittest.TestCase.setUpClass` and "
":meth:`~unittest.TestCase.tearDownClass` methods that must be defined as "
"class methods (using ``@classmethod`` or equivalent).  These functions "
"and methods are invoked when the test runner switches to a test case in a"
" different module or class."
msgstr ""

#: ../../whatsnew/2.7.rst:1904
msgid ""
"The methods :meth:`~unittest.TestCase.addCleanup` and "
":meth:`~unittest.TestCase.doCleanups` were added. "
":meth:`~unittest.TestCase.addCleanup` lets you add cleanup functions that"
" will be called unconditionally (after :meth:`~unittest.TestCase.setUp` "
"if :meth:`~unittest.TestCase.setUp` fails, otherwise after "
":meth:`~unittest.TestCase.tearDown`). This allows for much simpler "
"resource allocation and deallocation during tests (:issue:`5679`)."
msgstr ""

#: ../../whatsnew/2.7.rst:1912
msgid ""
"A number of new methods were added that provide more specialized tests.  "
"Many of these methods were written by Google engineers for use in their "
"test suites; Gregory P. Smith, Michael Foord, and GvR worked on merging "
"them into Python's version of :mod:`unittest`."
msgstr ""

#: ../../whatsnew/2.7.rst:1917
msgid ""
":meth:`~unittest.TestCase.assertIsNone` and "
":meth:`~unittest.TestCase.assertIsNotNone` take one expression and verify"
" that the result is or is not ``None``."
msgstr ""

#: ../../whatsnew/2.7.rst:1920
msgid ""
":meth:`~unittest.TestCase.assertIs` and "
":meth:`~unittest.TestCase.assertIsNot` take two values and check whether "
"the two values evaluate to the same object or not. (Added by Michael "
"Foord; :issue:`2578`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1924
msgid ""
":meth:`~unittest.TestCase.assertIsInstance` and "
":meth:`~unittest.TestCase.assertNotIsInstance` check whether the "
"resulting object is an instance of a particular class, or of one of a "
"tuple of classes.  (Added by Georg Brandl; :issue:`7031`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1929
msgid ""
":meth:`~unittest.TestCase.assertGreater`, "
":meth:`~unittest.TestCase.assertGreaterEqual`, "
":meth:`~unittest.TestCase.assertLess`, and "
":meth:`~unittest.TestCase.assertLessEqual` compare two quantities."
msgstr ""

#: ../../whatsnew/2.7.rst:1933
msgid ""
":meth:`~unittest.TestCase.assertMultiLineEqual` compares two strings, and"
" if they're not equal, displays a helpful comparison that highlights the "
"differences in the two strings.  This comparison is now used by default "
"when Unicode strings are compared with "
":meth:`~unittest.TestCase.assertEqual`."
msgstr ""

#: ../../whatsnew/2.7.rst:1938
msgid ""
":meth:`~unittest.TestCase.assertRegexpMatches` and "
":meth:`~unittest.TestCase.assertNotRegexpMatches` checks whether the "
"first argument is a string matching or not matching the regular "
"expression provided as the second argument (:issue:`8038`)."
msgstr ""

#: ../../whatsnew/2.7.rst:1943
msgid ""
":meth:`~unittest.TestCase.assertRaisesRegexp` checks whether a particular"
" exception is raised, and then also checks that the string representation"
" of the exception matches the provided regular expression."
msgstr ""

#: ../../whatsnew/2.7.rst:1947
msgid ""
":meth:`~unittest.TestCase.assertIn` and "
":meth:`~unittest.TestCase.assertNotIn` tests whether *first* is or is not"
" in  *second*."
msgstr ""

#: ../../whatsnew/2.7.rst:1950
msgid ""
":meth:`~unittest.TestCase.assertItemsEqual` tests whether two provided "
"sequences contain the same elements."
msgstr ""

#: ../../whatsnew/2.7.rst:1953
msgid ""
":meth:`~unittest.TestCase.assertSetEqual` compares whether two sets are "
"equal, and only reports the differences between the sets in case of "
"error."
msgstr ""

#: ../../whatsnew/2.7.rst:1956
msgid ""
"Similarly, :meth:`~unittest.TestCase.assertListEqual` and "
":meth:`~unittest.TestCase.assertTupleEqual` compare the specified types "
"and explain any differences without necessarily printing their full "
"values; these methods are now used by default when comparing lists and "
"tuples using :meth:`~unittest.TestCase.assertEqual`. More generally, "
":meth:`~unittest.TestCase.assertSequenceEqual` compares two sequences and"
" can optionally check whether both sequences are of a particular type."
msgstr ""

#: ../../whatsnew/2.7.rst:1964
msgid ""
":meth:`~unittest.TestCase.assertDictEqual` compares two dictionaries and "
"reports the differences; it's now used by default when you compare two "
"dictionaries using :meth:`~unittest.TestCase.assertEqual`.  "
":meth:`~unittest.TestCase.assertDictContainsSubset` checks whether all of"
" the key/value pairs in *first* are found in *second*."
msgstr ""

#: ../../whatsnew/2.7.rst:1969
msgid ""
":meth:`~unittest.TestCase.assertAlmostEqual` and "
":meth:`~unittest.TestCase.assertNotAlmostEqual` test whether *first* and "
"*second* are approximately equal.  This method can either round their "
"difference to an optionally-specified number of *places* (the default is "
"7) and compare it to zero, or require the difference to be smaller than a"
" supplied *delta* value."
msgstr ""

#: ../../whatsnew/2.7.rst:1975
msgid ""
":meth:`~unittest.TestLoader.loadTestsFromName` properly honors the "
":attr:`~unittest.TestLoader.suiteClass` attribute of the "
":class:`~unittest.TestLoader`. (Fixed by Mark Roddy; :issue:`6866`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1979
msgid ""
"A new hook lets you extend the :meth:`~unittest.TestCase.assertEqual` "
"method to handle new data types.  The "
":meth:`~unittest.TestCase.addTypeEqualityFunc` method takes a type object"
" and a function. The function will be used when both of the objects being"
" compared are of the specified type.  This function should compare the "
"two objects and raise an exception if they don't match; it's a good idea "
"for the function to provide additional information about why the two "
"objects aren't matching, much as the new sequence comparison methods do."
msgstr ""

#: ../../whatsnew/2.7.rst:1988
msgid ""
":func:`unittest.main` now takes an optional ``exit`` argument.  If false,"
" :func:`~unittest.main` doesn't call :func:`sys.exit`, allowing "
":func:`~unittest.main` to be used from the interactive interpreter. "
"(Contributed by J. Pablo Fern√°ndez; :issue:`3379`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1993
msgid ""
":class:`~unittest.TestResult` has new "
":meth:`~unittest.TestResult.startTestRun` and "
":meth:`~unittest.TestResult.stopTestRun` methods that are called "
"immediately before and after a test run.  (Contributed by Robert Collins;"
" :issue:`5728`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:1997
msgid ""
"With all these changes, the :file:`unittest.py` was becoming awkwardly "
"large, so the module was turned into a package and the code split into "
"several files (by Benjamin Peterson).  This doesn't affect how the module"
" is imported or used."
msgstr ""

#: ../../whatsnew/2.7.rst:2005
msgid "http://www.voidspace.org.uk/python/articles/unittest2.shtml"
msgstr ""

#: ../../whatsnew/2.7.rst:2005
msgid ""
"Describes the new features, how to use them, and the rationale for "
"various design decisions.  (By Michael Foord.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2011
msgid "Updated module: ElementTree 1.3"
msgstr ""

#: ../../whatsnew/2.7.rst:2013
msgid ""
"The version of the ElementTree library included with Python was updated "
"to version 1.3.  Some of the new features are:"
msgstr ""

#: ../../whatsnew/2.7.rst:2016
msgid ""
"The various parsing functions now take a *parser* keyword argument giving"
" an :class:`~xml.etree.ElementTree.XMLParser` instance that will be used."
"  This makes it possible to override the file's internal encoding::"
msgstr ""

#: ../../whatsnew/2.7.rst:2023
msgid ""
"Errors in parsing XML now raise a :exc:`ParseError` exception, whose "
"instances have a :attr:`position` attribute containing a (*line*, "
"*column*) tuple giving the location of the problem."
msgstr ""

#: ../../whatsnew/2.7.rst:2027
msgid ""
"ElementTree's code for converting trees to a string has been "
"significantly reworked, making it roughly twice as fast in many cases.  "
"The :meth:`ElementTree.write() <xml.etree.ElementTree.ElementTree.write>`"
" and :meth:`Element.write` methods now have a *method* parameter that can"
" be \"xml\" (the default), \"html\", or \"text\".  HTML mode will output "
"empty elements as ``<empty></empty>`` instead of ``<empty/>``, and text "
"mode will skip over elements and only output the text chunks.  If you set"
" the :attr:`tag` attribute of an element to ``None`` but leave its "
"children in place, the element will be omitted when the tree is written "
"out, so you don't need to do more extensive rearrangement to remove a "
"single element."
msgstr ""

#: ../../whatsnew/2.7.rst:2039
msgid ""
"Namespace handling has also been improved.  All ``xmlns:<whatever>`` "
"declarations are now output on the root element, not scattered throughout"
" the resulting XML.  You can set the default namespace for a tree by "
"setting the :attr:`default_namespace` attribute and can register new "
"prefixes with :meth:`~xml.etree.ElementTree.register_namespace`.  In XML "
"mode, you can use the true/false *xml_declaration* parameter to suppress "
"the XML declaration."
msgstr ""

#: ../../whatsnew/2.7.rst:2047
msgid ""
"New :class:`~xml.etree.ElementTree.Element` method: "
":meth:`~xml.etree.ElementTree.Element.extend` appends the items from a "
"sequence to the element's children.  Elements themselves behave like "
"sequences, so it's easy to move children from one element to another::"
msgstr ""

#: ../../whatsnew/2.7.rst:2064
msgid ""
"New :class:`Element` method: :meth:`~xml.etree.ElementTree.Element.iter` "
"yields the children of the element as a generator.  It's also possible to"
" write ``for child in elem:`` to loop over an element's children.  The "
"existing method :meth:`getiterator` is now deprecated, as is "
":meth:`getchildren` which constructs and returns a list of children."
msgstr ""

#: ../../whatsnew/2.7.rst:2071
msgid ""
"New :class:`Element` method: "
":meth:`~xml.etree.ElementTree.Element.itertext` yields all chunks of text"
" that are descendants of the element.  For example::"
msgstr ""

#: ../../whatsnew/2.7.rst:2082
msgid ""
"Deprecated: using an element as a Boolean (i.e., ``if elem:``) would "
"return true if the element had any children, or false if there were no "
"children.  This behaviour is confusing -- ``None`` is false, but so is a "
"childless element? -- so it will now trigger a :exc:`FutureWarning`.  In "
"your code, you should be explicit: write ``len(elem) != 0`` if you're "
"interested in the number of children, or ``elem is not None``."
msgstr ""

#: ../../whatsnew/2.7.rst:2090
msgid ""
"Fredrik Lundh develops ElementTree and produced the 1.3 version; you can "
"read his article describing 1.3 at "
"http://effbot.org/zone/elementtree-13-intro.htm. Florent Xicluna updated "
"the version included with Python, after discussions on python-dev and in "
":issue:`6472`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2104
msgid ""
"The latest release of the GNU Debugger, GDB 7, can be `scripted using "
"Python "
"<https://sourceware.org/gdb/current/onlinedocs/gdb/Python.html>`__. When "
"you begin debugging an executable program P, GDB will look for a file "
"named ``P-gdb.py`` and automatically read it.  Dave Malcolm contributed a"
" :file:`python-gdb.py` that adds a number of commands useful when "
"debugging Python itself.  For example, ``py-up`` and ``py-down`` go up or"
" down one Python stack frame, which usually corresponds to several C "
"stack frames.  ``py-print`` prints the value of a Python variable, and "
"``py-bt`` prints the Python stack trace.  (Added as a result of "
":issue:`8032`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2116
msgid ""
"If you use the :file:`.gdbinit` file provided with Python, the \"pyo\" "
"macro in the 2.7 version now works correctly when the thread being "
"debugged doesn't hold the GIL; the macro now acquires it before printing."
" (Contributed by Victor Stinner; :issue:`3632`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2121
msgid ""
":c:func:`Py_AddPendingCall` is now thread-safe, letting any worker thread"
" submit notifications to the main Python thread.  This is particularly "
"useful for asynchronous IO operations. (Contributed by Kristj√°n Valur "
"J√≥nsson; :issue:`4293`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2126
msgid ""
"New function: :c:func:`PyCode_NewEmpty` creates an empty code object; "
"only the filename, function name, and first line number are required. "
"This is useful for extension modules that are attempting to construct a "
"more useful traceback stack.  Previously such extensions needed to call "
":c:func:`PyCode_New`, which had many more arguments.  (Added by Jeffrey "
"Yasskin.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2133
msgid ""
"New function: :c:func:`PyErr_NewExceptionWithDoc` creates a new exception"
" class, just as the existing :c:func:`PyErr_NewException` does, but takes"
" an extra ``char *`` argument containing the docstring for the new "
"exception class.  (Added by 'lekma' on the Python bug tracker; "
":issue:`7033`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2139
msgid ""
"New function: :c:func:`PyFrame_GetLineNumber` takes a frame object and "
"returns the line number that the frame is currently executing. Previously"
" code would need to get the index of the bytecode instruction currently "
"executing, and then look up the line number corresponding to that "
"address.  (Added by Jeffrey Yasskin.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2145
msgid ""
"New functions: :c:func:`PyLong_AsLongAndOverflow` and "
":c:func:`PyLong_AsLongLongAndOverflow`  approximates a Python long "
"integer as a C :c:type:`long` or :c:type:`long long`. If the number is "
"too large to fit into the output type, an *overflow* flag is set and "
"returned to the caller. (Contributed by Case Van Horsen; :issue:`7528` "
"and :issue:`7767`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2152
msgid ""
"New function: stemming from the rewrite of string-to-float conversion, a "
"new :c:func:`PyOS_string_to_double` function was added.  The old "
":c:func:`PyOS_ascii_strtod` and :c:func:`PyOS_ascii_atof` functions are "
"now deprecated."
msgstr ""

#: ../../whatsnew/2.7.rst:2157
msgid ""
"New function: :c:func:`PySys_SetArgvEx` sets the value of ``sys.argv`` "
"and can optionally update ``sys.path`` to include the directory "
"containing the script named by ``sys.argv[0]`` depending on the value of "
"an *updatepath* parameter."
msgstr ""

#: ../../whatsnew/2.7.rst:2162
msgid ""
"This function was added to close a security hole for applications that "
"embed Python.  The old function, :c:func:`PySys_SetArgv`, would always "
"update ``sys.path``, and sometimes it would add the current directory.  "
"This meant that, if you ran an application embedding Python in a "
"directory controlled by someone else, attackers could put a Trojan-horse "
"module in the directory (say, a file named :file:`os.py`) that your "
"application would then import and run."
msgstr ""

#: ../../whatsnew/2.7.rst:2170
msgid ""
"If you maintain a C/C++ application that embeds Python, check whether "
"you're calling :c:func:`PySys_SetArgv` and carefully consider whether the"
" application should be using :c:func:`PySys_SetArgvEx` with *updatepath* "
"set to false."
msgstr ""

#: ../../whatsnew/2.7.rst:2175
msgid ""
"Security issue reported as `CVE-2008-5983 <https://cve.mitre.org/cgi-"
"bin/cvename.cgi?name=CVE-2008-5983>`_; discussed in :issue:`5753`, and "
"fixed by Antoine Pitrou."
msgstr ""

#: ../../whatsnew/2.7.rst:2179
msgid ""
"New macros: the Python header files now define the following macros: "
":c:macro:`Py_ISALNUM`, :c:macro:`Py_ISALPHA`, :c:macro:`Py_ISDIGIT`, "
":c:macro:`Py_ISLOWER`, :c:macro:`Py_ISSPACE`, :c:macro:`Py_ISUPPER`, "
":c:macro:`Py_ISXDIGIT`, :c:macro:`Py_TOLOWER`, and :c:macro:`Py_TOUPPER`."
" All of these functions are analogous to the C standard macros for "
"classifying characters, but ignore the current locale setting, because in"
" several places Python needs to analyze characters in a locale-"
"independent way.  (Added by Eric Smith; :issue:`5793`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2197
msgid ""
"Removed function: :c:macro:`PyEval_CallObject` is now only available as a"
" macro.  A function version was being kept around to preserve ABI linking"
" compatibility, but that was in 1997; it can certainly be deleted by now."
"  (Removed by Antoine Pitrou; :issue:`8276`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2202
msgid ""
"New format codes: the :c:func:`PyFormat_FromString`, "
":c:func:`PyFormat_FromStringV`, and :c:func:`PyErr_Format` functions now "
"accept ``%lld`` and ``%llu`` format codes for displaying C's "
":c:type:`long long` types. (Contributed by Mark Dickinson; "
":issue:`7228`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2208
msgid ""
"The complicated interaction between threads and process forking has been "
"changed.  Previously, the child process created by :func:`os.fork` might "
"fail because the child is created with only a single thread running, the "
"thread performing the :func:`os.fork`. If other threads were holding a "
"lock, such as Python's import lock, when the fork was performed, the lock"
" would still be marked as \"held\" in the new process.  But in the child "
"process nothing would ever release the lock, since the other threads "
"weren't replicated, and the child process would no longer be able to "
"perform imports."
msgstr ""

#: ../../whatsnew/2.7.rst:2218
msgid ""
"Python 2.7 acquires the import lock before performing an :func:`os.fork`,"
" and will also clean up any locks created using the :mod:`threading` "
"module.  C extension modules that have internal locks, or that call "
":c:func:`fork()` themselves, will not benefit from this clean-up."
msgstr ""

#: ../../whatsnew/2.7.rst:2224
msgid "(Fixed by Thomas Wouters; :issue:`1590864`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2226
msgid ""
"The :c:func:`Py_Finalize` function now calls the internal "
":func:`threading._shutdown` function; this prevents some exceptions from "
"being raised when an interpreter shuts down. (Patch by Adam Olsen; "
":issue:`1722344`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2231
msgid ""
"When using the :c:type:`PyMemberDef` structure to define attributes of a "
"type, Python will no longer let you try to delete or set a "
":const:`T_STRING_INPLACE` attribute."
msgstr ""

#: ../../whatsnew/2.7.rst:2237
msgid ""
"Global symbols defined by the :mod:`ctypes` module are now prefixed with "
"``Py``, or with ``_ctypes``.  (Implemented by Thomas Heller; "
":issue:`3102`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2241
msgid ""
"New configure option: the :option:`!--with-system-expat` switch allows "
"building the :mod:`pyexpat` module to use the system Expat library. "
"(Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`7609`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2245
msgid ""
"New configure option: the :option:`!--with-valgrind` option will now "
"disable the pymalloc allocator, which is difficult for the Valgrind "
"memory-error detector to analyze correctly. Valgrind will therefore be "
"better at detecting memory leaks and overruns. (Contributed by James "
"Henstridge; :issue:`2422`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2252
msgid ""
"New configure option: you can now supply an empty string to :option"
":`!--with-dbmliborder=` in order to disable all of the various DBM "
"modules.  (Added by Arfrever Frehtes Taifersar Arahesis; :issue:`6491`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2257
msgid ""
"The :program:`configure` script now checks for floating-point rounding "
"bugs on certain 32-bit Intel chips and defines a "
":c:macro:`X87_DOUBLE_ROUNDING` preprocessor definition.  No code "
"currently uses this definition, but it's available if anyone wishes to "
"use it. (Added by Mark Dickinson; :issue:`2937`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2263
msgid ""
":program:`configure` also now sets a :envvar:`LDCXXSHARED` Makefile "
"variable for supporting C++ linking.  (Contributed by Arfrever Frehtes "
"Taifersar Arahesis; :issue:`1222585`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2267
msgid ""
"The build process now creates the necessary files for pkg-config support."
"  (Contributed by Clinton Roy; :issue:`3585`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2270
msgid ""
"The build process now supports Subversion 1.7.  (Contributed by Arfrever "
"Frehtes Taifersar Arahesis; :issue:`6094`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2277
msgid "Capsules"
msgstr ""

#: ../../whatsnew/2.7.rst:2279
msgid ""
"Python 3.1 adds a new C datatype, :c:type:`PyCapsule`, for providing a C "
"API to an extension module.  A capsule is essentially the holder of a C "
"``void *`` pointer, and is made available as a module attribute; for "
"example, the :mod:`socket` module's API is exposed as ``socket.CAPI``, "
"and :mod:`unicodedata` exposes ``ucnhash_CAPI``.  Other extensions can "
"import the module, access its dictionary to get the capsule object, and "
"then get the ``void *`` pointer, which will usually point to an array of "
"pointers to the module's various API functions."
msgstr ""

#: ../../whatsnew/2.7.rst:2288
msgid ""
"There is an existing data type already used for this, "
":c:type:`PyCObject`, but it doesn't provide type safety.  Evil code "
"written in pure Python could cause a segmentation fault by taking a "
":c:type:`PyCObject` from module A and somehow substituting it for the "
":c:type:`PyCObject` in module B.   Capsules know their own name, and "
"getting the pointer requires providing the name:"
msgstr ""

#: ../../whatsnew/2.7.rst:2306
msgid ""
"You are assured that ``vtable`` points to whatever you're expecting. If a"
" different capsule was passed in, :c:func:`PyCapsule_IsValid` would "
"detect the mismatched name and return false.  Refer to :ref:`using-"
"capsules` for more information on using these objects."
msgstr ""

#: ../../whatsnew/2.7.rst:2311
msgid ""
"Python 2.7 now uses capsules internally to provide various extension-"
"module APIs, but the :c:func:`PyCObject_AsVoidPtr` was modified to handle"
" capsules, preserving compile-time compatibility with the "
":c:type:`CObject` interface.  Use of :c:func:`PyCObject_AsVoidPtr` will "
"signal a :exc:`PendingDeprecationWarning`, which is silent by default."
msgstr ""

#: ../../whatsnew/2.7.rst:2318
msgid ""
"Implemented in Python 3.1 and backported to 2.7 by Larry Hastings; "
"discussed in :issue:`5630`."
msgstr ""

#: ../../whatsnew/2.7.rst:2327
msgid ""
"The :mod:`msvcrt` module now contains some constants from the "
":file:`crtassem.h` header file: :data:`CRT_ASSEMBLY_VERSION`, "
":data:`VC_ASSEMBLY_PUBLICKEYTOKEN`, and "
":data:`LIBRARIES_ASSEMBLY_NAME_PREFIX`. (Contributed by David Cournapeau;"
" :issue:`4365`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2334
msgid ""
"The :mod:`_winreg` module for accessing the registry now implements the "
":func:`~_winreg.CreateKeyEx` and :func:`~_winreg.DeleteKeyEx` functions, "
"extended versions of previously-supported functions that take several "
"extra arguments.  The :func:`~_winreg.DisableReflectionKey`, "
":func:`~_winreg.EnableReflectionKey`, and "
":func:`~_winreg.QueryReflectionKey` were also tested and documented. "
"(Implemented by Brian Curtin: :issue:`7347`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2342
msgid ""
"The new :c:func:`_beginthreadex` API is used to start threads, and the "
"native thread-local storage functions are now used. (Contributed by "
"Kristj√°n Valur J√≥nsson; :issue:`3582`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2346
msgid ""
"The :func:`os.kill` function now works on Windows.  The signal value can "
"be the constants :const:`CTRL_C_EVENT`, :const:`CTRL_BREAK_EVENT`, or any"
" integer.  The first two constants will send :kbd:`Control-C` and :kbd"
":`Control-Break` keystroke events to subprocesses; any other value will "
"use the :c:func:`TerminateProcess` API.  (Contributed by Miki Tebeka; "
":issue:`1220212`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2353
msgid ""
"The :func:`os.listdir` function now correctly fails for an empty path.  "
"(Fixed by Hirokazu Yamamoto; :issue:`5913`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2356
msgid ""
"The :mod:`mimelib` module will now read the MIME database from the "
"Windows registry when initializing. (Patch by Gabriel Genellina; "
":issue:`4969`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2365
msgid ""
"The path ``/Library/Python/2.7/site-packages`` is now appended to "
"``sys.path``, in order to share added packages between the system "
"installation and a user-installed copy of the same version. (Changed by "
"Ronald Oussoren; :issue:`4865`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2372
msgid ""
"As of 2.7.13, this change was removed. ``/Library/Python/2.7/site-"
"packages``, the site-packages directory used by the Apple-supplied system"
" Python 2.7 is no longer appended to ``sys.path`` for user-installed "
"Pythons such as from the python.org installers.  As of macOS 10.12, Apple"
" changed how the system site-packages directory is configured, which "
"could cause installation of pip components, like setuptools, to fail.  "
"Packages installed for the system Python will no longer be shared with "
"user-installed Pythons. (:issue:`28440`)"
msgstr ""

#: ../../whatsnew/2.7.rst:2383
msgid "Port-Specific Changes: FreeBSD"
msgstr ""

#: ../../whatsnew/2.7.rst:2385
msgid ""
"FreeBSD 7.1's :const:`SO_SETFIB` constant, used with "
":func:`~socket.getsockopt`/:func:`~socket.setsockopt` to select an "
"alternate routing table, is now available in the :mod:`socket` module.  "
"(Added by Kyle VanderBeek; :issue:`8235`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2393
msgid ""
"Two benchmark scripts, :file:`iobench` and :file:`ccbench`, were added to"
" the :file:`Tools` directory.  :file:`iobench` measures the speed of the "
"built-in file I/O objects returned by :func:`open` while performing "
"various operations, and :file:`ccbench` is a concurrency benchmark that "
"tries to measure computing throughput, thread switching latency, and IO "
"processing bandwidth when performing several tasks using a varying number"
" of threads."
msgstr ""

#: ../../whatsnew/2.7.rst:2401
msgid ""
"The :file:`Tools/i18n/msgfmt.py` script now understands plural forms in "
":file:`.po` files.  (Fixed by Martin von L√∂wis; :issue:`5464`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2405
msgid ""
"When importing a module from a :file:`.pyc` or :file:`.pyo` file with an "
"existing :file:`.py` counterpart, the :attr:`co_filename` attributes of "
"the resulting code objects are overwritten when the original filename is "
"obsolete.  This can happen if the file has been renamed, moved, or is "
"accessed through different paths.  (Patch by Ziga Seilnacht and Jean-Paul"
" Calderone; :issue:`1180193`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2412
msgid ""
"The :file:`regrtest.py` script now takes a :option:`!--randseed=` switch "
"that takes an integer that will be used as the random seed for the "
":option:`!-r` option that executes tests in random order. The "
":option:`!-r` option also reports the seed that was used (Added by Collin"
" Winter.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2418
msgid ""
"Another :file:`regrtest.py` switch is :option:`!-j`, which takes an "
"integer specifying how many tests run in parallel. This allows reducing "
"the total runtime on multi-core machines. This option is compatible with "
"several other options, including the :option:`!-R` switch which is known "
"to produce long runtimes. (Added by Antoine Pitrou, :issue:`6152`.)  This"
" can also be used with a new :option:`!-F` switch that runs selected "
"tests in a loop until they fail.  (Added by Antoine Pitrou; "
":issue:`7312`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2427
msgid ""
"When executed as a script, the :file:`py_compile.py` module now accepts "
"``'-'`` as an argument, which will read standard input for the list of "
"filenames to be compiled.  (Contributed by Piotr O≈ºarowski; "
":issue:`8233`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2435
msgid "Porting to Python 2.7"
msgstr ""

#: ../../whatsnew/2.7.rst:2440
msgid ""
"The :func:`range` function processes its arguments more consistently; it "
"will now call :meth:`__int__` on non-float, non-integer arguments that "
"are supplied to it.  (Fixed by Alexander Belopolsky; :issue:`1533`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2445
msgid ""
"The string :meth:`format` method changed the default precision used for "
"floating-point and complex numbers from 6 decimal places to 12, which "
"matches the precision used by :func:`str`. (Changed by Eric Smith; "
":issue:`5920`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2450
msgid ""
"Because of an optimization for the :keyword:`with` statement, the special"
" methods :meth:`__enter__` and :meth:`__exit__` must belong to the "
"object's type, and cannot be directly attached to the object's instance."
"  This affects new-style classes (derived from :class:`object`) and C "
"extension types.  (:issue:`6101`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2456
msgid ""
"Due to a bug in Python 2.6, the *exc_value* parameter to :meth:`__exit__`"
" methods was often the string representation of the exception, not an "
"instance.  This was fixed in 2.7, so *exc_value* will be an instance as "
"expected.  (Fixed by Florent Xicluna; :issue:`7853`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2466
msgid "In the standard library:"
msgstr ""

#: ../../whatsnew/2.7.rst:2468
msgid ""
"Operations with :class:`~datetime.datetime` instances that resulted in a "
"year falling outside the supported range didn't always raise "
":exc:`OverflowError`.  Such errors are now checked more carefully and "
"will now raise the exception. (Reported by Mark Leander, patch by Anand "
"B. Pillai and Alexander Belopolsky; :issue:`7150`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2474
msgid ""
"When using :class:`~decimal.Decimal` instances with a string's "
":meth:`format` method, the default alignment was previously left-"
"alignment.  This has been changed to right-alignment, which might change "
"the output of your programs. (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2480
msgid ""
"Comparisons involving a signaling NaN value (or ``sNAN``) now signal "
":const:`~decimal.InvalidOperation` instead of silently returning a true "
"or false value depending on the comparison operator.  Quiet NaN values "
"(or ``NaN``) are now hashable.  (Fixed by Mark Dickinson; :issue:`7279`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2486
msgid ""
"The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands "
"and angle brackets when outputting an XML processing instruction (which "
"looks like `<?xml-stylesheet href=\"#style1\"?>`) or comment (which looks"
" like `<!-- comment -->`). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2492
msgid ""
"The :meth:`~StringIO.StringIO.readline` method of "
":class:`~StringIO.StringIO` objects now does nothing when a negative "
"length is requested, as other file-like objects do.  (:issue:`7348`)."
msgstr ""

#: ../../whatsnew/2.7.rst:2535
msgid "For C extensions:"
msgstr ""

#: ../../whatsnew/2.7.rst:2537
msgid ""
"C extensions that use integer format codes with the ``PyArg_Parse*`` "
"family of functions will now raise a :exc:`TypeError` exception instead "
"of triggering a :exc:`DeprecationWarning` (:issue:`5080`)."
msgstr ""

#: ../../whatsnew/2.7.rst:2541
msgid ""
"Use the new :c:func:`PyOS_string_to_double` function instead of the old "
":c:func:`PyOS_ascii_strtod` and :c:func:`PyOS_ascii_atof` functions, "
"which are now deprecated."
msgstr ""

#: ../../whatsnew/2.7.rst:2545
msgid "For applications that embed Python:"
msgstr ""

#: ../../whatsnew/2.7.rst:2547
msgid ""
"The :c:func:`PySys_SetArgvEx` function was added, letting applications "
"close a security hole when the existing :c:func:`PySys_SetArgv` function "
"was used.  Check whether you're calling :c:func:`PySys_SetArgv` and "
"carefully consider whether the application should be using "
":c:func:`PySys_SetArgvEx` with *updatepath* set to false."
msgstr ""

#: ../../whatsnew/2.7.rst:2560
msgid "New Features Added to Python 2.7 Maintenance Releases"
msgstr ""

#: ../../whatsnew/2.7.rst:2562
msgid ""
"New features may be added to Python 2.7 maintenance releases when the "
"situation genuinely calls for it. Any such additions must go through the "
"Python Enhancement Proposal process, and make a compelling case for why "
"they can't be adequately addressed by either adding the new feature "
"solely to Python 3, or else by publishing it on the Python Package Index."
msgstr ""

#: ../../whatsnew/2.7.rst:2568
msgid ""
"In addition to the specific proposals listed below, there is a general "
"exemption allowing new ``-3`` warnings to be added in any Python 2.7 "
"maintenance release."
msgstr ""

#: ../../whatsnew/2.7.rst:2574
msgid "Two new environment variables for debug mode"
msgstr ""

#: ../../whatsnew/2.7.rst:2576
msgid ""
"In debug mode, the ``[xxx refs]`` statistic is not written by default, "
"the :envvar:`PYTHONSHOWREFCOUNT` environment variable now must also be "
"set. (Contributed by Victor Stinner; :issue:`31733`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2580
msgid ""
"When Python is compiled with ``COUNT_ALLOC`` defined, allocation counts "
"are no longer dumped by default anymore: the "
":envvar:`PYTHONSHOWALLOCCOUNT` environment variable must now also be set."
" Moreover, allocation counts are now dumped into stderr, rather than "
"stdout. (Contributed by Victor Stinner; :issue:`31692`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2589
msgid "PEP 434: IDLE Enhancement Exception for All Branches"
msgstr ""

#: ../../whatsnew/2.7.rst:2591
msgid ""
":pep:`434` describes a general exemption for changes made to the IDLE "
"development environment shipped along with Python. This exemption makes "
"it possible for the IDLE developers to provide a more consistent user "
"experience across all supported versions of Python 2 and 3."
msgstr ""

#: ../../whatsnew/2.7.rst:2596
msgid ""
"For details of any IDLE changes, refer to the NEWS file for the specific "
"release."
msgstr ""

#: ../../whatsnew/2.7.rst:2601
msgid "PEP 466: Network Security Enhancements for Python 2.7"
msgstr ""

#: ../../whatsnew/2.7.rst:2603
msgid ""
":pep:`466` describes a number of network security enhancement proposals "
"that have been approved for inclusion in Python 2.7 maintenance releases,"
" with the first of those changes appearing in the Python 2.7.7 release."
msgstr ""

#: ../../whatsnew/2.7.rst:2607
msgid ":pep:`466` related features added in Python 2.7.7:"
msgstr ""

#: ../../whatsnew/2.7.rst:2609
msgid ""
":func:`hmac.compare_digest` was backported from Python 3 to make a timing"
" attack resistant comparison operation available to Python 2 "
"applications. (Contributed by Alex Gaynor; :issue:`21306`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2613
msgid ""
"OpenSSL 1.0.1g was upgraded in the official Windows installers published "
"on python.org. (Contributed by Zachary Ware; :issue:`21462`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2616
msgid ":pep:`466` related features added in Python 2.7.8:"
msgstr ""

#: ../../whatsnew/2.7.rst:2618
msgid ""
":func:`hashlib.pbkdf2_hmac` was backported from Python 3 to make a "
"hashing algorithm suitable for secure password storage broadly available "
"to Python 2 applications. (Contributed by Alex Gaynor; :issue:`21304`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2622
msgid ""
"OpenSSL 1.0.1h was upgraded for the official Windows installers published"
" on python.org. (contributed by Zachary Ware in :issue:`21671` for "
"CVE-2014-0224)"
msgstr ""

#: ../../whatsnew/2.7.rst:2625
msgid ":pep:`466` related features added in Python 2.7.9:"
msgstr ""

#: ../../whatsnew/2.7.rst:2627
msgid ""
"Most of Python 3.4's :mod:`ssl` module was backported. This means "
":mod:`ssl` now supports Server Name Indication, TLS1.x settings, access "
"to the platform certificate store, the :class:`~ssl.SSLContext` class, "
"and other features. (Contributed by Alex Gaynor and David Reid; "
":issue:`21308`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2632
msgid ""
"Refer to the \"Version added: 2.7.9\" notes in the module documentation "
"for specific details."
msgstr ""

#: ../../whatsnew/2.7.rst:2635
msgid ""
":func:`os.urandom` was changed to cache a file descriptor to "
"``/dev/urandom`` instead of reopening ``/dev/urandom`` on every call. "
"(Contributed by Alex Gaynor; :issue:`21305`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2639
msgid ""
":data:`hashlib.algorithms_guaranteed` and "
":data:`hashlib.algorithms_available` were backported from Python 3 to "
"make it easier for Python 2 applications to select the strongest "
"available hash algorithm. (Contributed by Alex Gaynor in :issue:`21307`)"
msgstr ""

#: ../../whatsnew/2.7.rst:2646
msgid "PEP 477: Backport ensurepip (PEP 453) to Python 2.7"
msgstr ""

#: ../../whatsnew/2.7.rst:2648
msgid ""
":pep:`477` approves the inclusion of the :pep:`453` ensurepip module and "
"the improved documentation that was enabled by it in the Python 2.7 "
"maintenance releases, appearing first in the Python 2.7.9 release."
msgstr ""

#: ../../whatsnew/2.7.rst:2654 ../../whatsnew/3.4.rst:183
msgid "Bootstrapping pip By Default"
msgstr ""

#: ../../whatsnew/2.7.rst:2656
msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a "
"standard cross-platform mechanism to bootstrap the pip installer into "
"Python installations. The version of ``pip`` included with Python 2.7.9 "
"is ``pip`` 1.5.6, and future 2.7.x maintenance releases will update the "
"bundled version to the latest version of ``pip`` that is available at the"
" time of creating the release candidate."
msgstr ""

#: ../../whatsnew/2.7.rst:2663
msgid ""
"By default, the commands ``pip``, ``pipX`` and ``pipX.Y`` will be "
"installed on all platforms (where X.Y stands for the version of the "
"Python installation), along with the ``pip`` Python package and its "
"dependencies."
msgstr ""

#: ../../whatsnew/2.7.rst:2667
msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-"
"unix>`, the ``make install`` and ``make altinstall`` commands do not "
"bootstrap ``pip`` by default.  This behaviour can be controlled through "
"configure options, and overridden through Makefile options."
msgstr ""

#: ../../whatsnew/2.7.rst:2672 ../../whatsnew/3.4.rst:211
msgid ""
"On Windows and Mac OS X, the CPython installers now default to installing"
" ``pip`` along with CPython itself (users may opt out of installing it "
"during the installation process). Window users will need to opt in to the"
" automatic ``PATH`` modifications to have ``pip`` available from the "
"command line by default, otherwise it can still be accessed through the "
"Python launcher for Windows as ``py -m pip``."
msgstr ""

#: ../../whatsnew/2.7.rst:2679 ../../whatsnew/3.4.rst:218
msgid ""
"As `discussed in the PEP`__, platform packagers may choose not to install"
" these commands by default, as long as, when invoked, they provide clear "
"and simple directions on how to install them on that platform (usually "
"using the system package manager)."
msgstr ""

#: ../../whatsnew/2.7.rst:2688 ../../whatsnew/3.4.rst:238
msgid "Documentation Changes"
msgstr ""

#: ../../whatsnew/2.7.rst:2690
msgid ""
"As part of this change, the :ref:`installing-index` and :ref"
":`distributing-index` sections of the documentation have been completely "
"redesigned as short getting started and FAQ documents. Most packaging "
"documentation has now been moved out to the Python Packaging Authority "
"maintained `Python Packaging User Guide <http://packaging.python.org>`__ "
"and the documentation of the individual projects."
msgstr ""

#: ../../whatsnew/2.7.rst:2698 ../../whatsnew/3.4.rst:248
msgid ""
"However, as this migration is currently still incomplete, the legacy "
"versions of those guides remaining available as :ref:`install-index` and "
":ref:`distutils-index`."
msgstr ""

#: ../../whatsnew/2.7.rst:2705 ../../whatsnew/3.4.rst:255
msgid ":pep:`453` -- Explicit bootstrapping of pip in Python installations"
msgstr ""

#: ../../whatsnew/2.7.rst:2705 ../../whatsnew/3.4.rst:255
msgid ""
"PEP written by Donald Stufft and Nick Coghlan, implemented by Donald "
"Stufft, Nick Coghlan, Martin von L√∂wis and Ned Deily."
msgstr ""

#: ../../whatsnew/2.7.rst:2709 ../../whatsnew/3.4.rst:2524
msgid ""
"PEP 476: Enabling certificate verification by default for stdlib http "
"clients"
msgstr ""

#: ../../whatsnew/2.7.rst:2711
msgid ""
":pep:`476` updated :mod:`httplib` and modules which use it, such as "
":mod:`urllib2` and :mod:`xmlrpclib`, to now verify that the server "
"presents a certificate which is signed by a Certificate Authority in the "
"platform trust store and whose hostname matches the hostname being "
"requested by default, significantly improving security for many "
"applications. This change was made in the Python 2.7.9 release."
msgstr ""

#: ../../whatsnew/2.7.rst:2718 ../../whatsnew/3.4.rst:2532
msgid ""
"For applications which require the old previous behavior, they can pass "
"an alternate context::"
msgstr ""

#: ../../whatsnew/2.7.rst:2735
msgid "PEP 493: HTTPS verification migration tools for Python 2.7"
msgstr ""

#: ../../whatsnew/2.7.rst:2737
msgid ""
":pep:`493` provides additional migration tools to support a more "
"incremental infrastructure upgrade process for environments containing "
"applications and services relying on the historically permissive "
"processing of server certificates when establishing client HTTPS "
"connections.  These additions were made in the Python 2.7.12 release."
msgstr ""

#: ../../whatsnew/2.7.rst:2743
msgid ""
"These tools are intended for use in cases where affected applications and"
" services can't be modified to explicitly pass a more permissive SSL "
"context when establishing the connection."
msgstr ""

#: ../../whatsnew/2.7.rst:2747
msgid ""
"For applications and services which can't be modified at all, the new "
"``PYTHONHTTPSVERIFY`` environment variable may be set to ``0`` to revert "
"an entire Python process back to the default permissive behaviour of "
"Python 2.7.8 and earlier."
msgstr ""

#: ../../whatsnew/2.7.rst:2752
msgid ""
"For cases where the connection establishment code can't be modified, but "
"the overall application can be, the new "
":func:`ssl._https_verify_certificates` function can be used to adjust the"
" default behaviour at runtime."
msgstr ""

#: ../../whatsnew/2.7.rst:2758 ../../whatsnew/3.5.rst:2544
#: ../../whatsnew/3.6.rst:2381
msgid "New ``make regen-all`` build target"
msgstr ""

#: ../../whatsnew/2.7.rst:2760 ../../whatsnew/3.5.rst:2546
#: ../../whatsnew/3.6.rst:2383
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be"
" compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to "
"implicitly recompile generated files based on file modification times."
msgstr ""

#: ../../whatsnew/2.7.rst:2765 ../../whatsnew/3.5.rst:2551
#: ../../whatsnew/3.6.rst:2388
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version "
"of Python has already been built based on the pregenerated versions)."
msgstr ""

#: ../../whatsnew/2.7.rst:2769 ../../whatsnew/3.5.rst:2555
#: ../../whatsnew/3.6.rst:2392
msgid ""
"More selective regeneration targets are also defined - see "
":source:`Makefile.pre.in` for details."
msgstr ""

#: ../../whatsnew/2.7.rst:2772 ../../whatsnew/2.7.rst:2785
#: ../../whatsnew/3.5.rst:2558 ../../whatsnew/3.5.rst:2571
#: ../../whatsnew/3.6.rst:2395 ../../whatsnew/3.6.rst:2408
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2778 ../../whatsnew/3.5.rst:2564
#: ../../whatsnew/3.6.rst:2401
msgid "Removal of ``make touch`` build target"
msgstr ""

#: ../../whatsnew/2.7.rst:2780 ../../whatsnew/3.5.rst:2566
#: ../../whatsnew/3.6.rst:2403
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr ""

#: ../../whatsnew/2.7.rst:2783 ../../whatsnew/3.5.rst:2569
#: ../../whatsnew/3.6.rst:2406
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr ""

#: ../../whatsnew/2.7.rst:2796
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this "
"article: Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray, Hugh "
"Secker-Walker."
msgstr ""

#: ../../whatsnew/3.0.rst:3
msgid "What's New In Python 3.0"
msgstr ""

#: ../../whatsnew/3.0.rst:7
msgid "Guido van Rossum"
msgstr ""

#: ../../whatsnew/3.0.rst:54
msgid ""
"This article explains the new features in Python 3.0, compared to 2.6. "
"Python 3.0, also known as \"Python 3000\" or \"Py3K\", is the first ever "
"*intentionally backwards incompatible* Python release.  There are more "
"changes than in a typical release, and more that are important for all "
"Python users.  Nevertheless, after digesting the changes, you'll find "
"that Python really hasn't changed all that much -- by and large, we're "
"mostly fixing well-known annoyances and warts, and removing a lot of old "
"cruft."
msgstr ""

#: ../../whatsnew/3.0.rst:63
msgid ""
"This article doesn't attempt to provide a complete specification of all "
"new features, but instead tries to give a convenient overview. For full "
"details, you should refer to the documentation for Python 3.0, and/or the"
" many PEPs referenced in the text. If you want to understand the complete"
" implementation and design rationale for a particular feature, PEPs "
"usually have more details than the regular documentation; but note that "
"PEPs usually are not kept up-to-date once a feature has been fully "
"implemented."
msgstr ""

#: ../../whatsnew/3.0.rst:72
msgid ""
"Due to time constraints this document is not as complete as it should "
"have been.  As always for a new release, the ``Misc/NEWS`` file in the "
"source distribution contains a wealth of detailed information about every"
" small thing that was changed."
msgstr ""

#: ../../whatsnew/3.0.rst:89
msgid "Common Stumbling Blocks"
msgstr ""

#: ../../whatsnew/3.0.rst:91
msgid ""
"This section lists those few changes that are most likely to trip you up "
"if you're used to Python 2.5."
msgstr ""

#: ../../whatsnew/3.0.rst:95
msgid "Print Is A Function"
msgstr ""

#: ../../whatsnew/3.0.rst:97
msgid ""
"The ``print`` statement has been replaced with a :func:`print` function, "
"with keyword arguments to replace most of the special syntax of the old "
"``print`` statement (:pep:`3105`).  Examples::"
msgstr ""

#: ../../whatsnew/3.0.rst:116
msgid "You can also customize the separator between items, e.g.::"
msgstr ""

#: ../../whatsnew/3.0.rst:120
msgid "which produces:"
msgstr ""

#: ../../whatsnew/3.0.rst:126
msgid "Note:"
msgstr ""

#: ../../whatsnew/3.0.rst:128
msgid ""
"The :func:`print` function doesn't support the \"softspace\" feature of "
"the old ``print`` statement.  For example, in Python 2.x, ``print "
"\"A\\n\", \"B\"`` would write ``\"A\\nB\\n\"``; but in Python 3.0, "
"``print(\"A\\n\", \"B\")`` writes ``\"A\\n B\\n\"``."
msgstr ""

#: ../../whatsnew/3.0.rst:133
msgid ""
"Initially, you'll be finding yourself typing the old ``print x`` a lot in"
" interactive mode.  Time to retrain your fingers to type ``print(x)`` "
"instead!"
msgstr ""

#: ../../whatsnew/3.0.rst:137
msgid ""
"When using the ``2to3`` source-to-source conversion tool, all ``print`` "
"statements are automatically converted to :func:`print` function calls, "
"so this is mostly a non-issue for larger projects."
msgstr ""

#: ../../whatsnew/3.0.rst:143
msgid "Views And Iterators Instead Of Lists"
msgstr ""

#: ../../whatsnew/3.0.rst:145
msgid "Some well-known APIs no longer return lists:"
msgstr ""

#: ../../whatsnew/3.0.rst:147
msgid ""
":class:`dict` methods :meth:`dict.keys`, :meth:`dict.items` and "
":meth:`dict.values` return \"views\" instead of lists.  For example, this"
" no longer works: ``k = d.keys(); k.sort()``.  Use ``k = sorted(d)`` "
"instead (this works in Python 2.5 too and is just as efficient)."
msgstr ""

#: ../../whatsnew/3.0.rst:153
msgid ""
"Also, the :meth:`dict.iterkeys`, :meth:`dict.iteritems` and "
":meth:`dict.itervalues` methods are no longer supported."
msgstr ""

#: ../../whatsnew/3.0.rst:156
msgid ""
":func:`map` and :func:`filter` return iterators.  If you really need a "
"list and the input sequences are all of equal length, a quick fix is to "
"wrap :func:`map` in :func:`list`, e.g. ``list(map(...))``, but a better "
"fix is often to use a list comprehension (especially when the original "
"code uses :keyword:`lambda`), or rewriting the code so it doesn't need a "
"list at all.  Particularly tricky is :func:`map` invoked for the side "
"effects of the function; the correct transformation is to use a regular "
":keyword:`for` loop (since creating a list would just be wasteful)."
msgstr ""

#: ../../whatsnew/3.0.rst:167
msgid ""
"If the input sequences are not of equal length, :func:`map` will stop at "
"the termination of the shortest of the sequences. For full compatibility "
"with :func:`map` from Python 2.x, also wrap the sequences in "
":func:`itertools.zip_longest`, e.g. ``map(func, *sequences)`` becomes "
"``list(map(func, itertools.zip_longest(*sequences)))``."
msgstr ""

#: ../../whatsnew/3.0.rst:173
msgid ""
":func:`range` now behaves like :func:`xrange` used to behave, except it "
"works with values of arbitrary size.  The latter no longer exists."
msgstr ""

#: ../../whatsnew/3.0.rst:177
msgid ":func:`zip` now returns an iterator."
msgstr ""

#: ../../whatsnew/3.0.rst:180
msgid "Ordering Comparisons"
msgstr ""

#: ../../whatsnew/3.0.rst:182
msgid "Python 3.0 has simplified the rules for ordering comparisons:"
msgstr ""

#: ../../whatsnew/3.0.rst:184
msgid ""
"The ordering comparison operators (``<``, ``<=``, ``>=``, ``>``) raise a "
"TypeError exception when the operands don't have a meaningful natural "
"ordering.  Thus, expressions like ``1 < ''``, ``0 > None`` or ``len <= "
"len`` are no longer valid, and e.g. ``None < None`` raises "
":exc:`TypeError` instead of returning ``False``.  A corollary is that "
"sorting a heterogeneous list no longer makes sense -- all the elements "
"must be comparable to each other.  Note that this does not apply to the "
"``==`` and ``!=`` operators: objects of different incomparable types "
"always compare unequal to each other."
msgstr ""

#: ../../whatsnew/3.0.rst:195
msgid ""
":meth:`builtin.sorted` and :meth:`list.sort` no longer accept the *cmp* "
"argument providing a comparison function.  Use the *key* argument "
"instead. N.B. the *key* and *reverse* arguments are now \"keyword-only\"."
msgstr ""

#: ../../whatsnew/3.0.rst:200
msgid ""
"The :func:`cmp` function should be treated as gone, and the "
":meth:`__cmp__` special method is no longer supported.  Use "
":meth:`__lt__` for sorting, :meth:`__eq__` with :meth:`__hash__`, and "
"other rich comparisons as needed. (If you really need the :func:`cmp` "
"functionality, you could use the expression ``(a > b) - (a < b)`` as the "
"equivalent for ``cmp(a, b)``.)"
msgstr ""

#: ../../whatsnew/3.0.rst:207
msgid "Integers"
msgstr ""

#: ../../whatsnew/3.0.rst:209
msgid ""
":pep:`237`: Essentially, :class:`long` renamed to :class:`int`. That is, "
"there is only one built-in integral type, named :class:`int`; but it "
"behaves mostly like the old :class:`long` type."
msgstr ""

#: ../../whatsnew/3.0.rst:213
msgid ""
":pep:`238`: An expression like ``1/2`` returns a float.  Use ``1//2`` to "
"get the truncating behavior.  (The latter syntax has existed for years, "
"at least since Python 2.2.)"
msgstr ""

#: ../../whatsnew/3.0.rst:217
msgid ""
"The :data:`sys.maxint` constant was removed, since there is no longer a "
"limit to the value of integers.  However, :data:`sys.maxsize` can be used"
" as an integer larger than any practical list or string index.  It "
"conforms to the implementation's \"natural\" integer size and is "
"typically the same as :data:`sys.maxint` in previous releases on the same"
" platform (assuming the same build options)."
msgstr ""

#: ../../whatsnew/3.0.rst:224
msgid ""
"The :func:`repr` of a long integer doesn't include the trailing ``L`` "
"anymore, so code that unconditionally strips that character will chop off"
" the last digit instead.  (Use :func:`str` instead.)"
msgstr ""

#: ../../whatsnew/3.0.rst:228
msgid "Octal literals are no longer of the form ``0720``; use ``0o720`` instead."
msgstr ""

#: ../../whatsnew/3.0.rst:232
msgid "Text Vs. Data Instead Of Unicode Vs. 8-bit"
msgstr ""

#: ../../whatsnew/3.0.rst:234
msgid "Everything you thought you knew about binary data and Unicode has changed."
msgstr ""

#: ../../whatsnew/3.0.rst:237
msgid ""
"Python 3.0 uses the concepts of *text* and (binary) *data* instead of "
"Unicode strings and 8-bit strings.  All text is Unicode; however "
"*encoded* Unicode is represented as binary data.  The type used to hold "
"text is :class:`str`, the type used to hold data is :class:`bytes`.  The "
"biggest difference with the 2.x situation is that any attempt to mix text"
" and data in Python 3.0 raises :exc:`TypeError`, whereas if you were to "
"mix Unicode and 8-bit strings in Python 2.x, it would work if the 8-bit "
"string happened to contain only 7-bit (ASCII) bytes, but you would get "
":exc:`UnicodeDecodeError` if it contained non-ASCII values.  This value-"
"specific behavior has caused numerous sad faces over the years."
msgstr ""

#: ../../whatsnew/3.0.rst:250
msgid ""
"As a consequence of this change in philosophy, pretty much all code that "
"uses Unicode, encodings or binary data most likely has to change.  The "
"change is for the better, as in the 2.x world there were numerous bugs "
"having to do with mixing encoded and unencoded text.  To be prepared in "
"Python 2.x, start using :class:`unicode` for all unencoded text, and "
":class:`str` for binary or encoded data only.  Then the ``2to3`` tool "
"will do most of the work for you."
msgstr ""

#: ../../whatsnew/3.0.rst:258
msgid ""
"You can no longer use ``u\"...\"`` literals for Unicode text. However, "
"you must use ``b\"...\"`` literals for binary data."
msgstr ""

#: ../../whatsnew/3.0.rst:261
msgid ""
"As the :class:`str` and :class:`bytes` types cannot be mixed, you must "
"always explicitly convert between them.  Use :meth:`str.encode` to go "
"from :class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from "
":class:`bytes` to :class:`str`.  You can also use ``bytes(s, "
"encoding=...)`` and ``str(b, encoding=...)``, respectively."
msgstr ""

#: ../../whatsnew/3.0.rst:268
msgid ""
"Like :class:`str`, the :class:`bytes` type is immutable.  There is a "
"separate *mutable* type to hold buffered binary data, :class:`bytearray`."
"  Nearly all APIs that accept :class:`bytes` also accept "
":class:`bytearray`.  The mutable API is based on "
":class:`collections.MutableSequence`."
msgstr ""

#: ../../whatsnew/3.0.rst:274
msgid ""
"All backslashes in raw string literals are interpreted literally. This "
"means that ``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated"
" specially.  For example, ``r'\\u20ac'`` is a string of 6 characters in "
"Python 3.0, whereas in 2.6, ``ur'\\u20ac'`` was the single \"euro\" "
"character.  (Of course, this change only affects raw string literals; the"
" euro character is ``'\\u20ac'`` in Python 3.0.)"
msgstr ""

#: ../../whatsnew/3.0.rst:281
msgid ""
"The built-in :class:`basestring` abstract type was removed.  Use "
":class:`str` instead.  The :class:`str` and :class:`bytes` types don't "
"have functionality enough in common to warrant a shared base class.  The "
"``2to3`` tool (see below) replaces every occurrence of "
":class:`basestring` with :class:`str`."
msgstr ""

#: ../../whatsnew/3.0.rst:287
msgid ""
"Files opened as text files (still the default mode for :func:`open`) "
"always use an encoding to map between strings (in memory) and bytes (on "
"disk).  Binary files (opened with a ``b`` in the mode argument) always "
"use bytes in memory.  This means that if a file is opened using an "
"incorrect mode or encoding, I/O will likely fail loudly, instead of "
"silently producing incorrect data.  It also means that even Unix users "
"will have to specify the correct mode (text or binary) when opening a "
"file.  There is a platform-dependent default encoding, which on Unixy "
"platforms can be set with the ``LANG`` environment variable (and "
"sometimes also with some other platform-specific locale-related "
"environment variables).  In many cases, but not all, the system default "
"is UTF-8; you should never count on this default.  Any application "
"reading or writing more than pure ASCII text should probably have a way "
"to override the encoding. There is no longer any need for using the "
"encoding-aware streams in the :mod:`codecs` module."
msgstr ""

#: ../../whatsnew/3.0.rst:304
msgid ""
"The initial values of :data:`sys.stdin`, :data:`sys.stdout` and "
":data:`sys.stderr` are now unicode-only text files (i.e., they are "
"instances of :class:`io.TextIOBase`).  To read and write bytes data with "
"these streams, you need to use their :data:`io.TextIOBase.buffer` "
"attribute."
msgstr ""

#: ../../whatsnew/3.0.rst:310
msgid ""
"Filenames are passed to and returned from APIs as (Unicode) strings. This"
" can present platform-specific problems because on some platforms "
"filenames are arbitrary byte strings.  (On the other hand, on Windows "
"filenames are natively stored as Unicode.)  As a work-around, most APIs "
"(e.g. :func:`open` and many functions in the :mod:`os` module) that take "
"filenames accept :class:`bytes` objects as well as strings, and a few "
"APIs have a way to ask for a :class:`bytes` return value.  Thus, "
":func:`os.listdir` returns a list of :class:`bytes` instances if the "
"argument is a :class:`bytes` instance, and :func:`os.getcwdb` returns the"
" current working directory as a :class:`bytes` instance.  Note that when "
":func:`os.listdir` returns a list of strings, filenames that cannot be "
"decoded properly are omitted rather than raising :exc:`UnicodeError`."
msgstr ""

#: ../../whatsnew/3.0.rst:325
msgid ""
"Some system APIs like :data:`os.environ` and :data:`sys.argv` can also "
"present problems when the bytes made available by the system is not "
"interpretable using the default encoding.  Setting the ``LANG`` variable "
"and rerunning the program is probably the best approach."
msgstr ""

#: ../../whatsnew/3.0.rst:330
msgid ""
":pep:`3138`: The :func:`repr` of a string no longer escapes non-ASCII "
"characters.  It still escapes control characters and code points with "
"non-printable status in the Unicode standard, however."
msgstr ""

#: ../../whatsnew/3.0.rst:334
msgid ":pep:`3120`: The default source encoding is now UTF-8."
msgstr ""

#: ../../whatsnew/3.0.rst:336
msgid ""
":pep:`3131`: Non-ASCII letters are now allowed in identifiers. (However, "
"the standard library remains ASCII-only with the exception of contributor"
" names in comments.)"
msgstr ""

#: ../../whatsnew/3.0.rst:340
msgid ""
"The :mod:`StringIO` and :mod:`cStringIO` modules are gone.  Instead, "
"import the :mod:`io` module and use :class:`io.StringIO` or "
":class:`io.BytesIO` for text and data respectively."
msgstr ""

#: ../../whatsnew/3.0.rst:344
msgid "See also the :ref:`unicode-howto`, which was updated for Python 3.0."
msgstr ""

#: ../../whatsnew/3.0.rst:348
msgid "Overview Of Syntax Changes"
msgstr ""

#: ../../whatsnew/3.0.rst:350
msgid ""
"This section gives a brief overview of every *syntactic* change in Python"
" 3.0."
msgstr ""

#: ../../whatsnew/3.0.rst:354
msgid "New Syntax"
msgstr ""

#: ../../whatsnew/3.0.rst:356
msgid ""
":pep:`3107`: Function argument and return value annotations.  This "
"provides a standardized way of annotating a function's parameters and "
"return value.  There are no semantics attached to such annotations except"
" that they can be introspected at runtime using the "
":attr:`__annotations__` attribute.  The intent is to encourage "
"experimentation through metaclasses, decorators or frameworks."
msgstr ""

#: ../../whatsnew/3.0.rst:363
msgid ""
":pep:`3102`: Keyword-only arguments.  Named parameters occurring after "
"``*args`` in the parameter list *must* be specified using keyword syntax "
"in the call.  You can also use a bare ``*`` in the parameter list to "
"indicate that you don't accept a variable-length argument list, but you "
"do have keyword-only arguments."
msgstr ""

#: ../../whatsnew/3.0.rst:369
msgid ""
"Keyword arguments are allowed after the list of base classes in a class "
"definition.  This is used by the new convention for specifying a "
"metaclass (see next section), but can be used for other purposes as well,"
" as long as the metaclass supports it."
msgstr ""

#: ../../whatsnew/3.0.rst:374
msgid ""
":pep:`3104`: :keyword:`nonlocal` statement.  Using ``nonlocal x`` you can"
" now assign directly to a variable in an outer (but non-global) scope.  "
":keyword:`!nonlocal` is a new reserved word."
msgstr ""

#: ../../whatsnew/3.0.rst:378
msgid ""
":pep:`3132`: Extended Iterable Unpacking.  You can now write things like "
"``a, b, *rest = some_sequence``.  And even ``*rest, a = stuff``.  The "
"``rest`` object is always a (possibly empty) list; the right-hand side "
"may be any iterable.  Example::"
msgstr ""

#: ../../whatsnew/3.0.rst:385
msgid "This sets *a* to ``0``, *b* to ``4``, and *rest* to ``[1, 2, 3]``."
msgstr ""

#: ../../whatsnew/3.0.rst:387
msgid ""
"Dictionary comprehensions: ``{k: v for k, v in stuff}`` means the same "
"thing as ``dict(stuff)`` but is more flexible.  (This is :pep:`274` "
"vindicated. :-)"
msgstr ""

#: ../../whatsnew/3.0.rst:391
msgid ""
"Set literals, e.g. ``{1, 2}``.  Note that ``{}`` is an empty dictionary; "
"use ``set()`` for an empty set.  Set comprehensions are also supported; "
"e.g., ``{x for x in stuff}`` means the same thing as ``set(stuff)`` but "
"is more flexible."
msgstr ""

#: ../../whatsnew/3.0.rst:396
msgid ""
"New octal literals, e.g. ``0o720`` (already in 2.6).  The old octal "
"literals (``0720``) are gone."
msgstr ""

#: ../../whatsnew/3.0.rst:399
msgid ""
"New binary literals, e.g. ``0b1010`` (already in 2.6), and there is a new"
" corresponding built-in function, :func:`bin`."
msgstr ""

#: ../../whatsnew/3.0.rst:402
msgid ""
"Bytes literals are introduced with a leading ``b`` or ``B``, and there is"
" a new corresponding built-in function, :func:`bytes`."
msgstr ""

#: ../../whatsnew/3.0.rst:406
msgid "Changed Syntax"
msgstr ""

#: ../../whatsnew/3.0.rst:408
msgid ""
":pep:`3109` and :pep:`3134`: new :keyword:`raise` statement syntax: "
":samp:`raise [{expr} [from {expr}]]`.  See below."
msgstr ""

#: ../../whatsnew/3.0.rst:411
msgid ""
":keyword:`!as` and :keyword:`with` are now reserved words.  (Since 2.6, "
"actually.)"
msgstr ""

#: ../../whatsnew/3.0.rst:414
msgid ""
"``True``, ``False``, and ``None`` are reserved words.  (2.6 partially "
"enforced the restrictions on ``None`` already.)"
msgstr ""

#: ../../whatsnew/3.0.rst:417
msgid ""
"Change from :keyword:`except` *exc*, *var* to :keyword:`!except` *exc* "
":keyword:`!as` *var*.  See :pep:`3110`."
msgstr ""

#: ../../whatsnew/3.0.rst:420
msgid ":pep:`3115`: New Metaclass Syntax.  Instead of::"
msgstr ""

#: ../../whatsnew/3.0.rst:426
msgid "you must now use::"
msgstr ""

#: ../../whatsnew/3.0.rst:431
msgid ""
"The module-global :data:`__metaclass__` variable is no longer supported."
"  (It was a crutch to make it easier to default to new-style classes "
"without deriving every class from :class:`object`.)"
msgstr ""

#: ../../whatsnew/3.0.rst:436
msgid ""
"List comprehensions no longer support the syntactic form :samp:`[... for "
"{var} in {item1}, {item2}, ...]`.  Use :samp:`[... for {var} in ({item1},"
" {item2}, ...)]` instead. Also note that list comprehensions have "
"different semantics: they are closer to syntactic sugar for a generator "
"expression inside a :func:`list` constructor, and in particular the loop "
"control variables are no longer leaked into the surrounding scope."
msgstr ""

#: ../../whatsnew/3.0.rst:444
msgid ""
"The *ellipsis* (``...``) can be used as an atomic expression anywhere.  "
"(Previously it was only allowed in slices.)  Also, it *must* now be "
"spelled as ``...``.  (Previously it could also be spelled as ``. . .``, "
"by a mere accident of the grammar.)"
msgstr ""

#: ../../whatsnew/3.0.rst:450
msgid "Removed Syntax"
msgstr ""

#: ../../whatsnew/3.0.rst:452
msgid ""
":pep:`3113`: Tuple parameter unpacking removed.  You can no longer write "
"``def foo(a, (b, c)): ...``. Use ``def foo(a, b_c): b, c = b_c`` instead."
msgstr ""

#: ../../whatsnew/3.0.rst:456
msgid "Removed backticks (use :func:`repr` instead)."
msgstr ""

#: ../../whatsnew/3.0.rst:458
msgid "Removed ``<>`` (use ``!=`` instead)."
msgstr ""

#: ../../whatsnew/3.0.rst:460
msgid ""
"Removed keyword: :func:`exec` is no longer a keyword; it remains as a "
"function.  (Fortunately the function syntax was also accepted in 2.x.)  "
"Also note that :func:`exec` no longer takes a stream argument; instead of"
" ``exec(f)`` you can use ``exec(f.read())``."
msgstr ""

#: ../../whatsnew/3.0.rst:465
msgid "Integer literals no longer support a trailing ``l`` or ``L``."
msgstr ""

#: ../../whatsnew/3.0.rst:467
msgid "String literals no longer support a leading ``u`` or ``U``."
msgstr ""

#: ../../whatsnew/3.0.rst:469
msgid ""
"The :keyword:`from` *module* :keyword:`import` ``*`` syntax is only "
"allowed at the module level, no longer inside functions."
msgstr ""

#: ../../whatsnew/3.0.rst:472
msgid ""
"The only acceptable syntax for relative imports is :samp:`from "
".[{module}] import {name}`.  All :keyword:`import` forms not starting "
"with ``.`` are interpreted as absolute imports.  (:pep:`328`)"
msgstr ""

#: ../../whatsnew/3.0.rst:476
msgid "Classic classes are gone."
msgstr ""

#: ../../whatsnew/3.0.rst:480
msgid "Changes Already Present In Python 2.6"
msgstr ""

#: ../../whatsnew/3.0.rst:482
msgid ""
"Since many users presumably make the jump straight from Python 2.5 to "
"Python 3.0, this section reminds the reader of new features that were "
"originally designed for Python 3.0 but that were back-ported to Python "
"2.6.  The corresponding sections in :ref:`whats-new-in-2.6` should be "
"consulted for longer descriptions."
msgstr ""

#: ../../whatsnew/3.0.rst:488
msgid ""
":ref:`pep-0343`.  The :keyword:`with` statement is now a standard feature"
" and no longer needs to be imported from the :mod:`__future__`. Also "
"check out :ref:`new-26-context-managers` and :ref:`new-module-"
"contextlib`."
msgstr ""

#: ../../whatsnew/3.0.rst:493
msgid ""
":ref:`pep-0366`.  This enhances the usefulness of the :option:`-m` option"
" when the referenced module lives in a package."
msgstr ""

#: ../../whatsnew/3.0.rst:496
msgid ":ref:`pep-0370`."
msgstr ""

#: ../../whatsnew/3.0.rst:498
msgid ":ref:`pep-0371`."
msgstr ""

#: ../../whatsnew/3.0.rst:500
msgid ""
":ref:`pep-3101`.  Note: the 2.6 description mentions the :meth:`format` "
"method for both 8-bit and Unicode strings.  In 3.0, only the :class:`str`"
" type (text strings with Unicode support) supports this method; the "
":class:`bytes` type does not.  The plan is to eventually make this the "
"only API for string formatting, and to start deprecating the ``%`` "
"operator in Python 3.1."
msgstr ""

#: ../../whatsnew/3.0.rst:507
msgid ""
":ref:`pep-3105`.  This is now a standard feature and no longer needs to "
"be imported from :mod:`__future__`.  More details were given above."
msgstr ""

#: ../../whatsnew/3.0.rst:510
msgid ""
":ref:`pep-3110`.  The :keyword:`except` *exc* :keyword:`!as` *var* syntax"
" is now standard and :keyword:`!except` *exc*, *var* is no longer "
"supported.  (Of course, the :keyword:`!as` *var* part is still optional.)"
msgstr ""

#: ../../whatsnew/3.0.rst:515
msgid ""
":ref:`pep-3112`.  The ``b\"...\"`` string literal notation (and its "
"variants like ``b'...'``, ``b\"\"\"...\"\"\"``, and ``br\"...\"``) now "
"produces a literal of type :class:`bytes`."
msgstr ""

#: ../../whatsnew/3.0.rst:519
msgid ""
":ref:`pep-3116`.  The :mod:`io` module is now the standard way of doing "
"file I/O.  The built-in :func:`open` function is now an alias for "
":func:`io.open` and has additional keyword arguments *encoding*, "
"*errors*, *newline* and *closefd*.  Also note that an invalid *mode* "
"argument now raises :exc:`ValueError`, not :exc:`IOError`.  The binary "
"file object underlying a text file object can be accessed as "
":attr:`f.buffer` (but beware that the text object maintains a buffer of "
"itself in order to speed up the encoding and decoding operations)."
msgstr ""

#: ../../whatsnew/3.0.rst:529
msgid ""
":ref:`pep-3118`.  The old builtin :func:`buffer` is now really gone; the "
"new builtin :func:`memoryview` provides (mostly) similar functionality."
msgstr ""

#: ../../whatsnew/3.0.rst:533
msgid ""
":ref:`pep-3119`.  The :mod:`abc` module and the ABCs defined in the "
":mod:`collections` module plays a somewhat more prominent role in the "
"language now, and built-in collection types like :class:`dict` and "
":class:`list` conform to the :class:`collections.MutableMapping` and "
":class:`collections.MutableSequence` ABCs, respectively."
msgstr ""

#: ../../whatsnew/3.0.rst:539
msgid ""
":ref:`pep-3127`.  As mentioned above, the new octal literal notation is "
"the only one supported, and binary literals have been added."
msgstr ""

#: ../../whatsnew/3.0.rst:543
msgid ":ref:`pep-3129`."
msgstr ""

#: ../../whatsnew/3.0.rst:545
msgid ""
":ref:`pep-3141`.  The :mod:`numbers` module is another new use of ABCs, "
"defining Python's \"numeric tower\".  Also note the new :mod:`fractions` "
"module which implements :class:`numbers.Rational`."
msgstr ""

#: ../../whatsnew/3.0.rst:551
msgid "Library Changes"
msgstr ""

#: ../../whatsnew/3.0.rst:553
msgid ""
"Due to time constraints, this document does not exhaustively cover the "
"very extensive changes to the standard library.  :pep:`3108` is the "
"reference for the major changes to the library.  Here's a capsule review:"
msgstr ""

#: ../../whatsnew/3.0.rst:558
msgid ""
"Many old modules were removed.  Some, like :mod:`gopherlib` (no longer "
"used) and :mod:`md5` (replaced by :mod:`hashlib`), were already "
"deprecated by :pep:`4`.  Others were removed as a result of the removal "
"of support for various platforms such as Irix, BeOS and Mac OS 9 (see "
":pep:`11`).  Some modules were also selected for removal in Python 3.0 "
"due to lack of use or because a better replacement exists.  See "
":pep:`3108` for an exhaustive list."
msgstr ""

#: ../../whatsnew/3.0.rst:566
msgid ""
"The :mod:`bsddb3` package was removed because its presence in the core "
"standard library has proved over time to be a particular burden for the "
"core developers due to testing instability and Berkeley DB's release "
"schedule.  However, the package is alive and well, externally maintained "
"at https://www.jcea.es/programacion/pybsddb.htm."
msgstr ""

#: ../../whatsnew/3.0.rst:572
msgid ""
"Some modules were renamed because their old name disobeyed :pep:`8`, or "
"for various other reasons.  Here's the list:"
msgstr ""

#: ../../whatsnew/3.0.rst:576 ../../whatsnew/3.2.rst:1808
msgid "Old Name"
msgstr ""

#: ../../whatsnew/3.0.rst:576
msgid "New Name"
msgstr ""

#: ../../whatsnew/3.0.rst:578
msgid "_winreg"
msgstr ""

#: ../../whatsnew/3.0.rst:578 ../../whatsnew/3.6.rst:1732
msgid "winreg"
msgstr ""

#: ../../whatsnew/3.0.rst:579
msgid "ConfigParser"
msgstr ""

#: ../../whatsnew/3.0.rst:579 ../../whatsnew/3.2.rst:2128
#: ../../whatsnew/3.5.rst:990
msgid "configparser"
msgstr ""

#: ../../whatsnew/3.0.rst:580
msgid "copy_reg"
msgstr ""

#: ../../whatsnew/3.0.rst:580
msgid "copyreg"
msgstr ""

#: ../../whatsnew/3.0.rst:581
msgid "Queue"
msgstr ""

#: ../../whatsnew/3.0.rst:581 ../../whatsnew/3.7.rst:1229
msgid "queue"
msgstr ""

#: ../../whatsnew/3.0.rst:582
msgid "SocketServer"
msgstr ""

#: ../../whatsnew/3.0.rst:582 ../../whatsnew/3.3.rst:1906
#: ../../whatsnew/3.6.rst:1429 ../../whatsnew/3.7.rst:1298
msgid "socketserver"
msgstr ""

#: ../../whatsnew/3.0.rst:583
msgid "markupbase"
msgstr ""

#: ../../whatsnew/3.0.rst:583
msgid "_markupbase"
msgstr ""

#: ../../whatsnew/3.0.rst:584
msgid "repr"
msgstr ""

#: ../../whatsnew/3.0.rst:584 ../../whatsnew/3.2.rst:1144
msgid "reprlib"
msgstr ""

#: ../../whatsnew/3.0.rst:585
msgid "test.test_support"
msgstr ""

#: ../../whatsnew/3.0.rst:585
msgid "test.support"
msgstr ""

#: ../../whatsnew/3.0.rst:588
msgid ""
"A common pattern in Python 2.x is to have one version of a module "
"implemented in pure Python, with an optional accelerated version "
"implemented as a C extension; for example, :mod:`pickle` and "
":mod:`cPickle`.  This places the burden of importing the accelerated "
"version and falling back on the pure Python version on each user of these"
" modules.  In Python 3.0, the accelerated versions are considered "
"implementation details of the pure Python versions. Users should always "
"import the standard version, which attempts to import the accelerated "
"version and falls back to the pure Python version.  The :mod:`pickle` / "
":mod:`cPickle` pair received this treatment.  The :mod:`profile` module "
"is on the list for 3.1.  The :mod:`StringIO` module has been turned into "
"a class in the :mod:`io` module."
msgstr ""

#: ../../whatsnew/3.0.rst:602
msgid ""
"Some related modules have been grouped into packages, and usually the "
"submodule names have been simplified.  The resulting new packages are:"
msgstr ""

#: ../../whatsnew/3.0.rst:606
msgid ""
":mod:`dbm` (:mod:`anydbm`, :mod:`dbhash`, :mod:`dbm`, :mod:`dumbdbm`, "
":mod:`gdbm`, :mod:`whichdb`)."
msgstr ""

#: ../../whatsnew/3.0.rst:609
msgid ":mod:`html` (:mod:`HTMLParser`, :mod:`htmlentitydefs`)."
msgstr ""

#: ../../whatsnew/3.0.rst:611
msgid ""
":mod:`http` (:mod:`httplib`, :mod:`BaseHTTPServer`, :mod:`CGIHTTPServer`,"
" :mod:`SimpleHTTPServer`, :mod:`Cookie`, :mod:`cookielib`)."
msgstr ""

#: ../../whatsnew/3.0.rst:615
msgid ""
":mod:`tkinter` (all :mod:`Tkinter`-related modules except :mod:`turtle`)."
"  The target audience of :mod:`turtle` doesn't really care about "
":mod:`tkinter`.  Also note that as of Python 2.6, the functionality of "
":mod:`turtle` has been greatly enhanced."
msgstr ""

#: ../../whatsnew/3.0.rst:620
msgid ""
":mod:`urllib` (:mod:`urllib`, :mod:`urllib2`, :mod:`urlparse`, "
":mod:`robotparse`)."
msgstr ""

#: ../../whatsnew/3.0.rst:623
msgid ""
":mod:`xmlrpc` (:mod:`xmlrpclib`, :mod:`DocXMLRPCServer`, "
":mod:`SimpleXMLRPCServer`)."
msgstr ""

#: ../../whatsnew/3.0.rst:626
msgid ""
"Some other changes to standard library modules, not covered by "
":pep:`3108`:"
msgstr ""

#: ../../whatsnew/3.0.rst:629
msgid "Killed :mod:`sets`.  Use the built-in :func:`set` class."
msgstr ""

#: ../../whatsnew/3.0.rst:631
msgid ""
"Cleanup of the :mod:`sys` module: removed :func:`sys.exitfunc`, "
":func:`sys.exc_clear`, :data:`sys.exc_type`, :data:`sys.exc_value`, "
":data:`sys.exc_traceback`.  (Note that :data:`sys.last_type` etc. "
"remain.)"
msgstr ""

#: ../../whatsnew/3.0.rst:636
msgid ""
"Cleanup of the :class:`array.array` type: the :meth:`read` and "
":meth:`write` methods are gone; use :meth:`fromfile` and :meth:`tofile` "
"instead.  Also, the ``'c'`` typecode for array is gone -- use either "
"``'b'`` for bytes or ``'u'`` for Unicode characters."
msgstr ""

#: ../../whatsnew/3.0.rst:642
msgid ""
"Cleanup of the :mod:`operator` module: removed :func:`sequenceIncludes` "
"and :func:`isCallable`."
msgstr ""

#: ../../whatsnew/3.0.rst:645
msgid ""
"Cleanup of the :mod:`thread` module: :func:`acquire_lock` and "
":func:`release_lock` are gone; use :func:`acquire` and :func:`release` "
"instead."
msgstr ""

#: ../../whatsnew/3.0.rst:649
msgid "Cleanup of the :mod:`random` module: removed the :func:`jumpahead` API."
msgstr ""

#: ../../whatsnew/3.0.rst:651
msgid "The :mod:`new` module is gone."
msgstr ""

#: ../../whatsnew/3.0.rst:653
msgid ""
"The functions :func:`os.tmpnam`, :func:`os.tempnam` and "
":func:`os.tmpfile` have been removed in favor of the :mod:`tempfile` "
"module."
msgstr ""

#: ../../whatsnew/3.0.rst:657
msgid ""
"The :mod:`tokenize` module has been changed to work with bytes.  The main"
" entry point is now :func:`tokenize.tokenize`, instead of "
"generate_tokens."
msgstr ""

#: ../../whatsnew/3.0.rst:661
msgid ""
":data:`string.letters` and its friends (:data:`string.lowercase` and "
":data:`string.uppercase`) are gone.  Use :data:`string.ascii_letters` "
"etc. instead.  (The reason for the removal is that :data:`string.letters`"
" and friends had locale-specific behavior, which is a bad idea for such "
"attractively-named global \"constants\".)"
msgstr ""

#: ../../whatsnew/3.0.rst:668
msgid ""
"Renamed module :mod:`__builtin__` to :mod:`builtins` (removing the "
"underscores, adding an 's').  The :data:`__builtins__` variable found in "
"most global namespaces is unchanged.  To modify a builtin, you should use"
" :mod:`builtins`, not :data:`__builtins__`!"
msgstr ""

#: ../../whatsnew/3.0.rst:675
msgid ":pep:`3101`: A New Approach To String Formatting"
msgstr ""

#: ../../whatsnew/3.0.rst:677
msgid ""
"A new system for  built-in string formatting operations replaces the "
"``%`` string  formatting operator.   (However, the ``%``  operator is "
"still supported;  it will  be deprecated in  Python 3.1  and removed from"
" the language at some later time.)  Read :pep:`3101` for the full scoop."
msgstr ""

#: ../../whatsnew/3.0.rst:685
msgid "Changes To Exceptions"
msgstr ""

#: ../../whatsnew/3.0.rst:687
msgid ""
"The APIs for raising and catching exception have been cleaned up and new "
"powerful features added:"
msgstr ""

#: ../../whatsnew/3.0.rst:690
msgid ""
":pep:`352`: All exceptions must be derived (directly or indirectly) from "
":exc:`BaseException`.  This is the root of the exception hierarchy.  This"
" is not new as a recommendation, but the *requirement* to inherit from "
":exc:`BaseException` is new.  (Python 2.6 still allowed classic classes "
"to be raised, and placed no restriction on what you can catch.)  As a "
"consequence, string exceptions are finally truly and utterly dead."
msgstr ""

#: ../../whatsnew/3.0.rst:698
msgid ""
"Almost all exceptions should actually derive from :exc:`Exception`; "
":exc:`BaseException` should only be used as a base class for exceptions "
"that should only be handled at the top level, such as :exc:`SystemExit` "
"or :exc:`KeyboardInterrupt`.  The recommended idiom for handling all "
"exceptions except for this latter category is to use :keyword:`except` "
":exc:`Exception`."
msgstr ""

#: ../../whatsnew/3.0.rst:705
msgid ":exc:`StandardError` was removed."
msgstr ""

#: ../../whatsnew/3.0.rst:707
msgid ""
"Exceptions no longer behave as sequences.  Use the :attr:`args` attribute"
" instead."
msgstr ""

#: ../../whatsnew/3.0.rst:710
msgid ""
":pep:`3109`: Raising exceptions.  You must now use :samp:`raise "
"{Exception}({args})` instead of :samp:`raise {Exception}, {args}`. "
"Additionally, you can no longer explicitly specify a traceback; instead, "
"if you *have* to do this, you can assign directly to the "
":attr:`__traceback__` attribute (see below)."
msgstr ""

#: ../../whatsnew/3.0.rst:716
msgid ""
":pep:`3110`: Catching exceptions.  You must now use :samp:`except "
"{SomeException} as {variable}` instead of :samp:`except {SomeException}, "
"{variable}`.  Moreover, the *variable* is explicitly deleted when the "
":keyword:`except` block is left."
msgstr ""

#: ../../whatsnew/3.0.rst:722
msgid ""
":pep:`3134`: Exception chaining.  There are two cases: implicit chaining "
"and explicit chaining.  Implicit chaining happens when an exception is "
"raised in an :keyword:`except` or :keyword:`finally` handler block.  This"
" usually happens due to a bug in the handler block; we call this a "
"*secondary* exception.  In this case, the original exception (that was "
"being handled) is saved as the :attr:`__context__` attribute of the "
"secondary exception. Explicit chaining is invoked with this syntax::"
msgstr ""

#: ../../whatsnew/3.0.rst:733
msgid ""
"(where *primary_exception* is any expression that produces an exception "
"object, probably an exception that was previously caught). In this case, "
"the primary exception is stored on the :attr:`__cause__` attribute of the"
" secondary exception.  The traceback printed when an unhandled exception "
"occurs walks the chain of :attr:`__cause__` and :attr:`__context__` "
"attributes and prints a separate traceback for each component of the "
"chain, with the primary exception at the top.  (Java users may recognize "
"this behavior.)"
msgstr ""

#: ../../whatsnew/3.0.rst:742
msgid ""
":pep:`3134`: Exception objects now store their traceback as the "
":attr:`__traceback__` attribute.  This means that an exception object now"
" contains all the information pertaining to an exception, and there are "
"fewer reasons to use :func:`sys.exc_info` (though the latter is not "
"removed)."
msgstr ""

#: ../../whatsnew/3.0.rst:748
msgid ""
"A few exception messages are improved when Windows fails to load an "
"extension module.  For example, ``error code 193`` is now ``%1 is not a "
"valid Win32 application``.  Strings now deal with non-English locales."
msgstr ""

#: ../../whatsnew/3.0.rst:755
msgid "Miscellaneous Other Changes"
msgstr ""

#: ../../whatsnew/3.0.rst:758
msgid "Operators And Special Methods"
msgstr ""

#: ../../whatsnew/3.0.rst:760
msgid ""
"``!=`` now returns the opposite of ``==``, unless ``==`` returns "
":data:`NotImplemented`."
msgstr ""

#: ../../whatsnew/3.0.rst:763
msgid ""
"The concept of \"unbound methods\" has been removed from the language. "
"When referencing a method as a class attribute, you now get a plain "
"function object."
msgstr ""

#: ../../whatsnew/3.0.rst:767
msgid ""
":meth:`__getslice__`, :meth:`__setslice__` and :meth:`__delslice__` were "
"killed.  The syntax ``a[i:j]`` now translates to ``a.__getitem__(slice(i,"
" j))`` (or :meth:`__setitem__` or :meth:`__delitem__`, when used as an "
"assignment or deletion target, respectively)."
msgstr ""

#: ../../whatsnew/3.0.rst:773
msgid ""
":pep:`3114`: the standard :meth:`next` method has been renamed to "
":meth:`~iterator.__next__`."
msgstr ""

#: ../../whatsnew/3.0.rst:776
msgid ""
"The :meth:`__oct__` and :meth:`__hex__` special methods are removed -- "
":func:`oct` and :func:`hex` use :meth:`__index__` now to convert the "
"argument to an integer."
msgstr ""

#: ../../whatsnew/3.0.rst:780
msgid "Removed support for :attr:`__members__` and :attr:`__methods__`."
msgstr ""

#: ../../whatsnew/3.0.rst:782
msgid ""
"The function attributes named :attr:`func_X` have been renamed to use the"
" :data:`__X__` form, freeing up these names in the function attribute "
"namespace for user-defined attributes.  To wit, :attr:`func_closure`, "
":attr:`func_code`, :attr:`func_defaults`, :attr:`func_dict`, "
":attr:`func_doc`, :attr:`func_globals`, :attr:`func_name` were renamed to"
" :attr:`__closure__`, :attr:`__code__`, :attr:`__defaults__`, "
":attr:`~object.__dict__`, :attr:`__doc__`, :attr:`__globals__`, "
":attr:`~definition.__name__`, respectively."
msgstr ""

#: ../../whatsnew/3.0.rst:792
msgid ":meth:`__nonzero__` is now :meth:`__bool__`."
msgstr ""

#: ../../whatsnew/3.0.rst:795
msgid "Builtins"
msgstr ""

#: ../../whatsnew/3.0.rst:797
msgid ""
":pep:`3135`: New :func:`super`.  You can now invoke :func:`super` without"
" arguments and (assuming this is in a regular instance method defined "
"inside a :keyword:`class` statement) the right class and instance will "
"automatically be chosen.  With arguments, the behavior of :func:`super` "
"is unchanged."
msgstr ""

#: ../../whatsnew/3.0.rst:803
msgid ""
":pep:`3111`: :func:`raw_input` was renamed to :func:`input`.  That is, "
"the new :func:`input` function reads a line from :data:`sys.stdin` and "
"returns it with the trailing newline stripped. It raises :exc:`EOFError` "
"if the input is terminated prematurely. To get the old behavior of "
":func:`input`, use ``eval(input())``."
msgstr ""

#: ../../whatsnew/3.0.rst:809
msgid ""
"A new built-in function :func:`next` was added to call the "
":meth:`~iterator.__next__` method on an object."
msgstr ""

#: ../../whatsnew/3.0.rst:812
msgid ""
"The :func:`round` function rounding strategy and return type have "
"changed.  Exact halfway cases are now rounded to the nearest even result "
"instead of away from zero.  (For example, ``round(2.5)`` now returns "
"``2`` rather than ``3``.)  ``round(x[, n])`` now delegates to "
"``x.__round__([n])`` instead of always returning a float.  It generally "
"returns an integer when called with a single argument and a value of the "
"same type as ``x`` when called with two arguments."
msgstr ""

#: ../../whatsnew/3.0.rst:821
msgid "Moved :func:`intern` to :func:`sys.intern`."
msgstr ""

#: ../../whatsnew/3.0.rst:823
msgid "Removed: :func:`apply`.  Instead of ``apply(f, args)`` use ``f(*args)``."
msgstr ""

#: ../../whatsnew/3.0.rst:826
msgid ""
"Removed :func:`callable`.  Instead of ``callable(f)`` you can use "
"``isinstance(f, collections.Callable)``.  The :func:`operator.isCallable`"
" function is also gone."
msgstr ""

#: ../../whatsnew/3.0.rst:830
msgid ""
"Removed :func:`coerce`.  This function no longer serves a purpose now "
"that classic classes are gone."
msgstr ""

#: ../../whatsnew/3.0.rst:833
msgid ""
"Removed :func:`execfile`.  Instead of ``execfile(fn)`` use "
"``exec(open(fn).read())``."
msgstr ""

#: ../../whatsnew/3.0.rst:836
msgid ""
"Removed the :class:`file` type.  Use :func:`open`.  There are now several"
" different kinds of streams that open can return in the :mod:`io` module."
msgstr ""

#: ../../whatsnew/3.0.rst:839
msgid ""
"Removed :func:`reduce`.  Use :func:`functools.reduce` if you really need "
"it; however, 99 percent of the time an explicit :keyword:`for` loop is "
"more readable."
msgstr ""

#: ../../whatsnew/3.0.rst:843
msgid "Removed :func:`reload`.  Use :func:`imp.reload`."
msgstr ""

#: ../../whatsnew/3.0.rst:845
msgid "Removed. :meth:`dict.has_key` -- use the :keyword:`in` operator instead."
msgstr ""

#: ../../whatsnew/3.0.rst:854
msgid ""
"Due to time constraints, here is a *very* incomplete list of changes to "
"the C API."
msgstr ""

#: ../../whatsnew/3.0.rst:857
msgid ""
"Support for several platforms was dropped, including but not limited to "
"Mac OS 9, BeOS, RISCOS, Irix, and Tru64."
msgstr ""

#: ../../whatsnew/3.0.rst:860
msgid ":pep:`3118`: New Buffer API."
msgstr ""

#: ../../whatsnew/3.0.rst:862
msgid ":pep:`3121`: Extension Module Initialization & Finalization."
msgstr ""

#: ../../whatsnew/3.0.rst:864
msgid ":pep:`3123`: Making :c:macro:`PyObject_HEAD` conform to standard C."
msgstr ""

#: ../../whatsnew/3.0.rst:866
msgid "No more C API support for restricted execution."
msgstr ""

#: ../../whatsnew/3.0.rst:868
msgid ""
":c:func:`PyNumber_Coerce`, :c:func:`PyNumber_CoerceEx`, "
":c:func:`PyMember_Get`, and :c:func:`PyMember_Set` C APIs are removed."
msgstr ""

#: ../../whatsnew/3.0.rst:871
msgid ""
"New C API :c:func:`PyImport_ImportModuleNoBlock`, works like "
":c:func:`PyImport_ImportModule` but won't block on the import lock "
"(returning an error instead)."
msgstr ""

#: ../../whatsnew/3.0.rst:875
msgid ""
"Renamed the boolean conversion C-level slot and method: ``nb_nonzero`` is"
" now ``nb_bool``."
msgstr ""

#: ../../whatsnew/3.0.rst:878
msgid ""
"Removed :c:macro:`METH_OLDARGS` and :c:macro:`WITH_CYCLE_GC` from the C "
"API."
msgstr ""

#: ../../whatsnew/3.0.rst:884
msgid "Performance"
msgstr ""

#: ../../whatsnew/3.0.rst:886
#, python-format
msgid ""
"The net result of the 3.0 generalizations is that Python 3.0 runs the "
"pystone benchmark around 10% slower than Python 2.5.  Most likely the "
"biggest cause is the removal of special-casing for small integers. "
"There's room for improvement, but it will happen after 3.0 is released!"
msgstr ""

#: ../../whatsnew/3.0.rst:896
msgid "Porting To Python 3.0"
msgstr ""

#: ../../whatsnew/3.0.rst:898
msgid ""
"For porting existing Python 2.5 or 2.6 source code to Python 3.0, the "
"best strategy is the following:"
msgstr ""

#: ../../whatsnew/3.0.rst:901
msgid "(Prerequisite:) Start with excellent test coverage."
msgstr ""

#: ../../whatsnew/3.0.rst:903
msgid ""
"Port to Python 2.6.  This should be no more work than the average port "
"from Python 2.x to Python 2.(x+1).  Make sure all your tests pass."
msgstr ""

#: ../../whatsnew/3.0.rst:907
msgid ""
"(Still using 2.6:) Turn on the :option:`!-3` command line switch. This "
"enables warnings about features that will be removed (or change) in 3.0."
"  Run your test suite again, and fix code that you get warnings about "
"until there are no warnings left, and all your tests still pass."
msgstr ""

#: ../../whatsnew/3.0.rst:913
msgid ""
"Run the ``2to3`` source-to-source translator over your source code tree."
"  (See :ref:`2to3-reference` for more on this tool.)  Run the result of "
"the translation under Python 3.0.  Manually fix up any remaining issues, "
"fixing problems until all tests pass again."
msgstr ""

#: ../../whatsnew/3.0.rst:918
msgid ""
"It is not recommended to try to write source code that runs unchanged "
"under both Python 2.6 and 3.0; you'd have to use a very contorted coding "
"style, e.g. avoiding ``print`` statements, metaclasses, and much more.  "
"If you are maintaining a library that needs to support both Python 2.6 "
"and Python 3.0, the best approach is to modify step 3 above by editing "
"the 2.6 version of the source code and running the ``2to3`` translator "
"again, rather than editing the 3.0 version of the source code."
msgstr ""

#: ../../whatsnew/3.0.rst:927
msgid "For porting C extensions to Python 3.0, please see :ref:`cporting-howto`."
msgstr ""

#: ../../whatsnew/3.1.rst:3
msgid "What's New In Python 3.1"
msgstr ""

#: ../../whatsnew/3.1.rst:5 ../../whatsnew/3.2.rst:5 ../../whatsnew/3.8.rst:45
msgid "Raymond Hettinger"
msgstr ""

#: ../../whatsnew/3.1.rst:49
msgid "This article explains the new features in Python 3.1, compared to 3.0."
msgstr ""

#: ../../whatsnew/3.1.rst:53
msgid "PEP 372: Ordered Dictionaries"
msgstr ""

#: ../../whatsnew/3.1.rst:55
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary "
"order. Over the years, a number of authors have written alternative "
"implementations that remember the order that the keys were originally "
"inserted.  Based on the experiences from those implementations, a new "
":class:`collections.OrderedDict` class has been introduced."
msgstr ""

#: ../../whatsnew/3.1.rst:61
msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but"
" will iterate over keys and values in a guaranteed order depending on "
"when a key was first inserted.  If a new entry overwrites an existing "
"entry, the original insertion position is left unchanged.  Deleting an "
"entry and reinserting it will move it to the end."
msgstr ""

#: ../../whatsnew/3.1.rst:67
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets"
" configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for "
":func:`collections.namedtuple` now returns an ordered dictionary with the"
" values appearing in the same order as the underlying tuple indices.  The"
" :mod:`json` module is being built-out with an *object_pairs_hook* to "
"allow OrderedDicts to be built by the decoder. Support was also added for"
" third-party tools like `PyYAML <http://pyyaml.org/>`_."
msgstr ""

#: ../../whatsnew/3.1.rst:79
msgid ":pep:`372` - Ordered Dictionaries"
msgstr ""

#: ../../whatsnew/3.1.rst:79
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation "
"written by Raymond Hettinger."
msgstr ""

#: ../../whatsnew/3.1.rst:86
msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method "
"use a mini-language that now includes a simple, non-locale aware way to "
"format a number with a thousands separator.  That provides a way to "
"humanize a program's output, improving its professional appearance and "
"readability::"
msgstr ""

#: ../../whatsnew/3.1.rst:100
msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` "
"and :class:`decimal.Decimal`."
msgstr ""

#: ../../whatsnew/3.1.rst:103
msgid ""
"Discussions are underway about how to specify alternative separators like"
" dots, spaces, apostrophes, or underscores.  Locale-aware applications "
"should use the existing *n* format specifier which already has some "
"support for thousands separators."
msgstr ""

#: ../../whatsnew/3.1.rst:111
msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""

#: ../../whatsnew/3.1.rst:120
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can "
"now be executed directly by passing their name to the interpreter. The "
"directory/zipfile is automatically inserted as the first entry in "
"sys.path.  (Suggestion and initial patch by Andy Chu; revised patch by "
"Phillip J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:126
msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the "
"number of bits necessary to represent its argument in binary::"
msgstr ""

#: ../../whatsnew/3.1.rst:140
msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and"
" Mark Dickinson; :issue:`3439`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:143
msgid "The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""

#: ../../whatsnew/3.1.rst:149
msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir "
"{0} of {1}'``."
msgstr ""

#: ../../whatsnew/3.1.rst:152
msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:154
msgid ""
"The :func:`string.maketrans` function is deprecated and is replaced by "
"new static methods, :meth:`bytes.maketrans` and "
":meth:`bytearray.maketrans`. This change solves the confusion around "
"which types were supported by the :mod:`string` module. Now, "
":class:`str`, :class:`bytes`, and :class:`bytearray` each have their own "
"**maketrans** and **translate** methods with intermediate translation "
"tables of the appropriate type."
msgstr ""

#: ../../whatsnew/3.1.rst:161 ../../whatsnew/3.2.rst:2676
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:163
msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""

#: ../../whatsnew/3.1.rst:171
msgid ""
"With the new syntax, the :func:`contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""

#: ../../whatsnew/3.1.rst:174 ../../whatsnew/3.2.rst:2689
msgid ""
"(Contributed by Georg Brandl and Mattias Br√§ndstr√∂m; `appspot issue 53094"
" <https://codereview.appspot.com/53094>`_.)"
msgstr ""

#: ../../whatsnew/3.1.rst:177
msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously "
"it returned a float::"
msgstr ""

#: ../../whatsnew/3.1.rst:183
msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:185
msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating "
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating point numbers."
msgstr ""

#: ../../whatsnew/3.1.rst:190
msgid ""
"The significance is easily seen with a number like ``1.1`` which does not"
" have an exact equivalent in binary floating point.  Since there is no "
"exact equivalent, an expression like ``float('1.1')`` evaluates to the "
"nearest representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. "
"That nearest value was and still is used in subsequent floating point "
"calculations."
msgstr ""

#: ../../whatsnew/3.1.rst:198
msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as "
"``format(1.1, '.17g')`` which evaluated to ``'1.1000000000000001'``. The "
"advantage of using 17 digits was that it relied on IEEE-754 guarantees to"
" assure that ``eval(repr(1.1))`` would round-trip exactly to its original"
" value.  The disadvantage is that many people found the output to be "
"confusing (mistaking intrinsic limitations of binary floating point "
"representation as being a problem with Python itself)."
msgstr ""

#: ../../whatsnew/3.1.rst:207
msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that"
" get stored with the same underlying float value) and returns the "
"shortest representation."
msgstr ""

#: ../../whatsnew/3.1.rst:212
msgid ""
"The new algorithm tends to emit cleaner representations when possible, "
"but it does not change the underlying values.  So, it is still the case "
"that ``1.1 + 2.2 != 3.3`` even though the representations may suggest "
"otherwise."
msgstr ""

#: ../../whatsnew/3.1.rst:216
msgid ""
"The new algorithm depends on certain features in the underlying floating "
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols "
"assure cross-platform portability by using the old algorithm."
msgstr ""

#: ../../whatsnew/3.1.rst:221
msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr ""

#: ../../whatsnew/3.1.rst:226
msgid ""
"Added a :class:`collections.Counter` class to support convenient counting"
" of unique items in a sequence or iterable::"
msgstr ""

#: ../../whatsnew/3.1.rst:232
msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:234
msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget"
" set. The basic idea of ttk is to separate, to the extent possible, the "
"code implementing a widget's behavior from the code implementing its "
"appearance."
msgstr ""

#: ../../whatsnew/3.1.rst:238
msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:240
msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support "
"the context management protocol::"
msgstr ""

#: ../../whatsnew/3.1.rst:247 ../../whatsnew/3.2.rst:2328
msgid "(Contributed by Antoine Pitrou.)"
msgstr ""

#: ../../whatsnew/3.1.rst:249
msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal "
"object from a binary :class:`float`.  The conversion is exact but can "
"sometimes be surprising::"
msgstr ""

#: ../../whatsnew/3.1.rst:256
msgid ""
"The long decimal result shows the actual binary fraction being stored for"
" *1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""

#: ../../whatsnew/3.1.rst:260
msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr ""

#: ../../whatsnew/3.1.rst:262
msgid ""
"The :mod:`itertools` module grew two new functions.  The "
":func:`itertools.combinations_with_replacement` function is one of four "
"for generating combinatorics including permutations and Cartesian "
"products.  The :func:`itertools.compress` function mimics its namesake "
"from APL.  Also, the existing :func:`itertools.count` function now has an"
" optional *step* argument and can accept any type of counting sequence "
"including :class:`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""

#: ../../whatsnew/3.1.rst:283
msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional "
"names in the form _0, _1, etc.  This is useful when the field names are "
"being created by an external source such as a CSV header, SQL field list,"
" or user input::"
msgstr ""

#: ../../whatsnew/3.1.rst:300
msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:302
msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""

#: ../../whatsnew/3.1.rst:305
msgid "(Contributed by Gregory Smith.)"
msgstr ""

#: ../../whatsnew/3.1.rst:307
msgid ""
"The :mod:`logging` module now implements a simple "
":class:`logging.NullHandler` class for applications that are not using "
"logging but are calling library code that does.  Setting-up a null "
"handler will suppress spurious warnings such as \"No handlers could be "
"found for logger foo\"::"
msgstr ""

#: ../../whatsnew/3.1.rst:315
msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr ""

#: ../../whatsnew/3.1.rst:317
msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now"
" supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""

#: ../../whatsnew/3.1.rst:321
msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:323
msgid ""
"The :mod:`pdb` module can now access and display source code loaded via "
":mod:`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""

#: ../../whatsnew/3.1.rst:326
msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:328
msgid ":class:`functools.partial` objects can now be pickled."
msgstr ""

#: ../../whatsnew/3.1.rst:330
msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:333
msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""

#: ../../whatsnew/3.1.rst:336
msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:338
msgid ""
"The :mod:`unittest` module now supports skipping individual tests or "
"classes of tests. And it supports marking a test as an expected failure, "
"a test that is known to be broken, but shouldn't be counted as a failure "
"on a TestResult::"
msgstr ""

#: ../../whatsnew/3.1.rst:353
msgid ""
"Also, tests for exceptions have been builtout to work with context "
"managers using the :keyword:`with` statement::"
msgstr ""

#: ../../whatsnew/3.1.rst:360
msgid ""
"In addition, several new assertion methods were added including "
":func:`assertSetEqual`, :func:`assertDictEqual`, "
":func:`assertDictContainsSubset`, :func:`assertListEqual`, "
":func:`assertTupleEqual`, :func:`assertSequenceEqual`, "
":func:`assertRaisesRegexp`, :func:`assertIsNone`, and "
":func:`assertIsNotNone`."
msgstr ""

#: ../../whatsnew/3.1.rst:367
msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr ""

#: ../../whatsnew/3.1.rst:369
msgid ""
"The :mod:`io` module has three new constants for the :meth:`seek` method "
":data:`SEEK_SET`, :data:`SEEK_CUR`, and :data:`SEEK_END`."
msgstr ""

#: ../../whatsnew/3.1.rst:372
msgid "The :attr:`sys.version_info` tuple is now a named tuple::"
msgstr ""

#: ../../whatsnew/3.1.rst:377
msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:379
msgid "The :mod:`nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ""

#: ../../whatsnew/3.1.rst:381
msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:383
msgid ""
"The :mod:`pickle` module has been adapted for better interoperability "
"with Python 2.x when used with protocol 2 or lower.  The reorganization "
"of the standard library changed the formal reference for many objects.  "
"For example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` "
"in Python 3. This change confounded efforts to share data between "
"different versions of Python.  But now when protocol 2 or lower is "
"selected, the pickler will automatically use the old Python 2 names for "
"both loading and dumping. This remapping is turned-on by default but can "
"be disabled with the *fix_imports* option::"
msgstr ""

#: ../../whatsnew/3.1.rst:399
msgid ""
"An unfortunate but unavoidable side-effect of this change is that "
"protocol 2 pickles produced by Python 3.1 won't be readable with Python "
"3.0. The latest pickle protocol, protocol 3, should be used when "
"migrating data between Python 3.x implementations, as it doesn't attempt "
"to remain compatible with Python 2.x."
msgstr ""

#: ../../whatsnew/3.1.rst:405
msgid "(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:407
msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, "
"portable, pure Python reference implementation of the :keyword:`import` "
"statement and its counterpart, the :func:`__import__` function.  It "
"represents a substantial step forward in documenting and defining the "
"actions that take place during imports."
msgstr ""

#: ../../whatsnew/3.1.rst:418 ../../whatsnew/3.3.rst:2151
msgid "Major performance enhancements have been added:"
msgstr ""

#: ../../whatsnew/3.1.rst:420
msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in "
"Python and quickly proved to be a problematic bottleneck in Python 3.0. "
"In Python 3.1, the I/O library has been entirely rewritten in C and is 2 "
"to 20 times faster depending on the task at hand. The pure Python version"
" is still available for experimentation purposes through the ``_pyio`` "
"module."
msgstr ""

#: ../../whatsnew/3.1.rst:427
msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr ""

#: ../../whatsnew/3.1.rst:429
msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the "
"size of collections and therefore the garbage collection overhead on "
"long-running programs, depending on their particular use of datatypes."
msgstr ""

#: ../../whatsnew/3.1.rst:434
msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:436
msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop"
" is compiled with a new dispatch mechanism which gives speedups of up to "
"20%, depending on the system, the compiler, and the benchmark."
msgstr ""

#: ../../whatsnew/3.1.rst:442
msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants,"
" :issue:`4753`)."
msgstr ""

#: ../../whatsnew/3.1.rst:445
msgid "The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""

#: ../../whatsnew/3.1.rst:448
msgid "(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:450
msgid ""
"The :mod:`json` module now has a C extension to substantially improve its"
" performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module"
" closely match the `JSON specification <http://json.org/>`_ which is "
"defined in terms of Unicode."
msgstr ""

#: ../../whatsnew/3.1.rst:456
msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and"
" Benjamin Peterson; :issue:`4136`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:459
msgid ""
"Unpickling now interns the attribute names of pickled objects.  This "
"saves memory and allows pickles to be smaller."
msgstr ""

#: ../../whatsnew/3.1.rst:462
msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:465 ../../whatsnew/3.2.rst:2494
msgid "IDLE"
msgstr ""

#: ../../whatsnew/3.1.rst:467
msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace "
"from a source file."
msgstr ""

#: ../../whatsnew/3.1.rst:470
msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:477
msgid ""
"Integers are now stored internally either in base 2**15 or in base 2**30,"
" the base being determined at build time.  Previously, they were always "
"stored in base 2**15.  Using base 2**30 gives significant performance "
"improvements on 64-bit machines, but benchmark results on 32-bit machines"
" have been mixed.  Therefore, the default is to use base 2**30 on 64-bit "
"machines and base 2**15 on 32-bit machines; on Unix, there's a new "
"configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""

#: ../../whatsnew/3.1.rst:486
msgid ""
"Apart from the performance improvements this change should be invisible "
"to end users, with one exception: for testing and debugging purposes "
"there's a new :attr:`sys.int_info` that provides information about the "
"internal format, giving the number of bits per digit and the size in "
"bytes of the C type used to store each digit::"
msgstr ""

#: ../../whatsnew/3.1.rst:498
msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative"
" *pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""

#: ../../whatsnew/3.1.rst:501
msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:503
msgid "Deprecated :c:func:`PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""

#: ../../whatsnew/3.1.rst:505
msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:507
msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`PyOS_ascii_strtod` and "
":c:func:`PyOS_ascii_atof`."
msgstr ""

#: ../../whatsnew/3.1.rst:510
msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:512
msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`PyCObject` "
"API. The principal difference is that the new type has a well defined "
"interface for passing typing safety information and a less complicated "
"signature for calling a destructor.  The old type had a problematic API "
"and is now deprecated."
msgstr ""

#: ../../whatsnew/3.1.rst:518
msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr ""

#: ../../whatsnew/3.1.rst:521
msgid "Porting to Python 3.1"
msgstr ""

#: ../../whatsnew/3.1.rst:526
msgid ""
"The new floating point string representations can break existing "
"doctests. For example::"
msgstr ""

#: ../../whatsnew/3.1.rst:549
msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower"
" can make Python 3.1 pickles unreadable in Python 3.0.  One solution is "
"to use protocol 3.  Another solution is to set the *fix_imports* option "
"to ``False``. See the discussion above for more details."
msgstr ""

#: ../../whatsnew/3.2.rst:3
msgid "What's New In Python 3.2"
msgstr ""

#: ../../whatsnew/3.2.rst:51
msgid ""
"This article explains the new features in Python 3.2 as compared to 3.1."
"  It focuses on a few highlights and gives a few examples.  For full "
"details, see the `Misc/NEWS "
"<https://github.com/python/cpython/blob/076ca6c3c8df3030307e548d9be792ce3c1c6eea/Misc/NEWS>`_"
" file."
msgstr ""

#: ../../whatsnew/3.2.rst:59
msgid ":pep:`392` - Python 3.2 Release Schedule"
msgstr ""

#: ../../whatsnew/3.2.rst:63
msgid "PEP 384: Defining a Stable ABI"
msgstr ""

#: ../../whatsnew/3.2.rst:65
msgid ""
"In the past, extension modules built for one Python version were often "
"not usable with other Python versions. Particularly on Windows, every "
"feature release of Python required rebuilding all extension modules that "
"one wanted to use. This requirement was the result of the free access to "
"Python interpreter internals that extension modules could use."
msgstr ""

#: ../../whatsnew/3.2.rst:71
msgid ""
"With Python 3.2, an alternative approach becomes available: extension "
"modules which restrict themselves to a limited API (by defining "
"Py_LIMITED_API) cannot use many of the internals, but are constrained to "
"a set of API functions that are promised to be stable for several "
"releases. As a consequence, extension modules built for 3.2 in that mode "
"will also work with 3.3, 3.4, and so on. Extension modules that make use "
"of details of memory structures can still be built, but will need to be "
"recompiled for every feature release."
msgstr ""

#: ../../whatsnew/3.2.rst:82
msgid ":pep:`384` - Defining a Stable ABI"
msgstr ""

#: ../../whatsnew/3.2.rst:83
msgid "PEP written by Martin von L√∂wis."
msgstr ""

#: ../../whatsnew/3.2.rst:87
msgid "PEP 389: Argparse Command Line Parsing Module"
msgstr ""

#: ../../whatsnew/3.2.rst:89
msgid ""
"A new module for command line parsing, :mod:`argparse`, was introduced to"
" overcome the limitations of :mod:`optparse` which did not provide "
"support for positional arguments (not just options), subcommands, "
"required options and other common patterns of specifying and validating "
"options."
msgstr ""

#: ../../whatsnew/3.2.rst:94
msgid ""
"This module has already had widespread success in the community as a "
"third-party module.  Being more fully featured than its predecessor, the "
":mod:`argparse` module is now the preferred module for command-line "
"processing. The older module is still being kept available because of the"
" substantial amount of legacy code that depends on it."
msgstr ""

#: ../../whatsnew/3.2.rst:100
msgid ""
"Here's an annotated example parser showing features like limiting results"
" to a set of choices, specifying a *metavar* in the help screen, "
"validating that one or more positional arguments is present, and making a"
" required option::"
msgstr ""

#: ../../whatsnew/3.2.rst:119
msgid "Example of calling the parser on a command string::"
msgstr ""

#: ../../whatsnew/3.2.rst:130
msgid "Example of the parser's automatically generated help::"
msgstr ""

#: ../../whatsnew/3.2.rst:149
msgid ""
"An especially nice :mod:`argparse` feature is the ability to define "
"subparsers, each with their own argument patterns and help displays::"
msgstr ""

#: ../../whatsnew/3.2.rst:175
msgid ":pep:`389` - New Command Line Parsing Module"
msgstr ""

#: ../../whatsnew/3.2.rst:175
msgid "PEP written by Steven Bethard."
msgstr ""

#: ../../whatsnew/3.2.rst:177
msgid ""
":ref:`upgrading-optparse-code` for details on the differences from "
":mod:`optparse`."
msgstr ""

#: ../../whatsnew/3.2.rst:181
msgid "PEP 391:  Dictionary Based Configuration for Logging"
msgstr ""

#: ../../whatsnew/3.2.rst:183
msgid ""
"The :mod:`logging` module provided two kinds of configuration, one style "
"with function calls for each option or another style driven by an "
"external file saved in a :mod:`ConfigParser` format.  Those options did "
"not provide the flexibility to create configurations from JSON or YAML "
"files, nor did they support incremental configuration, which is needed "
"for specifying logger options from a command line."
msgstr ""

#: ../../whatsnew/3.2.rst:190
msgid ""
"To support a more flexible style, the module now offers "
":func:`logging.config.dictConfig` for specifying logging configuration "
"with plain Python dictionaries.  The configuration options include "
"formatters, handlers, filters, and loggers.  Here's a working example of "
"a configuration dictionary::"
msgstr ""

#: ../../whatsnew/3.2.rst:214
msgid ""
"If that dictionary is stored in a file called :file:`conf.json`, it can "
"be loaded and called with code like this::"
msgstr ""

#: ../../whatsnew/3.2.rst:229
msgid ":pep:`391` - Dictionary Based Configuration for Logging"
msgstr ""

#: ../../whatsnew/3.2.rst:230
msgid "PEP written by Vinay Sajip."
msgstr ""

#: ../../whatsnew/3.2.rst:234
msgid "PEP 3148:  The ``concurrent.futures`` module"
msgstr ""

#: ../../whatsnew/3.2.rst:236
msgid ""
"Code for creating and managing concurrency is being collected in a new "
"top-level namespace, *concurrent*.  Its first member is a *futures* "
"package which provides a uniform high-level interface for managing "
"threads and processes."
msgstr ""

#: ../../whatsnew/3.2.rst:240
msgid ""
"The design for :mod:`concurrent.futures` was inspired by the "
"*java.util.concurrent* package.  In that model, a running call and its "
"result are represented by a :class:`~concurrent.futures.Future` object "
"that abstracts features common to threads, processes, and remote "
"procedure calls.  That object supports status checks (running or done), "
"timeouts, cancellations, adding callbacks, and access to results or "
"exceptions."
msgstr ""

#: ../../whatsnew/3.2.rst:247
msgid ""
"The primary offering of the new module is a pair of executor classes for "
"launching and managing calls.  The goal of the executors is to make it "
"easier to use existing tools for making parallel calls. They save the "
"effort needed to setup a pool of resources, launch the calls, create a "
"results queue, add time-out handling, and limit the total number of "
"threads, processes, or remote procedure calls."
msgstr ""

#: ../../whatsnew/3.2.rst:254
msgid ""
"Ideally, each application should share a single executor across multiple "
"components so that process and thread limits can be centrally managed.  "
"This solves the design challenge that arises when each component has its "
"own competing strategy for resource management."
msgstr ""

#: ../../whatsnew/3.2.rst:259
msgid ""
"Both classes share a common interface with three methods: "
":meth:`~concurrent.futures.Executor.submit` for scheduling a callable and"
" returning a :class:`~concurrent.futures.Future` object; "
":meth:`~concurrent.futures.Executor.map` for scheduling many asynchronous"
" calls at a time, and :meth:`~concurrent.futures.Executor.shutdown` for "
"freeing resources.  The class is a :term:`context manager` and can be "
"used in a :keyword:`with` statement to assure that resources are "
"automatically released when currently pending futures are done executing."
msgstr ""

#: ../../whatsnew/3.2.rst:268
msgid ""
"A simple of example of :class:`~concurrent.futures.ThreadPoolExecutor` is"
" a launch of four parallel threads for copying files::"
msgstr ""

#: ../../whatsnew/3.2.rst:281
msgid ":pep:`3148` - Futures -- Execute Computations Asynchronously"
msgstr ""

#: ../../whatsnew/3.2.rst:281
msgid "PEP written by Brian Quinlan."
msgstr ""

#: ../../whatsnew/3.2.rst:283
msgid ""
":ref:`Code for Threaded Parallel URL reads<threadpoolexecutor-example>`, "
"an example using threads to fetch multiple web pages in parallel."
msgstr ""

#: ../../whatsnew/3.2.rst:286
msgid ""
":ref:`Code for computing prime numbers in parallel<processpoolexecutor-"
"example>`, an example demonstrating "
":class:`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""

#: ../../whatsnew/3.2.rst:292
msgid "PEP 3147:  PYC Repository Directories"
msgstr ""

#: ../../whatsnew/3.2.rst:294
msgid ""
"Python's scheme for caching bytecode in *.pyc* files did not work well in"
" environments with multiple Python interpreters.  If one interpreter "
"encountered a cached file created by another interpreter, it would "
"recompile the source and overwrite the cached file, thus losing the "
"benefits of caching."
msgstr ""

#: ../../whatsnew/3.2.rst:299
msgid ""
"The issue of \"pyc fights\" has become more pronounced as it has become "
"commonplace for Linux distributions to ship with multiple versions of "
"Python. These conflicts also arise with CPython alternatives such as "
"Unladen Swallow."
msgstr ""

#: ../../whatsnew/3.2.rst:303
msgid ""
"To solve this problem, Python's import machinery has been extended to use"
" distinct filenames for each interpreter.  Instead of Python 3.2 and "
"Python 3.3 and Unladen Swallow each competing for a file called "
"\"mymodule.pyc\", they will now look for \"mymodule.cpython-32.pyc\", "
"\"mymodule.cpython-33.pyc\", and \"mymodule.unladen10.pyc\".  And to "
"prevent all of these new files from cluttering source directories, the "
"*pyc* files are now collected in a \"__pycache__\" directory stored under"
" the package directory."
msgstr ""

#: ../../whatsnew/3.2.rst:311
msgid ""
"Aside from the filenames and target directories, the new scheme has a few"
" aspects that are visible to the programmer:"
msgstr ""

#: ../../whatsnew/3.2.rst:314
msgid ""
"Imported modules now have a :attr:`__cached__` attribute which stores the"
" name of the actual file that was imported:"
msgstr ""

#: ../../whatsnew/3.2.rst:321
msgid ""
"The tag that is unique to each interpreter is accessible from the "
":mod:`imp` module:"
msgstr ""

#: ../../whatsnew/3.2.rst:328
msgid ""
"Scripts that try to deduce source filename from the imported file now "
"need to be smarter.  It is no longer sufficient to simply strip the \"c\""
" from a \".pyc\" filename.  Instead, use the new functions in the "
":mod:`imp` module:"
msgstr ""

#: ../../whatsnew/3.2.rst:337
msgid ""
"The :mod:`py_compile` and :mod:`compileall` modules have been updated to "
"reflect the new naming convention and target directory.  The command-line"
" invocation of *compileall* has new options: ``-i`` for specifying a list"
" of files and directories to compile and ``-b`` which causes bytecode "
"files to be written to their legacy location rather than *__pycache__*."
msgstr ""

#: ../../whatsnew/3.2.rst:344
msgid ""
"The :mod:`importlib.abc` module has been updated with new :term:`abstract"
" base classes <abstract base class>` for loading bytecode files.  The "
"obsolete ABCs, :class:`~importlib.abc.PyLoader` and "
":class:`~importlib.abc.PyPycLoader`, have been deprecated (instructions "
"on how to stay Python 3.1 compatible are included with the "
"documentation)."
msgstr ""

#: ../../whatsnew/3.2.rst:352
msgid ":pep:`3147` - PYC Repository Directories"
msgstr ""

#: ../../whatsnew/3.2.rst:353 ../../whatsnew/3.2.rst:384
msgid "PEP written by Barry Warsaw."
msgstr ""

#: ../../whatsnew/3.2.rst:357
msgid "PEP 3149: ABI Version Tagged .so Files"
msgstr ""

#: ../../whatsnew/3.2.rst:359
msgid ""
"The PYC repository directory allows multiple bytecode cache files to be "
"co-located.  This PEP implements a similar mechanism for shared object "
"files by giving them a common directory and distinct names for each "
"version."
msgstr ""

#: ../../whatsnew/3.2.rst:363
msgid ""
"The common directory is \"pyshared\" and the file names are made distinct"
" by identifying the Python implementation (such as CPython, PyPy, Jython,"
" etc.), the major and minor version numbers, and optional build flags "
"(such as \"d\" for debug, \"m\" for pymalloc, \"u\" for wide-unicode).  "
"For an arbitrary package \"foo\", you may see these files when the "
"distribution package is installed::"
msgstr ""

#: ../../whatsnew/3.2.rst:372
msgid ""
"In Python itself, the tags are accessible from functions in the "
":mod:`sysconfig` module::"
msgstr ""

#: ../../whatsnew/3.2.rst:383
msgid ":pep:`3149` - ABI Version Tagged .so Files"
msgstr ""

#: ../../whatsnew/3.2.rst:388
msgid "PEP 3333: Python Web Server Gateway Interface v1.0.1"
msgstr ""

#: ../../whatsnew/3.2.rst:390
msgid ""
"This informational PEP clarifies how bytes/text issues are to be handled "
"by the WSGI protocol.  The challenge is that string handling in Python 3 "
"is most conveniently handled with the :class:`str` type even though the "
"HTTP protocol is itself bytes oriented."
msgstr ""

#: ../../whatsnew/3.2.rst:395
msgid ""
"The PEP differentiates so-called *native strings* that are used for "
"request/response headers and metadata versus *byte strings* which are "
"used for the bodies of requests and responses."
msgstr ""

#: ../../whatsnew/3.2.rst:399
msgid ""
"The *native strings* are always of type :class:`str` but are restricted "
"to code points between *U+0000* through *U+00FF* which are translatable "
"to bytes using *Latin-1* encoding.  These strings are used for the keys "
"and values in the environment dictionary and for response headers and "
"statuses in the :func:`start_response` function.  They must follow "
":rfc:`2616` with respect to encoding. That is, they must either be "
"*ISO-8859-1* characters or use :rfc:`2047` MIME encoding."
msgstr ""

#: ../../whatsnew/3.2.rst:407
msgid ""
"For developers porting WSGI applications from Python 2, here are the "
"salient points:"
msgstr ""

#: ../../whatsnew/3.2.rst:410
msgid ""
"If the app already used strings for headers in Python 2, no change is "
"needed."
msgstr ""

#: ../../whatsnew/3.2.rst:412
msgid ""
"If instead, the app encoded output headers or decoded input headers, then"
" the headers will need to be re-encoded to Latin-1.  For example, an "
"output header encoded in utf-8 was using ``h.encode('utf-8')`` now needs "
"to convert from bytes to native strings using "
"``h.encode('utf-8').decode('latin-1')``."
msgstr ""

#: ../../whatsnew/3.2.rst:417
msgid ""
"Values yielded by an application or sent using the :meth:`write` method "
"must be byte strings.  The :func:`start_response` function and environ "
"must use native strings.  The two cannot be mixed."
msgstr ""

#: ../../whatsnew/3.2.rst:421
msgid ""
"For server implementers writing CGI-to-WSGI pathways or other CGI-style "
"protocols, the users must to be able access the environment using native "
"strings even though the underlying platform may have a different "
"convention.  To bridge this gap, the :mod:`wsgiref` module has a new "
"function, :func:`wsgiref.handlers.read_environ` for transcoding CGI "
"variables from :attr:`os.environ` into native strings and returning a new"
" dictionary."
msgstr ""

#: ../../whatsnew/3.2.rst:430
msgid ":pep:`3333` - Python Web Server Gateway Interface v1.0.1"
msgstr ""

#: ../../whatsnew/3.2.rst:431
msgid "PEP written by Phillip Eby."
msgstr ""

#: ../../whatsnew/3.2.rst:439
msgid ""
"String formatting for :func:`format` and :meth:`str.format` gained new "
"capabilities for the format character **#**.  Previously, for integers in"
" binary, octal, or hexadecimal, it caused the output to be prefixed with "
"'0b', '0o', or '0x' respectively.  Now it can also handle floats, "
"complex, and Decimal, causing the output to always have a decimal point "
"even when no digits follow it."
msgstr ""

#: ../../whatsnew/3.2.rst:451
msgid ""
"(Suggested by Mark Dickinson and implemented by Eric Smith in "
":issue:`7094`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:453
msgid ""
"There is also a new :meth:`str.format_map` method that extends the "
"capabilities of the existing :meth:`str.format` method by accepting "
"arbitrary :term:`mapping` objects.  This new method makes it possible to "
"use string formatting with any of Python's many dictionary-like objects "
"such as :class:`~collections.defaultdict`, :class:`~shelve.Shelf`, "
":class:`~configparser.ConfigParser`, or :mod:`dbm`.  It is also useful "
"with custom :class:`dict` subclasses that normalize keys before look-up "
"or that supply a :meth:`__missing__` method for unknown keys::"
msgstr ""

#: ../../whatsnew/3.2.rst:480
msgid ""
"(Suggested by Raymond Hettinger and implemented by Eric Smith in "
":issue:`6081`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:483
msgid ""
"The interpreter can now be started with a quiet option, ``-q``, to "
"prevent the copyright and version information from being displayed in the"
" interactive mode.  The option can be introspected using the "
":attr:`sys.flags` attribute:"
msgstr ""

#: ../../whatsnew/3.2.rst:495
msgid "(Contributed by Marcin Wojdyr in :issue:`1772833`)."
msgstr ""

#: ../../whatsnew/3.2.rst:497
msgid ""
"The :func:`hasattr` function works by calling :func:`getattr` and "
"detecting whether an exception is raised.  This technique allows it to "
"detect methods created dynamically by :meth:`__getattr__` or "
":meth:`__getattribute__` which would otherwise be absent from the class "
"dictionary.  Formerly, *hasattr* would catch any exception, possibly "
"masking genuine errors.  Now, *hasattr* has been tightened to only catch "
":exc:`AttributeError` and let other exceptions pass through::"
msgstr ""

#: ../../whatsnew/3.2.rst:516
msgid ""
"(Discovered by Yury Selivanov and fixed by Benjamin Peterson; "
":issue:`9666`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:518
msgid ""
"The :func:`str` of a float or complex number is now the same as its "
":func:`repr`. Previously, the :func:`str` form was shorter but that just "
"caused confusion and is no longer needed now that the shortest possible "
":func:`repr` is displayed by default:"
msgstr ""

#: ../../whatsnew/3.2.rst:529
msgid "(Proposed and implemented by Mark Dickinson; :issue:`9337`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:531
msgid ""
":class:`memoryview` objects now have a :meth:`~memoryview.release()` "
"method and they also now support the context management protocol.  This "
"allows timely release of any resources that were acquired when requesting"
" a buffer from the original object."
msgstr ""

#: ../../whatsnew/3.2.rst:540
msgid "(Added by Antoine Pitrou; :issue:`9757`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:542
msgid ""
"Previously it was illegal to delete a name from the local namespace if it"
" occurs as a free variable in a nested block::"
msgstr ""

#: ../../whatsnew/3.2.rst:551
msgid ""
"This is now allowed.  Remember that the target of an :keyword:`except` "
"clause is cleared, so this code which used to work with Python 2.6, "
"raised a :exc:`SyntaxError` with Python 3.1 and now works again::"
msgstr ""

#: ../../whatsnew/3.2.rst:564
msgid "(See :issue:`4617`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:566
msgid ""
"The internal :c:type:`structsequence` tool now creates subclasses of "
"tuple. This means that C structures like those returned by "
":func:`os.stat`, :func:`time.gmtime`, and :attr:`sys.version_info` now "
"work like a :term:`named tuple` and now work with functions and methods "
"that expect a tuple as an argument.  This is a big step forward in making"
" the C structures as flexible as their pure Python counterparts:"
msgstr ""

#: ../../whatsnew/3.2.rst:579
msgid ""
"(Suggested by Arfrever Frehtes Taifersar Arahesis and implemented by "
"Benjamin Peterson in :issue:`8413`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:582
msgid ""
"Warnings are now easier to control using the :envvar:`PYTHONWARNINGS` "
"environment variable as an alternative to using ``-W`` at the command "
"line:"
msgstr ""

#: ../../whatsnew/3.2.rst:589
msgid ""
"(Suggested by Barry Warsaw and implemented by Philip Jenvey in "
":issue:`7301`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:591
msgid ""
"A new warning category, :exc:`ResourceWarning`, has been added.  It is "
"emitted when potential issues with resource consumption or cleanup are "
"detected.  It is silenced by default in normal release builds but can be "
"enabled through the means provided by the :mod:`warnings` module, or on "
"the command line."
msgstr ""

#: ../../whatsnew/3.2.rst:597
msgid ""
"A :exc:`ResourceWarning` is issued at interpreter shutdown if the "
":data:`gc.garbage` list isn't empty, and if "
":attr:`gc.DEBUG_UNCOLLECTABLE` is set, all uncollectable objects are "
"printed.  This is meant to make the programmer aware that their code "
"contains object finalization issues."
msgstr ""

#: ../../whatsnew/3.2.rst:602
msgid ""
"A :exc:`ResourceWarning` is also issued when a :term:`file object` is "
"destroyed without having been explicitly closed.  While the deallocator "
"for such object ensures it closes the underlying operating system "
"resource (usually, a file descriptor), the delay in deallocating the "
"object could produce various issues, especially under Windows.  Here is "
"an example of enabling the warning from the command line:"
msgstr ""

#: ../../whatsnew/3.2.rst:616
msgid ""
"(Added by Antoine Pitrou and Georg Brandl in :issue:`10093` and "
":issue:`477863`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:618
msgid ""
":class:`range` objects now support *index* and *count* methods. This is "
"part of an effort to make more objects fully implement the "
":class:`collections.Sequence` :term:`abstract base class`.  As a result, "
"the language will have a more uniform API.  In addition, :class:`range` "
"objects now support slicing and negative indices, even with values larger"
" than :attr:`sys.maxsize`.  This makes *range* more interoperable with "
"lists::"
msgstr ""

#: ../../whatsnew/3.2.rst:634
msgid ""
"(Contributed by Daniel Stutzbach in :issue:`9213`, by Alexander "
"Belopolsky in :issue:`2690`, and by Nick Coghlan in :issue:`10889`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:637
msgid ""
"The :func:`callable` builtin function from Py2.x was resurrected.  It "
"provides a concise, readable alternative to using an :term:`abstract base"
" class` in an expression like ``isinstance(x, collections.Callable)``:"
msgstr ""

#: ../../whatsnew/3.2.rst:646
msgid "(See :issue:`10518`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:648
msgid ""
"Python's import mechanism can now load modules installed in directories "
"with non-ASCII characters in the path name.  This solved an aggravating "
"problem with home directories for users with non-ASCII characters in "
"their usernames."
msgstr ""

#: ../../whatsnew/3.2.rst:652
msgid "(Required extensive work by Victor Stinner in :issue:`9425`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:658
msgid ""
"Python's standard library has undergone significant maintenance efforts "
"and quality improvements."
msgstr ""

#: ../../whatsnew/3.2.rst:661
msgid ""
"The biggest news for Python 3.2 is that the :mod:`email` package, "
":mod:`mailbox` module, and :mod:`nntplib` modules now work correctly with"
" the bytes/text model in Python 3.  For the first time, there is correct "
"handling of messages with mixed encodings."
msgstr ""

#: ../../whatsnew/3.2.rst:666
msgid ""
"Throughout the standard library, there has been more careful attention to"
" encodings and text versus bytes issues.  In particular, interactions "
"with the operating system are now better able to exchange non-ASCII data "
"using the Windows MBCS encoding, locale-aware encodings, or UTF-8."
msgstr ""

#: ../../whatsnew/3.2.rst:671
msgid ""
"Another significant win is the addition of substantially better support "
"for *SSL* connections and security certificates."
msgstr ""

#: ../../whatsnew/3.2.rst:674
msgid ""
"In addition, more classes now implement a :term:`context manager` to "
"support convenient and reliable resource clean-up using a :keyword:`with`"
" statement."
msgstr ""

#: ../../whatsnew/3.2.rst:678 ../../whatsnew/3.3.rst:1192
#: ../../whatsnew/3.4.rst:793 ../../whatsnew/3.5.rst:1096
#: ../../whatsnew/3.6.rst:1022
msgid "email"
msgstr ""

#: ../../whatsnew/3.2.rst:680
msgid ""
"The usability of the :mod:`email` package in Python 3 has been mostly "
"fixed by the extensive efforts of R. David Murray.  The problem was that "
"emails are typically read and stored in the form of :class:`bytes` rather"
" than :class:`str` text, and they may contain multiple encodings within a"
" single email.  So, the email package had to be extended to parse and "
"generate email messages in bytes format."
msgstr ""

#: ../../whatsnew/3.2.rst:687
msgid ""
"New functions :func:`~email.message_from_bytes` and "
":func:`~email.message_from_binary_file`, and new classes "
":class:`~email.parser.BytesFeedParser` and "
":class:`~email.parser.BytesParser` allow binary message data to be parsed"
" into model objects."
msgstr ""

#: ../../whatsnew/3.2.rst:692
msgid ""
"Given bytes input to the model, "
":meth:`~email.message.Message.get_payload` will by default decode a "
"message body that has a :mailheader:`Content-Transfer-Encoding` of *8bit*"
" using the charset specified in the MIME headers and return the resulting"
" string."
msgstr ""

#: ../../whatsnew/3.2.rst:697
msgid ""
"Given bytes input to the model, :class:`~email.generator.Generator` will "
"convert message bodies that have a :mailheader:`Content-Transfer-"
"Encoding` of *8bit* to instead have a *7bit* :mailheader:`Content-"
"Transfer-Encoding`."
msgstr ""

#: ../../whatsnew/3.2.rst:701
msgid ""
"Headers with unencoded non-ASCII bytes are deemed to be :rfc:`2047`\\ "
"-encoded using the *unknown-8bit* character set."
msgstr ""

#: ../../whatsnew/3.2.rst:704
msgid ""
"A new class :class:`~email.generator.BytesGenerator` produces bytes as "
"output, preserving any unchanged non-ASCII data that was present in the "
"input used to build the model, including message bodies with a "
":mailheader:`Content-Transfer-Encoding` of *8bit*."
msgstr ""

#: ../../whatsnew/3.2.rst:709
msgid ""
"The :mod:`smtplib` :class:`~smtplib.SMTP` class now accepts a byte string"
" for the *msg* argument to the :meth:`~smtplib.SMTP.sendmail` method, and"
" a new method, :meth:`~smtplib.SMTP.send_message` accepts a "
":class:`~email.message.Message` object and can optionally obtain the "
"*from_addr* and *to_addrs* addresses directly from the object."
msgstr ""

#: ../../whatsnew/3.2.rst:715
msgid ""
"(Proposed and implemented by R. David Murray, :issue:`4661` and "
":issue:`10321`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:718
msgid "elementtree"
msgstr ""

#: ../../whatsnew/3.2.rst:720
msgid ""
"The :mod:`xml.etree.ElementTree` package and its "
":mod:`xml.etree.cElementTree` counterpart have been updated to version "
"1.3."
msgstr ""

#: ../../whatsnew/3.2.rst:723
msgid "Several new and useful functions and methods have been added:"
msgstr ""

#: ../../whatsnew/3.2.rst:725
msgid ""
":func:`xml.etree.ElementTree.fromstringlist` which builds an XML document"
" from a sequence of fragments"
msgstr ""

#: ../../whatsnew/3.2.rst:727
msgid ""
":func:`xml.etree.ElementTree.register_namespace` for registering a global"
" namespace prefix"
msgstr ""

#: ../../whatsnew/3.2.rst:729
msgid ""
":func:`xml.etree.ElementTree.tostringlist` for string representation "
"including all sublists"
msgstr ""

#: ../../whatsnew/3.2.rst:731
msgid ""
":meth:`xml.etree.ElementTree.Element.extend` for appending a sequence of "
"zero or more elements"
msgstr ""

#: ../../whatsnew/3.2.rst:733
msgid ""
":meth:`xml.etree.ElementTree.Element.iterfind` searches an element and "
"subelements"
msgstr ""

#: ../../whatsnew/3.2.rst:735
msgid ""
":meth:`xml.etree.ElementTree.Element.itertext` creates a text iterator "
"over an element and its subelements"
msgstr ""

#: ../../whatsnew/3.2.rst:737
msgid ":meth:`xml.etree.ElementTree.TreeBuilder.end` closes the current element"
msgstr ""

#: ../../whatsnew/3.2.rst:738
msgid ""
":meth:`xml.etree.ElementTree.TreeBuilder.doctype` handles a doctype "
"declaration"
msgstr ""

#: ../../whatsnew/3.2.rst:741
msgid "Two methods have been deprecated:"
msgstr ""

#: ../../whatsnew/3.2.rst:743
msgid ":meth:`xml.etree.ElementTree.getchildren` use ``list(elem)`` instead."
msgstr ""

#: ../../whatsnew/3.2.rst:744
msgid ":meth:`xml.etree.ElementTree.getiterator` use ``Element.iter`` instead."
msgstr ""

#: ../../whatsnew/3.2.rst:746
msgid ""
"For details of the update, see `Introducing ElementTree "
"<http://effbot.org/zone/elementtree-13-intro.htm>`_ on Fredrik Lundh's "
"website."
msgstr ""

#: ../../whatsnew/3.2.rst:749
msgid "(Contributed by Florent Xicluna and Fredrik Lundh, :issue:`6472`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:752 ../../whatsnew/3.3.rst:1388
#: ../../whatsnew/3.4.rst:851 ../../whatsnew/3.5.rst:1148
#: ../../whatsnew/3.7.rst:921 ../../whatsnew/3.8.rst:763
msgid "functools"
msgstr ""

#: ../../whatsnew/3.2.rst:754
msgid ""
"The :mod:`functools` module includes a new decorator for caching function"
" calls.  :func:`functools.lru_cache` can save repeated queries to an "
"external resource whenever the results are expected to be the same."
msgstr ""

#: ../../whatsnew/3.2.rst:758
msgid ""
"For example, adding a caching decorator to a database query function can "
"save database accesses for popular searches:"
msgstr ""

#: ../../whatsnew/3.2.rst:771
msgid ""
"To help with choosing an effective cache size, the wrapped function is "
"instrumented for tracking cache statistics:"
msgstr ""

#: ../../whatsnew/3.2.rst:777
msgid ""
"If the phonelist table gets updated, the outdated contents of the cache "
"can be cleared with:"
msgstr ""

#: ../../whatsnew/3.2.rst:782
msgid ""
"(Contributed by Raymond Hettinger and incorporating design ideas from Jim"
" Baker, Miki Tebeka, and Nick Coghlan; see `recipe 498245 "
"<https://code.activestate.com/recipes/498245>`_\\, `recipe 577479 "
"<https://code.activestate.com/recipes/577479>`_\\, :issue:`10586`, and "
":issue:`10593`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:788
msgid ""
"The :func:`functools.wraps` decorator now adds a :attr:`__wrapped__` "
"attribute pointing to the original callable function.  This allows "
"wrapped functions to be introspected.  It also copies "
":attr:`__annotations__` if defined.  And now it also gracefully skips "
"over missing attributes such as :attr:`__doc__` which might not be "
"defined for the wrapped callable."
msgstr ""

#: ../../whatsnew/3.2.rst:794
msgid ""
"In the above example, the cache can be removed by recovering the original"
" function:"
msgstr ""

#: ../../whatsnew/3.2.rst:799
msgid ""
"(By Nick Coghlan and Terrence Cole; :issue:`9567`, :issue:`3445`, and "
":issue:`8814`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:802
msgid ""
"To help write classes with rich comparison methods, a new decorator "
":func:`functools.total_ordering` will use existing equality and "
"inequality methods to fill in the remaining methods."
msgstr ""

#: ../../whatsnew/3.2.rst:806
msgid ""
"For example, supplying *__eq__* and *__lt__* will enable "
":func:`~functools.total_ordering` to fill-in *__le__*, *__gt__* and "
"*__ge__*::"
msgstr ""

#: ../../whatsnew/3.2.rst:819
msgid ""
"With the *total_ordering* decorator, the remaining comparison methods are"
" filled in automatically."
msgstr ""

#: ../../whatsnew/3.2.rst:824
msgid ""
"To aid in porting programs from Python 2, the "
":func:`functools.cmp_to_key` function converts an old-style comparison "
"function to modern :term:`key function`:"
msgstr ""

#: ../../whatsnew/3.2.rst:831
msgid ""
"For sorting examples and a brief sorting tutorial, see the `Sorting HowTo"
" <https://wiki.python.org/moin/HowTo/Sorting/>`_ tutorial."
msgstr ""

#: ../../whatsnew/3.2.rst:837 ../../whatsnew/3.3.rst:1492
#: ../../whatsnew/3.7.rst:1083 ../../whatsnew/3.8.rst:916
msgid "itertools"
msgstr ""

#: ../../whatsnew/3.2.rst:839
msgid ""
"The :mod:`itertools` module has a new :func:`~itertools.accumulate` "
"function modeled on APL's *scan* operator and Numpy's *accumulate* "
"function:"
msgstr ""

#: ../../whatsnew/3.2.rst:850
msgid ""
"For an example using :func:`~itertools.accumulate`, see the "
":ref:`examples for the random module <random-examples>`."
msgstr ""

#: ../../whatsnew/3.2.rst:853
msgid ""
"(Contributed by Raymond Hettinger and incorporating design suggestions "
"from Mark Dickinson.)"
msgstr ""

#: ../../whatsnew/3.2.rst:857 ../../whatsnew/3.3.rst:1018
#: ../../whatsnew/3.4.rst:662 ../../whatsnew/3.5.rst:901
#: ../../whatsnew/3.6.rst:921 ../../whatsnew/3.7.rst:795
#: ../../whatsnew/3.7.rst:1964 ../../whatsnew/3.8.rst:698
msgid "collections"
msgstr ""

#: ../../whatsnew/3.2.rst:859
msgid ""
"The :class:`collections.Counter` class now has two forms of in-place "
"subtraction, the existing *-=* operator for `saturating subtraction "
"<https://en.wikipedia.org/wiki/Saturation_arithmetic>`_ and the new "
":meth:`~collections.Counter.subtract` method for regular subtraction.  "
"The former is suitable for `multisets "
"<https://en.wikipedia.org/wiki/Multiset>`_ which only have positive "
"counts, and the latter is more suitable for use cases that allow negative"
" counts:"
msgstr ""

#: ../../whatsnew/3.2.rst:880
msgid ""
"The :class:`collections.OrderedDict` class has a new method "
":meth:`~collections.OrderedDict.move_to_end` which takes an existing key "
"and moves it to either the first or last position in the ordered "
"sequence."
msgstr ""

#: ../../whatsnew/3.2.rst:884
msgid ""
"The default is to move an item to the last position.  This is equivalent "
"of renewing an entry with ``od[k] = od.pop(k)``."
msgstr ""

#: ../../whatsnew/3.2.rst:887
msgid ""
"A fast move-to-end operation is useful for resequencing entries.  For "
"example, an ordered dictionary can be used to track order of access by "
"aging entries from the oldest to the most recently accessed."
msgstr ""

#: ../../whatsnew/3.2.rst:901
msgid ""
"The :class:`collections.deque` class grew two new methods "
":meth:`~collections.deque.count` and :meth:`~collections.deque.reverse` "
"that make them more substitutable for :class:`list` objects:"
msgstr ""

#: ../../whatsnew/3.2.rst:916 ../../whatsnew/3.3.rst:2034
#: ../../whatsnew/3.4.rst:1595 ../../whatsnew/3.5.rst:1908
#: ../../whatsnew/3.7.rst:2035 ../../whatsnew/3.8.rst:1256
msgid "threading"
msgstr ""

#: ../../whatsnew/3.2.rst:918
msgid ""
"The :mod:`threading` module has a new :class:`~threading.Barrier` "
"synchronization class for making multiple threads wait until all of them "
"have reached a common barrier point.  Barriers are useful for making sure"
" that a task with multiple preconditions does not run until all of the "
"predecessor tasks are complete."
msgstr ""

#: ../../whatsnew/3.2.rst:924
msgid ""
"Barriers can work with an arbitrary number of threads.  This is a "
"generalization of a `Rendezvous "
"<https://en.wikipedia.org/wiki/Synchronous_rendezvous>`_ which is defined"
" for only two threads."
msgstr ""

#: ../../whatsnew/3.2.rst:928
msgid ""
"Implemented as a two-phase cyclic barrier, :class:`~threading.Barrier` "
"objects are suitable for use in loops.  The separate *filling* and "
"*draining* phases assure that all threads get released (drained) before "
"any one of them can loop back and re-enter the barrier.  The barrier "
"fully resets after each cycle."
msgstr ""

#: ../../whatsnew/3.2.rst:933
msgid "Example of using barriers::"
msgstr ""

#: ../../whatsnew/3.2.rst:947
msgid ""
"In this example, the barrier enforces a rule that votes cannot be counted"
" at any polling site until all polls are closed.  Notice how a solution "
"with a barrier is similar to one with :meth:`threading.Thread.join`, but "
"the threads stay alive and continue to do work (summarizing ballots) "
"after the barrier point is crossed."
msgstr ""

#: ../../whatsnew/3.2.rst:953
msgid ""
"If any of the predecessor tasks can hang or be delayed, a barrier can be "
"created with an optional *timeout* parameter.  Then if the timeout period"
" elapses before all the predecessor tasks reach the barrier point, all "
"waiting threads are released and a :exc:`~threading.BrokenBarrierError` "
"exception is raised::"
msgstr ""

#: ../../whatsnew/3.2.rst:969
msgid ""
"In this example, the barrier enforces a more robust rule.  If some "
"election sites do not finish before midnight, the barrier times-out and "
"the ballots are sealed and deposited in a queue for later handling."
msgstr ""

#: ../../whatsnew/3.2.rst:973
msgid ""
"See `Barrier Synchronization Patterns "
"<http://osl.cs.illinois.edu/media/papers/karmani-2009-barrier_synchronization_pattern.pdf>`_"
" for more examples of how barriers can be used in parallel computing.  "
"Also, there is a simple but thorough explanation of barriers in `The "
"Little Book of Semaphores "
"<https://greenteapress.com/semaphores/LittleBookOfSemaphores.pdf>`_, "
"*section 3.6*."
msgstr ""

#: ../../whatsnew/3.2.rst:979
msgid ""
"(Contributed by Kristj√°n Valur J√≥nsson with an API review by Jeffrey "
"Yasskin in :issue:`8777`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:983
msgid "datetime and time"
msgstr ""

#: ../../whatsnew/3.2.rst:985
msgid ""
"The :mod:`datetime` module has a new type :class:`~datetime.timezone` "
"that implements the :class:`~datetime.tzinfo` interface by returning a "
"fixed UTC offset and timezone name. This makes it easier to create "
"timezone-aware datetime objects::"
msgstr ""

#: ../../whatsnew/3.2.rst:998
msgid ""
"Also, :class:`~datetime.timedelta` objects can now be multiplied by "
":class:`float` and divided by :class:`float` and :class:`int` objects. "
"And :class:`~datetime.timedelta` objects can now divide one another."
msgstr ""

#: ../../whatsnew/3.2.rst:1002
msgid ""
"The :meth:`datetime.date.strftime` method is no longer restricted to "
"years after 1900.  The new supported year range is from 1000 to 9999 "
"inclusive."
msgstr ""

#: ../../whatsnew/3.2.rst:1005
msgid ""
"Whenever a two-digit year is used in a time tuple, the interpretation has"
" been governed by :attr:`time.accept2dyear`.  The default is ``True`` "
"which means that for a two-digit year, the century is guessed according "
"to the POSIX rules governing the ``%y`` strptime format."
msgstr ""

#: ../../whatsnew/3.2.rst:1010
msgid ""
"Starting with Py3.2, use of the century guessing heuristic will emit a "
":exc:`DeprecationWarning`.  Instead, it is recommended that "
":attr:`time.accept2dyear` be set to ``False`` so that large date ranges "
"can be used without guesswork::"
msgstr ""

#: ../../whatsnew/3.2.rst:1029
msgid ""
"Several functions now have significantly expanded date ranges.  When "
":attr:`time.accept2dyear` is false, the :func:`time.asctime` function "
"will accept any year that fits in a C int, while the :func:`time.mktime` "
"and :func:`time.strftime` functions will accept the full range supported "
"by the corresponding operating system functions."
msgstr ""

#: ../../whatsnew/3.2.rst:1035
msgid ""
"(Contributed by Alexander Belopolsky and Victor Stinner in "
":issue:`1289118`, :issue:`5094`, :issue:`6641`, :issue:`2706`, "
":issue:`1777412`, :issue:`8013`, and :issue:`10827`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1042 ../../whatsnew/3.3.rst:1512
#: ../../whatsnew/3.5.rst:1446 ../../whatsnew/3.6.rst:1252
#: ../../whatsnew/3.7.rst:1118 ../../whatsnew/3.8.rst:954
msgid "math"
msgstr ""

#: ../../whatsnew/3.2.rst:1044
msgid ""
"The :mod:`math` module has been updated with six new functions inspired "
"by the C99 standard."
msgstr ""

#: ../../whatsnew/3.2.rst:1047
msgid ""
"The :func:`~math.isfinite` function provides a reliable and fast way to "
"detect special values.  It returns ``True`` for regular numbers and "
"``False`` for *Nan* or *Infinity*:"
msgstr ""

#: ../../whatsnew/3.2.rst:1055
msgid ""
"The :func:`~math.expm1` function computes ``e**x-1`` for small values of "
"*x* without incurring the loss of precision that usually accompanies the "
"subtraction of nearly equal quantities:"
msgstr ""

#: ../../whatsnew/3.2.rst:1063
msgid ""
"The :func:`~math.erf` function computes a probability integral or "
"`Gaussian error function "
"<https://en.wikipedia.org/wiki/Error_function>`_.  The complementary "
"error function, :func:`~math.erfc`, is ``1 - erf(x)``:"
msgstr ""

#: ../../whatsnew/3.2.rst:1078
msgid ""
"The :func:`~math.gamma` function is a continuous extension of the "
"factorial function.  See https://en.wikipedia.org/wiki/Gamma_function for"
" details.  Because the function is related to factorials, it grows large "
"even for small values of *x*, so there is also a :func:`~math.lgamma` "
"function for computing the natural logarithm of the gamma function:"
msgstr ""

#: ../../whatsnew/3.2.rst:1090
msgid "(Contributed by Mark Dickinson.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1093 ../../whatsnew/3.3.rst:912
#: ../../whatsnew/3.4.rst:593
msgid "abc"
msgstr ""

#: ../../whatsnew/3.2.rst:1095
msgid ""
"The :mod:`abc` module now supports :func:`~abc.abstractclassmethod` and "
":func:`~abc.abstractstaticmethod`."
msgstr ""

#: ../../whatsnew/3.2.rst:1098
msgid ""
"These tools make it possible to define an :term:`abstract base class` "
"that requires a particular :func:`classmethod` or :func:`staticmethod` to"
" be implemented::"
msgstr ""

#: ../../whatsnew/3.2.rst:1110
msgid "(Patch submitted by Daniel Urban; :issue:`5867`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1113 ../../whatsnew/3.3.rst:1476
#: ../../whatsnew/3.5.rst:1326 ../../whatsnew/3.7.rst:1065
#: ../../whatsnew/3.8.rst:907
msgid "io"
msgstr ""

#: ../../whatsnew/3.2.rst:1115
msgid ""
"The :class:`io.BytesIO` has a new method, :meth:`~io.BytesIO.getbuffer`, "
"which provides functionality similar to :func:`memoryview`.  It creates "
"an editable view of the data without making a copy.  The buffer's random "
"access and support for slice notation are well-suited to in-place "
"editing::"
msgstr ""

#: ../../whatsnew/3.2.rst:1141
msgid "(Contributed by Antoine Pitrou in :issue:`5506`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1146
msgid ""
"When writing a :meth:`__repr__` method for a custom container, it is easy"
" to forget to handle the case where a member refers back to the container"
" itself. Python's builtin objects such as :class:`list` and :class:`set` "
"handle self-reference by displaying \"...\" in the recursive part of the "
"representation string."
msgstr ""

#: ../../whatsnew/3.2.rst:1152
msgid ""
"To help write such :meth:`__repr__` methods, the :mod:`reprlib` module "
"has a new decorator, :func:`~reprlib.recursive_repr`, for detecting "
"recursive calls to :meth:`__repr__` and substituting a placeholder string"
" instead::"
msgstr ""

#: ../../whatsnew/3.2.rst:1167
msgid "(Contributed by Raymond Hettinger in :issue:`9826` and :issue:`9840`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1170 ../../whatsnew/3.3.rst:1499
#: ../../whatsnew/3.4.rst:1073 ../../whatsnew/3.5.rst:1408
#: ../../whatsnew/3.6.rst:1243 ../../whatsnew/3.7.rst:1103
#: ../../whatsnew/3.8.rst:936
msgid "logging"
msgstr ""

#: ../../whatsnew/3.2.rst:1172
msgid ""
"In addition to dictionary-based configuration described above, the "
":mod:`logging` package has many other improvements."
msgstr ""

#: ../../whatsnew/3.2.rst:1175
msgid ""
"The logging documentation has been augmented by a :ref:`basic tutorial "
"<logging-basic-tutorial>`\\, an :ref:`advanced tutorial <logging-"
"advanced-tutorial>`\\, and a :ref:`cookbook <logging-cookbook>` of "
"logging recipes.  These documents are the fastest way to learn about "
"logging."
msgstr ""

#: ../../whatsnew/3.2.rst:1180
#, python-format
msgid ""
"The :func:`logging.basicConfig` set-up function gained a *style* argument"
" to support three different types of string formatting.  It defaults to "
"\"%\" for traditional %-formatting, can be set to \"{\" for the new "
":meth:`str.format` style, or can be set to \"$\" for the shell-style "
"formatting provided by :class:`string.Template`.  The following three "
"configurations are equivalent::"
msgstr ""

#: ../../whatsnew/3.2.rst:1191
msgid ""
"If no configuration is set-up before a logging event occurs, there is now"
" a default configuration using a :class:`~logging.StreamHandler` directed"
" to :attr:`sys.stderr` for events of ``WARNING`` level or higher.  "
"Formerly, an event occurring before a configuration was set-up would "
"either raise an exception or silently drop the event depending on the "
"value of :attr:`logging.raiseExceptions`.  The new default handler is "
"stored in :attr:`logging.lastResort`."
msgstr ""

#: ../../whatsnew/3.2.rst:1199
msgid ""
"The use of filters has been simplified.  Instead of creating a "
":class:`~logging.Filter` object, the predicate can be any Python callable"
" that returns ``True`` or ``False``."
msgstr ""

#: ../../whatsnew/3.2.rst:1203
msgid ""
"There were a number of other improvements that add flexibility and "
"simplify configuration.  See the module documentation for a full listing "
"of changes in Python 3.2."
msgstr ""

#: ../../whatsnew/3.2.rst:1208 ../../whatsnew/3.5.rst:1039
#: ../../whatsnew/3.8.rst:725
msgid "csv"
msgstr ""

#: ../../whatsnew/3.2.rst:1210
msgid ""
"The :mod:`csv` module now supports a new dialect, "
":class:`~csv.unix_dialect`, which applies quoting for all fields and a "
"traditional Unix style with ``'\\n'`` as the line terminator.  The "
"registered dialect name is ``unix``."
msgstr ""

#: ../../whatsnew/3.2.rst:1214
msgid ""
"The :class:`csv.DictWriter` has a new method, "
":meth:`~csv.DictWriter.writeheader` for writing-out an initial row to "
"document the field names::"
msgstr ""

#: ../../whatsnew/3.2.rst:1228
msgid ""
"(New dialect suggested by Jay Talbot in :issue:`5975`, and the new method"
" suggested by Ed Abraham in :issue:`1537721`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1232 ../../whatsnew/3.3.rst:1037
#: ../../whatsnew/3.4.rst:680 ../../whatsnew/3.5.rst:1020
#: ../../whatsnew/3.6.rst:959 ../../whatsnew/3.7.rst:826
msgid "contextlib"
msgstr ""

#: ../../whatsnew/3.2.rst:1234
msgid ""
"There is a new and slightly mind-blowing tool "
":class:`~contextlib.ContextDecorator` that is helpful for creating a "
":term:`context manager` that does double duty as a function decorator."
msgstr ""

#: ../../whatsnew/3.2.rst:1238
msgid ""
"As a convenience, this new functionality is used by "
":func:`~contextlib.contextmanager` so that no extra effort is needed to "
"support both roles."
msgstr ""

#: ../../whatsnew/3.2.rst:1242
msgid ""
"The basic idea is that both context managers and function decorators can "
"be used for pre-action and post-action wrappers.  Context managers wrap a"
" group of statements using a :keyword:`with` statement, and function "
"decorators wrap a group of statements enclosed in a function.  So, "
"occasionally there is a need to write a pre-action or post-action wrapper"
" that can be used in either role."
msgstr ""

#: ../../whatsnew/3.2.rst:1248
msgid ""
"For example, it is sometimes useful to wrap functions or groups of "
"statements with a logger that can track the time of entry and time of "
"exit.  Rather than writing both a function decorator and a context "
"manager for the task, the :func:`~contextlib.contextmanager` provides "
"both capabilities in a single definition::"
msgstr ""

#: ../../whatsnew/3.2.rst:1265
msgid "Formerly, this would have only been usable as a context manager::"
msgstr ""

#: ../../whatsnew/3.2.rst:1271
msgid "Now, it can be used as a decorator as well::"
msgstr ""

#: ../../whatsnew/3.2.rst:1278
msgid ""
"Trying to fulfill two roles at once places some limitations on the "
"technique. Context managers normally have the flexibility to return an "
"argument usable by a :keyword:`with` statement, but there is no parallel "
"for function decorators."
msgstr ""

#: ../../whatsnew/3.2.rst:1282
msgid ""
"In the above example, there is not a clean way for the "
"*track_entry_and_exit* context manager to return a logging instance for "
"use in the body of enclosed statements."
msgstr ""

#: ../../whatsnew/3.2.rst:1286
msgid "(Contributed by Michael Foord in :issue:`9110`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1289
msgid "decimal and fractions"
msgstr ""

#: ../../whatsnew/3.2.rst:1291
msgid ""
"Mark Dickinson crafted an elegant and efficient scheme for assuring that "
"different numeric datatypes will have the same hash value whenever their "
"actual values are equal (:issue:`8188`)::"
msgstr ""

#: ../../whatsnew/3.2.rst:1298
msgid ""
"Some of the hashing details are exposed through a new attribute, "
":attr:`sys.hash_info`, which describes the bit width of the hash value, "
"the prime modulus, the hash values for *infinity* and *nan*, and the "
"multiplier used for the imaginary part of a number:"
msgstr ""

#: ../../whatsnew/3.2.rst:1306
msgid ""
"An early decision to limit the inter-operability of various numeric types"
" has been relaxed.  It is still unsupported (and ill-advised) to have "
"implicit mixing in arithmetic expressions such as ``Decimal('1.1') + "
"float('1.1')`` because the latter loses information in the process of "
"constructing the binary float.  However, since existing floating point "
"value can be converted losslessly to either a decimal or rational "
"representation, it makes sense to add them to the constructor and to "
"support mixed-type comparisons."
msgstr ""

#: ../../whatsnew/3.2.rst:1314
msgid ""
"The :class:`decimal.Decimal` constructor now accepts :class:`float` "
"objects directly so there in no longer a need to use the "
":meth:`~decimal.Decimal.from_float` method (:issue:`8257`)."
msgstr ""

#: ../../whatsnew/3.2.rst:1318
msgid ""
"Mixed type comparisons are now fully supported so that "
":class:`~decimal.Decimal` objects can be directly compared with "
":class:`float` and :class:`fractions.Fraction` (:issue:`2531` and "
":issue:`8188`)."
msgstr ""

#: ../../whatsnew/3.2.rst:1322
msgid ""
"Similar changes were made to :class:`fractions.Fraction` so that the "
":meth:`~fractions.Fraction.from_float()` and "
":meth:`~fractions.Fraction.from_decimal` methods are no longer needed "
"(:issue:`8294`):"
msgstr ""

#: ../../whatsnew/3.2.rst:1333
msgid ""
"Another useful change for the :mod:`decimal` module is that the "
":attr:`Context.clamp` attribute is now public.  This is useful in "
"creating contexts that correspond to the decimal interchange formats "
"specified in IEEE 754 (see :issue:`8540`)."
msgstr ""

#: ../../whatsnew/3.2.rst:1338
msgid "(Contributed by Mark Dickinson and Raymond Hettinger.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1341
msgid "ftp"
msgstr ""

#: ../../whatsnew/3.2.rst:1343
msgid ""
"The :class:`ftplib.FTP` class now supports the context management "
"protocol to unconditionally consume :exc:`socket.error` exceptions and to"
" close the FTP connection when done::"
msgstr ""

#: ../../whatsnew/3.2.rst:1358
msgid ""
"Other file-like objects such as :class:`mmap.mmap` and "
":func:`fileinput.input` also grew auto-closing context managers::"
msgstr ""

#: ../../whatsnew/3.2.rst:1365
msgid ""
"(Contributed by Tarek Ziad√© and Giampaolo Rodol√† in :issue:`4972`, and by"
" Georg Brandl in :issue:`8046` and :issue:`1286`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1368
msgid ""
"The :class:`~ftplib.FTP_TLS` class now accepts a *context* parameter, "
"which is a :class:`ssl.SSLContext` object allowing bundling SSL "
"configuration options, certificates and private keys into a single "
"(potentially long-lived) structure."
msgstr ""

#: ../../whatsnew/3.2.rst:1372
msgid "(Contributed by Giampaolo Rodol√†; :issue:`8806`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1375
msgid "popen"
msgstr ""

#: ../../whatsnew/3.2.rst:1377
msgid ""
"The :func:`os.popen` and :func:`subprocess.Popen` functions now support "
":keyword:`with` statements for auto-closing of the file descriptors."
msgstr ""

#: ../../whatsnew/3.2.rst:1380
msgid ""
"(Contributed by Antoine Pitrou and Brian Curtin in :issue:`7461` and "
":issue:`10554`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1384 ../../whatsnew/3.3.rst:1769
#: ../../whatsnew/3.4.rst:1338
msgid "select"
msgstr ""

#: ../../whatsnew/3.2.rst:1386
msgid ""
"The :mod:`select` module now exposes a new, constant attribute, "
":attr:`~select.PIPE_BUF`, which gives the minimum number of bytes which "
"are guaranteed not to block when :func:`select.select` says a pipe is "
"ready for writing."
msgstr ""

#: ../../whatsnew/3.2.rst:1395
msgid "(Available on Unix systems. Patch by S√©bastien Sabl√© in :issue:`9862`)"
msgstr ""

#: ../../whatsnew/3.2.rst:1398
msgid "gzip and zipfile"
msgstr ""

#: ../../whatsnew/3.2.rst:1400
msgid ""
":class:`gzip.GzipFile` now implements the :class:`io.BufferedIOBase` "
":term:`abstract base class` (except for ``truncate()``).  It also has a "
":meth:`~gzip.GzipFile.peek` method and supports unseekable as well as "
"zero-padded file objects."
msgstr ""

#: ../../whatsnew/3.2.rst:1405
msgid ""
"The :mod:`gzip` module also gains the :func:`~gzip.compress` and "
":func:`~gzip.decompress` functions for easier in-memory compression and "
"decompression.  Keep in mind that text needs to be encoded as "
":class:`bytes` before compressing and decompressing:"
msgstr ""

#: ../../whatsnew/3.2.rst:1422
msgid ""
"(Contributed by Anand B. Pillai in :issue:`3488`; and by Antoine Pitrou, "
"Nir Aides and Brian Curtin in :issue:`9962`, :issue:`1675951`, "
":issue:`7471` and :issue:`2846`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1426
msgid ""
"Also, the :class:`zipfile.ZipExtFile` class was reworked internally to "
"represent files stored inside an archive.  The new implementation is "
"significantly faster and can be wrapped in an :class:`io.BufferedReader` "
"object for more speedups.  It also solves an issue where interleaved "
"calls to *read* and *readline* gave the wrong results."
msgstr ""

#: ../../whatsnew/3.2.rst:1432
msgid "(Patch submitted by Nir Aides in :issue:`7610`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1435 ../../whatsnew/3.3.rst:2011
#: ../../whatsnew/3.4.rst:1573 ../../whatsnew/3.5.rst:1888
#: ../../whatsnew/3.8.rst:1246
msgid "tarfile"
msgstr ""

#: ../../whatsnew/3.2.rst:1437
msgid ""
"The :class:`~tarfile.TarFile` class can now be used as a context manager."
"  In addition, its :meth:`~tarfile.TarFile.add` method has a new option, "
"*filter*, that controls which files are added to the archive and allows "
"the file metadata to be edited."
msgstr ""

#: ../../whatsnew/3.2.rst:1442
msgid ""
"The new *filter* option replaces the older, less flexible *exclude* "
"parameter which is now deprecated.  If specified, the optional *filter* "
"parameter needs to be a :term:`keyword argument`.  The user-supplied "
"filter function accepts a :class:`~tarfile.TarInfo` object and returns an"
" updated :class:`~tarfile.TarInfo` object, or if it wants the file to be "
"excluded, the function can return ``None``::"
msgstr ""

#: ../../whatsnew/3.2.rst:1466
msgid ""
"(Proposed by Tarek Ziad√© and implemented by Lars Gust√§bel in "
":issue:`6856`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1469 ../../whatsnew/3.4.rst:901
#: ../../whatsnew/3.6.rst:1091
msgid "hashlib"
msgstr ""

#: ../../whatsnew/3.2.rst:1471
msgid ""
"The :mod:`hashlib` module has two new constant attributes listing the "
"hashing algorithms guaranteed to be present in all implementations and "
"those available on the current implementation::"
msgstr ""

#: ../../whatsnew/3.2.rst:1486
msgid "(Suggested by Carl Chenet in :issue:`7418`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1489 ../../whatsnew/3.6.rst:804
#: ../../whatsnew/3.8.rst:570
msgid "ast"
msgstr ""

#: ../../whatsnew/3.2.rst:1491
msgid ""
"The :mod:`ast` module has a wonderful a general-purpose tool for safely "
"evaluating expression strings using the Python literal syntax.  The "
":func:`ast.literal_eval` function serves as a secure alternative to the "
"builtin :func:`eval` function which is easily abused.  Python 3.2 adds "
":class:`bytes` and :class:`set` literals to the list of supported types: "
"strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and "
"``None``."
msgstr ""

#: ../../whatsnew/3.2.rst:1512
msgid "(Implemented by Benjamin Peterson and Georg Brandl.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1515 ../../whatsnew/3.3.rst:1575
#: ../../whatsnew/3.4.rst:1171 ../../whatsnew/3.5.rst:1480
#: ../../whatsnew/3.6.rst:1268 ../../whatsnew/3.6.rst:2017
#: ../../whatsnew/3.7.rst:1159 ../../whatsnew/3.8.rst:1021
msgid "os"
msgstr ""

#: ../../whatsnew/3.2.rst:1517
msgid ""
"Different operating systems use various encodings for filenames and "
"environment variables.  The :mod:`os` module provides two new functions, "
":func:`~os.fsencode` and :func:`~os.fsdecode`, for encoding and decoding "
"filenames:"
msgstr ""

#: ../../whatsnew/3.2.rst:1527
msgid ""
"Some operating systems allow direct access to encoded bytes in the "
"environment.  If so, the :attr:`os.supports_bytes_environ` constant will "
"be true."
msgstr ""

#: ../../whatsnew/3.2.rst:1531
msgid ""
"For direct access to encoded environment variables (if available), use "
"the new :func:`os.getenvb` function or use :data:`os.environb` which is a"
" bytes version of :data:`os.environ`."
msgstr ""

#: ../../whatsnew/3.2.rst:1535
msgid "(Contributed by Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1538 ../../whatsnew/3.3.rst:1786
#: ../../whatsnew/3.4.rst:1360 ../../whatsnew/3.5.rst:1639
#: ../../whatsnew/3.8.rst:1151
msgid "shutil"
msgstr ""

#: ../../whatsnew/3.2.rst:1540
msgid "The :func:`shutil.copytree` function has two new options:"
msgstr ""

#: ../../whatsnew/3.2.rst:1542
msgid ""
"*ignore_dangling_symlinks*: when ``symlinks=False`` so that the function "
"copies a file pointed to by a symlink, not the symlink itself. This "
"option will silence the error raised if the file doesn't exist."
msgstr ""

#: ../../whatsnew/3.2.rst:1546
msgid ""
"*copy_function*: is a callable that will be used to copy files. "
":func:`shutil.copy2` is used by default."
msgstr ""

#: ../../whatsnew/3.2.rst:1549 ../../whatsnew/3.2.rst:1587
msgid "(Contributed by Tarek Ziad√©.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1551
msgid ""
"In addition, the :mod:`shutil` module now supports :ref:`archiving "
"operations <archiving-operations>` for zipfiles, uncompressed tarfiles, "
"gzipped tarfiles, and bzipped tarfiles.  And there are functions for "
"registering additional archiving file formats (such as xz compressed "
"tarfiles or custom formats)."
msgstr ""

#: ../../whatsnew/3.2.rst:1556
msgid ""
"The principal functions are :func:`~shutil.make_archive` and "
":func:`~shutil.unpack_archive`.  By default, both operate on the current "
"directory (which can be set by :func:`os.chdir`) and on any sub-"
"directories. The archive filename needs to be specified with a full "
"pathname.  The archiving step is non-destructive (the original files are "
"left unchanged)."
msgstr ""

#: ../../whatsnew/3.2.rst:1590 ../../whatsnew/3.3.rst:1916
#: ../../whatsnew/3.4.rst:1409 ../../whatsnew/3.5.rst:1827
#: ../../whatsnew/3.6.rst:1397 ../../whatsnew/3.7.rst:1310
msgid "sqlite3"
msgstr ""

#: ../../whatsnew/3.2.rst:1592
msgid ""
"The :mod:`sqlite3` module was updated to pysqlite version 2.6.0.  It has "
"two new capabilities."
msgstr ""

#: ../../whatsnew/3.2.rst:1594
msgid ""
"The :attr:`sqlite3.Connection.in_transit` attribute is true if there is "
"an active transaction for uncommitted changes."
msgstr ""

#: ../../whatsnew/3.2.rst:1597
msgid ""
"The :meth:`sqlite3.Connection.enable_load_extension` and "
":meth:`sqlite3.Connection.load_extension` methods allows you to load "
"SQLite extensions from \".so\" files.  One well-known extension is the "
"fulltext-search extension distributed with SQLite."
msgstr ""

#: ../../whatsnew/3.2.rst:1602
msgid "(Contributed by R. David Murray and Shashwat Anand; :issue:`8845`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1605 ../../whatsnew/3.3.rst:1430
#: ../../whatsnew/3.4.rst:938
msgid "html"
msgstr ""

#: ../../whatsnew/3.2.rst:1607
msgid ""
"A new :mod:`html` module was introduced with only a single function, "
":func:`~html.escape`, which is used for escaping reserved characters from"
" HTML markup:"
msgstr ""

#: ../../whatsnew/3.2.rst:1616 ../../whatsnew/3.3.rst:1875
#: ../../whatsnew/3.4.rst:1389 ../../whatsnew/3.5.rst:1723
#: ../../whatsnew/3.6.rst:1404 ../../whatsnew/3.7.rst:1271
#: ../../whatsnew/3.7.rst:2044 ../../whatsnew/3.8.rst:1167
msgid "socket"
msgstr ""

#: ../../whatsnew/3.2.rst:1618
msgid "The :mod:`socket` module has two new improvements."
msgstr ""

#: ../../whatsnew/3.2.rst:1620
msgid ""
"Socket objects now have a :meth:`~socket.socket.detach()` method which "
"puts the socket into closed state without actually closing the underlying"
" file descriptor.  The latter can then be reused for other purposes. "
"(Added by Antoine Pitrou; :issue:`8524`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1625
msgid ""
":func:`socket.create_connection` now supports the context management "
"protocol to unconditionally consume :exc:`socket.error` exceptions and to"
" close the socket when done. (Contributed by Giampaolo Rodol√†; "
":issue:`9794`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1631 ../../whatsnew/3.3.rst:1925
#: ../../whatsnew/3.4.rst:1418 ../../whatsnew/3.5.rst:1746
#: ../../whatsnew/3.6.rst:1445 ../../whatsnew/3.6.rst:2033
#: ../../whatsnew/3.7.rst:1322 ../../whatsnew/3.7.rst:2053
#: ../../whatsnew/3.8.rst:1180
msgid "ssl"
msgstr ""

#: ../../whatsnew/3.2.rst:1633
msgid ""
"The :mod:`ssl` module added a number of features to satisfy common "
"requirements for secure (encrypted, authenticated) internet connections:"
msgstr ""

#: ../../whatsnew/3.2.rst:1636
msgid ""
"A new class, :class:`~ssl.SSLContext`, serves as a container for "
"persistent SSL data, such as protocol settings, certificates, private "
"keys, and various other options. It includes a "
":meth:`~ssl.SSLContext.wrap_socket` for creating an SSL socket from an "
"SSL context."
msgstr ""

#: ../../whatsnew/3.2.rst:1641
msgid ""
"A new function, :func:`ssl.match_hostname`, supports server identity "
"verification for higher-level protocols by implementing the rules of "
"HTTPS (from :rfc:`2818`) which are also suitable for other protocols."
msgstr ""

#: ../../whatsnew/3.2.rst:1645
msgid ""
"The :func:`ssl.wrap_socket` constructor function now takes a *ciphers* "
"argument.  The *ciphers* string lists the allowed encryption algorithms "
"using the format described in the `OpenSSL documentation "
"<https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-"
"FORMAT>`__."
msgstr ""

#: ../../whatsnew/3.2.rst:1650
msgid ""
"When linked against recent versions of OpenSSL, the :mod:`ssl` module now"
" supports the Server Name Indication extension to the TLS protocol, "
"allowing multiple \"virtual hosts\" using different certificates on a "
"single IP port. This extension is only supported in client mode, and is "
"activated by passing the *server_hostname* argument to "
":meth:`ssl.SSLContext.wrap_socket`."
msgstr ""

#: ../../whatsnew/3.2.rst:1656
msgid ""
"Various options have been added to the :mod:`ssl` module, such as "
":data:`~ssl.OP_NO_SSLv2` which disables the insecure and obsolete SSLv2 "
"protocol."
msgstr ""

#: ../../whatsnew/3.2.rst:1660
msgid ""
"The extension now loads all the OpenSSL ciphers and digest algorithms.  "
"If some SSL certificates cannot be verified, they are reported as an "
"\"unknown algorithm\" error."
msgstr ""

#: ../../whatsnew/3.2.rst:1664
msgid ""
"The version of OpenSSL being used is now accessible using the module "
"attributes :data:`ssl.OPENSSL_VERSION` (a string), "
":data:`ssl.OPENSSL_VERSION_INFO` (a 5-tuple), and "
":data:`ssl.OPENSSL_VERSION_NUMBER` (an integer)."
msgstr ""

#: ../../whatsnew/3.2.rst:1669
msgid ""
"(Contributed by Antoine Pitrou in :issue:`8850`, :issue:`1589`, "
":issue:`8322`, :issue:`5639`, :issue:`4870`, :issue:`8484`, and "
":issue:`8321`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1673
msgid "nntp"
msgstr ""

#: ../../whatsnew/3.2.rst:1675
msgid ""
"The :mod:`nntplib` module has a revamped implementation with better bytes"
" and text semantics as well as more practical APIs.  These improvements "
"break compatibility with the nntplib version in Python 3.1, which was "
"partly dysfunctional in itself."
msgstr ""

#: ../../whatsnew/3.2.rst:1680
msgid ""
"Support for secure connections through both implicit (using "
":class:`nntplib.NNTP_SSL`) and explicit (using "
":meth:`nntplib.NNTP.starttls`) TLS has also been added."
msgstr ""

#: ../../whatsnew/3.2.rst:1684
msgid ""
"(Contributed by Antoine Pitrou in :issue:`9360` and Andrew Vant in "
":issue:`1926`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1687
msgid "certificates"
msgstr ""

#: ../../whatsnew/3.2.rst:1689
msgid ""
":class:`http.client.HTTPSConnection`, "
":class:`urllib.request.HTTPSHandler` and :func:`urllib.request.urlopen` "
"now take optional arguments to allow for server certificate checking "
"against a set of Certificate Authorities, as recommended in public uses "
"of HTTPS."
msgstr ""

#: ../../whatsnew/3.2.rst:1694
msgid "(Added by Antoine Pitrou, :issue:`9003`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1697 ../../whatsnew/3.3.rst:1450
#: ../../whatsnew/3.5.rst:1233
msgid "imaplib"
msgstr ""

#: ../../whatsnew/3.2.rst:1699
msgid ""
"Support for explicit TLS on standard IMAP4 connections has been added "
"through the new :mod:`imaplib.IMAP4.starttls` method."
msgstr ""

#: ../../whatsnew/3.2.rst:1702
msgid "(Contributed by Lorenzo M. Catucci and Antoine Pitrou, :issue:`4471`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1705 ../../whatsnew/3.5.rst:1201
#: ../../whatsnew/3.6.rst:1114 ../../whatsnew/3.7.rst:949
msgid "http.client"
msgstr ""

#: ../../whatsnew/3.2.rst:1707
msgid ""
"There were a number of small API improvements in the :mod:`http.client` "
"module. The old-style HTTP 0.9 simple responses are no longer supported "
"and the *strict* parameter is deprecated in all classes."
msgstr ""

#: ../../whatsnew/3.2.rst:1711
msgid ""
"The :class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` classes now have a *source_address*"
" parameter for a (host, port) tuple indicating where the HTTP connection "
"is made from."
msgstr ""

#: ../../whatsnew/3.2.rst:1716
msgid ""
"Support for certificate checking and HTTPS virtual hosts were added to "
":class:`~http.client.HTTPSConnection`."
msgstr ""

#: ../../whatsnew/3.2.rst:1719
msgid ""
"The :meth:`~http.client.HTTPConnection.request` method on connection "
"objects allowed an optional *body* argument so that a :term:`file object`"
" could be used to supply the content of the request.  Conveniently, the "
"*body* argument now also accepts an :term:`iterable` object so long as it"
" includes an explicit ``Content-Length`` header.  This extended interface"
" is much more flexible than before."
msgstr ""

#: ../../whatsnew/3.2.rst:1726
msgid ""
"To establish an HTTPS connection through a proxy server, there is a new "
":meth:`~http.client.HTTPConnection.set_tunnel` method that sets the host "
"and port for HTTP Connect tunneling."
msgstr ""

#: ../../whatsnew/3.2.rst:1730
msgid ""
"To match the behavior of :mod:`http.server`, the HTTP client library now "
"also encodes headers with ISO-8859-1 (Latin-1) encoding.  It was already "
"doing that for incoming headers, so now the behavior is consistent for "
"both incoming and outgoing traffic. (See work by Armin Ronacher in "
":issue:`10980`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1736 ../../whatsnew/3.3.rst:2089
#: ../../whatsnew/3.4.rst:1655 ../../whatsnew/3.5.rst:1984
#: ../../whatsnew/3.7.rst:1514 ../../whatsnew/3.8.rst:1359
msgid "unittest"
msgstr ""

#: ../../whatsnew/3.2.rst:1738
msgid ""
"The unittest module has a number of improvements supporting test "
"discovery for packages, easier experimentation at the interactive prompt,"
" new testcase methods, improved diagnostic messages for test failures, "
"and better method names."
msgstr ""

#: ../../whatsnew/3.2.rst:1743
msgid ""
"The command-line call ``python -m unittest`` can now accept file paths "
"instead of module names for running specific tests (:issue:`10620`).  The"
" new test discovery can find tests within packages, locating any test "
"importable from the top-level directory.  The top-level directory can be "
"specified with the `-t` option, a pattern for matching files with ``-p``,"
" and a directory to start discovery with ``-s``:"
msgstr ""

#: ../../whatsnew/3.2.rst:1754 ../../whatsnew/3.2.rst:1763
#: ../../whatsnew/3.2.rst:1919
msgid "(Contributed by Michael Foord.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1756
msgid ""
"Experimentation at the interactive prompt is now easier because the "
":class:`unittest.case.TestCase` class can now be instantiated without "
"arguments:"
msgstr ""

#: ../../whatsnew/3.2.rst:1765
msgid ""
"The :mod:`unittest` module has two new methods, "
":meth:`~unittest.TestCase.assertWarns` and "
":meth:`~unittest.TestCase.assertWarnsRegex` to verify that a given "
"warning type is triggered by the code under test::"
msgstr ""

#: ../../whatsnew/3.2.rst:1773
msgid "(Contributed by Antoine Pitrou, :issue:`9754`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1775
msgid ""
"Another new method, :meth:`~unittest.TestCase.assertCountEqual` is used "
"to compare two iterables to determine if their element counts are equal "
"(whether the same elements are present with the same number of "
"occurrences regardless of order)::"
msgstr ""

#: ../../whatsnew/3.2.rst:1785
msgid ""
"A principal feature of the unittest module is an effort to produce "
"meaningful diagnostics when a test fails.  When possible, the failure is "
"recorded along with a diff of the output.  This is especially helpful for"
" analyzing log files of failed test runs. However, since diffs can "
"sometime be voluminous, there is a new :attr:`~unittest.TestCase.maxDiff`"
" attribute that sets maximum length of diffs displayed."
msgstr ""

#: ../../whatsnew/3.2.rst:1792
msgid ""
"In addition, the method names in the module have undergone a number of "
"clean-ups."
msgstr ""

#: ../../whatsnew/3.2.rst:1794
msgid ""
"For example, :meth:`~unittest.TestCase.assertRegex` is the new name for "
":meth:`~unittest.TestCase.assertRegexpMatches` which was misnamed because"
" the test uses :func:`re.search`, not :func:`re.match`.  Other methods "
"using regular expressions are now named using short form \"Regex\" in "
"preference to \"Regexp\" -- this matches the names used in other unittest"
" implementations, matches Python's old name for the :mod:`re` module, and"
" it has unambiguous camel-casing."
msgstr ""

#: ../../whatsnew/3.2.rst:1802
msgid "(Contributed by Raymond Hettinger and implemented by Ezio Melotti.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1804
msgid ""
"To improve consistency, some long-standing method aliases are being "
"deprecated in favor of the preferred names:"
msgstr ""

#: ../../whatsnew/3.2.rst:1808
msgid "Preferred Name"
msgstr ""

#: ../../whatsnew/3.2.rst:1810
msgid ":meth:`assert_`"
msgstr ""

#: ../../whatsnew/3.2.rst:1810
msgid ":meth:`.assertTrue`"
msgstr ""

#: ../../whatsnew/3.2.rst:1811
msgid ":meth:`assertEquals`"
msgstr ""

#: ../../whatsnew/3.2.rst:1811
msgid ":meth:`.assertEqual`"
msgstr ""

#: ../../whatsnew/3.2.rst:1812
msgid ":meth:`assertNotEquals`"
msgstr ""

#: ../../whatsnew/3.2.rst:1812
msgid ":meth:`.assertNotEqual`"
msgstr ""

#: ../../whatsnew/3.2.rst:1813
msgid ":meth:`assertAlmostEquals`"
msgstr ""

#: ../../whatsnew/3.2.rst:1813
msgid ":meth:`.assertAlmostEqual`"
msgstr ""

#: ../../whatsnew/3.2.rst:1814
msgid ":meth:`assertNotAlmostEquals`"
msgstr ""

#: ../../whatsnew/3.2.rst:1814
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ""

#: ../../whatsnew/3.2.rst:1817
msgid ""
"Likewise, the ``TestCase.fail*`` methods deprecated in Python 3.1 are "
"expected to be removed in Python 3.3.  Also see the :ref:`deprecated-"
"aliases` section in the :mod:`unittest` documentation."
msgstr ""

#: ../../whatsnew/3.2.rst:1821
msgid "(Contributed by Ezio Melotti; :issue:`9424`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1823
msgid ""
"The :meth:`~unittest.TestCase.assertDictContainsSubset` method was "
"deprecated because it was misimplemented with the arguments in the wrong "
"order.  This created hard-to-debug optical illusions where tests like "
"``TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})`` would "
"fail."
msgstr ""

#: ../../whatsnew/3.2.rst:1831 ../../whatsnew/3.6.rst:1337
msgid "random"
msgstr ""

#: ../../whatsnew/3.2.rst:1833
msgid ""
"The integer methods in the :mod:`random` module now do a better job of "
"producing uniform distributions.  Previously, they computed selections "
"with ``int(n*random())`` which had a slight bias whenever *n* was not a "
"power of two. Now, multiple selections are made from a range up to the "
"next power of two and a selection is kept only when it falls within the "
"range ``0 <= x < n``.  The functions and methods affected are "
":func:`~random.randrange`, :func:`~random.randint`, "
":func:`~random.choice`, :func:`~random.shuffle` and "
":func:`~random.sample`."
msgstr ""

#: ../../whatsnew/3.2.rst:1842
msgid "(Contributed by Raymond Hettinger; :issue:`9025`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1845 ../../whatsnew/3.4.rst:1247
#: ../../whatsnew/3.5.rst:1576
msgid "poplib"
msgstr ""

#: ../../whatsnew/3.2.rst:1847
msgid ""
":class:`~poplib.POP3_SSL` class now accepts a *context* parameter, which "
"is a :class:`ssl.SSLContext` object allowing bundling SSL configuration "
"options, certificates and private keys into a single (potentially long-"
"lived) structure."
msgstr ""

#: ../../whatsnew/3.2.rst:1852
msgid "(Contributed by Giampaolo Rodol√†; :issue:`8807`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1855 ../../whatsnew/3.6.rst:1969
msgid "asyncore"
msgstr ""

#: ../../whatsnew/3.2.rst:1857
msgid ""
":class:`asyncore.dispatcher` now provides a "
":meth:`~asyncore.dispatcher.handle_accepted()` method returning a `(sock,"
" addr)` pair which is called when a connection has actually been "
"established with a new remote endpoint. This is supposed to be used as a "
"replacement for old :meth:`~asyncore.dispatcher.handle_accept()` and "
"avoids the user  to call :meth:`~asyncore.dispatcher.accept()` directly."
msgstr ""

#: ../../whatsnew/3.2.rst:1864
msgid "(Contributed by Giampaolo Rodol√†; :issue:`6706`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1867 ../../whatsnew/3.3.rst:2018
msgid "tempfile"
msgstr ""

#: ../../whatsnew/3.2.rst:1869
msgid ""
"The :mod:`tempfile` module has a new context manager, "
":class:`~tempfile.TemporaryDirectory` which provides easy deterministic "
"cleanup of temporary directories::"
msgstr ""

#: ../../whatsnew/3.2.rst:1876
msgid "(Contributed by Neil Schemenauer and Nick Coghlan; :issue:`5178`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1879 ../../whatsnew/3.3.rst:1459
#: ../../whatsnew/3.4.rst:1024 ../../whatsnew/3.5.rst:1283
#: ../../whatsnew/3.6.rst:1219 ../../whatsnew/3.8.rst:889
msgid "inspect"
msgstr ""

#: ../../whatsnew/3.2.rst:1881
msgid ""
"The :mod:`inspect` module has a new function "
":func:`~inspect.getgeneratorstate` to easily identify the current state "
"of a generator-iterator::"
msgstr ""

#: ../../whatsnew/3.2.rst:1899
msgid "(Contributed by Rodolpho Eckhardt and Nick Coghlan, :issue:`10220`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1901
msgid ""
"To support lookups without the possibility of activating a dynamic "
"attribute, the :mod:`inspect` module has a new function, "
":func:`~inspect.getattr_static`. Unlike :func:`hasattr`, this is a true "
"read-only search, guaranteed not to change state while it is searching::"
msgstr ""

#: ../../whatsnew/3.2.rst:1922 ../../whatsnew/3.3.rst:1726
#: ../../whatsnew/3.4.rst:1278 ../../whatsnew/3.6.rst:1325
#: ../../whatsnew/3.7.rst:1221
msgid "pydoc"
msgstr ""

#: ../../whatsnew/3.2.rst:1924
msgid ""
"The :mod:`pydoc` module now provides a much-improved Web server "
"interface, as well as a new command-line option ``-b`` to automatically "
"open a browser window to display that server:"
msgstr ""

#: ../../whatsnew/3.2.rst:1932
msgid "(Contributed by Ron Adam; :issue:`2001`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1935 ../../whatsnew/3.4.rst:713
#: ../../whatsnew/3.7.rst:886
msgid "dis"
msgstr ""

#: ../../whatsnew/3.2.rst:1937
msgid ""
"The :mod:`dis` module gained two new functions for inspecting code, "
":func:`~dis.code_info` and :func:`~dis.show_code`.  Both provide detailed"
" code object information for the supplied function, method, source code "
"string or code object.  The former returns a string and the latter prints"
" it::"
msgstr ""

#: ../../whatsnew/3.2.rst:1964
msgid ""
"In addition, the :func:`~dis.dis` function now accepts string arguments "
"so that the common idiom ``dis(compile(s, '', 'eval'))`` can be shortened"
" to ``dis(s)``::"
msgstr ""

#: ../../whatsnew/3.2.rst:1986
msgid ""
"Taken together, these improvements make it easier to explore how CPython "
"is implemented and to see for yourself what the language syntax does "
"under-the-hood."
msgstr ""

#: ../../whatsnew/3.2.rst:1990
msgid "(Contributed by Nick Coghlan in :issue:`9147`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:1993 ../../whatsnew/3.4.rst:704
#: ../../whatsnew/3.5.rst:1054 ../../whatsnew/3.6.rst:1976
#: ../../whatsnew/3.7.rst:871 ../../whatsnew/3.7.rst:1974
msgid "dbm"
msgstr ""

#: ../../whatsnew/3.2.rst:1995
msgid ""
"All database modules now support the :meth:`get` and :meth:`setdefault` "
"methods."
msgstr ""

#: ../../whatsnew/3.2.rst:1997
msgid "(Suggested by Ray Allen in :issue:`9523`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2000 ../../whatsnew/3.8.rst:742
msgid "ctypes"
msgstr ""

#: ../../whatsnew/3.2.rst:2002
msgid ""
"A new type, :class:`ctypes.c_ssize_t` represents the C :c:type:`ssize_t` "
"datatype."
msgstr ""

#: ../../whatsnew/3.2.rst:2005 ../../whatsnew/3.6.rst:1389
msgid "site"
msgstr ""

#: ../../whatsnew/3.2.rst:2007
msgid ""
"The :mod:`site` module has three new functions useful for reporting on "
"the details of a given Python installation."
msgstr ""

#: ../../whatsnew/3.2.rst:2010
msgid ":func:`~site.getsitepackages` lists all global site-packages directories."
msgstr ""

#: ../../whatsnew/3.2.rst:2012
msgid ""
":func:`~site.getuserbase` reports on the user's base directory where data"
" can be stored."
msgstr ""

#: ../../whatsnew/3.2.rst:2015
msgid ""
":func:`~site.getusersitepackages` reveals the user-specific site-packages"
" directory path."
msgstr ""

#: ../../whatsnew/3.2.rst:2030
msgid ""
"Conveniently, some of site's functionality is accessible directly from "
"the command-line:"
msgstr ""

#: ../../whatsnew/3.2.rst:2040
msgid "(Contributed by Tarek Ziad√© in :issue:`6693`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2043 ../../whatsnew/3.5.rst:1880
msgid "sysconfig"
msgstr ""

#: ../../whatsnew/3.2.rst:2045
msgid ""
"The new :mod:`sysconfig` module makes it straightforward to discover "
"installation paths and configuration variables that vary across platforms"
" and installations."
msgstr ""

#: ../../whatsnew/3.2.rst:2049
msgid ""
"The module offers access simple access functions for platform and version"
" information:"
msgstr ""

#: ../../whatsnew/3.2.rst:2052
msgid ""
":func:`~sysconfig.get_platform` returning values like *linux-i586* or "
"*macosx-10.6-ppc*."
msgstr ""

#: ../../whatsnew/3.2.rst:2054
msgid ""
":func:`~sysconfig.get_python_version` returns a Python version string "
"such as \"3.2\"."
msgstr ""

#: ../../whatsnew/3.2.rst:2057
msgid ""
"It also provides access to the paths and variables corresponding to one "
"of seven named schemes used by :mod:`distutils`.  Those include "
"*posix_prefix*, *posix_home*, *posix_user*, *nt*, *nt_user*, *os2*, "
"*os2_home*:"
msgstr ""

#: ../../whatsnew/3.2.rst:2061
msgid ""
":func:`~sysconfig.get_paths` makes a dictionary containing installation "
"paths for the current installation scheme."
msgstr ""

#: ../../whatsnew/3.2.rst:2063
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary of platform "
"specific variables."
msgstr ""

#: ../../whatsnew/3.2.rst:2066
msgid "There is also a convenient command-line interface:"
msgstr ""

#: ../../whatsnew/3.2.rst:2105
msgid "(Moved out of Distutils by Tarek Ziad√©.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2108 ../../whatsnew/3.3.rst:1706
#: ../../whatsnew/3.4.rst:1199 ../../whatsnew/3.6.rst:1301
#: ../../whatsnew/3.7.rst:1198
msgid "pdb"
msgstr ""

#: ../../whatsnew/3.2.rst:2110
msgid "The :mod:`pdb` debugger module gained a number of usability improvements:"
msgstr ""

#: ../../whatsnew/3.2.rst:2112
msgid ""
":file:`pdb.py` now has a ``-c`` option that executes commands as given in"
" a :file:`.pdbrc` script file."
msgstr ""

#: ../../whatsnew/3.2.rst:2114
msgid ""
"A :file:`.pdbrc` script file can contain ``continue`` and ``next`` "
"commands that continue debugging."
msgstr ""

#: ../../whatsnew/3.2.rst:2116
msgid "The :class:`Pdb` class constructor now accepts a *nosigint* argument."
msgstr ""

#: ../../whatsnew/3.2.rst:2117
msgid ""
"New commands: ``l(list)``, ``ll(long list)`` and ``source`` for listing "
"source code."
msgstr ""

#: ../../whatsnew/3.2.rst:2119
msgid ""
"New commands: ``display`` and ``undisplay`` for showing or hiding the "
"value of an expression if it has changed."
msgstr ""

#: ../../whatsnew/3.2.rst:2121
msgid ""
"New command: ``interact`` for starting an interactive interpreter "
"containing the global and local  names found in the current scope."
msgstr ""

#: ../../whatsnew/3.2.rst:2123
msgid "Breakpoints can be cleared by breakpoint number."
msgstr ""

#: ../../whatsnew/3.2.rst:2125
msgid "(Contributed by Georg Brandl, Antonio Cuni and Ilya Sandler.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2130
msgid ""
"The :mod:`configparser` module was modified to improve usability and "
"predictability of the default parser and its supported INI syntax.  The "
"old :class:`ConfigParser` class was removed in favor of "
":class:`SafeConfigParser` which has in turn been renamed to "
":class:`~configparser.ConfigParser`. Support for inline comments is now "
"turned off by default and section or option duplicates are not allowed in"
" a single configuration source."
msgstr ""

#: ../../whatsnew/3.2.rst:2137
msgid "Config parsers gained a new API based on the mapping protocol::"
msgstr ""

#: ../../whatsnew/3.2.rst:2165
msgid ""
"The new API is implemented on top of the classical API, so custom parser "
"subclasses should be able to use it without modifications."
msgstr ""

#: ../../whatsnew/3.2.rst:2168
msgid ""
"The INI file structure accepted by config parsers can now be customized. "
"Users can specify alternative option/value delimiters and comment "
"prefixes, change the name of the *DEFAULT* section or switch the "
"interpolation syntax."
msgstr ""

#: ../../whatsnew/3.2.rst:2172
msgid ""
"There is support for pluggable interpolation including an additional "
"interpolation handler :class:`~configparser.ExtendedInterpolation`::"
msgstr ""

#: ../../whatsnew/3.2.rst:2205
msgid ""
"A number of smaller features were also introduced, like support for "
"specifying encoding in read operations, specifying fallback values for "
"get-functions, or reading directly from dictionaries and strings."
msgstr ""

#: ../../whatsnew/3.2.rst:2209
msgid "(All changes contributed by ≈Åukasz Langa.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2214 ../../whatsnew/3.7.rst:1539
#: ../../whatsnew/3.8.rst:2303
msgid "urllib.parse"
msgstr ""

#: ../../whatsnew/3.2.rst:2216
msgid ""
"A number of usability improvements were made for the :mod:`urllib.parse` "
"module."
msgstr ""

#: ../../whatsnew/3.2.rst:2218
msgid ""
"The :func:`~urllib.parse.urlparse` function now supports `IPv6 "
"<https://en.wikipedia.org/wiki/IPv6>`_ addresses as described in "
":rfc:`2732`:"
msgstr ""

#: ../../whatsnew/3.2.rst:2230
msgid ""
"The :func:`~urllib.parse.urldefrag` function now returns a :term:`named "
"tuple`::"
msgstr ""

#: ../../whatsnew/3.2.rst:2240
msgid ""
"And, the :func:`~urllib.parse.urlencode` function is now much more "
"flexible, accepting either a string or bytes type for the *query* "
"argument.  If it is a string, then the *safe*, *encoding*, and *error* "
"parameters are sent to :func:`~urllib.parse.quote_plus` for encoding::"
msgstr ""

#: ../../whatsnew/3.2.rst:2251
msgid ""
"As detailed in :ref:`parsing-ascii-encoded-bytes`, all the "
":mod:`urllib.parse` functions now accept ASCII-encoded byte strings as "
"input, so long as they are not mixed with regular strings.  If ASCII-"
"encoded byte strings are given as parameters, the return types will also "
"be an ASCII-encoded byte strings:"
msgstr ""

#: ../../whatsnew/3.2.rst:2260
msgid ""
"(Work by Nick Coghlan, Dan Mahn, and Senthil Kumaran in :issue:`2987`, "
":issue:`5468`, and :issue:`9873`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2264
msgid "mailbox"
msgstr ""

#: ../../whatsnew/3.2.rst:2266
msgid ""
"Thanks to a concerted effort by R. David Murray, the :mod:`mailbox` "
"module has been fixed for Python 3.2.  The challenge was that mailbox had"
" been originally designed with a text interface, but email messages are "
"best represented with :class:`bytes` because various parts of a message "
"may have different encodings."
msgstr ""

#: ../../whatsnew/3.2.rst:2271
msgid ""
"The solution harnessed the :mod:`email` package's binary support for "
"parsing arbitrary email messages.  In addition, the solution required a "
"number of API changes."
msgstr ""

#: ../../whatsnew/3.2.rst:2275
msgid ""
"As expected, the :meth:`~mailbox.Mailbox.add` method for "
":class:`mailbox.Mailbox` objects now accepts binary input."
msgstr ""

#: ../../whatsnew/3.2.rst:2278
msgid ""
":class:`~io.StringIO` and text file input are deprecated.  Also, string "
"input will fail early if non-ASCII characters are used.  Previously it "
"would fail when the email was processed in a later step."
msgstr ""

#: ../../whatsnew/3.2.rst:2282
msgid ""
"There is also support for binary output.  The "
":meth:`~mailbox.Mailbox.get_file` method now returns a file in the binary"
" mode (where it used to incorrectly set the file to text-mode).  There is"
" also a new :meth:`~mailbox.Mailbox.get_bytes` method that returns a "
":class:`bytes` representation of a message corresponding to a given "
"*key*."
msgstr ""

#: ../../whatsnew/3.2.rst:2288
msgid ""
"It is still possible to get non-binary output using the old API's "
":meth:`~mailbox.Mailbox.get_string` method, but that approach is not very"
" useful.  Instead, it is best to extract messages from a "
":class:`~mailbox.Message` object or to load them from binary input."
msgstr ""

#: ../../whatsnew/3.2.rst:2293
msgid ""
"(Contributed by R. David Murray, with efforts from Steffen Daode Nurpmeso"
" and an initial patch by Victor Stinner in :issue:`9124`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2297
msgid "turtledemo"
msgstr ""

#: ../../whatsnew/3.2.rst:2299
msgid ""
"The demonstration code for the :mod:`turtle` module was moved from the "
"*Demo* directory to main library.  It includes over a dozen sample "
"scripts with lively displays.  Being on :attr:`sys.path`, it can now be "
"run directly from the command-line:"
msgstr ""

#: ../../whatsnew/3.2.rst:2308
msgid "(Moved from the Demo directory by Alexander Belopolsky in :issue:`10199`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2311
msgid "Multi-threading"
msgstr ""

#: ../../whatsnew/3.2.rst:2313
msgid ""
"The mechanism for serializing execution of concurrently running Python "
"threads (generally known as the :term:`GIL` or Global Interpreter Lock) "
"has been rewritten.  Among the objectives were more predictable switching"
" intervals and reduced overhead due to lock contention and the number of "
"ensuing system calls.  The notion of a \"check interval\" to allow thread"
" switches has been abandoned and replaced by an absolute duration "
"expressed in seconds.  This parameter is tunable through "
":func:`sys.setswitchinterval()`. It currently defaults to 5 milliseconds."
msgstr ""

#: ../../whatsnew/3.2.rst:2322
msgid ""
"Additional details about the implementation can be read from a `python-"
"dev mailing-list message <https://mail.python.org/pipermail/python-"
"dev/2009-October/093321.html>`_ (however, \"priority requests\" as "
"exposed in this message have not been kept for inclusion)."
msgstr ""

#: ../../whatsnew/3.2.rst:2330
msgid ""
"Regular and recursive locks now accept an optional *timeout* argument to "
"their :meth:`~threading.Lock.acquire` method.  (Contributed by Antoine "
"Pitrou; :issue:`7316`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2334
msgid ""
"Similarly, :meth:`threading.Semaphore.acquire` also gained a *timeout* "
"argument.  (Contributed by Torsten Landschoff; :issue:`850728`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2337
msgid ""
"Regular and recursive lock acquisitions can now be interrupted by signals"
" on platforms using Pthreads.  This means that Python programs that "
"deadlock while acquiring locks can be successfully killed by repeatedly "
"sending SIGINT to the process (by pressing :kbd:`Ctrl+C` in most shells)."
" (Contributed by Reid Kleckner; :issue:`8844`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2347
msgid "A number of small performance enhancements have been added:"
msgstr ""

#: ../../whatsnew/3.2.rst:2349
msgid ""
"Python's peephole optimizer now recognizes patterns such ``x in {1, 2, "
"3}`` as being a test for membership in a set of constants.  The optimizer"
" recasts the :class:`set` as a :class:`frozenset` and stores the pre-"
"built constant."
msgstr ""

#: ../../whatsnew/3.2.rst:2353
msgid ""
"Now that the speed penalty is gone, it is practical to start writing "
"membership tests using set-notation.  This style is both semantically "
"clear and operationally fast::"
msgstr ""

#: ../../whatsnew/3.2.rst:2361
msgid "(Patch and additional tests contributed by Dave Malcolm; :issue:`6690`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2363
msgid ""
"Serializing and unserializing data using the :mod:`pickle` module is now "
"several times faster."
msgstr ""

#: ../../whatsnew/3.2.rst:2366
msgid ""
"(Contributed by Alexandre Vassalotti, Antoine Pitrou and the Unladen "
"Swallow team in :issue:`9410` and :issue:`3873`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2369
msgid ""
"The `Timsort algorithm <https://en.wikipedia.org/wiki/Timsort>`_ used in "
":meth:`list.sort` and :func:`sorted` now runs faster and uses less memory"
" when called with a :term:`key function`.  Previously, every element of a"
" list was wrapped with a temporary object that remembered the key value "
"associated with each element.  Now, two arrays of keys and values are "
"sorted in parallel.  This saves the memory consumed by the sort wrappers,"
" and it saves time lost to delegating comparisons."
msgstr ""

#: ../../whatsnew/3.2.rst:2377
msgid "(Patch by Daniel Stutzbach in :issue:`9915`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2379
msgid ""
"JSON decoding performance is improved and memory consumption is reduced "
"whenever the same string is repeated for multiple keys.  Also, JSON "
"encoding now uses the C speedups when the ``sort_keys`` argument is true."
msgstr ""

#: ../../whatsnew/3.2.rst:2383
msgid ""
"(Contributed by Antoine Pitrou in :issue:`7451` and by Raymond Hettinger "
"and Antoine Pitrou in :issue:`10314`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2386
msgid ""
"Recursive locks (created with the :func:`threading.RLock` API) now "
"benefit from a C implementation which makes them as fast as regular "
"locks, and between 10x and 15x faster than their previous pure Python "
"implementation."
msgstr ""

#: ../../whatsnew/3.2.rst:2390
msgid "(Contributed by Antoine Pitrou; :issue:`3001`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2392
msgid ""
"The fast-search algorithm in stringlib is now used by the :meth:`split`, "
":meth:`rsplit`, :meth:`splitlines` and :meth:`replace` methods on "
":class:`bytes`, :class:`bytearray` and :class:`str` objects. Likewise, "
"the algorithm is also used by :meth:`rfind`, :meth:`rindex`, "
":meth:`rsplit` and :meth:`rpartition`."
msgstr ""

#: ../../whatsnew/3.2.rst:2398
msgid "(Patch by Florent Xicluna in :issue:`7622` and :issue:`7462`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2401
msgid ""
"Integer to string conversions now work two \"digits\" at a time, reducing"
" the number of division and modulo operations."
msgstr ""

#: ../../whatsnew/3.2.rst:2404
msgid "(:issue:`6713` by Gawain Bolton, Mark Dickinson, and Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2406
msgid ""
"There were several other minor optimizations. Set differencing now runs "
"faster when one operand is much larger than the other (patch by Andress "
"Bennetts in :issue:`8685`).  The :meth:`array.repeat` method has a faster"
" implementation (:issue:`1569291` by Alexander Belopolsky). The "
":class:`BaseHTTPRequestHandler` has more efficient buffering "
"(:issue:`3709` by Andrew Schaaf).  The :func:`operator.attrgetter` "
"function has been sped-up (:issue:`10160` by Christos Georgiou).  And "
":class:`ConfigParser` loads multi-line arguments a bit faster "
"(:issue:`7113` by ≈Åukasz Langa)."
msgstr ""

#: ../../whatsnew/3.2.rst:2419
msgid ""
"Python has been updated to `Unicode 6.0.0 "
"<http://unicode.org/versions/Unicode6.0.0/>`_.  The update to the "
"standard adds over 2,000 new characters including `emoji "
"<https://en.wikipedia.org/wiki/Emoji>`_ symbols which are important for "
"mobile phones."
msgstr ""

#: ../../whatsnew/3.2.rst:2424
msgid ""
"In addition, the updated standard has altered the character properties "
"for two Kannada characters (U+0CF1, U+0CF2) and one New Tai Lue numeric "
"character (U+19DA), making the former eligible for use in identifiers "
"while disqualifying the latter.  For more information, see `Unicode "
"Character Database Changes "
"<http://www.unicode.org/versions/Unicode6.0.0/#Database_Changes>`_."
msgstr ""

#: ../../whatsnew/3.2.rst:2432
msgid "Codecs"
msgstr ""

#: ../../whatsnew/3.2.rst:2434
msgid "Support was added for *cp720* Arabic DOS encoding (:issue:`1616979`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2436
msgid ""
"MBCS encoding no longer ignores the error handler argument. In the "
"default strict mode, it raises an :exc:`UnicodeDecodeError` when it "
"encounters an undecodable byte sequence and an :exc:`UnicodeEncodeError` "
"for an unencodable character."
msgstr ""

#: ../../whatsnew/3.2.rst:2441
msgid ""
"The MBCS codec supports ``'strict'`` and ``'ignore'`` error handlers for "
"decoding, and ``'strict'`` and ``'replace'`` for encoding."
msgstr ""

#: ../../whatsnew/3.2.rst:2444
msgid ""
"To emulate Python3.1 MBCS encoding, select the ``'ignore'`` handler for "
"decoding and the ``'replace'`` handler for encoding."
msgstr ""

#: ../../whatsnew/3.2.rst:2447
msgid ""
"On Mac OS X, Python decodes command line arguments with ``'utf-8'`` "
"rather than the locale encoding."
msgstr ""

#: ../../whatsnew/3.2.rst:2450
msgid ""
"By default, :mod:`tarfile` uses ``'utf-8'`` encoding on Windows (instead "
"of ``'mbcs'``) and the ``'surrogateescape'`` error handler on all "
"operating systems."
msgstr ""

#: ../../whatsnew/3.2.rst:2456
msgid "Documentation"
msgstr ""

#: ../../whatsnew/3.2.rst:2458
msgid "The documentation continues to be improved."
msgstr ""

#: ../../whatsnew/3.2.rst:2460
msgid ""
"A table of quick links has been added to the top of lengthy sections such"
" as :ref:`built-in-funcs`.  In the case of :mod:`itertools`, the links "
"are accompanied by tables of cheatsheet-style summaries to provide an "
"overview and memory jog without having to read all of the docs."
msgstr ""

#: ../../whatsnew/3.2.rst:2465
msgid ""
"In some cases, the pure Python source code can be a helpful adjunct to "
"the documentation, so now many modules now feature quick links to the "
"latest version of the source code.  For example, the :mod:`functools` "
"module documentation has a quick link at the top labeled:"
msgstr ""

#: ../../whatsnew/3.2.rst:2470
msgid "**Source code** :source:`Lib/functools.py`."
msgstr ""

#: ../../whatsnew/3.2.rst:2472
msgid ""
"(Contributed by Raymond Hettinger; see `rationale "
"<https://rhettinger.wordpress.com/2011/01/28/open-your-source-more/>`_.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2475
msgid ""
"The docs now contain more examples and recipes.  In particular, :mod:`re`"
" module has an extensive section, :ref:`re-examples`.  Likewise, the "
":mod:`itertools` module continues to be updated with new :ref:`itertools-"
"recipes`."
msgstr ""

#: ../../whatsnew/3.2.rst:2480
msgid ""
"The :mod:`datetime` module now has an auxiliary implementation in pure "
"Python. No functionality was changed.  This just provides an easier-to-"
"read alternate implementation."
msgstr ""

#: ../../whatsnew/3.2.rst:2484
msgid "(Contributed by Alexander Belopolsky in :issue:`9528`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2486
msgid ""
"The unmaintained :file:`Demo` directory has been removed.  Some demos "
"were integrated into the documentation, some were moved to the "
":file:`Tools/demo` directory, and others were removed altogether."
msgstr ""

#: ../../whatsnew/3.2.rst:2490
msgid "(Contributed by Georg Brandl in :issue:`7962`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2496
msgid ""
"The format menu now has an option to clean source files by stripping "
"trailing whitespace."
msgstr ""

#: ../../whatsnew/3.2.rst:2499
msgid "(Contributed by Raymond Hettinger; :issue:`5150`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2501
msgid "IDLE on Mac OS X now works with both Carbon AquaTk and Cocoa AquaTk."
msgstr ""

#: ../../whatsnew/3.2.rst:2503
msgid ""
"(Contributed by Kevin Walzer, Ned Deily, and Ronald Oussoren; "
":issue:`6075`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2506
msgid "Code Repository"
msgstr ""

#: ../../whatsnew/3.2.rst:2508
msgid ""
"In addition to the existing Subversion code repository at "
"http://svn.python.org there is now a `Mercurial <https://www.mercurial-"
"scm.org/>`_ repository at https://hg.python.org/\\ ."
msgstr ""

#: ../../whatsnew/3.2.rst:2512
msgid ""
"After the 3.2 release, there are plans to switch to Mercurial as the "
"primary repository.  This distributed version control system should make "
"it easier for members of the community to create and share external "
"changesets.  See :pep:`385` for details."
msgstr ""

#: ../../whatsnew/3.2.rst:2517
msgid ""
"To learn to use the new version control system, see the `Quick Start "
"<https://www.mercurial-scm.org/wiki/QuickStart>`_ or the `Guide to "
"Mercurial Workflows <https://www.mercurial-scm.org/guide>`_."
msgstr ""

#: ../../whatsnew/3.2.rst:2527
msgid ""
"The *idle*, *pydoc* and *2to3* scripts are now installed with a version-"
"specific suffix on ``make altinstall`` (:issue:`10679`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2530
msgid ""
"The C functions that access the Unicode Database now accept and return "
"characters from the full Unicode range, even on narrow unicode builds "
"(Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and others).  A visible "
"difference in Python is that :func:`unicodedata.numeric` now returns the "
"correct value for large code points, and :func:`repr` may consider more "
"characters as printable."
msgstr ""

#: ../../whatsnew/3.2.rst:2537
msgid "(Reported by Bupjoe Lee and fixed by Amaury Forgeot D'Arc; :issue:`5127`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2539
msgid ""
"Computed gotos are now enabled by default on supported compilers (which "
"are detected by the configure script).  They can still be disabled "
"selectively by specifying ``--without-computed-gotos``."
msgstr ""

#: ../../whatsnew/3.2.rst:2543
msgid "(Contributed by Antoine Pitrou; :issue:`9203`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2545
msgid ""
"The option ``--with-wctype-functions`` was removed.  The built-in unicode"
" database is now used for all functions."
msgstr ""

#: ../../whatsnew/3.2.rst:2548
msgid "(Contributed by Amaury Forgeot D'Arc; :issue:`9210`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2550
msgid ""
"Hash values are now values of a new type, :c:type:`Py_hash_t`, which is "
"defined to be the same size as a pointer.  Previously they were of type "
"long, which on some 64-bit operating systems is still only 32 bits long."
"  As a result of this fix, :class:`set` and :class:`dict` can now hold "
"more than ``2**32`` entries on builds with 64-bit pointers (previously, "
"they could grow to that size but their performance degraded "
"catastrophically)."
msgstr ""

#: ../../whatsnew/3.2.rst:2557
msgid ""
"(Suggested by Raymond Hettinger and implemented by Benjamin Peterson; "
":issue:`9778`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2560
msgid ""
"A new macro :c:macro:`Py_VA_COPY` copies the state of the variable "
"argument list.  It is equivalent to C99 *va_copy* but available on all "
"Python platforms (:issue:`2443`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2564
msgid ""
"A new C API function :c:func:`PySys_SetArgvEx` allows an embedded "
"interpreter to set :attr:`sys.argv` without also modifying "
":attr:`sys.path` (:issue:`5753`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2568
msgid ""
":c:macro:`PyEval_CallObject` is now only available in macro form.  The "
"function declaration, which was kept for backwards compatibility reasons,"
" is now removed -- the macro was introduced in 1997 (:issue:`8276`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2572
msgid ""
"There is a new function :c:func:`PyLong_AsLongLongAndOverflow` which is "
"analogous to :c:func:`PyLong_AsLongAndOverflow`.  They both serve to "
"convert Python :class:`int` into a native fixed-width type while "
"providing detection of cases where the conversion won't fit "
"(:issue:`7767`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2577
msgid ""
"The :c:func:`PyUnicode_CompareWithASCIIString` function now returns *not "
"equal* if the Python string is *NUL* terminated."
msgstr ""

#: ../../whatsnew/3.2.rst:2580
msgid ""
"There is a new function :c:func:`PyErr_NewExceptionWithDoc` that is like "
":c:func:`PyErr_NewException` but allows a docstring to be specified. This"
" lets C exceptions have the same self-documenting capabilities as their "
"pure Python counterparts (:issue:`7033`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2585
msgid ""
"When compiled with the ``--with-valgrind`` option, the pymalloc allocator"
" will be automatically disabled when running under Valgrind.  This gives "
"improved memory leak detection when running under Valgrind, while taking "
"advantage of pymalloc at other times (:issue:`2422`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2590
msgid ""
"Removed the ``O?`` format from the *PyArg_Parse* functions.  The format "
"is no longer used and it had never been documented (:issue:`8837`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2593
msgid ""
"There were a number of other small changes to the C-API.  See the "
":source:`Misc/NEWS` file for a complete list."
msgstr ""

#: ../../whatsnew/3.2.rst:2596
msgid ""
"Also, there were a number of updates to the Mac OS X build, see "
":source:`Mac/BuildScript/README.txt` for details.  For users running a "
"32/64-bit build, there is a known problem with the default Tcl/Tk on Mac "
"OS X 10.6. Accordingly, we recommend installing an updated alternative "
"such as `ActiveState Tcl/Tk 8.5.9 "
"<https://www.activestate.com/activetcl/downloads>`_\\. See "
"https://www.python.org/download/mac/tcltk/ for additional details."
msgstr ""

#: ../../whatsnew/3.2.rst:2604
msgid "Porting to Python 3.2"
msgstr ""

#: ../../whatsnew/3.2.rst:2609
msgid ""
"The :mod:`configparser` module has a number of clean-ups.  The major "
"change is to replace the old :class:`ConfigParser` class with long-"
"standing preferred alternative :class:`SafeConfigParser`.  In addition "
"there are a number of smaller incompatibilities:"
msgstr ""

#: ../../whatsnew/3.2.rst:2614
#, python-format
msgid ""
"The interpolation syntax is now validated on "
":meth:`~configparser.ConfigParser.get` and "
":meth:`~configparser.ConfigParser.set` operations. In the default "
"interpolation scheme, only two tokens with percent signs are valid: "
"``%(name)s`` and ``%%``, the latter being an escaped percent sign."
msgstr ""

#: ../../whatsnew/3.2.rst:2620
msgid ""
"The :meth:`~configparser.ConfigParser.set` and "
":meth:`~configparser.ConfigParser.add_section` methods now verify that "
"values are actual strings.  Formerly, unsupported types could be "
"introduced unintentionally."
msgstr ""

#: ../../whatsnew/3.2.rst:2625
msgid ""
"Duplicate sections or options from a single source now raise either "
":exc:`~configparser.DuplicateSectionError` or "
":exc:`~configparser.DuplicateOptionError`.  Formerly, duplicates would "
"silently overwrite a previous entry."
msgstr ""

#: ../../whatsnew/3.2.rst:2630
msgid ""
"Inline comments are now disabled by default so now the **;** character "
"can be safely used in values."
msgstr ""

#: ../../whatsnew/3.2.rst:2633
msgid ""
"Comments now can be indented.  Consequently, for **;** or **#** to appear"
" at the start of a line in multiline values, it has to be interpolated.  "
"This keeps comment prefix characters in values from being mistaken as "
"comments."
msgstr ""

#: ../../whatsnew/3.2.rst:2637
msgid ""
"``\"\"`` is now a valid value and is no longer automatically converted to"
" an empty string. For empty strings, use ``\"option =\"`` in a line."
msgstr ""

#: ../../whatsnew/3.2.rst:2640
msgid ""
"The :mod:`nntplib` module was reworked extensively, meaning that its APIs"
" are often incompatible with the 3.1 APIs."
msgstr ""

#: ../../whatsnew/3.2.rst:2643
msgid ""
":class:`bytearray` objects can no longer be used as filenames; instead, "
"they should be converted to :class:`bytes`."
msgstr ""

#: ../../whatsnew/3.2.rst:2646
msgid ""
"The :meth:`array.tostring` and :meth:`array.fromstring` have been renamed"
" to :meth:`array.tobytes` and :meth:`array.frombytes` for clarity.  The "
"old names have been deprecated. (See :issue:`8990`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2650
msgid "``PyArg_Parse*()`` functions:"
msgstr ""

#: ../../whatsnew/3.2.rst:2652
msgid "\"t#\" format has been removed: use \"s#\" or \"s*\" instead"
msgstr ""

#: ../../whatsnew/3.2.rst:2653
msgid "\"w\" and \"w#\" formats has been removed: use \"w*\" instead"
msgstr ""

#: ../../whatsnew/3.2.rst:2655
msgid ""
"The :c:type:`PyCObject` type, deprecated in 3.1, has been removed.  To "
"wrap opaque C pointers in Python objects, the :c:type:`PyCapsule` API "
"should be used instead; the new type has a well-defined interface for "
"passing typing safety information and a less complicated signature for "
"calling a destructor."
msgstr ""

#: ../../whatsnew/3.2.rst:2660
msgid ""
"The :func:`sys.setfilesystemencoding` function was removed because it had"
" a flawed design."
msgstr ""

#: ../../whatsnew/3.2.rst:2663
msgid ""
"The :func:`random.seed` function and method now salt string seeds with an"
" sha512 hash function.  To access the previous version of *seed* in order"
" to reproduce Python 3.1 sequences, set the *version* argument to *1*, "
"``random.seed(s, version=1)``."
msgstr ""

#: ../../whatsnew/3.2.rst:2668
msgid ""
"The previously deprecated :func:`string.maketrans` function has been "
"removed in favor of the static methods :meth:`bytes.maketrans` and "
":meth:`bytearray.maketrans`.  This change solves the confusion around "
"which types were supported by the :mod:`string` module.  Now, "
":class:`str`, :class:`bytes`, and :class:`bytearray` each have their own "
"**maketrans** and **translate** methods with intermediate translation "
"tables of the appropriate type."
msgstr ""

#: ../../whatsnew/3.2.rst:2678
msgid ""
"The previously deprecated :func:`contextlib.nested` function has been "
"removed in favor of a plain :keyword:`with` statement which can accept "
"multiple context managers.  The latter technique is faster (because it is"
" built-in), and it does a better job finalizing multiple context managers"
" when one of them raises an exception::"
msgstr ""

#: ../../whatsnew/3.2.rst:2692
msgid ""
":func:`struct.pack` now only allows bytes for the ``s`` string pack code."
" Formerly, it would accept text arguments and implicitly encode them to "
"bytes using UTF-8.  This was problematic because it made assumptions "
"about the correct encoding and because a variable-length encoding can "
"fail when writing to fixed length segment of a structure."
msgstr ""

#: ../../whatsnew/3.2.rst:2698
msgid ""
"Code such as ``struct.pack('<6sHHBBB', 'GIF87a', x, y)`` should be "
"rewritten with to use bytes instead of text, ``struct.pack('<6sHHBBB', "
"b'GIF87a', x, y)``."
msgstr ""

#: ../../whatsnew/3.2.rst:2701
msgid "(Discovered by David Beazley and fixed by Victor Stinner; :issue:`10783`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2703
msgid ""
"The :class:`xml.etree.ElementTree` class now raises an "
":exc:`xml.etree.ElementTree.ParseError` when a parse fails. Previously it"
" raised an :exc:`xml.parsers.expat.ExpatError`."
msgstr ""

#: ../../whatsnew/3.2.rst:2707
msgid ""
"The new, longer :func:`str` value on floats may break doctests which rely"
" on the old output format."
msgstr ""

#: ../../whatsnew/3.2.rst:2710
msgid ""
"In :class:`subprocess.Popen`, the default value for *close_fds* is now "
"``True`` under Unix; under Windows, it is ``True`` if the three standard "
"streams are set to ``None``, ``False`` otherwise.  Previously, "
"*close_fds* was always ``False`` by default, which produced difficult to "
"solve bugs or race conditions when open file descriptors would leak into "
"the child process."
msgstr ""

#: ../../whatsnew/3.2.rst:2717
msgid ""
"Support for legacy HTTP 0.9 has been removed from :mod:`urllib.request` "
"and :mod:`http.client`.  Such support is still present on the server side"
" (in :mod:`http.server`)."
msgstr ""

#: ../../whatsnew/3.2.rst:2721
msgid "(Contributed by Antoine Pitrou, :issue:`10711`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2723
msgid ""
"SSL sockets in timeout mode now raise :exc:`socket.timeout` when a "
"timeout occurs, rather than a generic :exc:`~ssl.SSLError`."
msgstr ""

#: ../../whatsnew/3.2.rst:2726
msgid "(Contributed by Antoine Pitrou, :issue:`10272`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2728
msgid ""
"The misleading functions :c:func:`PyEval_AcquireLock()` and "
":c:func:`PyEval_ReleaseLock()` have been officially deprecated.  The "
"thread-state aware APIs (such as :c:func:`PyEval_SaveThread()` and "
":c:func:`PyEval_RestoreThread()`) should be used instead."
msgstr ""

#: ../../whatsnew/3.2.rst:2733
msgid ""
"Due to security risks, :func:`asyncore.handle_accept` has been "
"deprecated, and a new function, :func:`asyncore.handle_accepted`, was "
"added to replace it."
msgstr ""

#: ../../whatsnew/3.2.rst:2736
msgid "(Contributed by Giampaolo Rodola in :issue:`6706`.)"
msgstr ""

#: ../../whatsnew/3.2.rst:2738
msgid ""
"Due to the new :term:`GIL` implementation, :c:func:`PyEval_InitThreads()`"
" cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr ""

#: ../../whatsnew/3.3.rst:3
msgid "What's New In Python 3.3"
msgstr ""

#: ../../whatsnew/3.3.rst:45
msgid ""
"This article explains the new features in Python 3.3, compared to 3.2. "
"Python 3.3 was released on September 29, 2012.  For full details, see the"
" `changelog <https://docs.python.org/3.3/whatsnew/changelog.html>`_."
msgstr ""

#: ../../whatsnew/3.3.rst:51
msgid ":pep:`398` - Python 3.3 Release Schedule"
msgstr ""

#: ../../whatsnew/3.3.rst:55 ../../whatsnew/3.5.rst:58
#: ../../whatsnew/3.6.rst:58 ../../whatsnew/3.8.rst:62
msgid "Summary -- Release highlights"
msgstr ""

#: ../../whatsnew/3.3.rst:60 ../../whatsnew/3.4.rst:80
#: ../../whatsnew/3.5.rst:60 ../../whatsnew/3.6.rst:60
#: ../../whatsnew/3.7.rst:58
msgid "New syntax features:"
msgstr ""

#: ../../whatsnew/3.3.rst:62
msgid "New ``yield from`` expression for :ref:`generator delegation <pep-380>`."
msgstr ""

#: ../../whatsnew/3.3.rst:63
msgid "The ``u'unicode'`` syntax is accepted again for :class:`str` objects."
msgstr ""

#: ../../whatsnew/3.3.rst:65 ../../whatsnew/3.4.rst:98
#: ../../whatsnew/3.5.rst:67 ../../whatsnew/3.6.rst:73
#: ../../whatsnew/3.7.rst:66
msgid "New library modules:"
msgstr ""

#: ../../whatsnew/3.3.rst:67
msgid ":mod:`faulthandler` (helps debugging low-level crashes)"
msgstr ""

#: ../../whatsnew/3.3.rst:68
msgid ":mod:`ipaddress` (high-level objects representing IP addresses and masks)"
msgstr ""

#: ../../whatsnew/3.3.rst:69
msgid ":mod:`lzma` (compress data using the XZ / LZMA algorithm)"
msgstr ""

#: ../../whatsnew/3.3.rst:70
msgid ""
":mod:`unittest.mock` (replace parts of your system under test with mock "
"objects)"
msgstr ""

#: ../../whatsnew/3.3.rst:71
msgid ""
":mod:`venv` (Python :ref:`virtual environments <pep-405>`, as in the "
"popular ``virtualenv`` package)"
msgstr ""

#: ../../whatsnew/3.3.rst:74 ../../whatsnew/3.5.rst:74
#: ../../whatsnew/3.7.rst:72
msgid "New built-in features:"
msgstr ""

#: ../../whatsnew/3.3.rst:76
msgid "Reworked :ref:`I/O exception hierarchy <pep-3151>`."
msgstr ""

#: ../../whatsnew/3.3.rst:78
msgid "Implementation improvements:"
msgstr ""

#: ../../whatsnew/3.3.rst:80
msgid "Rewritten :ref:`import machinery <importlib>` based on :mod:`importlib`."
msgstr ""

#: ../../whatsnew/3.3.rst:81
msgid "More compact :ref:`unicode strings <pep-393>`."
msgstr ""

#: ../../whatsnew/3.3.rst:82
msgid "More compact :ref:`attribute dictionaries <pep-412>`."
msgstr ""

#: ../../whatsnew/3.3.rst:84
msgid "Significantly Improved Library Modules:"
msgstr ""

#: ../../whatsnew/3.3.rst:86
msgid "C Accelerator for the :ref:`decimal <new-decimal>` module."
msgstr ""

#: ../../whatsnew/3.3.rst:87
msgid ""
"Better unicode handling in the :ref:`email <new-email>` module "
"(:term:`provisional <provisional package>`)."
msgstr ""

#: ../../whatsnew/3.3.rst:90 ../../whatsnew/3.4.rst:132
#: ../../whatsnew/3.5.rst:136 ../../whatsnew/3.6.rst:130
msgid "Security improvements:"
msgstr ""

#: ../../whatsnew/3.3.rst:92
msgid "Hash randomization is switched on by default."
msgstr ""

#: ../../whatsnew/3.3.rst:94
msgid "Please read on for a comprehensive list of user-facing changes."
msgstr ""

#: ../../whatsnew/3.3.rst:100
msgid "PEP 405: Virtual Environments"
msgstr ""

#: ../../whatsnew/3.3.rst:102
msgid ""
"Virtual environments help create separate Python setups while sharing a "
"system-wide base install, for ease of maintenance.  Virtual environments "
"have their own set of private site packages (i.e. locally-installed "
"libraries), and are optionally segregated from the system-wide site "
"packages.  Their concept and implementation are inspired by the popular "
"``virtualenv`` third-party package, but benefit from tighter integration "
"with the interpreter core."
msgstr ""

#: ../../whatsnew/3.3.rst:110
msgid ""
"This PEP adds the :mod:`venv` module for programmatic access, and the "
"``pyvenv`` script for command-line access and administration.  The Python"
" interpreter checks for a ``pyvenv.cfg``, file whose existence signals "
"the base of a virtual environment's directory tree."
msgstr ""

#: ../../whatsnew/3.3.rst:118
msgid ":pep:`405` - Python Virtual Environments"
msgstr ""

#: ../../whatsnew/3.3.rst:119
msgid "PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip"
msgstr ""

#: ../../whatsnew/3.3.rst:123
msgid "PEP 420: Implicit Namespace Packages"
msgstr ""

#: ../../whatsnew/3.3.rst:125
msgid ""
"Native support for package directories that don't require ``__init__.py``"
" marker files and can automatically span multiple path segments (inspired"
" by various third party approaches to namespace packages, as described in"
" :pep:`420`)"
msgstr ""

#: ../../whatsnew/3.3.rst:133
msgid ":pep:`420` - Implicit Namespace Packages"
msgstr ""

#: ../../whatsnew/3.3.rst:133
msgid ""
"PEP written by Eric V. Smith; implementation by Eric V. Smith and Barry "
"Warsaw"
msgstr ""

#: ../../whatsnew/3.3.rst:140
msgid "PEP 3118: New memoryview implementation and buffer protocol documentation"
msgstr ""

#: ../../whatsnew/3.3.rst:142
msgid "The implementation of :pep:`3118` has been significantly improved."
msgstr ""

#: ../../whatsnew/3.3.rst:144
msgid ""
"The new memoryview implementation comprehensively fixes all ownership and"
" lifetime issues of dynamically allocated fields in the Py_buffer struct "
"that led to multiple crash reports. Additionally, several functions that "
"crashed or returned incorrect results for non-contiguous or multi-"
"dimensional input have been fixed."
msgstr ""

#: ../../whatsnew/3.3.rst:150
msgid ""
"The memoryview object now has a PEP-3118 compliant getbufferproc() that "
"checks the consumer's request type. Many new features have been added, "
"most of them work in full generality for non-contiguous arrays and arrays"
" with suboffsets."
msgstr ""

#: ../../whatsnew/3.3.rst:155
msgid ""
"The documentation has been updated, clearly spelling out responsibilities"
" for both exporters and consumers. Buffer request flags are grouped into "
"basic and compound flags. The memory layout of non-contiguous and multi-"
"dimensional NumPy-style arrays is explained."
msgstr ""

#: ../../whatsnew/3.3.rst:161 ../../whatsnew/3.3.rst:1122
msgid "Features"
msgstr ""

#: ../../whatsnew/3.3.rst:163
msgid ""
"All native single character format specifiers in struct module syntax "
"(optionally prefixed with '@') are now supported."
msgstr ""

#: ../../whatsnew/3.3.rst:166
msgid ""
"With some restrictions, the cast() method allows changing of format and "
"shape of C-contiguous arrays."
msgstr ""

#: ../../whatsnew/3.3.rst:169
msgid "Multi-dimensional list representations are supported for any array type."
msgstr ""

#: ../../whatsnew/3.3.rst:171
msgid "Multi-dimensional comparisons are supported for any array type."
msgstr ""

#: ../../whatsnew/3.3.rst:173
msgid ""
"One-dimensional memoryviews of hashable (read-only) types with formats B,"
" b or c are now hashable.  (Contributed by Antoine Pitrou in "
":issue:`13411`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:176
msgid ""
"Arbitrary slicing of any 1-D arrays type is supported. For example, it is"
" now possible to reverse a memoryview in O(1) by using a negative step."
msgstr ""

#: ../../whatsnew/3.3.rst:180 ../../whatsnew/3.3.rst:1132
msgid "API changes"
msgstr ""

#: ../../whatsnew/3.3.rst:182
msgid "The maximum number of dimensions is officially limited to 64."
msgstr ""

#: ../../whatsnew/3.3.rst:184
msgid ""
"The representation of empty shape, strides and suboffsets is now an empty"
" tuple instead of ``None``."
msgstr ""

#: ../../whatsnew/3.3.rst:187
msgid ""
"Accessing a memoryview element with format 'B' (unsigned bytes) now "
"returns an integer (in accordance with the struct module syntax). For "
"returning a bytes object the view must be cast to 'c' first."
msgstr ""

#: ../../whatsnew/3.3.rst:191
msgid ""
"memoryview comparisons now use the logical structure of the operands and "
"compare all array elements by value. All format strings in struct module "
"syntax are supported. Views with unrecognised format strings are still "
"permitted, but will always compare as unequal, regardless of view "
"contents."
msgstr ""

#: ../../whatsnew/3.3.rst:197
msgid "For further changes see `Build and C API Changes`_ and `Porting C code`_."
msgstr ""

#: ../../whatsnew/3.3.rst:199
msgid "(Contributed by Stefan Krah in :issue:`10181`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:203
msgid ":pep:`3118` - Revising the Buffer Protocol"
msgstr ""

#: ../../whatsnew/3.3.rst:209
msgid "PEP 393: Flexible String Representation"
msgstr ""

#: ../../whatsnew/3.3.rst:211
msgid ""
"The Unicode string type is changed to support multiple internal "
"representations, depending on the character with the largest Unicode "
"ordinal (1, 2, or 4 bytes) in the represented string.  This allows a "
"space-efficient representation in common cases, but gives access to full "
"UCS-4 on all systems.  For compatibility with existing APIs, several "
"representations may exist in parallel; over time, this compatibility "
"should be phased out."
msgstr ""

#: ../../whatsnew/3.3.rst:218
msgid "On the Python side, there should be no downside to this change."
msgstr ""

#: ../../whatsnew/3.3.rst:220
msgid ""
"On the C API side, :pep:`393` is fully backward compatible.  The legacy "
"API should remain available at least five years.  Applications using the "
"legacy API will not fully benefit of the memory reduction, or - worse - "
"may use a bit more memory, because Python may have to maintain two "
"versions of each string (in the legacy format and in the new efficient "
"storage)."
msgstr ""

#: ../../whatsnew/3.3.rst:227
msgid "Functionality"
msgstr ""

#: ../../whatsnew/3.3.rst:229
msgid "Changes introduced by :pep:`393` are the following:"
msgstr ""

#: ../../whatsnew/3.3.rst:231
msgid ""
"Python now always supports the full range of Unicode code points, "
"including non-BMP ones (i.e. from ``U+0000`` to ``U+10FFFF``).  The "
"distinction between narrow and wide builds no longer exists and Python "
"now behaves like a wide build, even under Windows."
msgstr ""

#: ../../whatsnew/3.3.rst:236
msgid ""
"With the death of narrow builds, the problems specific to narrow builds "
"have also been fixed, for example:"
msgstr ""

#: ../../whatsnew/3.3.rst:239
msgid ""
":func:`len` now always returns 1 for non-BMP characters, so "
"``len('\\U0010FFFF') == 1``;"
msgstr ""

#: ../../whatsnew/3.3.rst:242
msgid ""
"surrogate pairs are not recombined in string literals, so "
"``'\\uDBFF\\uDFFF' != '\\U0010FFFF'``;"
msgstr ""

#: ../../whatsnew/3.3.rst:245
msgid ""
"indexing or slicing non-BMP characters returns the expected value, so "
"``'\\U0010FFFF'[0]`` now returns ``'\\U0010FFFF'`` and not ``'\\uDBFF'``;"
msgstr ""

#: ../../whatsnew/3.3.rst:248
msgid ""
"all other functions in the standard library now correctly handle non-BMP "
"code points."
msgstr ""

#: ../../whatsnew/3.3.rst:251
msgid ""
"The value of :data:`sys.maxunicode` is now always ``1114111`` "
"(``0x10FFFF`` in hexadecimal).  The :c:func:`PyUnicode_GetMax` function "
"still returns either ``0xFFFF`` or ``0x10FFFF`` for backward "
"compatibility, and it should not be used with the new Unicode API (see "
":issue:`13054`)."
msgstr ""

#: ../../whatsnew/3.3.rst:256
msgid "The :file:`./configure` flag ``--with-wide-unicode`` has been removed."
msgstr ""

#: ../../whatsnew/3.3.rst:259
msgid "Performance and resource usage"
msgstr ""

#: ../../whatsnew/3.3.rst:261
msgid ""
"The storage of Unicode strings now depends on the highest code point in "
"the string:"
msgstr ""

#: ../../whatsnew/3.3.rst:263
msgid ""
"pure ASCII and Latin1 strings (``U+0000-U+00FF``) use 1 byte per code "
"point;"
msgstr ""

#: ../../whatsnew/3.3.rst:265
msgid "BMP strings (``U+0000-U+FFFF``) use 2 bytes per code point;"
msgstr ""

#: ../../whatsnew/3.3.rst:267
msgid "non-BMP strings (``U+10000-U+10FFFF``) use 4 bytes per code point."
msgstr ""

#: ../../whatsnew/3.3.rst:269
msgid ""
"The net effect is that for most applications, memory usage of string "
"storage should decrease significantly - especially compared to former "
"wide unicode builds - as, in many cases, strings will be pure ASCII even "
"in international contexts (because many strings store non-human language "
"data, such as XML fragments, HTTP headers, JSON-encoded data, etc.).  We "
"also hope that it will, for the same reasons, increase CPU cache "
"efficiency on non-trivial applications. The memory usage of Python 3.3 is"
" two to three times smaller than Python 3.2, and a little bit better than"
" Python 2.7, on a Django benchmark (see the PEP for details)."
msgstr ""

#: ../../whatsnew/3.3.rst:283
msgid ":pep:`393` - Flexible String Representation"
msgstr ""

#: ../../whatsnew/3.3.rst:283
msgid ""
"PEP written by Martin von L√∂wis; implementation by Torsten Becker and "
"Martin von L√∂wis."
msgstr ""

#: ../../whatsnew/3.3.rst:290
msgid "PEP 397: Python Launcher for Windows"
msgstr ""

#: ../../whatsnew/3.3.rst:292
msgid ""
"The Python 3.3 Windows installer now includes a ``py`` launcher "
"application that can be used to launch Python applications in a version "
"independent fashion."
msgstr ""

#: ../../whatsnew/3.3.rst:296
msgid ""
"This launcher is invoked implicitly when double-clicking ``*.py`` files. "
"If only a single Python version is installed on the system, that version "
"will be used to run the file. If multiple versions are installed, the "
"most recent version is used by default, but this can be overridden by "
"including a Unix-style \"shebang line\" in the Python script."
msgstr ""

#: ../../whatsnew/3.3.rst:302
msgid ""
"The launcher can also be used explicitly from the command line as the "
"``py`` application. Running ``py`` follows the same version selection "
"rules as implicitly launching scripts, but a more specific version can be"
" selected by passing appropriate arguments (such as ``-3`` to request "
"Python 3 when Python 2 is also installed, or ``-2.6`` to specifically "
"request an earlier Python version when a more recent version is "
"installed)."
msgstr ""

#: ../../whatsnew/3.3.rst:309
msgid ""
"In addition to the launcher, the Windows installer now includes an option"
" to add the newly installed Python to the system PATH.  (Contributed by "
"Brian Curtin in :issue:`3561`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:317
msgid ":pep:`397` - Python Launcher for Windows"
msgstr ""

#: ../../whatsnew/3.3.rst:316
msgid ""
"PEP written by Mark Hammond and Martin v. L√∂wis; implementation by Vinay "
"Sajip."
msgstr ""

#: ../../whatsnew/3.3.rst:319
msgid "Launcher documentation: :ref:`launcher`"
msgstr ""

#: ../../whatsnew/3.3.rst:321
msgid "Installer PATH modification: :ref:`windows-path-mod`"
msgstr ""

#: ../../whatsnew/3.3.rst:327
msgid "PEP 3151: Reworking the OS and IO exception hierarchy"
msgstr ""

#: ../../whatsnew/3.3.rst:329
msgid ""
"The hierarchy of exceptions raised by operating system errors is now both"
" simplified and finer-grained."
msgstr ""

#: ../../whatsnew/3.3.rst:332
msgid ""
"You don't have to worry anymore about choosing the appropriate exception "
"type between :exc:`OSError`, :exc:`IOError`, :exc:`EnvironmentError`, "
":exc:`WindowsError`, :exc:`mmap.error`, :exc:`socket.error` or "
":exc:`select.error`.  All these exception types are now only one: "
":exc:`OSError`.  The other names are kept as aliases for compatibility "
"reasons."
msgstr ""

#: ../../whatsnew/3.3.rst:339
msgid ""
"Also, it is now easier to catch a specific error condition.  Instead of "
"inspecting the ``errno`` attribute (or ``args[0]``) for a particular "
"constant from the :mod:`errno` module, you can catch the adequate "
":exc:`OSError` subclass.  The available subclasses are the following:"
msgstr ""

#: ../../whatsnew/3.3.rst:344
msgid ":exc:`BlockingIOError`"
msgstr ""

#: ../../whatsnew/3.3.rst:345
msgid ":exc:`ChildProcessError`"
msgstr ""

#: ../../whatsnew/3.3.rst:346
msgid ":exc:`ConnectionError`"
msgstr ""

#: ../../whatsnew/3.3.rst:347
msgid ":exc:`FileExistsError`"
msgstr ""

#: ../../whatsnew/3.3.rst:348
msgid ":exc:`FileNotFoundError`"
msgstr ""

#: ../../whatsnew/3.3.rst:349
msgid ":exc:`InterruptedError`"
msgstr ""

#: ../../whatsnew/3.3.rst:350
msgid ":exc:`IsADirectoryError`"
msgstr ""

#: ../../whatsnew/3.3.rst:351
msgid ":exc:`NotADirectoryError`"
msgstr ""

#: ../../whatsnew/3.3.rst:352
msgid ":exc:`PermissionError`"
msgstr ""

#: ../../whatsnew/3.3.rst:353
msgid ":exc:`ProcessLookupError`"
msgstr ""

#: ../../whatsnew/3.3.rst:354
msgid ":exc:`TimeoutError`"
msgstr ""

#: ../../whatsnew/3.3.rst:356
msgid "And the :exc:`ConnectionError` itself has finer-grained subclasses:"
msgstr ""

#: ../../whatsnew/3.3.rst:358
msgid ":exc:`BrokenPipeError`"
msgstr ""

#: ../../whatsnew/3.3.rst:359
msgid ":exc:`ConnectionAbortedError`"
msgstr ""

#: ../../whatsnew/3.3.rst:360
msgid ":exc:`ConnectionRefusedError`"
msgstr ""

#: ../../whatsnew/3.3.rst:361
msgid ":exc:`ConnectionResetError`"
msgstr ""

#: ../../whatsnew/3.3.rst:363
msgid ""
"Thanks to the new exceptions, common usages of the :mod:`errno` can now "
"be avoided.  For example, the following code written for Python 3.2::"
msgstr ""

#: ../../whatsnew/3.3.rst:379
msgid ""
"can now be written without the :mod:`errno` import and without manual "
"inspection of exception attributes::"
msgstr ""

#: ../../whatsnew/3.3.rst:392
msgid ":pep:`3151` - Reworking the OS and IO Exception Hierarchy"
msgstr ""

#: ../../whatsnew/3.3.rst:393
msgid "PEP written and implemented by Antoine Pitrou"
msgstr ""

#: ../../whatsnew/3.3.rst:402
msgid "PEP 380: Syntax for Delegating to a Subgenerator"
msgstr ""

#: ../../whatsnew/3.3.rst:404
msgid ""
"PEP 380 adds the ``yield from`` expression, allowing a :term:`generator` "
"to delegate part of its operations to another generator. This allows a "
"section of code containing :keyword:`yield` to be factored out and placed"
" in another generator. Additionally, the subgenerator is allowed to "
"return with a value, and the value is made available to the delegating "
"generator."
msgstr ""

#: ../../whatsnew/3.3.rst:411
msgid ""
"While designed primarily for use in delegating to a subgenerator, the "
"``yield from`` expression actually allows delegation to arbitrary "
"subiterators."
msgstr ""

#: ../../whatsnew/3.3.rst:414
msgid ""
"For simple iterators, ``yield from iterable`` is essentially just a "
"shortened form of ``for item in iterable: yield item``::"
msgstr ""

#: ../../whatsnew/3.3.rst:424
msgid ""
"However, unlike an ordinary loop, ``yield from`` allows subgenerators to "
"receive sent and thrown values directly from the calling scope, and "
"return a final value to the outer generator::"
msgstr ""

#: ../../whatsnew/3.3.rst:455
msgid ""
"The main principle driving this change is to allow even generators that "
"are designed to be used with the ``send`` and ``throw`` methods to be "
"split into multiple subgenerators as easily as a single large function "
"can be split into multiple subfunctions."
msgstr ""

#: ../../whatsnew/3.3.rst:464
msgid ":pep:`380` - Syntax for Delegating to a Subgenerator"
msgstr ""

#: ../../whatsnew/3.3.rst:463
msgid ""
"PEP written by Greg Ewing; implementation by Greg Ewing, integrated into "
"3.3 by Renaud Blanch, Ryan Kelly and Nick Coghlan; documentation by "
"Zbigniew Jƒôdrzejewski-Szmek and Nick Coghlan"
msgstr ""

#: ../../whatsnew/3.3.rst:469
msgid "PEP 409: Suppressing exception context"
msgstr ""

#: ../../whatsnew/3.3.rst:471
msgid ""
"PEP 409 introduces new syntax that allows the display of the chained "
"exception context to be disabled. This allows cleaner error messages in "
"applications that convert between exception types::"
msgstr ""

#: ../../whatsnew/3.3.rst:490
msgid ""
"Without the ``from None`` suffix to suppress the cause, the original "
"exception would be displayed by default::"
msgstr ""

#: ../../whatsnew/3.3.rst:514
msgid ""
"No debugging capability is lost, as the original exception context "
"remains available if needed (for example, if an intervening library has "
"incorrectly suppressed valuable underlying details)::"
msgstr ""

#: ../../whatsnew/3.3.rst:528
msgid ":pep:`409` - Suppressing exception context"
msgstr ""

#: ../../whatsnew/3.3.rst:528
msgid "PEP written by Ethan Furman; implemented by Ethan Furman and Nick Coghlan."
msgstr ""

#: ../../whatsnew/3.3.rst:533
msgid "PEP 414: Explicit Unicode literals"
msgstr ""

#: ../../whatsnew/3.3.rst:535
msgid ""
"To ease the transition from Python 2 for Unicode aware Python "
"applications that make heavy use of Unicode literals, Python 3.3 once "
"again supports the \"``u``\" prefix for string literals. This prefix has "
"no semantic significance in Python 3, it is provided solely to reduce the"
" number of purely mechanical changes in migrating to Python 3, making it "
"easier for developers to focus on the more significant semantic changes "
"(such as the stricter default separation of binary and text data)."
msgstr ""

#: ../../whatsnew/3.3.rst:545
msgid ":pep:`414` - Explicit Unicode literals"
msgstr ""

#: ../../whatsnew/3.3.rst:546
msgid "PEP written by Armin Ronacher."
msgstr ""

#: ../../whatsnew/3.3.rst:550
msgid "PEP 3155: Qualified name for classes and functions"
msgstr ""

#: ../../whatsnew/3.3.rst:552
msgid ""
"Functions and class objects have a new ``__qualname__`` attribute "
"representing the \"path\" from the module top-level to their definition."
"  For global functions and classes, this is the same as ``__name__``.  "
"For other functions and classes, it provides better information about "
"where they were actually defined, and how they might be accessible from "
"the global scope."
msgstr ""

#: ../../whatsnew/3.3.rst:558
msgid "Example with (non-bound) methods::"
msgstr ""

#: ../../whatsnew/3.3.rst:568
msgid "Example with nested classes::"
msgstr ""

#: ../../whatsnew/3.3.rst:584
msgid "Example with nested functions::"
msgstr ""

#: ../../whatsnew/3.3.rst:596
msgid ""
"The string representation of those objects is also changed to include the"
" new, more precise information::"
msgstr ""

#: ../../whatsnew/3.3.rst:606
msgid ":pep:`3155` - Qualified name for classes and functions"
msgstr ""

#: ../../whatsnew/3.3.rst:607 ../../whatsnew/3.4.rst:539
#: ../../whatsnew/3.4.rst:1835
msgid "PEP written and implemented by Antoine Pitrou."
msgstr ""

#: ../../whatsnew/3.3.rst:613
msgid "PEP 412: Key-Sharing Dictionary"
msgstr ""

#: ../../whatsnew/3.3.rst:615
msgid ""
"Dictionaries used for the storage of objects' attributes are now able to "
"share part of their internal storage between each other (namely, the part"
" which stores the keys and their respective hashes).  This reduces the "
"memory consumption of programs creating many instances of non-builtin "
"types."
msgstr ""

#: ../../whatsnew/3.3.rst:622
msgid ":pep:`412` - Key-Sharing Dictionary"
msgstr ""

#: ../../whatsnew/3.3.rst:623
msgid "PEP written and implemented by Mark Shannon."
msgstr ""

#: ../../whatsnew/3.3.rst:627
msgid "PEP 362: Function Signature Object"
msgstr ""

#: ../../whatsnew/3.3.rst:629
msgid ""
"A new function :func:`inspect.signature` makes introspection of python "
"callables easy and straightforward.  A broad range of callables is "
"supported: python functions, decorated or not, classes, and "
":func:`functools.partial` objects.  New classes "
":class:`inspect.Signature`, :class:`inspect.Parameter` and "
":class:`inspect.BoundArguments` hold information about the call "
"signatures, such as, annotations, default values, parameters kinds, and "
"bound arguments, which considerably simplifies writing decorators and any"
" code that validates or amends calling signatures or arguments."
msgstr ""

#: ../../whatsnew/3.3.rst:641
msgid ":pep:`362`: -  Function Signature Object"
msgstr ""

#: ../../whatsnew/3.3.rst:641
msgid ""
"PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo; "
"implemented by Yury Selivanov."
msgstr ""

#: ../../whatsnew/3.3.rst:646
msgid "PEP 421: Adding sys.implementation"
msgstr ""

#: ../../whatsnew/3.3.rst:648
msgid ""
"A new attribute on the :mod:`sys` module exposes details specific to the "
"implementation of the currently running interpreter.  The initial set of "
"attributes on :attr:`sys.implementation` are ``name``, ``version``, "
"``hexversion``, and ``cache_tag``."
msgstr ""

#: ../../whatsnew/3.3.rst:653
msgid ""
"The intention of ``sys.implementation`` is to consolidate into one "
"namespace the implementation-specific data used by the standard library."
"  This allows different Python implementations to share a single standard"
" library code base much more easily.  In its initial state, "
"``sys.implementation`` holds only a small portion of the implementation-"
"specific data.  Over time that ratio will shift in order to make the "
"standard library more portable."
msgstr ""

#: ../../whatsnew/3.3.rst:660
msgid ""
"One example of improved standard library portability is ``cache_tag``.  "
"As of Python 3.3, ``sys.implementation.cache_tag`` is used by "
":mod:`importlib` to support :pep:`3147` compliance.  Any Python "
"implementation that uses ``importlib`` for its built-in import system may"
" use ``cache_tag`` to control the caching behavior for modules."
msgstr ""

#: ../../whatsnew/3.3.rst:667
msgid "SimpleNamespace"
msgstr ""

#: ../../whatsnew/3.3.rst:669
msgid ""
"The implementation of ``sys.implementation`` also introduces a new type "
"to Python: :class:`types.SimpleNamespace`.  In contrast to a mapping-"
"based namespace, like :class:`dict`, ``SimpleNamespace`` is attribute-"
"based, like :class:`object`.  However, unlike ``object``, "
"``SimpleNamespace`` instances are writable.  This means that you can add,"
" remove, and modify the namespace through normal attribute access."
msgstr ""

#: ../../whatsnew/3.3.rst:678
msgid ":pep:`421` - Adding sys.implementation"
msgstr ""

#: ../../whatsnew/3.3.rst:679 ../../whatsnew/3.6.rst:561
#: ../../whatsnew/3.6.rst:575
msgid "PEP written and implemented by Eric Snow."
msgstr ""

#: ../../whatsnew/3.3.rst:685
msgid "Using importlib as the Implementation of Import"
msgstr ""

#: ../../whatsnew/3.3.rst:686
msgid ""
":issue:`2377` - Replace __import__ w/ importlib.__import__ :issue:`13959`"
" - Re-implement parts of :mod:`imp` in pure Python :issue:`14605` - Make "
"import machinery explicit :issue:`14646` - Require loaders set __loader__"
" and __package__"
msgstr ""

#: ../../whatsnew/3.3.rst:691
msgid ""
"The :func:`__import__` function is now powered by "
":func:`importlib.__import__`. This work leads to the completion of "
"\"phase 2\" of :pep:`302`. There are multiple benefits to this change. "
"First, it has allowed for more of the machinery powering import to be "
"exposed instead of being implicit and hidden within the C code. It also "
"provides a single implementation for all Python VMs supporting Python 3.3"
" to use, helping to end any VM-specific deviations in import semantics. "
"And finally it eases the maintenance of import, allowing for future "
"growth to occur."
msgstr ""

#: ../../whatsnew/3.3.rst:700
msgid ""
"For the common user, there should be no visible change in semantics.  For"
" those whose code currently manipulates import or calls import "
"programmatically, the code changes that might possibly be required are "
"covered in the `Porting Python code`_ section of this document."
msgstr ""

#: ../../whatsnew/3.3.rst:706
msgid "New APIs"
msgstr ""

#: ../../whatsnew/3.3.rst:707
msgid ""
"One of the large benefits of this work is the exposure of what goes into "
"making the import statement work. That means the various importers that "
"were once implicit are now fully exposed as part of the :mod:`importlib` "
"package."
msgstr ""

#: ../../whatsnew/3.3.rst:711
msgid ""
"The abstract base classes defined in :mod:`importlib.abc` have been "
"expanded to properly delineate between :term:`meta path finders <meta "
"path finder>` and :term:`path entry finders <path entry finder>` by "
"introducing :class:`importlib.abc.MetaPathFinder` and "
":class:`importlib.abc.PathEntryFinder`, respectively. The old ABC of "
":class:`importlib.abc.Finder` is now only provided for backwards-"
"compatibility and does not enforce any method requirements."
msgstr ""

#: ../../whatsnew/3.3.rst:719
msgid ""
"In terms of finders, :class:`importlib.machinery.FileFinder` exposes the "
"mechanism used to search for source and bytecode files of a module. "
"Previously this class was an implicit member of :attr:`sys.path_hooks`."
msgstr ""

#: ../../whatsnew/3.3.rst:723
msgid ""
"For loaders, the new abstract base class "
":class:`importlib.abc.FileLoader` helps write a loader that uses the file"
" system as the storage mechanism for a module's code. The loader for "
"source files (:class:`importlib.machinery.SourceFileLoader`), sourceless "
"bytecode files (:class:`importlib.machinery.SourcelessFileLoader`), and "
"extension modules (:class:`importlib.machinery.ExtensionFileLoader`) are "
"now available for direct use."
msgstr ""

#: ../../whatsnew/3.3.rst:731
msgid ""
":exc:`ImportError` now has ``name`` and ``path`` attributes which are set"
" when there is relevant data to provide. The message for failed imports "
"will also provide the full name of the module now instead of just the "
"tail end of the module's name."
msgstr ""

#: ../../whatsnew/3.3.rst:736
msgid ""
"The :func:`importlib.invalidate_caches` function will now call the method"
" with the same name on all finders cached in "
":attr:`sys.path_importer_cache` to help clean up any stored state as "
"necessary."
msgstr ""

#: ../../whatsnew/3.3.rst:741
msgid "Visible Changes"
msgstr ""

#: ../../whatsnew/3.3.rst:743
msgid ""
"For potential required changes to code, see the `Porting Python code`_ "
"section."
msgstr ""

#: ../../whatsnew/3.3.rst:746
msgid ""
"Beyond the expanse of what :mod:`importlib` now exposes, there are other "
"visible changes to import. The biggest is that :attr:`sys.meta_path` and "
":attr:`sys.path_hooks` now store all of the meta path finders and path "
"entry hooks used by import.  Previously the finders were implicit and "
"hidden within the C code of import instead of being directly exposed. "
"This means that one can now easily remove or change the order of the "
"various finders to fit one's needs."
msgstr ""

#: ../../whatsnew/3.3.rst:753
msgid ""
"Another change is that all modules have a ``__loader__`` attribute, "
"storing the loader used to create the module. :pep:`302` has been updated"
" to make this attribute mandatory for loaders to implement, so in the "
"future once 3rd-party loaders have been updated people will be able to "
"rely on the existence of the attribute. Until such time, though, import "
"is setting the module post-load."
msgstr ""

#: ../../whatsnew/3.3.rst:759
msgid ""
"Loaders are also now expected to set the ``__package__`` attribute from "
":pep:`366`. Once again, import itself is already setting this on all "
"loaders from :mod:`importlib` and import itself is setting the attribute "
"post-load."
msgstr ""

#: ../../whatsnew/3.3.rst:763
msgid ""
"``None`` is now inserted into :attr:`sys.path_importer_cache` when no "
"finder can be found on :attr:`sys.path_hooks`. Since "
":class:`imp.NullImporter` is not directly exposed on "
":attr:`sys.path_hooks` it could no longer be relied upon to always be "
"available to use as a value representing no finder found."
msgstr ""

#: ../../whatsnew/3.3.rst:768
msgid ""
"All other changes relate to semantic changes which should be taken into "
"consideration when updating code for Python 3.3, and thus should be read "
"about in the `Porting Python code`_ section of this document."
msgstr ""

#: ../../whatsnew/3.3.rst:772
msgid "(Implementation by Brett Cannon)"
msgstr ""

#: ../../whatsnew/3.3.rst:780
msgid ""
"Added support for Unicode name aliases and named sequences. Both "
":func:`unicodedata.lookup()` and ``'\\N{...}'`` now resolve name aliases,"
" and :func:`unicodedata.lookup()` resolves named sequences too."
msgstr ""

#: ../../whatsnew/3.3.rst:784
msgid "(Contributed by Ezio Melotti in :issue:`12753`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:786
msgid "Unicode database updated to UCD version 6.1.0"
msgstr ""

#: ../../whatsnew/3.3.rst:788
msgid ""
"Equality comparisons on :func:`range` objects now return a result "
"reflecting the equality of the underlying sequences generated by those "
"range objects. (:issue:`13201`)"
msgstr ""

#: ../../whatsnew/3.3.rst:792
msgid ""
"The ``count()``, ``find()``, ``rfind()``, ``index()`` and ``rindex()`` "
"methods of :class:`bytes` and :class:`bytearray` objects now accept an "
"integer between 0 and 255 as their first argument."
msgstr ""

#: ../../whatsnew/3.3.rst:796
msgid "(Contributed by Petri Lehtinen in :issue:`12170`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:798
msgid ""
"The ``rjust()``, ``ljust()``, and ``center()`` methods of :class:`bytes` "
"and :class:`bytearray` now accept a :class:`bytearray` for the ``fill`` "
"argument.  (Contributed by Petri Lehtinen in :issue:`12380`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:802
msgid ""
"New methods have been added to :class:`list` and :class:`bytearray`: "
"``copy()`` and ``clear()`` (:issue:`10516`).  Consequently, "
":class:`~collections.abc.MutableSequence` now also defines a "
":meth:`~collections.abc.MutableSequence.clear` method (:issue:`11388`)."
msgstr ""

#: ../../whatsnew/3.3.rst:807
msgid ""
"Raw bytes literals can now be written ``rb\"...\"`` as well as "
"``br\"...\"``."
msgstr ""

#: ../../whatsnew/3.3.rst:809
msgid "(Contributed by Antoine Pitrou in :issue:`13748`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:811
msgid ""
":meth:`dict.setdefault` now does only one lookup for the given key, "
"making it atomic when used with built-in types."
msgstr ""

#: ../../whatsnew/3.3.rst:814
msgid "(Contributed by Filip Gruszczy≈Ñski in :issue:`13521`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:816
msgid ""
"The error messages produced when a function call does not match the "
"function signature have been significantly improved."
msgstr ""

#: ../../whatsnew/3.3.rst:819
msgid "(Contributed by Benjamin Peterson.)"
msgstr ""

#: ../../whatsnew/3.3.rst:823
msgid "A Finer-Grained Import Lock"
msgstr ""

#: ../../whatsnew/3.3.rst:825
msgid ""
"Previous versions of CPython have always relied on a global import lock. "
"This led to unexpected annoyances, such as deadlocks when importing a "
"module would trigger code execution in a different thread as a side-"
"effect. Clumsy workarounds were sometimes employed, such as the "
":c:func:`PyImport_ImportModuleNoBlock` C API function."
msgstr ""

#: ../../whatsnew/3.3.rst:831
msgid ""
"In Python 3.3, importing a module takes a per-module lock.  This "
"correctly serializes importation of a given module from multiple threads "
"(preventing the exposure of incompletely initialized modules), while "
"eliminating the aforementioned annoyances."
msgstr ""

#: ../../whatsnew/3.3.rst:836
msgid "(Contributed by Antoine Pitrou in :issue:`9260`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:840
msgid "Builtin functions and types"
msgstr ""

#: ../../whatsnew/3.3.rst:842
msgid ""
":func:`open` gets a new *opener* parameter: the underlying file "
"descriptor for the file object is then obtained by calling *opener* with "
"(*file*, *flags*). It can be used to use custom flags like "
":data:`os.O_CLOEXEC` for example. The ``'x'`` mode was added: open for "
"exclusive creation, failing if the file already exists."
msgstr ""

#: ../../whatsnew/3.3.rst:847
msgid ""
":func:`print`: added the *flush* keyword argument. If the *flush* keyword"
" argument is true, the stream is forcibly flushed."
msgstr ""

#: ../../whatsnew/3.3.rst:849
msgid ""
":func:`hash`: hash randomization is enabled by default, see "
":meth:`object.__hash__` and :envvar:`PYTHONHASHSEED`."
msgstr ""

#: ../../whatsnew/3.3.rst:851
msgid ""
"The :class:`str` type gets a new :meth:`~str.casefold` method: return a "
"casefolded copy of the string, casefolded strings may be used for "
"caseless matching. For example, ``'√ü'.casefold()`` returns ``'ss'``."
msgstr ""

#: ../../whatsnew/3.3.rst:854
msgid ""
"The sequence documentation has been substantially rewritten to better "
"explain the binary/text sequence distinction and to provide specific "
"documentation sections for the individual builtin sequence types "
"(:issue:`4966`)."
msgstr ""

#: ../../whatsnew/3.3.rst:861 ../../whatsnew/3.4.rst:458
#: ../../whatsnew/3.5.rst:724 ../../whatsnew/3.6.rst:768
#: ../../whatsnew/3.7.rst:544 ../../whatsnew/3.8.rst:542
msgid "New Modules"
msgstr ""

#: ../../whatsnew/3.3.rst:864 ../../whatsnew/3.5.rst:1138
#: ../../whatsnew/3.6.rst:1076
msgid "faulthandler"
msgstr ""

#: ../../whatsnew/3.3.rst:866
msgid ""
"This new debug module :mod:`faulthandler` contains functions to dump "
"Python tracebacks explicitly, on a fault (a crash like a segmentation "
"fault), after a timeout, or on a user signal. Call "
":func:`faulthandler.enable` to install fault handlers for the "
":const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS`, and"
" :const:`SIGILL` signals. You can also enable them at startup by setting "
"the :envvar:`PYTHONFAULTHANDLER` environment variable or by using "
":option:`-X` ``faulthandler`` command line option."
msgstr ""

#: ../../whatsnew/3.3.rst:874
msgid "Example of a segmentation fault on Linux:"
msgstr ""

#: ../../whatsnew/3.3.rst:890 ../../whatsnew/3.4.rst:1059
#: ../../whatsnew/3.5.rst:1336 ../../whatsnew/3.7.rst:1074
msgid "ipaddress"
msgstr ""

#: ../../whatsnew/3.3.rst:892
msgid ""
"The new :mod:`ipaddress` module provides tools for creating and "
"manipulating objects representing IPv4 and IPv6 addresses, networks and "
"interfaces (i.e. an IP address associated with a specific IP subnet)."
msgstr ""

#: ../../whatsnew/3.3.rst:896
msgid "(Contributed by Google and Peter Moody in :pep:`3144`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:899 ../../whatsnew/3.5.rst:1437
msgid "lzma"
msgstr ""

#: ../../whatsnew/3.3.rst:901
msgid ""
"The newly-added :mod:`lzma` module provides data compression and "
"decompression using the LZMA algorithm, including support for the ``.xz``"
" and ``.lzma`` file formats."
msgstr ""

#: ../../whatsnew/3.3.rst:905
msgid "(Contributed by Nadeem Vawda and Per √òyvind Karlsen in :issue:`6715`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:909 ../../whatsnew/3.4.rst:589
#: ../../whatsnew/3.5.rst:761 ../../whatsnew/3.6.rst:792
#: ../../whatsnew/3.7.rst:618 ../../whatsnew/3.8.rst:567
msgid "Improved Modules"
msgstr ""

#: ../../whatsnew/3.3.rst:914
msgid ""
"Improved support for abstract base classes containing descriptors "
"composed with abstract methods. The recommended approach to declaring "
"abstract descriptors is now to provide :attr:`__isabstractmethod__` as a "
"dynamically updated property. The built-in descriptors have been updated "
"accordingly."
msgstr ""

#: ../../whatsnew/3.3.rst:919 ../../whatsnew/3.3.rst:2245
msgid ""
":class:`abc.abstractproperty` has been deprecated, use :class:`property` "
"with :func:`abc.abstractmethod` instead."
msgstr ""

#: ../../whatsnew/3.3.rst:921 ../../whatsnew/3.3.rst:2247
msgid ""
":class:`abc.abstractclassmethod` has been deprecated, use "
":class:`classmethod` with :func:`abc.abstractmethod` instead."
msgstr ""

#: ../../whatsnew/3.3.rst:923 ../../whatsnew/3.3.rst:2249
msgid ""
":class:`abc.abstractstaticmethod` has been deprecated, use "
":class:`staticmethod` with :func:`abc.abstractmethod` instead."
msgstr ""

#: ../../whatsnew/3.3.rst:926
msgid "(Contributed by Darren Dale in :issue:`11610`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:928
msgid ""
":meth:`abc.ABCMeta.register` now returns the registered subclass, which "
"means it can now be used as a class decorator (:issue:`10868`)."
msgstr ""

#: ../../whatsnew/3.3.rst:933 ../../whatsnew/3.6.rst:795
msgid "array"
msgstr ""

#: ../../whatsnew/3.3.rst:935
msgid ""
"The :mod:`array` module supports the :c:type:`long long` type using ``q``"
" and ``Q`` type codes."
msgstr ""

#: ../../whatsnew/3.3.rst:938
msgid "(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:942 ../../whatsnew/3.4.rst:645
msgid "base64"
msgstr ""

#: ../../whatsnew/3.3.rst:944
msgid ""
"ASCII-only Unicode strings are now accepted by the decoding functions of "
"the :mod:`base64` modern interface. For example, "
"``base64.b64decode('YWJj')`` returns ``b'abc'``.  (Contributed by Catalin"
" Iacob in :issue:`13641`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:950 ../../whatsnew/3.6.rst:900
#: ../../whatsnew/3.7.rst:779
msgid "binascii"
msgstr ""

#: ../../whatsnew/3.3.rst:952
msgid ""
"In addition to the binary objects they normally accept, the ``a2b_`` "
"functions now all also accept ASCII-only strings as input.  (Contributed "
"by Antoine Pitrou in :issue:`13637`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:958 ../../whatsnew/3.5.rst:871
msgid "bz2"
msgstr ""

#: ../../whatsnew/3.3.rst:960
msgid ""
"The :mod:`bz2` module has been rewritten from scratch. In the process, "
"several new features have been added:"
msgstr ""

#: ../../whatsnew/3.3.rst:963
msgid ""
"New :func:`bz2.open` function: open a bzip2-compressed file in binary or "
"text mode."
msgstr ""

#: ../../whatsnew/3.3.rst:966
msgid ""
":class:`bz2.BZ2File` can now read from and write to arbitrary file-like "
"objects, by means of its constructor's *fileobj* argument."
msgstr ""

#: ../../whatsnew/3.3.rst:969
msgid "(Contributed by Nadeem Vawda in :issue:`5863`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:971
msgid ""
":class:`bz2.BZ2File` and :func:`bz2.decompress` can now decompress multi-"
"stream inputs (such as those produced by the :program:`pbzip2` tool). "
":class:`bz2.BZ2File` can now also be used to create this type of file, "
"using the ``'a'`` (append) mode."
msgstr ""

#: ../../whatsnew/3.3.rst:976
msgid "(Contributed by Nir Aides in :issue:`1625`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:978
msgid ""
":class:`bz2.BZ2File` now implements all of the :class:`io.BufferedIOBase`"
" API, except for the :meth:`detach` and :meth:`truncate` methods."
msgstr ""

#: ../../whatsnew/3.3.rst:983
msgid "codecs"
msgstr ""

#: ../../whatsnew/3.3.rst:985
msgid ""
"The :mod:`~encodings.mbcs` codec has been rewritten to handle correctly "
"``replace`` and ``ignore`` error handlers on all Windows versions.  The "
":mod:`~encodings.mbcs` codec now supports all error handlers, instead of "
"only ``replace`` to encode and ``ignore`` to decode."
msgstr ""

#: ../../whatsnew/3.3.rst:990
msgid ""
"A new Windows-only codec has been added: ``cp65001`` (:issue:`13216`). It"
" is the Windows code page 65001 (Windows UTF-8, ``CP_UTF8``).  For "
"example, it is used by ``sys.stdout`` if the console output code page is "
"set to cp65001 (e.g., using ``chcp 65001`` command)."
msgstr ""

#: ../../whatsnew/3.3.rst:995
msgid ""
"Multibyte CJK decoders now resynchronize faster.  They only ignore the "
"first byte of an invalid byte sequence. For example, "
"``b'\\xff\\n'.decode('gb2312', 'replace')`` now returns a ``\\n`` after "
"the replacement character."
msgstr ""

#: ../../whatsnew/3.3.rst:999
msgid "(:issue:`12016`)"
msgstr ""

#: ../../whatsnew/3.3.rst:1001
msgid ""
"Incremental CJK codec encoders are no longer reset at each call to their "
"encode() methods. For example::"
msgstr ""

#: ../../whatsnew/3.3.rst:1009
msgid ""
"This example gives ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` with older "
"Python versions."
msgstr ""

#: ../../whatsnew/3.3.rst:1012
msgid "(:issue:`12100`)"
msgstr ""

#: ../../whatsnew/3.3.rst:1014
msgid "The ``unicode_internal`` codec has been deprecated."
msgstr ""

#: ../../whatsnew/3.3.rst:1020
msgid ""
"Addition of a new :class:`~collections.ChainMap` class to allow treating "
"a number of mappings as a single unit.  (Written by Raymond Hettinger for"
" :issue:`11089`, made public in :issue:`11297`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1024
msgid ""
"The abstract base classes have been moved in a new :mod:`collections.abc`"
" module, to better differentiate between the abstract and the concrete "
"collections classes.  Aliases for ABCs are still present in the "
":mod:`collections` module to preserve existing imports.  (:issue:`11085`)"
msgstr ""

#: ../../whatsnew/3.3.rst:1031
msgid ""
"The :class:`~collections.Counter` class now supports the unary ``+`` and "
"``-`` operators, as well as the in-place operators ``+=``, ``-=``, "
"``|=``, and ``&=``.  (Contributed by Raymond Hettinger in "
":issue:`13121`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1039
msgid ""
":class:`~contextlib.ExitStack` now provides a solid foundation for "
"programmatic manipulation of context managers and similar cleanup "
"functionality. Unlike the previous ``contextlib.nested`` API (which was "
"deprecated and removed), the new API is designed to work correctly "
"regardless of whether context managers acquire their resources in their "
"``__init__`` method (for example, file objects) or in their ``__enter__``"
" method (for example, synchronisation objects from the :mod:`threading` "
"module)."
msgstr ""

#: ../../whatsnew/3.3.rst:1048
msgid "(:issue:`13585`)"
msgstr ""

#: ../../whatsnew/3.3.rst:1052 ../../whatsnew/3.7.rst:848
msgid "crypt"
msgstr ""

#: ../../whatsnew/3.3.rst:1054
msgid ""
"Addition of salt and modular crypt format (hashing method) and the "
":func:`~crypt.mksalt` function to the :mod:`crypt` module."
msgstr ""

#: ../../whatsnew/3.3.rst:1057
msgid "(:issue:`10924`)"
msgstr ""

#: ../../whatsnew/3.3.rst:1060 ../../whatsnew/3.5.rst:1046
#: ../../whatsnew/3.8.rst:734
msgid "curses"
msgstr ""

#: ../../whatsnew/3.3.rst:1062
msgid ""
"If the :mod:`curses` module is linked to the ncursesw library, use "
"Unicode functions when Unicode strings or characters are passed (e.g. "
":c:func:`waddwstr`), and bytes functions otherwise (e.g. "
":c:func:`waddstr`)."
msgstr ""

#: ../../whatsnew/3.3.rst:1065
msgid "Use the locale encoding instead of ``utf-8`` to encode Unicode strings."
msgstr ""

#: ../../whatsnew/3.3.rst:1066
msgid ":class:`curses.window` has a new :attr:`curses.window.encoding` attribute."
msgstr ""

#: ../../whatsnew/3.3.rst:1067
msgid ""
"The :class:`curses.window` class has a new :meth:`~curses.window.get_wch`"
" method to get a wide character"
msgstr ""

#: ../../whatsnew/3.3.rst:1069
msgid ""
"The :mod:`curses` module has a new :meth:`~curses.unget_wch` function to "
"push a wide character so the next :meth:`~curses.window.get_wch` will "
"return it"
msgstr ""

#: ../../whatsnew/3.3.rst:1073
msgid "(Contributed by I√±igo Serna in :issue:`6755`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1076 ../../whatsnew/3.6.rst:971
#: ../../whatsnew/3.7.rst:858 ../../whatsnew/3.8.rst:753
msgid "datetime"
msgstr ""

#: ../../whatsnew/3.3.rst:1078
msgid ""
"Equality comparisons between naive and aware :class:`~datetime.datetime` "
"instances now return :const:`False` instead of raising :exc:`TypeError` "
"(:issue:`15006`)."
msgstr ""

#: ../../whatsnew/3.3.rst:1081
msgid ""
"New :meth:`datetime.datetime.timestamp` method: Return POSIX timestamp "
"corresponding to the :class:`~datetime.datetime` instance."
msgstr ""

#: ../../whatsnew/3.3.rst:1083
msgid ""
"The :meth:`datetime.datetime.strftime` method supports formatting years "
"older than 1000."
msgstr ""

#: ../../whatsnew/3.3.rst:1085
msgid ""
"The :meth:`datetime.datetime.astimezone` method can now be called without"
" arguments to convert datetime instance to the system timezone."
msgstr ""

#: ../../whatsnew/3.3.rst:1093 ../../whatsnew/3.6.rst:997
#: ../../whatsnew/3.7.rst:878
msgid "decimal"
msgstr ""

#: ../../whatsnew/3.3.rst:1096
msgid ":issue:`7652` - integrate fast native decimal arithmetic."
msgstr ""

#: ../../whatsnew/3.3.rst:1096
msgid "C-module and libmpdec written by Stefan Krah."
msgstr ""

#: ../../whatsnew/3.3.rst:1098
msgid ""
"The new C version of the decimal module integrates the high speed "
"libmpdec library for arbitrary precision correctly-rounded decimal "
"floating point arithmetic. libmpdec conforms to IBM's General Decimal "
"Arithmetic Specification."
msgstr ""

#: ../../whatsnew/3.3.rst:1102
msgid ""
"Performance gains range from 10x for database applications to 100x for "
"numerically intensive applications. These numbers are expected gains for "
"standard precisions used in decimal floating point arithmetic. Since the "
"precision is user configurable, the exact figures may vary. For example, "
"in integer bignum arithmetic the differences can be significantly higher."
msgstr ""

#: ../../whatsnew/3.3.rst:1108
msgid ""
"The following table is meant as an illustration. Benchmarks are available"
" at http://www.bytereef.org/mpdecimal/quickstart.html."
msgstr ""

#: ../../whatsnew/3.3.rst:1112
msgid "decimal.py"
msgstr ""

#: ../../whatsnew/3.3.rst:1112
msgid "_decimal"
msgstr ""

#: ../../whatsnew/3.3.rst:1112
msgid "speedup"
msgstr ""

#: ../../whatsnew/3.3.rst:1114
msgid "pi"
msgstr ""

#: ../../whatsnew/3.3.rst:1114
msgid "42.02s"
msgstr ""

#: ../../whatsnew/3.3.rst:1114
msgid "0.345s"
msgstr ""

#: ../../whatsnew/3.3.rst:1114
msgid "120x"
msgstr ""

#: ../../whatsnew/3.3.rst:1116
msgid "telco"
msgstr ""

#: ../../whatsnew/3.3.rst:1116
msgid "172.19s"
msgstr ""

#: ../../whatsnew/3.3.rst:1116
msgid "5.68s"
msgstr ""

#: ../../whatsnew/3.3.rst:1116
msgid "30x"
msgstr ""

#: ../../whatsnew/3.3.rst:1118
msgid "psycopg"
msgstr ""

#: ../../whatsnew/3.3.rst:1118
msgid "3.57s"
msgstr ""

#: ../../whatsnew/3.3.rst:1118
msgid "0.29s"
msgstr ""

#: ../../whatsnew/3.3.rst:1118
msgid "12x"
msgstr ""

#: ../../whatsnew/3.3.rst:1124
msgid ""
"The :exc:`~decimal.FloatOperation` signal optionally enables stricter "
"semantics for mixing floats and Decimals."
msgstr ""

#: ../../whatsnew/3.3.rst:1127
msgid ""
"If Python is compiled without threads, the C version automatically "
"disables the expensive thread local context machinery. In this case, the "
"variable :data:`~decimal.HAVE_THREADS` is set to ``False``."
msgstr ""

#: ../../whatsnew/3.3.rst:1134
msgid ""
"The C module has the following context limits, depending on the machine "
"architecture:"
msgstr ""

#: ../../whatsnew/3.3.rst:1138
msgid "32-bit"
msgstr ""

#: ../../whatsnew/3.3.rst:1138
msgid "64-bit"
msgstr ""

#: ../../whatsnew/3.3.rst:1140
msgid ":const:`MAX_PREC`"
msgstr ""

#: ../../whatsnew/3.3.rst:1140 ../../whatsnew/3.3.rst:1142
msgid ":const:`425000000`"
msgstr ""

#: ../../whatsnew/3.3.rst:1140 ../../whatsnew/3.3.rst:1142
msgid ":const:`999999999999999999`"
msgstr ""

#: ../../whatsnew/3.3.rst:1142
msgid ":const:`MAX_EMAX`"
msgstr ""

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`MIN_EMIN`"
msgstr ""

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`-425000000`"
msgstr ""

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`-999999999999999999`"
msgstr ""

#: ../../whatsnew/3.3.rst:1147
msgid ""
"In the context templates (:class:`~decimal.DefaultContext`, "
":class:`~decimal.BasicContext` and :class:`~decimal.ExtendedContext`) the"
" magnitude of :attr:`~decimal.Context.Emax` and "
":attr:`~decimal.Context.Emin` has changed to :const:`999999`."
msgstr ""

#: ../../whatsnew/3.3.rst:1152
msgid ""
"The :class:`~decimal.Decimal` constructor in decimal.py does not observe "
"the context limits and converts values with arbitrary exponents or "
"precision exactly. Since the C version has internal limits, the following"
" scheme is used: If possible, values are converted exactly, otherwise "
":exc:`~decimal.InvalidOperation` is raised and the result is NaN. In the "
"latter case it is always possible to use "
":meth:`~decimal.Context.create_decimal` in order to obtain a rounded or "
"inexact value."
msgstr ""

#: ../../whatsnew/3.3.rst:1161
msgid ""
"The power function in decimal.py is always correctly-rounded. In the C "
"version, it is defined in terms of the correctly-rounded "
":meth:`~decimal.Decimal.exp` and :meth:`~decimal.Decimal.ln` functions, "
"but the final result is only \"almost always correctly rounded\"."
msgstr ""

#: ../../whatsnew/3.3.rst:1167
msgid ""
"In the C version, the context dictionary containing the signals is a "
":class:`~collections.abc.MutableMapping`.  For speed reasons, "
":attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` always "
"refer to the same :class:`~collections.abc.MutableMapping` that the "
"context was initialized with. If a new signal dictionary is assigned, "
":attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` are "
"updated with the new values, but they do not reference the RHS "
"dictionary."
msgstr ""

#: ../../whatsnew/3.3.rst:1177
msgid ""
"Pickling a :class:`~decimal.Context` produces a different output in order"
" to have a common interchange format for the Python and C versions."
msgstr ""

#: ../../whatsnew/3.3.rst:1181
msgid ""
"The order of arguments in the :class:`~decimal.Context` constructor has "
"been changed to match the order displayed by :func:`repr`."
msgstr ""

#: ../../whatsnew/3.3.rst:1185
msgid ""
"The ``watchexp`` parameter in the :meth:`~decimal.Decimal.quantize` "
"method is deprecated."
msgstr ""

#: ../../whatsnew/3.3.rst:1195
msgid "Policy Framework"
msgstr ""

#: ../../whatsnew/3.3.rst:1197
msgid ""
"The email package now has a :mod:`~email.policy` framework.  A "
":class:`~email.policy.Policy` is an object with several methods and "
"properties that control how the email package behaves.  The primary "
"policy for Python 3.3 is the :class:`~email.policy.Compat32` policy, "
"which provides backward compatibility with the email package in Python "
"3.2.  A ``policy`` can be specified when an email message is parsed by a "
":mod:`~email.parser`, or when a :class:`~email.message.Message` object is"
" created, or when an email is serialized using a :mod:`~email.generator`."
"  Unless overridden, a policy passed to a ``parser`` is inherited by all "
"the ``Message`` object and sub-objects created by the ``parser``.  By "
"default a ``generator`` will use the policy of the ``Message`` object it "
"is serializing.  The default policy is :data:`~email.policy.compat32`."
msgstr ""

#: ../../whatsnew/3.3.rst:1210
msgid "The minimum set of controls implemented by all ``policy`` objects are:"
msgstr ""

#: ../../whatsnew/3.3.rst:1215
msgid "max_line_length"
msgstr ""

#: ../../whatsnew/3.3.rst:1215
msgid ""
"The maximum length, excluding the linesep character(s), individual lines "
"may have when a ``Message`` is serialized.  Defaults to 78."
msgstr ""

#: ../../whatsnew/3.3.rst:1219
msgid "linesep"
msgstr ""

#: ../../whatsnew/3.3.rst:1219
msgid ""
"The character used to separate individual lines when a ``Message`` is "
"serialized.  Defaults to ``\\n``."
msgstr ""

#: ../../whatsnew/3.3.rst:1222
msgid "cte_type"
msgstr ""

#: ../../whatsnew/3.3.rst:1222
msgid ""
"``7bit`` or ``8bit``.  ``8bit`` applies only to a ``Bytes`` "
"``generator``, and means that non-ASCII may be used where allowed by the "
"protocol (or where it exists in the original input)."
msgstr ""

#: ../../whatsnew/3.3.rst:1227
msgid "raise_on_defect"
msgstr ""

#: ../../whatsnew/3.3.rst:1227
msgid ""
"Causes a ``parser`` to raise error when defects are encountered instead "
"of adding them to the ``Message`` object's ``defects`` list."
msgstr ""

#: ../../whatsnew/3.3.rst:1232
msgid ""
"A new policy instance, with new settings, is created using the "
":meth:`~email.policy.Policy.clone` method of policy objects.  ``clone`` "
"takes any of the above controls as keyword arguments.  Any control not "
"specified in the call retains its default value.  Thus you can create a "
"policy that uses ``\\r\\n`` linesep characters like this::"
msgstr ""

#: ../../whatsnew/3.3.rst:1240
msgid ""
"Policies can be used to make the generation of messages in the format "
"needed by your application simpler.  Instead of having to remember to "
"specify ``linesep='\\r\\n'`` in all the places you call a ``generator``, "
"you can specify it once, when you set the policy used by the ``parser`` "
"or the ``Message``, whichever your program uses to create ``Message`` "
"objects.  On the other hand, if you need to generate messages in multiple"
" forms, you can still specify the parameters in the appropriate "
"``generator`` call.  Or you can have custom policy instances for your "
"different cases, and pass those in when you create the ``generator``."
msgstr ""

#: ../../whatsnew/3.3.rst:1252
msgid "Provisional Policy with New Header API"
msgstr ""

#: ../../whatsnew/3.3.rst:1254
msgid ""
"While the policy framework is worthwhile all by itself, the main "
"motivation for introducing it is to allow the creation of new policies "
"that implement new features for the email package in a way that maintains"
" backward compatibility for those who do not use the new policies.  "
"Because the new policies introduce a new API, we are releasing them in "
"Python 3.3 as a :term:`provisional policy <provisional package>`.  "
"Backwards incompatible changes (up to and including removal of the code) "
"may occur if deemed necessary by the core developers."
msgstr ""

#: ../../whatsnew/3.3.rst:1262
msgid ""
"The new policies are instances of :class:`~email.policy.EmailPolicy`, and"
" add the following additional controls:"
msgstr ""

#: ../../whatsnew/3.3.rst:1268
msgid "refold_source"
msgstr ""

#: ../../whatsnew/3.3.rst:1268
msgid ""
"Controls whether or not headers parsed by a :mod:`~email.parser` are "
"refolded by the :mod:`~email.generator`.  It can be ``none``, ``long``, "
"or ``all``.  The default is ``long``, which means that source headers "
"with a line longer than ``max_line_length`` get refolded.  ``none`` means"
" no line get refolded, and ``all`` means that all lines get refolded."
msgstr ""

#: ../../whatsnew/3.3.rst:1277
msgid "header_factory"
msgstr ""

#: ../../whatsnew/3.3.rst:1277
msgid ""
"A callable that take a ``name`` and ``value`` and produces a custom "
"header object."
msgstr ""

#: ../../whatsnew/3.3.rst:1281
msgid ""
"The ``header_factory`` is the key to the new features provided by the new"
" policies.  When one of the new policies is used, any header retrieved "
"from a ``Message`` object is an object produced by the "
"``header_factory``, and any time you set a header on a ``Message`` it "
"becomes an object produced by ``header_factory``.  All such header "
"objects have a ``name`` attribute equal to the header name.  Address and "
"Date headers have additional attributes that give you access to the "
"parsed data of the header.  This means you can now do things like this::"
msgstr ""

#: ../../whatsnew/3.3.rst:1309
msgid ""
"You will note that the unicode display name is automatically encoded as "
"``utf-8`` when the message is serialized, but that when the header is "
"accessed directly, you get the unicode version.  This eliminates any need"
" to deal with the :mod:`email.header` :meth:`~email.header.decode_header`"
" or :meth:`~email.header.make_header` functions."
msgstr ""

#: ../../whatsnew/3.3.rst:1315
msgid "You can also create addresses from parts::"
msgstr ""

#: ../../whatsnew/3.3.rst:1325
msgid "Decoding to unicode is done automatically::"
msgstr ""

#: ../../whatsnew/3.3.rst:1331
msgid ""
"When you parse a message, you can use the ``addresses`` and ``groups`` "
"attributes of the header objects to access the groups and individual "
"addresses::"
msgstr ""

#: ../../whatsnew/3.3.rst:1340
msgid ""
"In summary, if you use one of the new policies, header manipulation works"
" the way it ought to:  your application works with unicode strings, and "
"the email package transparently encodes and decodes the unicode to and "
"from the RFC standard Content Transfer Encodings."
msgstr ""

#: ../../whatsnew/3.3.rst:1346
msgid "Other API Changes"
msgstr ""

#: ../../whatsnew/3.3.rst:1348
msgid ""
"New :class:`~email.parser.BytesHeaderParser`, added to the "
":mod:`~email.parser` module to complement "
":class:`~email.parser.HeaderParser` and complete the Bytes API."
msgstr ""

#: ../../whatsnew/3.3.rst:1352
msgid "New utility functions:"
msgstr ""

#: ../../whatsnew/3.3.rst:1354
msgid ""
":func:`~email.utils.format_datetime`: given a "
":class:`~datetime.datetime`, produce a string formatted for use in an "
"email header."
msgstr ""

#: ../../whatsnew/3.3.rst:1357
msgid ""
":func:`~email.utils.parsedate_to_datetime`: given a date string from an "
"email header, convert it into an aware :class:`~datetime.datetime`, or a "
"naive :class:`~datetime.datetime` if the offset is ``-0000``."
msgstr ""

#: ../../whatsnew/3.3.rst:1361
msgid ""
":func:`~email.utils.localtime`: With no argument, returns the current "
"local time as an aware :class:`~datetime.datetime` using the local "
":class:`~datetime.timezone`.  Given an aware :class:`~datetime.datetime`,"
" converts it into an aware :class:`~datetime.datetime` using the local "
":class:`~datetime.timezone`."
msgstr ""

#: ../../whatsnew/3.3.rst:1369
msgid "ftplib"
msgstr ""

#: ../../whatsnew/3.3.rst:1371
msgid ""
":class:`ftplib.FTP` now accepts a ``source_address`` keyword argument to "
"specify the ``(host, port)`` to use as the source address in the bind "
"call when creating the outgoing socket.  (Contributed by Giampaolo Rodol√†"
" in :issue:`8594`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1376
msgid ""
"The :class:`~ftplib.FTP_TLS` class now provides a new "
":func:`~ftplib.FTP_TLS.ccc` function to revert control channel back to "
"plaintext.  This can be useful to take advantage of firewalls that know "
"how to handle NAT with non-secure FTP without opening fixed ports.  "
"(Contributed by Giampaolo Rodol√† in :issue:`12139`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1382
msgid ""
"Added :meth:`ftplib.FTP.mlsd` method which provides a parsable directory "
"listing format and deprecates :meth:`ftplib.FTP.nlst` and "
":meth:`ftplib.FTP.dir`.  (Contributed by Giampaolo Rodol√† in "
":issue:`11072`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1390
msgid ""
"The :func:`functools.lru_cache` decorator now accepts a ``typed`` keyword"
" argument (that defaults to ``False`` to ensure that it caches values of "
"different types that compare equal in separate cache slots.  (Contributed"
" by Raymond Hettinger in :issue:`13227`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1397 ../../whatsnew/3.4.rst:885
#: ../../whatsnew/3.7.rst:929 ../../whatsnew/3.8.rst:820
msgid "gc"
msgstr ""

#: ../../whatsnew/3.3.rst:1399
msgid ""
"It is now possible to register callbacks invoked by the garbage collector"
" before and after collection using the new :data:`~gc.callbacks` list."
msgstr ""

#: ../../whatsnew/3.3.rst:1404 ../../whatsnew/3.4.rst:917
#: ../../whatsnew/3.7.rst:941
msgid "hmac"
msgstr ""

#: ../../whatsnew/3.3.rst:1406
msgid ""
"A new :func:`~hmac.compare_digest` function has been added to prevent "
"side channel attacks on digests through timing analysis.  (Contributed by"
" Nick Coghlan and Christian Heimes in :issue:`15061`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1412 ../../whatsnew/3.4.rst:956
#: ../../whatsnew/3.5.rst:1193
msgid "http"
msgstr ""

#: ../../whatsnew/3.3.rst:1414
msgid ""
":class:`http.server.BaseHTTPRequestHandler` now buffers the headers and "
"writes them all at once when "
":meth:`~http.server.BaseHTTPRequestHandler.end_headers` is called.  A new"
" method :meth:`~http.server.BaseHTTPRequestHandler.flush_headers` can be "
"used to directly manage when the accumulated headers are sent. "
"(Contributed by Andrew Schaaf in :issue:`3709`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1420
msgid ""
":class:`http.server` now produces valid ``HTML 4.01 strict`` output. "
"(Contributed by Ezio Melotti in :issue:`13295`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1423
msgid ""
":class:`http.client.HTTPResponse` now has a "
":meth:`~http.client.HTTPResponse.readinto` method, which means it can be "
"used as an :class:`io.RawIOBase` class.  (Contributed by John Kuhn in "
":issue:`13464`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1432
msgid ""
":class:`html.parser.HTMLParser` is now able to parse broken markup "
"without raising errors, therefore the *strict* argument of the "
"constructor and the :exc:`~html.parser.HTMLParseError` exception are now "
"deprecated. The ability to parse broken markup is the result of a number "
"of bug fixes that are also available on the latest bug fix releases of "
"Python 2.7/3.2. (Contributed by Ezio Melotti in :issue:`15114`, and "
":issue:`14538`, :issue:`13993`, :issue:`13960`, :issue:`13358`, "
":issue:`1745761`, :issue:`755670`, :issue:`13357`, :issue:`12629`, "
":issue:`1200313`, :issue:`670664`, :issue:`13273`, :issue:`12888`, "
":issue:`7311`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1442
msgid ""
"A new :data:`~html.entities.html5` dictionary that maps HTML5 named "
"character references to the equivalent Unicode character(s) (e.g. "
"``html5['gt;'] == '>'``) has been added to the :mod:`html.entities` "
"module.  The dictionary is now also used by "
":class:`~html.parser.HTMLParser`.  (Contributed by Ezio Melotti in "
":issue:`11113` and :issue:`15156`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1452
msgid ""
"The :class:`~imaplib.IMAP4_SSL` constructor now accepts an SSLContext "
"parameter to control parameters of the secure channel."
msgstr ""

#: ../../whatsnew/3.3.rst:1455
msgid "(Contributed by Sijin Joseph in :issue:`8808`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1461
msgid ""
"A new :func:`~inspect.getclosurevars` function has been added. This "
"function reports the current binding of all names referenced from the "
"function body and where those names were resolved, making it easier to "
"verify correct internal state when testing code that relies on stateful "
"closures."
msgstr ""

#: ../../whatsnew/3.3.rst:1466
msgid "(Contributed by Meador Inge and Nick Coghlan in :issue:`13062`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1468
msgid ""
"A new :func:`~inspect.getgeneratorlocals` function has been added. This "
"function reports the current binding of local variables in the "
"generator's stack frame, making it easier to verify correct internal "
"state when testing generators."
msgstr ""

#: ../../whatsnew/3.3.rst:1473
msgid "(Contributed by Meador Inge in :issue:`15153`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1478
msgid ""
"The :func:`~io.open` function has a new ``'x'`` mode that can be used to "
"exclusively create a new file, and raise a :exc:`FileExistsError` if the "
"file already exists. It is based on the C11 'x' mode to fopen()."
msgstr ""

#: ../../whatsnew/3.3.rst:1482
msgid "(Contributed by David Townshend in :issue:`12760`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1484
msgid ""
"The constructor of the :class:`~io.TextIOWrapper` class has a new "
"*write_through* optional argument. If *write_through* is ``True``, calls "
"to :meth:`~io.TextIOWrapper.write` are guaranteed not to be buffered: any"
" data written on the :class:`~io.TextIOWrapper` object is immediately "
"handled to its underlying binary buffer."
msgstr ""

#: ../../whatsnew/3.3.rst:1494
msgid ""
":func:`~itertools.accumulate` now takes an optional ``func`` argument for"
" providing a user-supplied binary function."
msgstr ""

#: ../../whatsnew/3.3.rst:1501
msgid ""
"The :func:`~logging.basicConfig` function now supports an optional "
"``handlers`` argument taking an iterable of handlers to be added to the "
"root logger."
msgstr ""

#: ../../whatsnew/3.3.rst:1504
msgid ""
"A class level attribute "
":attr:`~logging.handlers.SysLogHandler.append_nul` has been added to "
":class:`~logging.handlers.SysLogHandler` to allow control of the "
"appending of the ``NUL`` (``\\000``) byte to syslog records, since for "
"some daemons it is required while for others it is passed through to the "
"log."
msgstr ""

#: ../../whatsnew/3.3.rst:1514
msgid ""
"The :mod:`math` module has a new function, :func:`~math.log2`,  which "
"returns the base-2 logarithm of *x*."
msgstr ""

#: ../../whatsnew/3.3.rst:1517
msgid "(Written by Mark Dickinson in :issue:`11888`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1521 ../../whatsnew/3.4.rst:1114
#: ../../whatsnew/3.8.rst:1003
msgid "mmap"
msgstr ""

#: ../../whatsnew/3.3.rst:1523
msgid ""
"The :meth:`~mmap.mmap.read` method is now more compatible with other "
"file-like objects: if the argument is omitted or specified as ``None``, "
"it returns the bytes from the current file position to the end of the "
"mapping.  (Contributed by Petri Lehtinen in :issue:`12021`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1530 ../../whatsnew/3.4.rst:1121
#: ../../whatsnew/3.5.rst:1460 ../../whatsnew/3.6.rst:1260
#: ../../whatsnew/3.7.rst:1141 ../../whatsnew/3.8.rst:1011
msgid "multiprocessing"
msgstr ""

#: ../../whatsnew/3.3.rst:1532
msgid ""
"The new :func:`multiprocessing.connection.wait` function allows polling "
"multiple objects (such as connections, sockets and pipes) with a timeout."
" (Contributed by Richard Oudkerk in :issue:`12328`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1536
msgid ""
":class:`multiprocessing.Connection` objects can now be transferred over "
"multiprocessing connections. (Contributed by Richard Oudkerk in "
":issue:`4892`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1540
msgid ""
":class:`multiprocessing.Process` now accepts a ``daemon`` keyword "
"argument to override the default behavior of inheriting the ``daemon`` "
"flag from the parent process (:issue:`6064`)."
msgstr ""

#: ../../whatsnew/3.3.rst:1544
msgid ""
"New attribute :data:`multiprocessing.Process.sentinel` allows a program "
"to wait on multiple :class:`~multiprocessing.Process` objects at one time"
" using the appropriate OS primitives (for example, :mod:`select` on posix"
" systems)."
msgstr ""

#: ../../whatsnew/3.3.rst:1549
msgid ""
"New methods :meth:`multiprocessing.pool.Pool.starmap` and "
":meth:`~multiprocessing.pool.Pool.starmap_async` provide "
":func:`itertools.starmap` equivalents to the existing "
":meth:`multiprocessing.pool.Pool.map` and "
":meth:`~multiprocessing.pool.Pool.map_async` functions.  (Contributed by "
"Hynek Schlawack in :issue:`12708`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1558
msgid "nntplib"
msgstr ""

#: ../../whatsnew/3.3.rst:1560
msgid ""
"The :class:`nntplib.NNTP` class now supports the context management "
"protocol to unconditionally consume :exc:`socket.error` exceptions and to"
" close the NNTP connection when done::"
msgstr ""

#: ../../whatsnew/3.3.rst:1571
msgid "(Contributed by Giampaolo Rodol√† in :issue:`9795`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1577
msgid ""
"The :mod:`os` module has a new :func:`~os.pipe2` function that makes it "
"possible to create a pipe with :data:`~os.O_CLOEXEC` or "
":data:`~os.O_NONBLOCK` flags set atomically. This is especially useful to"
" avoid race conditions in multi-threaded programs."
msgstr ""

#: ../../whatsnew/3.3.rst:1582
msgid ""
"The :mod:`os` module has a new :func:`~os.sendfile` function which "
"provides an efficient \"zero-copy\" way for copying data from one file "
"(or socket) descriptor to another. The phrase \"zero-copy\" refers to the"
" fact that all of the copying of data between the two descriptors is done"
" entirely by the kernel, with no copying of data into userspace buffers. "
":func:`~os.sendfile` can be used to efficiently copy data from a file on "
"disk to a network socket, e.g. for downloading a file."
msgstr ""

#: ../../whatsnew/3.3.rst:1590
msgid ""
"(Patch submitted by Ross Lagerwall and Giampaolo Rodol√† in "
":issue:`10882`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1592
msgid ""
"To avoid race conditions like symlink attacks and issues with temporary "
"files and directories, it is more reliable (and also faster) to "
"manipulate file descriptors instead of file names. Python 3.3 enhances "
"existing functions and introduces new functions to work on file "
"descriptors (:issue:`4761`, :issue:`10755` and :issue:`14626`)."
msgstr ""

#: ../../whatsnew/3.3.rst:1598
msgid ""
"The :mod:`os` module has a new :func:`~os.fwalk` function similar to "
":func:`~os.walk` except that it also yields file descriptors referring to"
" the directories visited. This is especially useful to avoid symlink "
"races."
msgstr ""

#: ../../whatsnew/3.3.rst:1602
msgid ""
"The following functions get new optional *dir_fd* (:ref:`paths relative "
"to directory descriptors <dir_fd>`) and/or *follow_symlinks* (:ref:`not "
"following symlinks <follow_symlinks>`): :func:`~os.access`, "
":func:`~os.chflags`, :func:`~os.chmod`, :func:`~os.chown`, "
":func:`~os.link`, :func:`~os.lstat`, :func:`~os.mkdir`, "
":func:`~os.mkfifo`, :func:`~os.mknod`, :func:`~os.open`, "
":func:`~os.readlink`, :func:`~os.remove`, :func:`~os.rename`, "
":func:`~os.replace`, :func:`~os.rmdir`, :func:`~os.stat`, "
":func:`~os.symlink`, :func:`~os.unlink`, :func:`~os.utime`.  Platform "
"support for using these parameters can be checked via the sets "
":data:`os.supports_dir_fd` and :data:`os.supports_follows_symlinks`."
msgstr ""

#: ../../whatsnew/3.3.rst:1613
msgid ""
"The following functions now support a file descriptor for their path "
"argument: :func:`~os.chdir`, :func:`~os.chmod`, :func:`~os.chown`, "
":func:`~os.execve`, :func:`~os.listdir`, :func:`~os.pathconf`, "
":func:`~os.path.exists`, :func:`~os.stat`, :func:`~os.statvfs`, "
":func:`~os.utime`.  Platform support for this can be checked via the "
":data:`os.supports_fd` set."
msgstr ""

#: ../../whatsnew/3.3.rst:1619
msgid ""
":func:`~os.access` accepts an ``effective_ids`` keyword argument to turn "
"on using the effective uid/gid rather than the real uid/gid in the access"
" check. Platform support for this can be checked via the "
":data:`~os.supports_effective_ids` set."
msgstr ""

#: ../../whatsnew/3.3.rst:1624
msgid ""
"The :mod:`os` module has two new functions: :func:`~os.getpriority` and "
":func:`~os.setpriority`. They can be used to get or set process "
"niceness/priority in a fashion similar to :func:`os.nice` but extended to"
" all processes instead of just the current one."
msgstr ""

#: ../../whatsnew/3.3.rst:1629
msgid "(Patch submitted by Giampaolo Rodol√† in :issue:`10784`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1631
msgid ""
"The new :func:`os.replace` function allows cross-platform renaming of a "
"file with overwriting the destination.  With :func:`os.rename`, an "
"existing destination file is overwritten under POSIX, but raises an error"
" under Windows. (Contributed by Antoine Pitrou in :issue:`8828`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1637
msgid ""
"The stat family of functions (:func:`~os.stat`, :func:`~os.fstat`, and "
":func:`~os.lstat`) now support reading a file's timestamps with "
"nanosecond precision.  Symmetrically, :func:`~os.utime` can now write "
"file timestamps with nanosecond precision.  (Contributed by Larry "
"Hastings in :issue:`14127`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1643
msgid ""
"The new :func:`os.get_terminal_size` function queries the size of the "
"terminal attached to a file descriptor. See also "
":func:`shutil.get_terminal_size`. (Contributed by Zbigniew Jƒôdrzejewski-"
"Szmek in :issue:`13609`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1650
msgid ""
"New functions to support Linux extended attributes (:issue:`12720`): "
":func:`~os.getxattr`, :func:`~os.listxattr`, :func:`~os.removexattr`, "
":func:`~os.setxattr`."
msgstr ""

#: ../../whatsnew/3.3.rst:1654
msgid ""
"New interface to the scheduler. These functions control how a process is "
"allocated CPU time by the operating system. New functions: "
":func:`~os.sched_get_priority_max`, :func:`~os.sched_get_priority_min`, "
":func:`~os.sched_getaffinity`, :func:`~os.sched_getparam`, "
":func:`~os.sched_getscheduler`, :func:`~os.sched_rr_get_interval`, "
":func:`~os.sched_setaffinity`, :func:`~os.sched_setparam`, "
":func:`~os.sched_setscheduler`, :func:`~os.sched_yield`,"
msgstr ""

#: ../../whatsnew/3.3.rst:1663
msgid "New functions to control the file system:"
msgstr ""

#: ../../whatsnew/3.3.rst:1665
msgid ""
":func:`~os.posix_fadvise`: Announces an intention to access data in a "
"specific pattern thus allowing the kernel to make optimizations."
msgstr ""

#: ../../whatsnew/3.3.rst:1667
msgid ""
":func:`~os.posix_fallocate`: Ensures that enough disk space is allocated "
"for a file."
msgstr ""

#: ../../whatsnew/3.3.rst:1669
msgid ":func:`~os.sync`: Force write of everything to disk."
msgstr ""

#: ../../whatsnew/3.3.rst:1671
msgid "Additional new  posix functions:"
msgstr ""

#: ../../whatsnew/3.3.rst:1673
msgid ""
":func:`~os.lockf`: Apply, test or remove a POSIX lock on an open file "
"descriptor."
msgstr ""

#: ../../whatsnew/3.3.rst:1674
msgid ""
":func:`~os.pread`: Read from a file descriptor at an offset, the file "
"offset remains unchanged."
msgstr ""

#: ../../whatsnew/3.3.rst:1676
msgid ""
":func:`~os.pwrite`: Write to a file descriptor from an offset, leaving "
"the file offset unchanged."
msgstr ""

#: ../../whatsnew/3.3.rst:1678
msgid ""
":func:`~os.readv`: Read from a file descriptor into a number of writable "
"buffers."
msgstr ""

#: ../../whatsnew/3.3.rst:1679
msgid ""
":func:`~os.truncate`: Truncate the file corresponding to *path*, so that "
"it is at most *length* bytes in size."
msgstr ""

#: ../../whatsnew/3.3.rst:1681
msgid ""
":func:`~os.waitid`: Wait for the completion of one or more child "
"processes."
msgstr ""

#: ../../whatsnew/3.3.rst:1682
msgid ""
":func:`~os.writev`: Write the contents of *buffers* to a file descriptor,"
" where *buffers* is an arbitrary sequence of buffers."
msgstr ""

#: ../../whatsnew/3.3.rst:1684
msgid ""
":func:`~os.getgrouplist` (:issue:`9344`): Return list of group ids that "
"specified user belongs to."
msgstr ""

#: ../../whatsnew/3.3.rst:1687
msgid ""
":func:`~os.times` and :func:`~os.uname`: Return type changed from a tuple"
" to a tuple-like object with named attributes."
msgstr ""

#: ../../whatsnew/3.3.rst:1690
msgid ""
"Some platforms now support additional constants for the :func:`~os.lseek`"
" function, such as ``os.SEEK_HOLE`` and ``os.SEEK_DATA``."
msgstr ""

#: ../../whatsnew/3.3.rst:1693
msgid ""
"New constants :data:`~os.RTLD_LAZY`, :data:`~os.RTLD_NOW`, "
":data:`~os.RTLD_GLOBAL`, :data:`~os.RTLD_LOCAL`, "
":data:`~os.RTLD_NODELETE`, :data:`~os.RTLD_NOLOAD`, and "
":data:`~os.RTLD_DEEPBIND` are available on platforms that support them."
"   These are for use with the :func:`sys.setdlopenflags` function, and "
"supersede the similar constants defined in :mod:`ctypes` and "
":mod:`DLFCN`.  (Contributed by Victor Stinner in :issue:`13226`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1701
msgid ""
":func:`os.symlink` now accepts (and ignores) the ``target_is_directory`` "
"keyword argument on non-Windows platforms, to ease cross-platform "
"support."
msgstr ""

#: ../../whatsnew/3.3.rst:1708
msgid ""
"Tab-completion is now available not only for command names, but also "
"their arguments.  For example, for the ``break`` command, function and "
"file names are completed."
msgstr ""

#: ../../whatsnew/3.3.rst:1712
msgid "(Contributed by Georg Brandl in :issue:`14210`)"
msgstr ""

#: ../../whatsnew/3.3.rst:1716 ../../whatsnew/3.4.rst:1220
#: ../../whatsnew/3.5.rst:1567 ../../whatsnew/3.6.rst:1308
#: ../../whatsnew/3.8.rst:1094
msgid "pickle"
msgstr ""

#: ../../whatsnew/3.3.rst:1718
msgid ""
":class:`pickle.Pickler` objects now have an optional "
":attr:`~pickle.Pickler.dispatch_table` attribute allowing per-pickler "
"reduction functions to be set."
msgstr ""

#: ../../whatsnew/3.3.rst:1722
msgid "(Contributed by Richard Oudkerk in :issue:`14166`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1728
msgid ""
"The Tk GUI and the :func:`~pydoc.serve` function have been removed from "
"the :mod:`pydoc` module: ``pydoc -g`` and :func:`~pydoc.serve` have been "
"deprecated in Python 3.2."
msgstr ""

#: ../../whatsnew/3.3.rst:1734 ../../whatsnew/3.4.rst:1301
#: ../../whatsnew/3.5.rst:1584 ../../whatsnew/3.6.rst:1345
#: ../../whatsnew/3.6.rst:2025 ../../whatsnew/3.7.rst:1236
msgid "re"
msgstr ""

#: ../../whatsnew/3.3.rst:1736
msgid ":class:`str` regular expressions now support ``\\u`` and ``\\U`` escapes."
msgstr ""

#: ../../whatsnew/3.3.rst:1738
msgid "(Contributed by Serhiy Storchaka in :issue:`3665`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1742
msgid "sched"
msgstr ""

#: ../../whatsnew/3.3.rst:1744
msgid ""
":meth:`~sched.scheduler.run` now accepts a *blocking* parameter which "
"when set to false makes the method execute the scheduled events due to "
"expire soonest (if any) and then return immediately. This is useful in "
"case you want to use the :class:`~sched.scheduler` in non-blocking "
"applications.  (Contributed by Giampaolo Rodol√† in :issue:`13449`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1750
msgid ""
":class:`~sched.scheduler` class can now be safely used in multi-threaded "
"environments.  (Contributed by Josiah Carlson and Giampaolo Rodol√† in "
":issue:`8684`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1754
msgid ""
"*timefunc* and *delayfunct* parameters of :class:`~sched.scheduler` class"
" constructor are now optional and defaults to :func:`time.time` and "
":func:`time.sleep` respectively.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1759
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` "
"*argument* parameter is now optional.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1763
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` now "
"accept a *kwargs* parameter.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1771
msgid ""
"Solaris and derivative platforms have a new class :class:`select.devpoll`"
" for high performance asynchronous sockets via :file:`/dev/poll`. "
"(Contributed by Jes√∫s Cea Avi√≥n in :issue:`6397`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1777 ../../whatsnew/3.6.rst:1379
#: ../../whatsnew/3.8.rst:1144
msgid "shlex"
msgstr ""

#: ../../whatsnew/3.3.rst:1779
msgid ""
"The previously undocumented helper function ``quote`` from the "
":mod:`pipes` modules has been moved to the :mod:`shlex` module and "
"documented.  :func:`~shlex.quote` properly escapes all characters in a "
"string that might be otherwise given special meaning by the shell."
msgstr ""

#: ../../whatsnew/3.3.rst:1788 ../../whatsnew/3.8.rst:308
msgid "New functions:"
msgstr ""

#: ../../whatsnew/3.3.rst:1790
msgid ""
":func:`~shutil.disk_usage`: provides total, used and free disk space "
"statistics.  (Contributed by Giampaolo Rodol√† in :issue:`12442`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1792
msgid ""
":func:`~shutil.chown`: allows one to change user and/or group of the "
"given path also specifying the user/group names and not only their "
"numeric ids.  (Contributed by Sandro Tosi in :issue:`12191`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1795
msgid ""
":func:`shutil.get_terminal_size`: returns the size of the terminal window"
" to which the interpreter is attached.  (Contributed by Zbigniew "
"Jƒôdrzejewski-Szmek in :issue:`13609`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1799
msgid ""
":func:`~shutil.copy2` and :func:`~shutil.copystat` now preserve file "
"timestamps with nanosecond precision on platforms that support it. They "
"also preserve file \"extended attributes\" on Linux.  (Contributed by "
"Larry Hastings in :issue:`14127` and  :issue:`15238`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1804
msgid ""
"Several functions now take an optional ``symlinks`` argument: when that "
"parameter is true, symlinks aren't dereferenced and the operation instead"
" acts on the symlink itself (or creates one, if relevant). (Contributed "
"by Hynek Schlawack in :issue:`12715`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1809
msgid ""
"When copying files to a different file system, :func:`~shutil.move` now "
"handles symlinks the way the posix ``mv`` command does, recreating the "
"symlink rather than copying the target file contents.  (Contributed by "
"Jonathan Niehof in :issue:`9993`.)  :func:`~shutil.move` now also returns"
" the ``dst`` argument as its result."
msgstr ""

#: ../../whatsnew/3.3.rst:1815
msgid ""
":func:`~shutil.rmtree` is now resistant to symlink attacks on platforms "
"which support the new ``dir_fd`` parameter in :func:`os.open` and "
":func:`os.unlink`.  (Contributed by Martin von L√∂wis and Hynek Schlawack "
"in :issue:`4489`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1822 ../../whatsnew/3.5.rst:1652
#: ../../whatsnew/3.7.rst:1262
msgid "signal"
msgstr ""

#: ../../whatsnew/3.3.rst:1824
msgid "The :mod:`signal` module has new functions:"
msgstr ""

#: ../../whatsnew/3.3.rst:1826
msgid ""
":func:`~signal.pthread_sigmask`: fetch and/or change the signal mask of "
"the calling thread (Contributed by Jean-Paul Calderone in :issue:`8407`);"
msgstr ""

#: ../../whatsnew/3.3.rst:1828
msgid ":func:`~signal.pthread_kill`: send a signal to a thread;"
msgstr ""

#: ../../whatsnew/3.3.rst:1829
msgid ":func:`~signal.sigpending`: examine pending functions;"
msgstr ""

#: ../../whatsnew/3.3.rst:1830
msgid ":func:`~signal.sigwait`: wait a signal;"
msgstr ""

#: ../../whatsnew/3.3.rst:1831
msgid ""
":func:`~signal.sigwaitinfo`: wait for a signal, returning detailed "
"information about it;"
msgstr ""

#: ../../whatsnew/3.3.rst:1833
msgid ""
":func:`~signal.sigtimedwait`: like :func:`~signal.sigwaitinfo` but with a"
" timeout."
msgstr ""

#: ../../whatsnew/3.3.rst:1836
msgid ""
"The signal handler writes the signal number as a single byte instead of a"
" nul byte into the wakeup file descriptor. So it is possible to wait more"
" than one signal and know which signals were raised."
msgstr ""

#: ../../whatsnew/3.3.rst:1840
msgid ""
":func:`signal.signal` and :func:`signal.siginterrupt` raise an OSError, "
"instead of a RuntimeError: OSError has an errno attribute."
msgstr ""

#: ../../whatsnew/3.3.rst:1845 ../../whatsnew/3.4.rst:1370
#: ../../whatsnew/3.5.rst:1664
msgid "smtpd"
msgstr ""

#: ../../whatsnew/3.3.rst:1847
msgid ""
"The :mod:`smtpd` module now supports :rfc:`5321` (extended SMTP) and "
":rfc:`1870` (size extension).  Per the standard, these extensions are "
"enabled if and only if the client initiates the session with an ``EHLO`` "
"command."
msgstr ""

#: ../../whatsnew/3.3.rst:1851
msgid ""
"(Initial ``ELHO`` support by Alberto Trevino.  Size extension by Juhana "
"Jauhiainen.  Substantial additional work on the patch contributed by "
"Michele Orr√π and Dan Boswell.  :issue:`8739`)"
msgstr ""

#: ../../whatsnew/3.3.rst:1857 ../../whatsnew/3.4.rst:1380
#: ../../whatsnew/3.5.rst:1698
msgid "smtplib"
msgstr ""

#: ../../whatsnew/3.3.rst:1859
msgid ""
"The :class:`~smtplib.SMTP`, :class:`~smtplib.SMTP_SSL`, and "
":class:`~smtplib.LMTP` classes now accept a ``source_address`` keyword "
"argument to specify the ``(host, port)`` to use as the source address in "
"the bind call when creating the outgoing socket.  (Contributed by Paulo "
"Scardine in :issue:`11281`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1865
msgid ""
":class:`~smtplib.SMTP` now supports the context management protocol, "
"allowing an ``SMTP`` instance to be used in a ``with`` statement.  "
"(Contributed by Giampaolo Rodol√† in :issue:`11289`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1869
msgid ""
"The :class:`~smtplib.SMTP_SSL` constructor and the "
":meth:`~smtplib.SMTP.starttls` method now accept an SSLContext parameter "
"to control parameters of the secure channel.  (Contributed by Kasun "
"Herath in :issue:`8809`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1877
msgid ""
"The :class:`~socket.socket` class now exposes additional methods to "
"process ancillary data when supported by the underlying platform:"
msgstr ""

#: ../../whatsnew/3.3.rst:1880
msgid ":func:`~socket.socket.sendmsg`"
msgstr ""

#: ../../whatsnew/3.3.rst:1881
msgid ":func:`~socket.socket.recvmsg`"
msgstr ""

#: ../../whatsnew/3.3.rst:1882
msgid ":func:`~socket.socket.recvmsg_into`"
msgstr ""

#: ../../whatsnew/3.3.rst:1884
msgid ""
"(Contributed by David Watson in :issue:`6560`, based on an earlier patch "
"by Heiko Wundram)"
msgstr ""

#: ../../whatsnew/3.3.rst:1887
msgid ""
"The :class:`~socket.socket` class now supports the PF_CAN protocol family"
" (https://en.wikipedia.org/wiki/Socketcan), on Linux "
"(https://lwn.net/Articles/253425)."
msgstr ""

#: ../../whatsnew/3.3.rst:1891
msgid ""
"(Contributed by Matthias Fuchs, updated by Tiago Gon√ßalves in "
":issue:`10141`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1893
msgid ""
"The :class:`~socket.socket` class now supports the PF_RDS protocol family"
" (https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets and "
"https://oss.oracle.com/projects/rds/)."
msgstr ""

#: ../../whatsnew/3.3.rst:1897
msgid ""
"The :class:`~socket.socket` class now supports the ``PF_SYSTEM`` protocol"
" family on OS X.  (Contributed by Michael Goderbauer in :issue:`13777`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1900
msgid ""
"New function :func:`~socket.sethostname` allows the hostname to be set on"
" unix systems if the calling process has sufficient privileges. "
"(Contributed by Ross Lagerwall in :issue:`10866`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1908
msgid ""
":class:`~socketserver.BaseServer` now has an overridable method "
":meth:`~socketserver.BaseServer.service_actions` that is called by the "
":meth:`~socketserver.BaseServer.serve_forever` method in the service "
"loop. :class:`~socketserver.ForkingMixIn` now uses this to clean up "
"zombie child processes.  (Contributed by Justin Warkentin in "
":issue:`11109`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1918
msgid ""
"New :class:`sqlite3.Connection` method "
":meth:`~sqlite3.Connection.set_trace_callback` can be used to capture a "
"trace of all sql commands processed by sqlite.  (Contributed by Torsten "
"Landschoff in :issue:`11688`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1927
msgid "The :mod:`ssl` module has two new random generation functions:"
msgstr ""

#: ../../whatsnew/3.3.rst:1929
msgid ""
":func:`~ssl.RAND_bytes`: generate cryptographically strong pseudo-random "
"bytes."
msgstr ""

#: ../../whatsnew/3.3.rst:1931
msgid ":func:`~ssl.RAND_pseudo_bytes`: generate pseudo-random bytes."
msgstr ""

#: ../../whatsnew/3.3.rst:1933
msgid "(Contributed by Victor Stinner in :issue:`12049`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1935
msgid ""
"The :mod:`ssl` module now exposes a finer-grained exception hierarchy in "
"order to make it easier to inspect the various kinds of errors. "
"(Contributed by Antoine Pitrou in :issue:`11183`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1939
msgid ""
":meth:`~ssl.SSLContext.load_cert_chain` now accepts a *password* argument"
" to be used if the private key is encrypted. (Contributed by Adam "
"Simpkins in :issue:`12803`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1943
msgid ""
"Diffie-Hellman key exchange, both regular and Elliptic Curve-based, is "
"now supported through the :meth:`~ssl.SSLContext.load_dh_params` and "
":meth:`~ssl.SSLContext.set_ecdh_curve` methods. (Contributed by Antoine "
"Pitrou in :issue:`13626` and :issue:`13627`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1948
msgid ""
"SSL sockets have a new :meth:`~ssl.SSLSocket.get_channel_binding` method "
"allowing the implementation of certain authentication mechanisms such as "
"SCRAM-SHA-1-PLUS.  (Contributed by Jacek Konieczny in :issue:`12551`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1952
msgid ""
"You can query the SSL compression algorithm used by an SSL socket, thanks"
" to its new :meth:`~ssl.SSLSocket.compression` method.  The new attribute"
" :attr:`~ssl.OP_NO_COMPRESSION` can be used to disable compression. "
"(Contributed by Antoine Pitrou in :issue:`13634`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1957
msgid ""
"Support has been added for the Next Protocol Negotiation extension using "
"the :meth:`ssl.SSLContext.set_npn_protocols` method. (Contributed by "
"Colin Marc in :issue:`14204`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1961
msgid ""
"SSL errors can now be introspected more easily thanks to "
":attr:`~ssl.SSLError.library` and :attr:`~ssl.SSLError.reason` "
"attributes. (Contributed by Antoine Pitrou in :issue:`14837`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1965
msgid ""
"The :func:`~ssl.get_server_certificate` function now supports IPv6. "
"(Contributed by Charles-Fran√ßois Natali in :issue:`11811`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1968
msgid ""
"New attribute :attr:`~ssl.OP_CIPHER_SERVER_PREFERENCE` allows setting "
"SSLv3 server sockets to use the server's cipher ordering preference "
"rather than the client's (:issue:`13635`)."
msgstr ""

#: ../../whatsnew/3.3.rst:1974 ../../whatsnew/3.4.rst:1496
msgid "stat"
msgstr ""

#: ../../whatsnew/3.3.rst:1976
msgid ""
"The undocumented tarfile.filemode function has been moved to "
":func:`stat.filemode`. It can be used to convert a file's mode to a "
"string of the form '-rwxrwxrwx'."
msgstr ""

#: ../../whatsnew/3.3.rst:1980
msgid "(Contributed by Giampaolo Rodol√† in :issue:`14807`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1984 ../../whatsnew/3.4.rst:1508
#: ../../whatsnew/3.6.rst:1484
msgid "struct"
msgstr ""

#: ../../whatsnew/3.3.rst:1986
msgid ""
"The :mod:`struct` module now supports ``ssize_t`` and ``size_t`` via the "
"new codes ``n`` and ``N``, respectively.  (Contributed by Antoine Pitrou "
"in :issue:`3163`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1992 ../../whatsnew/3.4.rst:1517
#: ../../whatsnew/3.5.rst:1838 ../../whatsnew/3.6.rst:1492
#: ../../whatsnew/3.7.rst:1392
msgid "subprocess"
msgstr ""

#: ../../whatsnew/3.3.rst:1994
msgid ""
"Command strings can now be bytes objects on posix platforms.  "
"(Contributed by Victor Stinner in :issue:`8513`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1997
msgid ""
"A new constant :data:`~subprocess.DEVNULL` allows suppressing output in a"
" platform-independent fashion.  (Contributed by Ross Lagerwall in "
":issue:`5870`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2003 ../../whatsnew/3.4.rst:1549
#: ../../whatsnew/3.5.rst:1864 ../../whatsnew/3.6.rst:1507
#: ../../whatsnew/3.7.rst:1422 ../../whatsnew/3.7.rst:2069
#: ../../whatsnew/3.8.rst:1235
msgid "sys"
msgstr ""

#: ../../whatsnew/3.3.rst:2005
msgid ""
"The :mod:`sys` module has a new :data:`~sys.thread_info` :term:`named "
"tuple` holding information about the thread implementation "
"(:issue:`11223`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2013
msgid ""
":mod:`tarfile` now supports ``lzma`` encoding via the :mod:`lzma` module."
" (Contributed by Lars Gust√§bel in :issue:`5689`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2020
msgid ""
":class:`tempfile.SpooledTemporaryFile`\\'s "
":meth:`~tempfile.SpooledTemporaryFile.truncate` method now accepts a "
"``size`` parameter.  (Contributed by Ryan Kelly in :issue:`9957`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2026 ../../whatsnew/3.4.rst:1581
msgid "textwrap"
msgstr ""

#: ../../whatsnew/3.3.rst:2028
msgid ""
"The :mod:`textwrap` module has a new :func:`~textwrap.indent` that makes "
"it straightforward to add a common prefix to selected lines in a block of"
" text  (:issue:`13857`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2036
msgid ""
":class:`threading.Condition`, :class:`threading.Semaphore`, "
":class:`threading.BoundedSemaphore`, :class:`threading.Event`, and "
":class:`threading.Timer`, all of which used to be factory functions "
"returning a class instance, are now classes and may be subclassed.  "
"(Contributed by √âric Araujo in :issue:`10968`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2042
msgid ""
"The :class:`threading.Thread` constructor now accepts a ``daemon`` "
"keyword argument to override the default behavior of inheriting the "
"``daemon`` flag value from the parent thread (:issue:`6064`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2046
msgid ""
"The formerly private function ``_thread.get_ident`` is now available as "
"the public function :func:`threading.get_ident`.  This eliminates several"
" cases of direct access to the ``_thread`` module in the stdlib.  Third "
"party code that used ``_thread.get_ident`` should likewise be changed to "
"use the new public interface."
msgstr ""

#: ../../whatsnew/3.3.rst:2054 ../../whatsnew/3.5.rst:1917
#: ../../whatsnew/3.6.rst:1528 ../../whatsnew/3.7.rst:1441
#: ../../whatsnew/3.8.rst:1302
msgid "time"
msgstr ""

#: ../../whatsnew/3.3.rst:2056
msgid "The :pep:`418` added new functions to the :mod:`time` module:"
msgstr ""

#: ../../whatsnew/3.3.rst:2058
msgid ":func:`~time.get_clock_info`: Get information on a clock."
msgstr ""

#: ../../whatsnew/3.3.rst:2059
msgid ""
":func:`~time.monotonic`: Monotonic clock (cannot go backward), not "
"affected by system clock updates."
msgstr ""

#: ../../whatsnew/3.3.rst:2061
msgid ""
":func:`~time.perf_counter`: Performance counter with the highest "
"available resolution to measure a short duration."
msgstr ""

#: ../../whatsnew/3.3.rst:2063
msgid ""
":func:`~time.process_time`: Sum of the system and user CPU time of the "
"current process."
msgstr ""

#: ../../whatsnew/3.3.rst:2066
msgid "Other new functions:"
msgstr ""

#: ../../whatsnew/3.3.rst:2068
msgid ""
":func:`~time.clock_getres`, :func:`~time.clock_gettime` and "
":func:`~time.clock_settime` functions with ``CLOCK_xxx`` constants. "
"(Contributed by Victor Stinner in :issue:`10278`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2072
msgid ""
"To improve cross platform consistency, :func:`~time.sleep` now raises a "
":exc:`ValueError` when passed a negative sleep value.  Previously this "
"was an error on posix, but produced an infinite sleep on Windows."
msgstr ""

#: ../../whatsnew/3.3.rst:2078 ../../whatsnew/3.4.rst:1613
#: ../../whatsnew/3.5.rst:1963 ../../whatsnew/3.7.rst:1492
msgid "types"
msgstr ""

#: ../../whatsnew/3.3.rst:2080
msgid ""
"Add a new :class:`types.MappingProxyType` class: Read-only proxy of a "
"mapping. (:issue:`14386`)"
msgstr ""

#: ../../whatsnew/3.3.rst:2084
msgid ""
"The new functions :func:`types.new_class` and :func:`types.prepare_class`"
" provide support for :pep:`3115` compliant dynamic type creation. "
"(:issue:`14588`)"
msgstr ""

#: ../../whatsnew/3.3.rst:2091
msgid ""
":meth:`.assertRaises`, :meth:`.assertRaisesRegex`, :meth:`.assertWarns`, "
"and :meth:`.assertWarnsRegex` now accept a keyword argument *msg* when "
"used as context managers.  (Contributed by Ezio Melotti and Winston Ewert"
" in :issue:`10775`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2096
msgid ""
":meth:`unittest.TestCase.run` now returns the "
":class:`~unittest.TestResult` object."
msgstr ""

#: ../../whatsnew/3.3.rst:2101 ../../whatsnew/3.4.rst:1624
#: ../../whatsnew/3.5.rst:2027
msgid "urllib"
msgstr ""

#: ../../whatsnew/3.3.rst:2103
msgid ""
"The :class:`~urllib.request.Request` class, now accepts a *method* "
"argument used by :meth:`~urllib.request.Request.get_method` to determine "
"what HTTP method should be used.  For example, this will send a "
"``'HEAD'`` request::"
msgstr ""

#: ../../whatsnew/3.3.rst:2109
msgid "(:issue:`1673007`)"
msgstr ""

#: ../../whatsnew/3.3.rst:2113
msgid "webbrowser"
msgstr ""

#: ../../whatsnew/3.3.rst:2115
msgid ""
"The :mod:`webbrowser` module supports more \"browsers\": Google Chrome "
"(named :program:`chrome`, :program:`chromium`, :program:`chrome-browser` "
"or :program:`chromium-browser` depending on the version and operating "
"system), and the generic launchers :program:`xdg-open`, from the "
"FreeDesktop.org project, and :program:`gvfs-open`, which is the default "
"URI handler for GNOME 3.  (The former contributed by Arnaud Calmettes in "
":issue:`13620`, the latter by Matthias Klose in :issue:`14493`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2125
msgid "xml.etree.ElementTree"
msgstr ""

#: ../../whatsnew/3.3.rst:2127
msgid ""
"The :mod:`xml.etree.ElementTree` module now imports its C accelerator by "
"default; there is no longer a need to explicitly import "
":mod:`xml.etree.cElementTree` (this module stays for backwards "
"compatibility, but is now deprecated).  In addition,  the ``iter`` family"
" of methods of :class:`~xml.etree.ElementTree.Element` has been optimized"
" (rewritten in C). The module's documentation has also been greatly "
"improved with added examples and a more detailed reference."
msgstr ""

#: ../../whatsnew/3.3.rst:2137 ../../whatsnew/3.6.rst:1770
msgid "zlib"
msgstr ""

#: ../../whatsnew/3.3.rst:2139
msgid ""
"New attribute :attr:`zlib.Decompress.eof` makes it possible to "
"distinguish between a properly-formed compressed stream and an incomplete"
" or truncated one. (Contributed by Nadeem Vawda in :issue:`12646`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2143
msgid ""
"New attribute :attr:`zlib.ZLIB_RUNTIME_VERSION` reports the version "
"string of the underlying ``zlib`` library that is loaded at runtime.  "
"(Contributed by Torsten Landschoff in :issue:`12306`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2153
msgid ""
"Thanks to :pep:`393`, some operations on Unicode strings have been "
"optimized:"
msgstr ""

#: ../../whatsnew/3.3.rst:2155
msgid "the memory footprint is divided by 2 to 4 depending on the text"
msgstr ""

#: ../../whatsnew/3.3.rst:2156
msgid ""
"encode an ASCII string to UTF-8 doesn't need to encode characters "
"anymore, the UTF-8 representation is shared with the ASCII representation"
msgstr ""

#: ../../whatsnew/3.3.rst:2158
msgid "the UTF-8 encoder has been optimized"
msgstr ""

#: ../../whatsnew/3.3.rst:2159
msgid ""
"repeating a single ASCII letter and getting a substring of an ASCII "
"string is 4 times faster"
msgstr ""

#: ../../whatsnew/3.3.rst:2162
msgid "UTF-8 is now 2x to 4x faster.  UTF-16 encoding is now up to 10x faster."
msgstr ""

#: ../../whatsnew/3.3.rst:2164
msgid ""
"(Contributed by Serhiy Storchaka, :issue:`14624`, :issue:`14738` and "
":issue:`15026`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2173
msgid "New :pep:`3118` related function:"
msgstr ""

#: ../../whatsnew/3.3.rst:2175
msgid ":c:func:`PyMemoryView_FromMemory`"
msgstr ""

#: ../../whatsnew/3.3.rst:2177
msgid ":pep:`393` added new Unicode types, macros and functions:"
msgstr ""

#: ../../whatsnew/3.3.rst:2179
msgid "High-level API:"
msgstr ""

#: ../../whatsnew/3.3.rst:2181
msgid ":c:func:`PyUnicode_CopyCharacters`"
msgstr ""

#: ../../whatsnew/3.3.rst:2182
msgid ":c:func:`PyUnicode_FindChar`"
msgstr ""

#: ../../whatsnew/3.3.rst:2183
msgid ":c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`"
msgstr ""

#: ../../whatsnew/3.3.rst:2184
msgid ":c:func:`PyUnicode_New`"
msgstr ""

#: ../../whatsnew/3.3.rst:2185
msgid ":c:func:`PyUnicode_Substring`"
msgstr ""

#: ../../whatsnew/3.3.rst:2186
msgid ":c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`"
msgstr ""

#: ../../whatsnew/3.3.rst:2188
msgid "Low-level API:"
msgstr ""

#: ../../whatsnew/3.3.rst:2190
msgid ":c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4` types"
msgstr ""

#: ../../whatsnew/3.3.rst:2191
msgid ":c:type:`PyASCIIObject` and :c:type:`PyCompactUnicodeObject` structures"
msgstr ""

#: ../../whatsnew/3.3.rst:2192
msgid ":c:macro:`PyUnicode_READY`"
msgstr ""

#: ../../whatsnew/3.3.rst:2193
msgid ":c:func:`PyUnicode_FromKindAndData`"
msgstr ""

#: ../../whatsnew/3.3.rst:2194
msgid ":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`"
msgstr ""

#: ../../whatsnew/3.3.rst:2195
msgid ""
":c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`, "
":c:macro:`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`"
msgstr ""

#: ../../whatsnew/3.3.rst:2197
msgid ""
":c:macro:`PyUnicode_KIND` with :c:type:`PyUnicode_Kind` enum: "
":c:data:`PyUnicode_WCHAR_KIND`, :c:data:`PyUnicode_1BYTE_KIND`, "
":c:data:`PyUnicode_2BYTE_KIND`, :c:data:`PyUnicode_4BYTE_KIND`"
msgstr ""

#: ../../whatsnew/3.3.rst:2200
msgid ""
":c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, "
":c:macro:`PyUnicode_WRITE`"
msgstr ""

#: ../../whatsnew/3.3.rst:2201
msgid ":c:macro:`PyUnicode_MAX_CHAR_VALUE`"
msgstr ""

#: ../../whatsnew/3.3.rst:2203
msgid ""
":c:macro:`PyArg_ParseTuple` now accepts a :class:`bytearray` for the "
"``c`` format (:issue:`12380`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2209 ../../whatsnew/3.4.rst:2067
#: ../../whatsnew/3.5.rst:2262 ../../whatsnew/3.6.rst:1923
#: ../../whatsnew/3.8.rst:1634
msgid "Deprecated"
msgstr ""

#: ../../whatsnew/3.3.rst:2212 ../../whatsnew/3.5.rst:2283
msgid "Unsupported Operating Systems"
msgstr ""

#: ../../whatsnew/3.3.rst:2214
msgid "OS/2 and VMS are no longer supported due to the lack of a maintainer."
msgstr ""

#: ../../whatsnew/3.3.rst:2216
msgid ""
"Windows 2000 and Windows platforms which set ``COMSPEC`` to "
"``command.com`` are no longer supported due to maintenance burden."
msgstr ""

#: ../../whatsnew/3.3.rst:2219
msgid "OSF support, which was deprecated in 3.2, has been completely removed."
msgstr ""

#: ../../whatsnew/3.3.rst:2223 ../../whatsnew/3.5.rst:2290
#: ../../whatsnew/3.6.rst:1959 ../../whatsnew/3.7.rst:1937
msgid "Deprecated Python modules, functions and methods"
msgstr ""

#: ../../whatsnew/3.3.rst:2225
msgid ""
"Passing a non-empty string to ``object.__format__()`` is deprecated, and "
"will produce a :exc:`TypeError` in Python 3.4 (:issue:`9856`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2227
msgid ""
"The ``unicode_internal`` codec has been deprecated because of the "
":pep:`393`, use UTF-8, UTF-16 (``utf-16-le`` or ``utf-16-be``), or UTF-32"
" (``utf-32-le`` or ``utf-32-be``)"
msgstr ""

#: ../../whatsnew/3.3.rst:2230
msgid ""
":meth:`ftplib.FTP.nlst` and :meth:`ftplib.FTP.dir`: use "
":meth:`ftplib.FTP.mlsd`"
msgstr ""

#: ../../whatsnew/3.3.rst:2232
msgid ""
":func:`platform.popen`: use the :mod:`subprocess` module. Check "
"especially the :ref:`subprocess-replacements` section (:issue:`11377`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2234
msgid ""
":issue:`13374`: The Windows bytes API has been deprecated in the "
":mod:`os` module. Use Unicode filenames, instead of bytes filenames, to "
"not depend on the ANSI code page anymore and to support any filename."
msgstr ""

#: ../../whatsnew/3.3.rst:2237
msgid ""
":issue:`13988`: The :mod:`xml.etree.cElementTree` module is deprecated.  "
"The accelerator is used automatically whenever available."
msgstr ""

#: ../../whatsnew/3.3.rst:2239
msgid ""
"The behaviour of :func:`time.clock` depends on the platform: use the new "
":func:`time.perf_counter` or :func:`time.process_time` function instead, "
"depending on your requirements, to have a well defined behaviour."
msgstr ""

#: ../../whatsnew/3.3.rst:2242
msgid "The :func:`os.stat_float_times` function is deprecated."
msgstr ""

#: ../../whatsnew/3.3.rst:2243
msgid ":mod:`abc` module:"
msgstr ""

#: ../../whatsnew/3.3.rst:2252
msgid ":mod:`importlib` package:"
msgstr ""

#: ../../whatsnew/3.3.rst:2254
msgid ""
":meth:`importlib.abc.SourceLoader.path_mtime` is now deprecated in favour"
" of :meth:`importlib.abc.SourceLoader.path_stats` as bytecode files now "
"store both the modification time and size of the source file the bytecode"
" file was compiled from."
msgstr ""

#: ../../whatsnew/3.3.rst:2264 ../../whatsnew/3.6.rst:2065
#: ../../whatsnew/3.7.rst:2088
msgid "Deprecated functions and types of the C API"
msgstr ""

#: ../../whatsnew/3.3.rst:2266
msgid ""
"The :c:type:`Py_UNICODE` has been deprecated by :pep:`393` and will be "
"removed in Python 4. All functions using this type are deprecated:"
msgstr ""

#: ../../whatsnew/3.3.rst:2269
msgid ""
"Unicode functions and methods using :c:type:`Py_UNICODE` and "
":c:type:`Py_UNICODE*` types:"
msgstr ""

#: ../../whatsnew/3.3.rst:2272
msgid ""
":c:macro:`PyUnicode_FromUnicode`: use :c:func:`PyUnicode_FromWideChar` or"
" :c:func:`PyUnicode_FromKindAndData`"
msgstr ""

#: ../../whatsnew/3.3.rst:2274
msgid ""
":c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`, "
":c:func:`PyUnicode_AsUnicodeAndSize`: use "
":c:func:`PyUnicode_AsWideCharString`"
msgstr ""

#: ../../whatsnew/3.3.rst:2276
msgid ""
":c:macro:`PyUnicode_AS_DATA`: use :c:macro:`PyUnicode_DATA` with "
":c:macro:`PyUnicode_READ` and :c:macro:`PyUnicode_WRITE`"
msgstr ""

#: ../../whatsnew/3.3.rst:2278
msgid ""
":c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: use "
":c:macro:`PyUnicode_GET_LENGTH` or :c:func:`PyUnicode_GetLength`"
msgstr ""

#: ../../whatsnew/3.3.rst:2280
msgid ""
":c:macro:`PyUnicode_GET_DATA_SIZE`: use ``PyUnicode_GET_LENGTH(str) * "
"PyUnicode_KIND(str)`` (only work on ready strings)"
msgstr ""

#: ../../whatsnew/3.3.rst:2283
msgid ""
":c:func:`PyUnicode_AsUnicodeCopy`: use :c:func:`PyUnicode_AsUCS4Copy` or "
":c:func:`PyUnicode_AsWideCharString`"
msgstr ""

#: ../../whatsnew/3.3.rst:2285
msgid ":c:func:`PyUnicode_GetMax`"
msgstr ""

#: ../../whatsnew/3.3.rst:2288
msgid "Functions and macros manipulating Py_UNICODE* strings:"
msgstr ""

#: ../../whatsnew/3.3.rst:2290
msgid ""
":c:macro:`Py_UNICODE_strlen`: use :c:func:`PyUnicode_GetLength` or "
":c:macro:`PyUnicode_GET_LENGTH`"
msgstr ""

#: ../../whatsnew/3.3.rst:2292
msgid ""
":c:macro:`Py_UNICODE_strcat`: use :c:func:`PyUnicode_CopyCharacters` or "
":c:func:`PyUnicode_FromFormat`"
msgstr ""

#: ../../whatsnew/3.3.rst:2294
msgid ""
":c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`, "
":c:macro:`Py_UNICODE_COPY`: use :c:func:`PyUnicode_CopyCharacters` or "
":c:func:`PyUnicode_Substring`"
msgstr ""

#: ../../whatsnew/3.3.rst:2297
msgid ":c:macro:`Py_UNICODE_strcmp`: use :c:func:`PyUnicode_Compare`"
msgstr ""

#: ../../whatsnew/3.3.rst:2298
msgid ":c:macro:`Py_UNICODE_strncmp`: use :c:func:`PyUnicode_Tailmatch`"
msgstr ""

#: ../../whatsnew/3.3.rst:2299
msgid ""
":c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`: use "
":c:func:`PyUnicode_FindChar`"
msgstr ""

#: ../../whatsnew/3.3.rst:2301
msgid ":c:macro:`Py_UNICODE_FILL`: use :c:func:`PyUnicode_Fill`"
msgstr ""

#: ../../whatsnew/3.3.rst:2302
msgid ":c:macro:`Py_UNICODE_MATCH`"
msgstr ""

#: ../../whatsnew/3.3.rst:2304
msgid "Encoders:"
msgstr ""

#: ../../whatsnew/3.3.rst:2306
msgid ":c:func:`PyUnicode_Encode`: use :c:func:`PyUnicode_AsEncodedObject`"
msgstr ""

#: ../../whatsnew/3.3.rst:2307
msgid ":c:func:`PyUnicode_EncodeUTF7`"
msgstr ""

#: ../../whatsnew/3.3.rst:2308
msgid ""
":c:func:`PyUnicode_EncodeUTF8`: use :c:func:`PyUnicode_AsUTF8` or "
":c:func:`PyUnicode_AsUTF8String`"
msgstr ""

#: ../../whatsnew/3.3.rst:2310
msgid ":c:func:`PyUnicode_EncodeUTF32`"
msgstr ""

#: ../../whatsnew/3.3.rst:2311
msgid ":c:func:`PyUnicode_EncodeUTF16`"
msgstr ""

#: ../../whatsnew/3.3.rst:2312
msgid ""
":c:func:`PyUnicode_EncodeUnicodeEscape` use "
":c:func:`PyUnicode_AsUnicodeEscapeString`"
msgstr ""

#: ../../whatsnew/3.3.rst:2314
msgid ""
":c:func:`PyUnicode_EncodeRawUnicodeEscape` use "
":c:func:`PyUnicode_AsRawUnicodeEscapeString`"
msgstr ""

#: ../../whatsnew/3.3.rst:2316
msgid ":c:func:`PyUnicode_EncodeLatin1`: use :c:func:`PyUnicode_AsLatin1String`"
msgstr ""

#: ../../whatsnew/3.3.rst:2317
msgid ":c:func:`PyUnicode_EncodeASCII`: use :c:func:`PyUnicode_AsASCIIString`"
msgstr ""

#: ../../whatsnew/3.3.rst:2318
msgid ":c:func:`PyUnicode_EncodeCharmap`"
msgstr ""

#: ../../whatsnew/3.3.rst:2319
msgid ":c:func:`PyUnicode_TranslateCharmap`"
msgstr ""

#: ../../whatsnew/3.3.rst:2320
msgid ""
":c:func:`PyUnicode_EncodeMBCS`: use :c:func:`PyUnicode_AsMBCSString` or "
":c:func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)"
msgstr ""

#: ../../whatsnew/3.3.rst:2322
msgid ""
":c:func:`PyUnicode_EncodeDecimal`, "
":c:func:`PyUnicode_TransformDecimalToASCII`"
msgstr ""

#: ../../whatsnew/3.3.rst:2327
msgid "Deprecated features"
msgstr ""

#: ../../whatsnew/3.3.rst:2329
msgid ""
"The :mod:`array` module's ``'u'`` format code is now deprecated and will "
"be removed in Python 4 together with the rest of the "
"(:c:type:`Py_UNICODE`) API."
msgstr ""

#: ../../whatsnew/3.3.rst:2334
msgid "Porting to Python 3.3"
msgstr ""

#: ../../whatsnew/3.3.rst:2336 ../../whatsnew/3.4.rst:2242
#: ../../whatsnew/3.5.rst:2378 ../../whatsnew/3.6.rst:2128
#: ../../whatsnew/3.7.rst:2217 ../../whatsnew/3.8.rst:1807
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr ""

#: ../../whatsnew/3.3.rst:2342
msgid "Porting Python code"
msgstr ""

#: ../../whatsnew/3.3.rst:2344
msgid ""
"Hash randomization is enabled by default. Set the "
":envvar:`PYTHONHASHSEED` environment variable to ``0`` to disable hash "
"randomization. See also the :meth:`object.__hash__` method."
msgstr ""

#: ../../whatsnew/3.3.rst:2348
msgid ""
":issue:`12326`: On Linux, sys.platform doesn't contain the major version "
"anymore. It is now always 'linux', instead of 'linux2' or 'linux3' "
"depending on the Linux version used to build Python. Replace sys.platform"
" == 'linux2' with sys.platform.startswith('linux'), or directly "
"sys.platform == 'linux' if you don't need to support older Python "
"versions."
msgstr ""

#: ../../whatsnew/3.3.rst:2354
msgid ""
":issue:`13847`, :issue:`14180`: :mod:`time` and :mod:`datetime`: "
":exc:`OverflowError` is now raised instead of :exc:`ValueError` if a "
"timestamp is out of range. :exc:`OSError` is now raised if C functions "
":c:func:`gmtime` or :c:func:`localtime` failed."
msgstr ""

#: ../../whatsnew/3.3.rst:2359
msgid ""
"The default finders used by import now utilize a cache of what is "
"contained within a specific directory. If you create a Python source file"
" or sourceless bytecode file, make sure to call "
":func:`importlib.invalidate_caches` to clear out the cache for the "
"finders to notice the new file."
msgstr ""

#: ../../whatsnew/3.3.rst:2364
msgid ""
":exc:`ImportError` now uses the full name of the module that was "
"attempted to be imported. Doctests that check ImportErrors' message will "
"need to be updated to use the full name of the module instead of just the"
" tail of the name."
msgstr ""

#: ../../whatsnew/3.3.rst:2369
msgid ""
"The *index* argument to :func:`__import__` now defaults to 0 instead of "
"-1 and no longer support negative values. It was an oversight when "
":pep:`328` was implemented that the default value remained -1. If you "
"need to continue to perform a relative import followed by an absolute "
"import, then perform the relative import using an index of 1, followed by"
" another import using an index of 0. It is preferred, though, that you "
"use :func:`importlib.import_module` rather than call :func:`__import__` "
"directly."
msgstr ""

#: ../../whatsnew/3.3.rst:2377
msgid ""
":func:`__import__` no longer allows one to use an index value other than "
"0 for top-level modules. E.g. ``__import__('sys', level=1)`` is now an "
"error."
msgstr ""

#: ../../whatsnew/3.3.rst:2380
msgid ""
"Because :attr:`sys.meta_path` and :attr:`sys.path_hooks` now have finders"
" on them by default, you will most likely want to use :meth:`list.insert`"
" instead of :meth:`list.append` to add to those lists."
msgstr ""

#: ../../whatsnew/3.3.rst:2384
msgid ""
"Because ``None`` is now inserted into :attr:`sys.path_importer_cache`, if"
" you are clearing out entries in the dictionary of paths that do not have"
" a finder, you will need to remove keys paired with values of ``None`` "
"**and** :class:`imp.NullImporter` to be backwards-compatible. This will "
"lead to extra overhead on older versions of Python that re-insert "
"``None`` into :attr:`sys.path_importer_cache` where it represents the use"
" of implicit finders, but semantically it should not change anything."
msgstr ""

#: ../../whatsnew/3.3.rst:2392
msgid ""
":class:`importlib.abc.Finder` no longer specifies a `find_module()` "
"abstract method that must be implemented. If you were relying on "
"subclasses to implement that method, make sure to check for the method's "
"existence first. You will probably want to check for `find_loader()` "
"first, though, in the case of working with :term:`path entry finders "
"<path entry finder>`."
msgstr ""

#: ../../whatsnew/3.3.rst:2398
msgid ""
":mod:`pkgutil` has been converted to use :mod:`importlib` internally. "
"This eliminates many edge cases where the old behaviour of the :pep:`302`"
" import emulation failed to match the behaviour of the real import "
"system. The import emulation itself is still present, but is now "
"deprecated. The :func:`pkgutil.iter_importers` and "
":func:`pkgutil.walk_packages` functions special case the standard import "
"hooks so they are still supported even though they do not provide the "
"non-standard ``iter_modules()`` method."
msgstr ""

#: ../../whatsnew/3.3.rst:2406
msgid ""
"A longstanding RFC-compliance bug (:issue:`1079`) in the parsing done by "
":func:`email.header.decode_header` has been fixed.  Code that uses the "
"standard idiom to convert encoded headers into unicode "
"(``str(make_header(decode_header(h))``) will see no change, but code that"
" looks at the individual tuples returned by decode_header will see that "
"whitespace that precedes or follows ``ASCII`` sections is now included in"
" the ``ASCII`` section.  Code that builds headers using ``make_header`` "
"should also continue to work without change, since ``make_header`` "
"continues to add whitespace between ``ASCII`` and non-``ASCII`` sections "
"if it is not already present in the input strings."
msgstr ""

#: ../../whatsnew/3.3.rst:2417
msgid ""
":func:`email.utils.formataddr` now does the correct content transfer "
"encoding when passed non-``ASCII`` display names.  Any code that depended"
" on the previous buggy behavior that preserved the non-``ASCII`` unicode "
"in the formatted output string will need to be changed "
"(:issue:`1690608`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2422
msgid ""
":meth:`poplib.POP3.quit` may now raise protocol errors like all other "
"``poplib`` methods.  Code that assumes ``quit`` does not raise "
":exc:`poplib.error_proto` errors may need to be changed if errors on "
"``quit`` are encountered by a particular application (:issue:`11291`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2427
msgid ""
"The ``strict`` argument to :class:`email.parser.Parser`, deprecated since"
" Python 2.4, has finally been removed."
msgstr ""

#: ../../whatsnew/3.3.rst:2430
msgid ""
"The deprecated method ``unittest.TestCase.assertSameElements`` has been "
"removed."
msgstr ""

#: ../../whatsnew/3.3.rst:2433
msgid "The deprecated variable ``time.accept2dyear`` has been removed."
msgstr ""

#: ../../whatsnew/3.3.rst:2435
msgid ""
"The deprecated ``Context._clamp`` attribute has been removed from the "
":mod:`decimal` module.  It was previously replaced by the public "
"attribute :attr:`~decimal.Context.clamp`.  (See :issue:`8540`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2439
msgid ""
"The undocumented internal helper class ``SSLFakeFile`` has been removed "
"from :mod:`smtplib`, since its functionality has long been provided "
"directly by :meth:`socket.socket.makefile`."
msgstr ""

#: ../../whatsnew/3.3.rst:2443
msgid ""
"Passing a negative value to :func:`time.sleep` on Windows now raises an "
"error instead of sleeping forever.  It has always raised an error on "
"posix."
msgstr ""

#: ../../whatsnew/3.3.rst:2446
msgid ""
"The ``ast.__version__`` constant has been removed.  If you need to make "
"decisions affected by the AST version, use :attr:`sys.version_info` to "
"make the decision."
msgstr ""

#: ../../whatsnew/3.3.rst:2450
msgid ""
"Code that used to work around the fact that the :mod:`threading` module "
"used factory functions by subclassing the private classes will need to "
"change to subclass the now-public classes."
msgstr ""

#: ../../whatsnew/3.3.rst:2454
msgid ""
"The undocumented debugging machinery in the threading module has been "
"removed, simplifying the code.  This should have no effect on production "
"code, but is mentioned here in case any application debug frameworks were"
" interacting with it (:issue:`13550`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2461
msgid "Porting C code"
msgstr ""

#: ../../whatsnew/3.3.rst:2463
msgid ""
"In the course of changes to the buffer API the undocumented "
":c:member:`~Py_buffer.smalltable` member of the :c:type:`Py_buffer` "
"structure has been removed and the layout of the "
":c:type:`PyMemoryViewObject` has changed."
msgstr ""

#: ../../whatsnew/3.3.rst:2468
msgid ""
"All extensions relying on the relevant parts in ``memoryobject.h`` or "
"``object.h`` must be rebuilt."
msgstr ""

#: ../../whatsnew/3.3.rst:2471
msgid ""
"Due to :ref:`PEP 393 <pep-393>`, the :c:type:`Py_UNICODE` type and all "
"functions using this type are deprecated (but will stay available for at "
"least five years).  If you were using low-level Unicode APIs to construct"
" and access unicode objects and you want to benefit of the memory "
"footprint reduction provided by :pep:`393`, you have to convert your code"
" to the new :doc:`Unicode API <../c-api/unicode>`."
msgstr ""

#: ../../whatsnew/3.3.rst:2478
msgid ""
"However, if you only have been using high-level functions such as "
":c:func:`PyUnicode_Concat()`, :c:func:`PyUnicode_Join` or "
":c:func:`PyUnicode_FromFormat()`, your code will automatically take "
"advantage of the new unicode representations."
msgstr ""

#: ../../whatsnew/3.3.rst:2483
msgid ":c:func:`PyImport_GetMagicNumber` now returns ``-1`` upon failure."
msgstr ""

#: ../../whatsnew/3.3.rst:2485
msgid ""
"As a negative value for the *level* argument to :func:`__import__` is no "
"longer valid, the same now holds for "
":c:func:`PyImport_ImportModuleLevel`. This also means that the value of "
"*level* used by :c:func:`PyImport_ImportModuleEx` is now ``0`` instead of"
" ``-1``."
msgstr ""

#: ../../whatsnew/3.3.rst:2492
msgid "Building C extensions"
msgstr ""

#: ../../whatsnew/3.3.rst:2494
msgid ""
"The range of possible file names for C extensions has been narrowed. Very"
" rarely used spellings have been suppressed: under POSIX, files named "
"``xxxmodule.so``, ``xxxmodule.abi3.so`` and ``xxxmodule.cpython-*.so`` "
"are no longer recognized as implementing the ``xxx`` module.  If you had "
"been generating such files, you have to switch to the other spellings "
"(i.e., remove the ``module`` string from the file names)."
msgstr ""

#: ../../whatsnew/3.3.rst:2502
msgid "(implemented in :issue:`14040`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2506
msgid "Command Line Switch Changes"
msgstr ""

#: ../../whatsnew/3.3.rst:2508
msgid ""
"The -Q command-line flag and related artifacts have been removed.  Code "
"checking sys.flags.division_warning will need updating."
msgstr ""

#: ../../whatsnew/3.3.rst:2511
msgid "(:issue:`10998`, contributed by √âric Araujo.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2513
msgid ""
"When :program:`python` is started with :option:`-S`, ``import site`` will"
" no longer add site-specific paths to the module search paths.  In "
"previous versions, it did."
msgstr ""

#: ../../whatsnew/3.3.rst:2517
msgid "(:issue:`11591`, contributed by Carl Meyer with editions by √âric Araujo.)"
msgstr ""

#: ../../whatsnew/3.4.rst:3
msgid "What's New In Python 3.4"
msgstr ""

#: ../../whatsnew/3.4.rst:5
msgid "R. David Murray <rdmurray@bitdance.com> (Editor)"
msgstr ""

#: ../../whatsnew/3.4.rst:63
msgid ""
"This article explains the new features in Python 3.4, compared to 3.3. "
"Python 3.4 was released on March 16, 2014.  For full details, see the "
"`changelog <https://docs.python.org/3.4/whatsnew/changelog.html>`_."
msgstr ""

#: ../../whatsnew/3.4.rst:70
msgid ":pep:`429` -- Python 3.4 Release Schedule"
msgstr ""

#: ../../whatsnew/3.4.rst:75 ../../whatsnew/3.7.rst:53
msgid "Summary -- Release Highlights"
msgstr ""

#: ../../whatsnew/3.4.rst:82
msgid "No new syntax features were added in Python 3.4."
msgstr ""

#: ../../whatsnew/3.4.rst:84
msgid "Other new features:"
msgstr ""

#: ../../whatsnew/3.4.rst:86
msgid ":ref:`pip should always be available <whatsnew-pep-453>` (:pep:`453`)."
msgstr ""

#: ../../whatsnew/3.4.rst:87
msgid ""
":ref:`Newly created file descriptors are non-inheritable <whatsnew-"
"pep-446>` (:pep:`446`)."
msgstr ""

#: ../../whatsnew/3.4.rst:89
msgid ""
"command line option for :ref:`isolated mode <whatsnew-isolated-mode>` "
"(:issue:`16499`)."
msgstr ""

#: ../../whatsnew/3.4.rst:91
msgid ""
":ref:`improvements in the handling of codecs <codec-handling-"
"improvements>` that are not text encodings (multiple issues)."
msgstr ""

#: ../../whatsnew/3.4.rst:93
msgid ""
":ref:`A ModuleSpec Type <whatsnew-pep-451>` for the Import System "
"(:pep:`451`).  (Affects importer authors.)"
msgstr ""

#: ../../whatsnew/3.4.rst:95
msgid ""
"The :mod:`marshal` format has been made :ref:`more compact and efficient "
"<whatsnew-marshal-3>` (:issue:`16475`)."
msgstr ""

#: ../../whatsnew/3.4.rst:100
msgid ""
":mod:`asyncio`: :ref:`New provisional API for asynchronous IO <whatsnew-"
"asyncio>` (:pep:`3156`)."
msgstr ""

#: ../../whatsnew/3.4.rst:102
msgid ""
":mod:`ensurepip`: :ref:`Bootstrapping the pip installer <whatsnew-"
"ensurepip>` (:pep:`453`)."
msgstr ""

#: ../../whatsnew/3.4.rst:104
msgid ""
":mod:`enum`: :ref:`Support for enumeration types <whatsnew-enum>` "
"(:pep:`435`)."
msgstr ""

#: ../../whatsnew/3.4.rst:106
msgid ""
":mod:`pathlib`: :ref:`Object-oriented filesystem paths <whatsnew-"
"pathlib>` (:pep:`428`)."
msgstr ""

#: ../../whatsnew/3.4.rst:108
msgid ""
":mod:`selectors`: :ref:`High-level and efficient I/O multiplexing "
"<whatsnew-selectors>`, built upon the :mod:`select` module primitives "
"(part of :pep:`3156`)."
msgstr ""

#: ../../whatsnew/3.4.rst:111
msgid ""
":mod:`statistics`: A basic :ref:`numerically stable statistics library "
"<whatsnew-statistics>` (:pep:`450`)."
msgstr ""

#: ../../whatsnew/3.4.rst:113
msgid ""
":mod:`tracemalloc`: :ref:`Trace Python memory allocations <whatsnew-"
"tracemalloc>` (:pep:`454`)."
msgstr ""

#: ../../whatsnew/3.4.rst:116
msgid "Significantly improved library modules:"
msgstr ""

#: ../../whatsnew/3.4.rst:118
msgid ""
":ref:`Single-dispatch generic functions <whatsnew-singledispatch>` in "
":mod:`functools` (:pep:`443`)."
msgstr ""

#: ../../whatsnew/3.4.rst:120
msgid "New :mod:`pickle` :ref:`protocol 4 <whatsnew-protocol-4>` (:pep:`3154`)."
msgstr ""

#: ../../whatsnew/3.4.rst:121
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>` (:issue:`8713`)."
msgstr ""

#: ../../whatsnew/3.4.rst:123
msgid ""
":mod:`email` has a new submodule, :mod:`~email.contentmanager`, and a new"
" :mod:`~email.message.Message` subclass "
"(:class:`~email.contentmanager.EmailMessage`) that :ref:`simplify MIME "
"handling <whatsnew_email_contentmanager>` (:issue:`18891`)."
msgstr ""

#: ../../whatsnew/3.4.rst:127
msgid ""
"The :mod:`inspect` and :mod:`pydoc` modules are now capable of correct "
"introspection of a much wider variety of callable objects, which improves"
" the output of the Python :func:`help` system."
msgstr ""

#: ../../whatsnew/3.4.rst:130
msgid "The :mod:`ipaddress` module API has been declared stable"
msgstr ""

#: ../../whatsnew/3.4.rst:134
msgid ""
":ref:`Secure and interchangeable hash algorithm <whatsnew-pep-456>` "
"(:pep:`456`)."
msgstr ""

#: ../../whatsnew/3.4.rst:136
msgid ""
":ref:`Make newly created file descriptors non-inheritable <whatsnew-"
"pep-446>` (:pep:`446`) to avoid leaking file descriptors to child "
"processes."
msgstr ""

#: ../../whatsnew/3.4.rst:138
msgid ""
"New command line option for :ref:`isolated mode <whatsnew-isolated-"
"mode>`, (:issue:`16499`)."
msgstr ""

#: ../../whatsnew/3.4.rst:140
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>`.  *spawn* and *forkserver* are "
"more secure because they avoid sharing data with child processes."
msgstr ""

#: ../../whatsnew/3.4.rst:143
msgid ""
":mod:`multiprocessing` child processes on Windows no longer inherit all "
"of the parent's inheritable handles, only the necessary ones."
msgstr ""

#: ../../whatsnew/3.4.rst:145
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_."
msgstr ""

#: ../../whatsnew/3.4.rst:148
msgid ":ref:`TLSv1.1 and TLSv1.2 support <whatsnew-tls-11-12>` for :mod:`ssl`."
msgstr ""

#: ../../whatsnew/3.4.rst:149
msgid ""
":ref:`Retrieving certificates from the Windows system cert store support "
"<whatsnew34-win-cert-store>` for :mod:`ssl`."
msgstr ""

#: ../../whatsnew/3.4.rst:151
msgid ""
":ref:`Server-side SNI (Server Name Indication) support <whatsnew34-sni>` "
"for :mod:`ssl`."
msgstr ""

#: ../../whatsnew/3.4.rst:153
msgid ""
"The :class:`ssl.SSLContext` class has a :ref:`lot of improvements "
"<whatsnew34-sslcontext>`."
msgstr ""

#: ../../whatsnew/3.4.rst:155
msgid ""
"All modules in the standard library that support SSL now support server "
"certificate verification, including hostname matching "
"(:func:`ssl.match_hostname`) and CRLs (Certificate Revocation lists, see "
":func:`ssl.SSLContext.load_verify_locations`)."
msgstr ""

#: ../../whatsnew/3.4.rst:160 ../../whatsnew/3.5.rst:94
#: ../../whatsnew/3.6.rst:78 ../../whatsnew/3.7.rst:98
msgid "CPython implementation improvements:"
msgstr ""

#: ../../whatsnew/3.4.rst:162
msgid ":ref:`Safe object finalization <whatsnew-pep-442>` (:pep:`442`)."
msgstr ""

#: ../../whatsnew/3.4.rst:163
msgid ""
"Leveraging :pep:`442`, in most cases :ref:`module globals are no longer "
"set to None during finalization <whatsnew-pep-442>` (:issue:`18214`)."
msgstr ""

#: ../../whatsnew/3.4.rst:165
msgid ":ref:`Configurable memory allocators <whatsnew-pep-445>` (:pep:`445`)."
msgstr ""

#: ../../whatsnew/3.4.rst:166
msgid ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)."
msgstr ""

#: ../../whatsnew/3.4.rst:168 ../../whatsnew/3.5.rst:157
msgid ""
"Please read on for a comprehensive list of user-facing changes, including"
" many other smaller improvements, CPython optimizations, deprecations, "
"and potential porting issues."
msgstr ""

#: ../../whatsnew/3.4.rst:175 ../../whatsnew/3.5.rst:163
#: ../../whatsnew/3.6.rst:176 ../../whatsnew/3.7.rst:128
#: ../../whatsnew/3.8.rst:73
msgid "New Features"
msgstr ""

#: ../../whatsnew/3.4.rst:180
msgid "PEP 453: Explicit Bootstrapping of PIP in Python Installations"
msgstr ""

#: ../../whatsnew/3.4.rst:185
msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a "
"standard cross-platform mechanism to bootstrap the pip installer into "
"Python installations and virtual environments. The version of ``pip`` "
"included with Python 3.4.0 is ``pip`` 1.5.4, and future 3.4.x maintenance"
" releases will update the bundled version to the latest version of "
"``pip`` that is available at the time of creating the release candidate."
msgstr ""

#: ../../whatsnew/3.4.rst:192
msgid ""
"By default, the commands ``pipX`` and ``pipX.Y`` will be installed on all"
" platforms (where X.Y stands for the version of the Python installation),"
" along with the ``pip`` Python package and its dependencies. On Windows "
"and in virtual environments on all platforms, the unversioned ``pip`` "
"command will also be installed. On other platforms, the system wide "
"unversioned ``pip`` command typically refers to the separately installed "
"Python 2 version."
msgstr ""

#: ../../whatsnew/3.4.rst:200
msgid ""
"The ``pyvenv`` command line utility and the :mod:`venv` module make use "
"of the :mod:`ensurepip` module to make ``pip`` readily available in "
"virtual environments. When using the command line utility, ``pip`` is "
"installed by default, while when using the :mod:`venv` module :ref:`venv-"
"api` installation of ``pip`` must be requested explicitly."
msgstr ""

#: ../../whatsnew/3.4.rst:206
msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-"
"unix>`, the ``make install`` and ``make altinstall`` commands bootstrap "
"``pip`` by default.  This behaviour can be controlled through configure "
"options, and overridden through Makefile options."
msgstr ""

#: ../../whatsnew/3.4.rst:227
msgid ""
"To avoid conflicts between parallel Python 2 and Python 3 installations, "
"only the versioned ``pip3`` and ``pip3.4`` commands are bootstrapped by "
"default when ``ensurepip`` is invoked directly - the ``--default-pip`` "
"option is needed to also request the unversioned ``pip`` command. "
"``pyvenv`` and the Windows installer ensure that the unqualified ``pip`` "
"command is made available in those environments, and ``pip`` can always "
"be invoked via the ``-m`` switch rather than directly to avoid ambiguity "
"on systems with multiple Python installations."
msgstr ""

#: ../../whatsnew/3.4.rst:240
msgid ""
"As part of this change, the :ref:`installing-index` and :ref"
":`distributing-index` sections of the documentation have been completely "
"redesigned as short getting started and FAQ documents. Most packaging "
"documentation has now been moved out to the Python Packaging Authority "
"maintained `Python Packaging User Guide <https://packaging.python.org>`__"
" and the documentation of the individual projects."
msgstr ""

#: ../../whatsnew/3.4.rst:262
msgid "PEP 446: Newly Created File Descriptors Are Non-Inheritable"
msgstr ""

#: ../../whatsnew/3.4.rst:264
msgid ""
":pep:`446` makes newly created file descriptors :ref:`non-inheritable "
"<fd_inheritance>`.  In general, this is the behavior an application will "
"want: when launching a new process, having currently open files also open"
" in the new process can lead to all sorts of hard to find bugs, and "
"potentially to security issues."
msgstr ""

#: ../../whatsnew/3.4.rst:270
msgid ""
"However, there are occasions when inheritance is desired.  To support "
"these cases, the following new functions and methods are available:"
msgstr ""

#: ../../whatsnew/3.4.rst:273
msgid ":func:`os.get_inheritable`, :func:`os.set_inheritable`"
msgstr ""

#: ../../whatsnew/3.4.rst:274
msgid ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"
msgstr ""

#: ../../whatsnew/3.4.rst:275
msgid ""
":meth:`socket.socket.get_inheritable`, "
":meth:`socket.socket.set_inheritable`"
msgstr ""

#: ../../whatsnew/3.4.rst:279
msgid ":pep:`446` -- Make newly created file descriptors non-inheritable"
msgstr ""

#: ../../whatsnew/3.4.rst:280 ../../whatsnew/3.4.rst:1812
msgid "PEP written and implemented by Victor Stinner."
msgstr ""

#: ../../whatsnew/3.4.rst:286
msgid "Improvements to Codec Handling"
msgstr ""

#: ../../whatsnew/3.4.rst:288
msgid ""
"Since it was first introduced, the :mod:`codecs` module has always been "
"intended to operate as a type-neutral dynamic encoding and decoding "
"system. However, its close coupling with the Python text model, "
"especially the type restricted convenience methods on the builtin "
":class:`str`, :class:`bytes` and :class:`bytearray` types, has "
"historically obscured that fact."
msgstr ""

#: ../../whatsnew/3.4.rst:295
msgid ""
"As a key step in clarifying the situation, the :meth:`codecs.encode` and "
":meth:`codecs.decode` convenience functions are now properly documented "
"in Python 2.7, 3.3 and 3.4. These functions have existed in the "
":mod:`codecs` module (and have been covered by the regression test suite)"
" since Python 2.4, but were previously only discoverable through runtime "
"introspection."
msgstr ""

#: ../../whatsnew/3.4.rst:301
msgid ""
"Unlike the convenience methods on :class:`str`, :class:`bytes` and "
":class:`bytearray`, the :mod:`codecs` convenience functions support "
"arbitrary codecs in both Python 2 and Python 3, rather than being limited"
" to Unicode text encodings (in Python 3) or ``basestring`` <-> "
"``basestring`` conversions (in Python 2)."
msgstr ""

#: ../../whatsnew/3.4.rst:307
msgid ""
"In Python 3.4, the interpreter is able to identify the known non-text "
"encodings provided in the standard library and direct users towards these"
" general purpose convenience functions when appropriate::"
msgstr ""

#: ../../whatsnew/3.4.rst:326
msgid ""
"In a related change, whenever it is feasible without breaking backwards "
"compatibility, exceptions raised during encoding and decoding operations "
"are wrapped in a chained exception of the same type that mentions the "
"name of the codec responsible for producing the error::"
msgstr ""

#: ../../whatsnew/3.4.rst:359
msgid ""
"Finally, as the examples above show, these improvements have permitted "
"the restoration of the convenience aliases for the non-Unicode codecs "
"that were themselves restored in Python 3.2. This means that encoding "
"binary data to and from its hexadecimal representation (for example) can "
"now be written as::"
msgstr ""

#: ../../whatsnew/3.4.rst:371
msgid ""
"The binary and text transforms provided in the standard library are "
"detailed in :ref:`binary-transforms` and :ref:`text-transforms`."
msgstr ""

#: ../../whatsnew/3.4.rst:374
msgid ""
"(Contributed by Nick Coghlan in :issue:`7475`, :issue:`17827`, "
":issue:`17828` and :issue:`19619`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:381
msgid "PEP 451: A ModuleSpec Type for the Import System"
msgstr ""

#: ../../whatsnew/3.4.rst:383
msgid ""
":pep:`451` provides an encapsulation of the information about a module "
"that the import machinery will use to load it (that is, a module "
"specification).  This helps simplify both the import implementation and "
"several import-related APIs. The change is also a stepping stone for "
"`several future import-related improvements`__."
msgstr ""

#: ../../whatsnew/3.4.rst:391
msgid ""
"The public-facing changes from the PEP are entirely backward-compatible. "
"Furthermore, they should be transparent to everyone but importer authors."
"  Key finder and loader methods have been deprecated, but they will "
"continue working. New importers should use the new methods described in "
"the PEP.  Existing importers should be updated to implement the new "
"methods.  See the :ref:`deprecated-3.4` section for a list of methods "
"that should be replaced and their replacements."
msgstr ""

#: ../../whatsnew/3.4.rst:405
msgid "Unicode database updated to UCD version 6.3."
msgstr ""

#: ../../whatsnew/3.4.rst:407
msgid ""
":func:`min` and :func:`max` now accept a *default* keyword-only argument "
"that can be used to specify the value they return if the iterable they "
"are evaluating has no elements.  (Contributed by Julian Berman in "
":issue:`18111`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:412
msgid "Module objects are now :mod:`weakref`'able."
msgstr ""

#: ../../whatsnew/3.4.rst:414
msgid ""
"Module ``__file__`` attributes (and related values) should now always "
"contain absolute paths by default, with the sole exception of "
"``__main__.__file__`` when a script has been executed directly using a "
"relative path.  (Contributed by Brett Cannon in :issue:`18416`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:419
msgid ""
"All the UTF-\\* codecs (except UTF-7) now reject surrogates during both "
"encoding and decoding unless the ``surrogatepass`` error handler is used,"
" with the exception of the UTF-16 decoder (which accepts valid surrogate "
"pairs) and the UTF-16 encoder (which produces them while encoding non-BMP"
" characters). (Contributed by Victor Stinner, Kang-Hao (Kenny) Lu and "
"Serhiy Storchaka in :issue:`12892`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:426
msgid ""
"New German EBCDIC :ref:`codec <standard-encodings>` ``cp273``.  "
"(Contributed by Michael Bierenfeld and Andrew Kuchling in "
":issue:`1097797`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:429
msgid ""
"New Ukrainian :ref:`codec <standard-encodings>` ``cp1125``.  (Contributed"
" by Serhiy Storchaka in :issue:`19668`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:432
msgid ""
":class:`bytes`.join() and :class:`bytearray`.join() now accept arbitrary "
"buffer objects as arguments.  (Contributed by Antoine Pitrou in "
":issue:`15958`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:436
msgid ""
"The :class:`int` constructor now accepts any object that has an "
"``__index__`` method for its *base* argument.  (Contributed by Mark "
"Dickinson in :issue:`16772`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:440
msgid ""
"Frame objects now have a :func:`~frame.clear` method that clears all "
"references to local variables from the frame.  (Contributed by Antoine "
"Pitrou in :issue:`17934`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:444
msgid ""
":class:`memoryview` is now registered as a :class:`Sequence "
"<collections.abc>`, and supports the :func:`reversed` builtin.  "
"(Contributed by Nick Coghlan and Claudiu Popa in :issue:`18690` and "
":issue:`19078`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:448
msgid ""
"Signatures reported by :func:`help` have been modified and improved in "
"several cases as a result of the introduction of Argument Clinic and "
"other changes to the :mod:`inspect` and :mod:`pydoc` modules."
msgstr ""

#: ../../whatsnew/3.4.rst:452
msgid ""
":meth:`~object.__length_hint__` is now part of the formal language "
"specification (see :pep:`424`).  (Contributed by Armin Ronacher in "
":issue:`16148`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:464 ../../whatsnew/3.5.rst:773
#: ../../whatsnew/3.6.rst:813 ../../whatsnew/3.7.rst:633
#: ../../whatsnew/3.7.rst:1950 ../../whatsnew/3.8.rst:597
msgid "asyncio"
msgstr ""

#: ../../whatsnew/3.4.rst:466
msgid ""
"The new :mod:`asyncio` module (defined in :pep:`3156`) provides a "
"standard pluggable event loop model for Python, providing solid "
"asynchronous IO support in the standard library, and making it easier for"
" other event loop implementations to interoperate with the standard "
"library and each other."
msgstr ""

#: ../../whatsnew/3.4.rst:471 ../../whatsnew/3.4.rst:534
msgid "For Python 3.4, this module is considered a :term:`provisional API`."
msgstr ""

#: ../../whatsnew/3.4.rst:475
msgid ":pep:`3156` -- Asynchronous IO Support Rebooted: the \"asyncio\" Module"
msgstr ""

#: ../../whatsnew/3.4.rst:476
msgid "PEP written and implementation led by Guido van Rossum."
msgstr ""

#: ../../whatsnew/3.4.rst:482
msgid "ensurepip"
msgstr ""

#: ../../whatsnew/3.4.rst:484
msgid ""
"The new :mod:`ensurepip` module is the primary infrastructure for the "
":pep:`453` implementation.  In the normal course of events end users will"
" not need to interact with this module, but it can be used to manually "
"bootstrap ``pip`` if the automated bootstrapping into an installation or "
"virtual environment was declined."
msgstr ""

#: ../../whatsnew/3.4.rst:490
msgid ""
":mod:`ensurepip` includes a bundled copy of ``pip``, up-to-date as of the"
" first release candidate of the release of CPython with which it ships "
"(this applies to both maintenance releases and feature releases).  "
"``ensurepip`` does not access the internet.  If the installation has "
"Internet access, after ``ensurepip`` is run the bundled ``pip`` can be "
"used to upgrade ``pip`` to a more recent release than the bundled one.  "
"(Note that such an upgraded version of ``pip`` is considered to be a "
"separately installed package and will not be removed if Python is "
"uninstalled.)"
msgstr ""

#: ../../whatsnew/3.4.rst:499
msgid ""
"The module is named *ensure*\\ pip because if called when ``pip`` is "
"already installed, it does nothing.  It also has an ``--upgrade`` option "
"that will cause it to install the bundled copy of ``pip`` if the existing"
" installed version of ``pip`` is older than the bundled copy."
msgstr ""

#: ../../whatsnew/3.4.rst:508 ../../whatsnew/3.5.rst:1123
#: ../../whatsnew/3.6.rst:1052 ../../whatsnew/3.7.rst:905
#: ../../whatsnew/3.7.rst:1984
msgid "enum"
msgstr ""

#: ../../whatsnew/3.4.rst:510
msgid ""
"The new :mod:`enum` module (defined in :pep:`435`) provides a standard "
"implementation of enumeration types, allowing other modules (such as "
":mod:`socket`) to provide more informative error messages and better "
"debugging support by replacing opaque integer constants with backwards "
"compatible enumeration values."
msgstr ""

#: ../../whatsnew/3.4.rst:519
msgid ":pep:`435` -- Adding an Enum type to the Python standard library"
msgstr ""

#: ../../whatsnew/3.4.rst:519
msgid ""
"PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman, implemented "
"by Ethan Furman."
msgstr ""

#: ../../whatsnew/3.4.rst:526 ../../whatsnew/3.5.rst:1522
#: ../../whatsnew/3.6.rst:1292 ../../whatsnew/3.7.rst:1190
#: ../../whatsnew/3.8.rst:1076
msgid "pathlib"
msgstr ""

#: ../../whatsnew/3.4.rst:528
msgid ""
"The new :mod:`pathlib` module offers classes representing filesystem "
"paths with semantics appropriate for different operating systems.  Path "
"classes are divided between *pure paths*, which provide purely "
"computational operations without I/O, and *concrete paths*, which inherit"
" from pure paths but also provide I/O operations."
msgstr ""

#: ../../whatsnew/3.4.rst:538
msgid ":pep:`428` -- The pathlib module -- object-oriented filesystem paths"
msgstr ""

#: ../../whatsnew/3.4.rst:545 ../../whatsnew/3.5.rst:1631
msgid "selectors"
msgstr ""

#: ../../whatsnew/3.4.rst:547
msgid ""
"The new :mod:`selectors` module (created as part of implementing "
":pep:`3156`) allows high-level and efficient I/O multiplexing, built upon"
" the :mod:`select` module primitives."
msgstr ""

#: ../../whatsnew/3.4.rst:555 ../../whatsnew/3.6.rst:1477
#: ../../whatsnew/3.8.rst:1189
msgid "statistics"
msgstr ""

#: ../../whatsnew/3.4.rst:557
msgid ""
"The new :mod:`statistics` module (defined in :pep:`450`) offers some core"
" statistics functionality directly in the standard library. This module "
"supports calculation of the mean, median, mode, variance and standard "
"deviation of a data series."
msgstr ""

#: ../../whatsnew/3.4.rst:564
msgid ":pep:`450` -- Adding A Statistics Module To The Standard Library"
msgstr ""

#: ../../whatsnew/3.4.rst:565
msgid "PEP written and implemented by Steven D'Aprano"
msgstr ""

#: ../../whatsnew/3.4.rst:571 ../../whatsnew/3.6.rst:1584
#: ../../whatsnew/3.7.rst:1480
msgid "tracemalloc"
msgstr ""

#: ../../whatsnew/3.4.rst:573
msgid ""
"The new :mod:`tracemalloc` module (defined in :pep:`454`) is a debug tool"
" to trace memory blocks allocated by Python. It provides the following "
"information:"
msgstr ""

#: ../../whatsnew/3.4.rst:576
msgid "Trace where an object was allocated"
msgstr ""

#: ../../whatsnew/3.4.rst:577
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr ""

#: ../../whatsnew/3.4.rst:579
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr ""

#: ../../whatsnew/3.4.rst:583
msgid ""
":pep:`454` -- Add a new tracemalloc module to trace Python memory "
"allocations"
msgstr ""

#: ../../whatsnew/3.4.rst:584 ../../whatsnew/3.7.rst:260
#: ../../whatsnew/3.7.rst:362
msgid "PEP written and implemented by Victor Stinner"
msgstr ""

#: ../../whatsnew/3.4.rst:595
msgid ""
"New function :func:`abc.get_cache_token` can be used to know when to "
"invalidate caches that are affected by changes in the object graph.  "
"(Contributed by ≈Åukasz Langa in :issue:`16832`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:599
msgid ""
"New class :class:`~abc.ABC` has :class:`~abc.ABCMeta` as its meta class. "
"Using ``ABC`` as a base class has essentially the same effect as "
"specifying ``metaclass=abc.ABCMeta``, but is simpler to type and easier "
"to read. (Contributed by Bruno Dupuis in :issue:`16049`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:606 ../../whatsnew/3.7.rst:1940
msgid "aifc"
msgstr ""

#: ../../whatsnew/3.4.rst:608
msgid ""
"The :meth:`~aifc.aifc.getparams` method now returns a namedtuple rather "
"than a plain tuple.  (Contributed by Claudiu Popa in :issue:`17818`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:611
msgid ""
":func:`aifc.open` now supports the context management protocol: when used"
" in a :keyword:`with` block, the :meth:`~aifc.aifc.close` method of the "
"returned object will be called automatically at the end of the block.  "
"(Contributed by Serhiy Storchacha in :issue:`16486`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:616
msgid ""
"The :meth:`~aifc.aifc.writeframesraw` and :meth:`~aifc.aifc.writeframes` "
"methods now accept any :term:`bytes-like object`.  (Contributed by Serhiy"
" Storchaka in :issue:`8311`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:622 ../../whatsnew/3.5.rst:764
#: ../../whatsnew/3.7.rst:622
msgid "argparse"
msgstr ""

#: ../../whatsnew/3.4.rst:624
msgid ""
"The :class:`~argparse.FileType` class now accepts *encoding* and *errors*"
" arguments, which are passed through to :func:`open`.  (Contributed by "
"Lucas Maystre in :issue:`11175`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:630
msgid "audioop"
msgstr ""

#: ../../whatsnew/3.4.rst:632
msgid ""
":mod:`audioop` now supports 24-bit samples.  (Contributed by Serhiy "
"Storchaka in :issue:`12866`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:635
msgid ""
"New :func:`~audioop.byteswap` function converts big-endian samples to "
"little-endian and vice versa.  (Contributed by Serhiy Storchaka in "
":issue:`19641`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:639
msgid ""
"All :mod:`audioop` functions now accept any :term:`bytes-like object`.  "
"Strings are not accepted: they didn't work before, now they raise an "
"error right away. (Contributed by Serhiy Storchaka in :issue:`16685`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:647
msgid ""
"The encoding and decoding functions in :mod:`base64` now accept any :term"
":`bytes-like object` in cases where it previously required a "
":class:`bytes` or :class:`bytearray` instance.  (Contributed by Nick "
"Coghlan in :issue:`17839`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:652
msgid ""
"New functions :func:`~base64.a85encode`, :func:`~base64.a85decode`, "
":func:`~base64.b85encode`, and :func:`~base64.b85decode` provide the "
"ability to encode and decode binary data from and to ``Ascii85`` and the "
"git/mercurial ``Base85`` formats, respectively.  The ``a85`` functions "
"have options that can be used to make them compatible with the variants "
"of the ``Ascii85`` encoding, including the Adobe variant.  (Contributed "
"by Martin Morrison, the Mercurial project, Serhiy Storchaka, and Antoine "
"Pitrou in :issue:`17618`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:664
msgid ""
"The :meth:`.ChainMap.new_child` method now accepts an *m* argument "
"specifying the child map to add to the chain.  This allows an existing "
"mapping and/or a custom mapping type to be used for the child.  "
"(Contributed by Vinay Sajip in :issue:`16613`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:671
msgid "colorsys"
msgstr ""

#: ../../whatsnew/3.4.rst:673
msgid ""
"The number of digits in the coefficients for the RGB --- YIQ conversions "
"have been expanded so that they match the FCC NTSC versions.  The change "
"in results should be less than 1% and may better match results found "
"elsewhere. (Contributed by Brian Landers and Serhiy Storchaka in "
":issue:`14323`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:682
msgid ""
"The new :class:`contextlib.suppress` context manager helps to clarify the"
" intent of code that deliberately suppresses exceptions from a single "
"statement.  (Contributed by Raymond Hettinger in :issue:`15806` and Zero "
"Piraeus in :issue:`19266`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:687
msgid ""
"The new :func:`contextlib.redirect_stdout` context manager makes it "
"easier for utility scripts to handle inflexible APIs that write their "
"output to :data:`sys.stdout` and don't provide any options to redirect "
"it.  Using the context manager, the :data:`sys.stdout` output can be "
"redirected to any other stream or, in conjunction with "
":class:`io.StringIO`, to a string. The latter can be especially useful, "
"for example, to capture output from a function that was written to "
"implement a command line interface. It is recommended only for utility "
"scripts because it affects the global state of :data:`sys.stdout`.  "
"(Contributed by Raymond Hettinger in :issue:`15805`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:698
msgid ""
"The :mod:`contextlib` documentation has also been updated to include a "
":ref:`discussion <single-use-reusable-and-reentrant-cms>` of the "
"differences between single use, reusable and reentrant context managers."
msgstr ""

#: ../../whatsnew/3.4.rst:706
msgid ""
":func:`dbm.open` objects now support the context management protocol.  "
"When used in a :keyword:`with` statement, the ``close`` method of the "
"database object will be called automatically at the end of the block.  "
"(Contributed by Claudiu Popa and Nick Coghlan in :issue:`19282`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:715
msgid ""
"Functions :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb`, "
"and :func:`~dis.disassemble` now accept a keyword-only *file* argument "
"that controls where they write their output."
msgstr ""

#: ../../whatsnew/3.4.rst:719
msgid ""
"The :mod:`dis` module is now built around an :class:`~dis.Instruction` "
"class that provides object oriented access to the details of each "
"individual bytecode operation."
msgstr ""

#: ../../whatsnew/3.4.rst:723
msgid ""
"A new method, :func:`~dis.get_instructions`, provides an iterator that "
"emits the Instruction stream for a given piece of Python code.  Thus it "
"is now possible to write a program that inspects and manipulates a "
"bytecode object in ways different from those provided by the :mod:`~dis` "
"module itself.  For example::"
msgstr ""

#: ../../whatsnew/3.4.rst:737
msgid ""
"The various display tools in the :mod:`dis` module have been rewritten to"
" use these new components."
msgstr ""

#: ../../whatsnew/3.4.rst:740
msgid ""
"In addition, a new application-friendly class :class:`~dis.Bytecode` "
"provides an object-oriented API for inspecting bytecode in both in human-"
"readable form and for iterating over instructions.  The "
":class:`~dis.Bytecode` constructor takes the same arguments that "
":func:`~dis.get_instruction` does (plus an optional *current_offset*), "
"and the resulting object can be iterated to produce "
":class:`~dis.Instruction` objects.  But it also has a "
":mod:`~dis.Bytecode.dis` method, equivalent to calling :mod:`~dis.dis` on"
" the constructor argument, but returned as a multi-line string::"
msgstr ""

#: ../../whatsnew/3.4.rst:762
msgid ""
":class:`~dis.Bytecode` also has a class method, "
":meth:`~dis.Bytecode.from_traceback`, that provides the ability to "
"manipulate a traceback (that is, "
"``print(Bytecode.from_traceback(tb).dis())`` is equivalent to "
"``distb(tb)``)."
msgstr ""

#: ../../whatsnew/3.4.rst:767
msgid ""
"(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in "
":issue:`11816` and Claudiu Popa in :issue:`17916`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:770
msgid ""
"New function :func:`~dis.stack_effect` computes the effect on the Python "
"stack of a given opcode and argument, information that is not otherwise "
"available. (Contributed by Larry Hastings in :issue:`19722`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:778
msgid ""
"A new :ref:`option flag <doctest-options>`, :data:`~doctest.FAIL_FAST`, "
"halts test running as soon as the first failure is detected.  "
"(Contributed by R. David Murray and Daniel Urban in :issue:`16522`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:782
msgid ""
"The :mod:`doctest` command line interface now uses :mod:`argparse`, and "
"has two new options, ``-o`` and ``-f``.  ``-o`` allows :ref:`doctest "
"options <doctest-options>` to be specified on the command line, and "
"``-f`` is a shorthand for ``-o FAIL_FAST`` (to parallel the similar "
"option supported by the :mod:`unittest` CLI).  (Contributed by R. David "
"Murray in :issue:`11390`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:788
msgid ""
":mod:`doctest` will now find doctests in extension module ``__doc__`` "
"strings. (Contributed by Zachary Ware in :issue:`3158`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:795
msgid ""
":meth:`~email.message.Message.as_string` now accepts a *policy* argument "
"to override the default policy of the message when generating a string "
"representation of it.  This means that ``as_string`` can now be used in "
"more circumstances, instead of having to create and use a "
":mod:`~email.generator` in order to pass formatting parameters to its "
"``flatten`` method.  (Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:802
msgid ""
"New method :meth:`~email.message.Message.as_bytes` added to produce a "
"bytes representation of the message in a fashion similar to how "
"``as_string`` produces a string representation.  It does not accept the "
"*maxheaderlen* argument, but does accept the *unixfrom* and *policy* "
"arguments. The :class:`~email.message.Message` "
":meth:`~email.message.Message.__bytes__` method calls it, meaning that "
"``bytes(mymsg)`` will now produce the intuitive result:  a bytes object "
"containing the fully formatted message.  (Contributed by R. David Murray "
"in :issue:`18600`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:811
msgid ""
"The :meth:`.Message.set_param` message now accepts a *replace* keyword "
"argument. When specified, the associated header will be updated without "
"changing its location in the list of headers.  For backward "
"compatibility, the default is ``False``.  (Contributed by R. David Murray"
" in :issue:`18891`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:819
msgid ""
"A pair of new subclasses of :class:`~email.message.Message` have been "
"added (:class:`.EmailMessage` and :class:`.MIMEPart`), along with a new "
"sub-module, :mod:`~email.contentmanager` and a new :mod:`~email.policy` "
"attribute :attr:`~email.policy.EmailPolicy.content_manager`.  All "
"documentation is currently in the new module, which is being added as "
"part of email's new :term:`provisional API`.  These classes provide a "
"number of new methods that make extracting content from and inserting "
"content into email messages much easier.  For details, see the "
":mod:`~email.contentmanager` documentation and the :ref:`email-examples`."
"  These API additions complete the bulk of the work that was planned as "
"part of the email6 project.  The currently provisional API is scheduled "
"to become final in Python 3.5 (possibly with a few minor additions in the"
" area of error handling).  (Contributed by R. David Murray in "
":issue:`18891`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:835
msgid "filecmp"
msgstr ""

#: ../../whatsnew/3.4.rst:837
msgid ""
"A new :func:`~filecmp.clear_cache` function provides the ability to clear"
" the :mod:`filecmp` comparison cache, which uses :func:`os.stat` "
"information to determine if the file has changed since the last compare."
"  This can be used, for example, if the file might have been changed and "
"re-checked in less time than the resolution of a particular filesystem's "
"file modification time field. (Contributed by Mark Levitt in "
":issue:`18149`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:844
msgid ""
"New module attribute :data:`~filecmp.DEFAULT_IGNORES` provides the list "
"of directories that are used as the default value for the *ignore* "
"parameter of the :func:`~filecmp.dircmp` function.  (Contributed by Eli "
"Bendersky in :issue:`15442`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:853
msgid ""
"The new :func:`~functools.partialmethod` descriptor brings partial "
"argument application to descriptors, just as :func:`~functools.partial` "
"provides for normal callables. The new descriptor also makes it easier to"
" get arbitrary callables (including :func:`~functools.partial` instances)"
" to behave like normal instance methods when included in a class "
"definition. (Contributed by Alon Horev and Nick Coghlan in "
":issue:`4331`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:862
msgid ""
"The new :func:`~functools.singledispatch` decorator brings support for "
"single-dispatch generic functions to the Python standard library. Where "
"object oriented programming focuses on grouping multiple operations on a "
"common set of data into a class, a generic function focuses on grouping "
"multiple implementations of an operation that allows it to work with "
"*different* kinds of data."
msgstr ""

#: ../../whatsnew/3.4.rst:871
msgid ":pep:`443` -- Single-dispatch generic functions"
msgstr ""

#: ../../whatsnew/3.4.rst:872 ../../whatsnew/3.7.rst:179
msgid "PEP written and implemented by ≈Åukasz Langa."
msgstr ""

#: ../../whatsnew/3.4.rst:874
msgid ""
":func:`~functools.total_ordering` now supports a return value of "
":const:`NotImplemented` from the underlying comparison function.  "
"(Contributed by Katie Miller in :issue:`10042`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:878
msgid ""
"A pure-python version of the :func:`~functools.partial` function is now "
"in the stdlib; in CPython it is overridden by the C accelerated version, "
"but it is available for other implementations to use.  (Contributed by "
"Brian Thorne in :issue:`12428`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:887
msgid ""
"New function :func:`~gc.get_stats` returns a list of three per-generation"
" dictionaries containing the collections statistics since interpreter "
"startup. (Contributed by Antoine Pitrou in :issue:`16351`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:893 ../../whatsnew/3.5.rst:1158
msgid "glob"
msgstr ""

#: ../../whatsnew/3.4.rst:895
msgid ""
"A new function :func:`~glob.escape` provides a way to escape special "
"characters in a filename so that they do not become part of the globbing "
"expansion but are instead matched literally.  (Contributed by Serhiy "
"Storchaka in :issue:`8402`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:903
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_."
"  (Contributed by Christian Heimes in :issue:`18582`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:908
msgid ""
"The :attr:`~hashlib.hash.name` attribute of :mod:`hashlib` hash objects "
"is now a formally supported interface.  It has always existed in "
"CPython's :mod:`hashlib` (although it did not return lower case names for"
" all supported hashes), but it was not a public interface and so some "
"other Python implementations have not previously supported it.  "
"(Contributed by Jason R. Coombs in :issue:`18532`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:919
msgid ""
":mod:`hmac` now accepts ``bytearray`` as well as ``bytes`` for the *key* "
"argument to the :func:`~hmac.new` function, and the *msg* parameter to "
"both the :func:`~hmac.new` function and the :meth:`~hmac.HMAC.update` "
"method now accepts any type supported by the :mod:`hashlib` module.  "
"(Contributed by Jonas Borgstr√∂m in :issue:`18240`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:925
msgid ""
"The *digestmod* argument to the :func:`hmac.new` function may now be any "
"hash digest name recognized by :mod:`hashlib`.  In addition, the current "
"behavior in which the value of *digestmod* defaults to ``MD5`` is "
"deprecated: in a future version of Python there will be no default value."
"  (Contributed by Christian Heimes in :issue:`17276`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:931
msgid ""
"With the addition of :attr:`~hmac.HMAC.block_size` and "
":attr:`~hmac.HMAC.name` attributes (and the formal documentation of the "
":attr:`~hmac.HMAC.digest_size` attribute), the :mod:`hmac` module now "
"conforms fully to the :pep:`247` API. (Contributed by Christian Heimes in"
" :issue:`18775`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:940
msgid ""
"New function :func:`~html.unescape` function converts HTML5 character "
"references to the corresponding Unicode characters.  (Contributed by Ezio"
" Melotti in :issue:`2927`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:944
msgid ""
":class:`~html.parser.HTMLParser` accepts a new keyword argument "
"*convert_charrefs* that, when ``True``, automatically converts all "
"character references.  For backward-compatibility, its value defaults to "
"``False``, but it will change to ``True`` in a future version of Python, "
"so you are invited to set it explicitly and update your code to use this "
"new feature.  (Contributed by Ezio Melotti in :issue:`13633`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:951
msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is now "
"deprecated. (Contributed by Ezio Melotti in :issue:`15114`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:958
msgid ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` now accepts an "
"optional additional *explain* parameter which can be used to provide an "
"extended error description, overriding the hardcoded default if there is "
"one. This extended error description will be formatted using the "
":attr:`~http.server.HTTP.error_message_format` attribute and sent as the "
"body of the error response.  (Contributed by Karl Cow in :issue:`12921`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:965
msgid ""
"The :mod:`http.server` :ref:`command line interface <http-server-cli>` "
"now has a ``-b/--bind`` option that causes the server to listen on a "
"specific address. (Contributed by Malte Swart in :issue:`17764`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:971 ../../whatsnew/3.5.rst:1223
#: ../../whatsnew/3.6.rst:1123 ../../whatsnew/3.7.rst:977
msgid "idlelib and IDLE"
msgstr ""

#: ../../whatsnew/3.4.rst:973
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended "
"for import by other programs, it gets improvements with every release. "
"See :file:`Lib/idlelib/NEWS.txt` for a cumulative list of changes since "
"3.3.0, as well as changes made in future 3.4.x releases. This file is "
"also available from the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""

#: ../../whatsnew/3.4.rst:981 ../../whatsnew/3.5.rst:1263
#: ../../whatsnew/3.6.rst:1199 ../../whatsnew/3.6.rst:2003
#: ../../whatsnew/3.7.rst:1043 ../../whatsnew/3.7.rst:2003
msgid "importlib"
msgstr ""

#: ../../whatsnew/3.4.rst:983
msgid ""
"The :class:`~importlib.abc.InspectLoader` ABC defines a new method, "
":meth:`~importlib.abc.InspectLoader.source_to_code` that accepts source "
"data and a path and returns a code object.  The default implementation is"
" equivalent to ``compile(data, path, 'exec', dont_inherit=True)``. "
"(Contributed by Eric Snow and Brett Cannon in :issue:`15627`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:989
msgid ""
":class:`~importlib.abc.InspectLoader` also now has a default "
"implementation for the :meth:`~importlib.abc.InspectLoader.get_code` "
"method.  However, it will normally be desirable to override the default "
"implementation for performance reasons.  (Contributed by Brett Cannon in "
":issue:`18072`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:994
msgid ""
"The :func:`~importlib.reload` function has been moved from :mod:`imp` to "
":mod:`importlib` as part of the :mod:`imp` module deprecation.  "
"(Contributed by Berker Peksag in :issue:`18193`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:998
msgid ""
":mod:`importlib.util` now has a :data:`~importlib.util.MAGIC_NUMBER` "
"attribute providing access to the bytecode version number.  This replaces"
" the :func:`~imp.get_magic` function in the deprecated :mod:`imp` module."
" (Contributed by Brett Cannon in :issue:`18192`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1003
msgid ""
"New :mod:`importlib.util` functions "
":func:`~importlib.util.cache_from_source` and "
":func:`~importlib.util.source_from_cache` replace the same-named "
"functions in the deprecated :mod:`imp` module.  (Contributed by Brett "
"Cannon in :issue:`18194`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1008
msgid ""
"The :mod:`importlib` bootstrap :class:`.NamespaceLoader` now conforms to "
"the :class:`.InspectLoader` ABC, which means that ``runpy`` and ``python "
"-m`` can now be used with namespace packages.  (Contributed by Brett "
"Cannon in :issue:`18058`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1013
msgid ""
":mod:`importlib.util` has a new function "
":func:`~importlib.util.decode_source` that decodes source from bytes "
"using universal newline processing.  This is useful for implementing "
":meth:`.InspectLoader.get_source` methods."
msgstr ""

#: ../../whatsnew/3.4.rst:1017
msgid ""
":class:`importlib.machinery.ExtensionFileLoader` now has a "
":meth:`~importlib.machinery.ExtensionFileLoader.get_filename` method.  "
"This was inadvertently omitted in the original implementation.  "
"(Contributed by Eric Snow in :issue:`19152`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1026
msgid ""
"The :mod:`inspect` module now offers a basic :ref:`command line interface"
" <inspect-module-cli>` to quickly display source code and other "
"information for modules, classes and functions.  (Contributed by Claudiu "
"Popa and Nick Coghlan in :issue:`18626`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1031
msgid ""
":func:`~inspect.unwrap` makes it easy to unravel wrapper function chains "
"created by :func:`functools.wraps` (and any other API that sets the "
"``__wrapped__`` attribute on a wrapper function).  (Contributed by Daniel"
" Urban, Aaron Iles and Nick Coghlan in :issue:`13266`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1036
msgid ""
"As part of the implementation of the new :mod:`enum` module, the "
":mod:`inspect` module now has substantially better support for custom "
"``__dir__`` methods and dynamic class attributes provided through "
"metaclasses.  (Contributed by Ethan Furman in :issue:`18929` and "
":issue:`19030`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1042
msgid ""
":func:`~inspect.getfullargspec` and :func:`~inspect.getargspec` now use "
"the :func:`~inspect.signature` API. This allows them to support a much "
"broader range of callables, including those with ``__signature__`` "
"attributes, those with metadata provided by argument clinic, "
":func:`functools.partial` objects and more. Note that, unlike "
":func:`~inspect.signature`, these functions still ignore ``__wrapped__`` "
"attributes, and report the already bound first argument for bound "
"methods, so it is still necessary to update your code to use "
":func:`~inspect.signature` directly if those features are desired. "
"(Contributed by Yury Selivanov in :issue:`17481`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1053
msgid ""
":func:`~inspect.signature` now supports duck types of CPython functions, "
"which adds support for functions compiled with Cython.  (Contributed by "
"Stefan Behnel and Yury Selivanov in :issue:`17159`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1061
msgid ""
":mod:`ipaddress` was added to the standard library in Python 3.3 as a "
":term:`provisional API`. With the release of Python 3.4, this "
"qualification has been removed: :mod:`ipaddress` is now considered a "
"stable API, covered by the normal standard library requirements to "
"maintain backwards compatibility."
msgstr ""

#: ../../whatsnew/3.4.rst:1067
msgid ""
"A new :attr:`~ipaddress.IPv4Address.is_global` property is ``True`` if an"
" address is globally routeable.  (Contributed by Peter Moody in "
":issue:`17400`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1075
msgid ""
"The :class:`~logging.handlers.TimedRotatingFileHandler` has a new "
"*atTime* parameter that can be used to specify the time of day when "
"rollover should happen.  (Contributed by Ronald Oussoren in "
":issue:`9556`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1079
msgid ""
":class:`~logging.handlers.SocketHandler` and "
":class:`~logging.handlers.DatagramHandler` now support Unix domain "
"sockets (by setting *port* to ``None``).  (Contributed by Vinay Sajip in "
"commit ce46195b56a9.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1084
msgid ""
":func:`~logging.config.fileConfig` now accepts a "
":class:`configparser.RawConfigParser` subclass instance for the *fname* "
"parameter.  This facilitates using a configuration file when logging "
"configuration is just a part of the overall application configuration, or"
" where the application modifies the configuration before passing it to "
":func:`~logging.config.fileConfig`.  (Contributed by Vinay Sajip in "
":issue:`16110`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1092
msgid ""
"Logging configuration data received from a socket via the "
":func:`logging.config.listen` function can now be validated before being "
"processed by supplying a verification function as the argument to the new"
" *verify* keyword argument.  (Contributed by Vinay Sajip in "
":issue:`15452`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1101
msgid "marshal"
msgstr ""

#: ../../whatsnew/3.4.rst:1103
msgid ""
"The default :mod:`marshal` version has been bumped to 3.  The code "
"implementing the new version restores the Python2 behavior of recording "
"only one copy of interned strings and preserving the interning on "
"deserialization, and extends this \"one copy\" ability to any object type"
" (including handling recursive references).  This reduces both the size "
"of ``.pyc`` files and the amount of memory a module occupies in memory "
"when it is loaded from a ``.pyc`` (or ``.pyo``) file.  (Contributed by "
"Kristj√°n Valur J√≥nsson in :issue:`16475`, with additional speedups by "
"Antoine Pitrou in :issue:`19219`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1116
msgid ""
"mmap objects can now be :mod:`weakref`\\ ed.  (Contributed by Valerie "
"Lambert in :issue:`4885`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1125
msgid ""
"On Unix two new :ref:`start methods <multiprocessing-start-methods>`, "
"``spawn`` and ``forkserver``, have been added for starting processes "
"using :mod:`multiprocessing`.  These make the mixing of processes with "
"threads more robust, and the ``spawn`` method matches the semantics that "
"multiprocessing has always used on Windows.  New function "
":func:`~multiprocessing.get_all_start_methods` reports all start methods "
"available on the platform, :func:`~multiprocessing.get_start_method` "
"reports the current start method, and "
":func:`~multiprocessing.set_start_method` sets the start method.  "
"(Contributed by Richard Oudkerk in :issue:`8713`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1135
msgid ""
":mod:`multiprocessing` also now has the concept of a ``context``, which "
"determines how child processes are created.  New function "
":func:`~multiprocessing.get_context` returns a context that uses a "
"specified start method.  It has the same API as the "
":mod:`multiprocessing` module itself, so you can use it to create "
":class:`~multiprocessing.pool.Pool`\\ s and other objects that will "
"operate within that context.  This allows a framework and an application "
"or different parts of the same application to use multiprocessing without"
" interfering with each other.  (Contributed by Richard Oudkerk in "
":issue:`18999`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1145
msgid ""
"Except when using the old *fork* start method, child processes no longer "
"inherit unneeded handles/file descriptors from their parents (part of "
":issue:`8713`)."
msgstr ""

#: ../../whatsnew/3.4.rst:1149
msgid ""
":mod:`multiprocessing` now relies on :mod:`runpy` (which implements the "
"``-m`` switch) to initialise ``__main__`` appropriately in child "
"processes when using the ``spawn`` or ``forkserver`` start methods. This "
"resolves some edge cases where combining multiprocessing, the ``-m`` "
"command line switch, and explicit relative imports could cause obscure "
"failures in child processes.  (Contributed by Nick Coghlan in "
":issue:`19946`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1158 ../../whatsnew/3.5.rst:1468
msgid "operator"
msgstr ""

#: ../../whatsnew/3.4.rst:1160
msgid ""
"New function :func:`~operator.length_hint` provides an implementation of "
"the specification for how the :meth:`~object.__length_hint__` special "
"method should be used, as part of the :pep:`424` formal specification of "
"this language feature.  (Contributed by Armin Ronacher in "
":issue:`16148`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1165
msgid ""
"There is now a pure-python version of the :mod:`operator` module "
"available for reference and for use by alternate implementations of "
"Python.  (Contributed by Zachary Ware in :issue:`16694`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1173
msgid ""
"There are new functions to get and set the :ref:`inheritable flag "
"<fd_inheritance>` of a file descriptor (:func:`os.get_inheritable`, "
":func:`os.set_inheritable`) or a Windows handle "
"(:func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`)."
msgstr ""

#: ../../whatsnew/3.4.rst:1178
msgid ""
"New function :func:`~os.cpu_count` reports the number of CPUs available "
"on the platform on which Python is running (or ``None`` if the count "
"can't be determined).  The :func:`multiprocessing.cpu_count` function is "
"now implemented in terms of this function).  (Contributed by Trent "
"Nelson, Yogesh Chaudhari, Victor Stinner, and Charles-Fran√ßois Natali in "
":issue:`17914`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1184
msgid ""
":func:`os.path.samestat` is now available on the Windows platform (and "
"the :func:`os.path.samefile` implementation is now shared between Unix "
"and Windows).  (Contributed by Brian Curtin in :issue:`11939`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1188
msgid ""
":func:`os.path.ismount` now recognizes volumes mounted below a drive root"
" on Windows.  (Contributed by Tim Golden in :issue:`9035`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1191
msgid ""
":func:`os.open` supports two new flags on platforms that provide them, "
":data:`~os.O_PATH` (un-opened file descriptor), and :data:`~os.O_TMPFILE`"
" (unnamed temporary file; as of 3.4.0 release available only on Linux "
"systems with a kernel version of 3.11 or newer that have uapi headers).  "
"(Contributed by Christian Heimes in :issue:`18673` and Benjamin Peterson,"
" respectively.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1201
msgid ""
":mod:`pdb` has been enhanced to handle generators, :keyword:`yield`, and "
"``yield from`` in a more useful fashion.  This is especially helpful when"
" debugging :mod:`asyncio` based programs.  (Contributed by Andrew Svetlov"
" and Xavier de Gaye in :issue:`16596`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1206
msgid ""
"The ``print`` command has been removed from :mod:`pdb`, restoring access "
"to the Python :func:`print` function from the pdb command line.  "
"Python2's ``pdb`` did not have a ``print`` command; instead, entering "
"``print`` executed the ``print`` statement.  In Python3 ``print`` was "
"mistakenly made an alias for the pdb :pdbcmd:`p` command.  ``p``, "
"however, prints the ``repr`` of its argument, not the ``str`` like the "
"Python2 ``print`` command did.  Worse, the Python3 ``pdb print`` command "
"shadowed the Python3 ``print`` function, making it inaccessible at the "
"``pdb`` prompt.  (Contributed by Connor Osborn in :issue:`18764`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1222
msgid ""
":mod:`pickle` now supports (but does not use by default) a new pickle "
"protocol, protocol 4.  This new protocol addresses a number of issues "
"that were present in previous protocols, such as the serialization of "
"nested classes, very large strings and containers, and classes whose "
":meth:`__new__` method takes keyword-only arguments.  It also provides "
"some efficiency improvements."
msgstr ""

#: ../../whatsnew/3.4.rst:1230
msgid ":pep:`3154` -- Pickle protocol 4"
msgstr ""

#: ../../whatsnew/3.4.rst:1231
msgid "PEP written by Antoine Pitrou and implemented by Alexandre Vassalotti."
msgstr ""

#: ../../whatsnew/3.4.rst:1235 ../../whatsnew/3.8.rst:1103
msgid "plistlib"
msgstr ""

#: ../../whatsnew/3.4.rst:1237
msgid ""
":mod:`plistlib` now has an API that is similar to the standard pattern "
"for stdlib serialization protocols, with new :func:`~plistlib.load`, "
":func:`~plistlib.dump`, :func:`~plistlib.loads`, and "
":func:`~plistlib.dumps` functions.  (The older API is now deprecated.)  "
"In addition to the already supported XML plist format "
"(:data:`~plistlib.FMT_XML`), it also now supports the binary plist format"
" (:data:`~plistlib.FMT_BINARY`).  (Contributed by Ronald Oussoren and "
"others in :issue:`14455`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1249
msgid ""
"Two new methods have been added to :mod:`poplib`: "
":meth:`~poplib.POP3.capa`, which returns the list of capabilities "
"advertised by the POP server, and :meth:`~poplib.POP3.stls`, which "
"switches a clear-text POP3 session into an encrypted POP3 session if the "
"POP server supports it.  (Contributed by Lorenzo Catucci in "
":issue:`4473`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1257 ../../whatsnew/3.8.rst:1111
msgid "pprint"
msgstr ""

#: ../../whatsnew/3.4.rst:1259
msgid ""
"The :mod:`pprint` module's :class:`~pprint.PrettyPrinter` class and its "
":func:`~pprint.pformat`, and :func:`~pprint.pprint` functions have a new "
"option, *compact*, that controls how the output is formatted.  Currently "
"setting *compact* to ``True`` means that sequences will be printed with "
"as many sequence elements as will fit within *width* on each (indented) "
"line. (Contributed by Serhiy Storchaka in :issue:`19132`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1266
msgid ""
"Long strings are now wrapped using Python's normal line continuation "
"syntax.  (Contributed by Antoine Pitrou in :issue:`17150`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1271
msgid "pty"
msgstr ""

#: ../../whatsnew/3.4.rst:1273
msgid ""
":func:`pty.spawn` now returns the status value from :func:`os.waitpid` on"
" the child process, instead of ``None``.  (Contributed by Gregory P. "
"Smith.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1280
msgid ""
"The :mod:`pydoc` module is now based directly on the "
":func:`inspect.signature` introspection API, allowing it to provide "
"signature information for a wider variety of callable objects. This "
"change also means that ``__wrapped__`` attributes are now taken into "
"account when displaying help information. (Contributed by Larry Hastings "
"in :issue:`19674`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1286
msgid ""
"The :mod:`pydoc` module no longer displays the ``self`` parameter for "
"already bound methods. Instead, it aims to always display the exact "
"current signature of the supplied callable.  (Contributed by Larry "
"Hastings in :issue:`20710`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1291
msgid ""
"In addition to the changes that have been made to :mod:`pydoc` directly, "
"its handling of custom ``__dir__`` methods and various descriptor "
"behaviours has also been improved substantially by the underlying changes"
" in the :mod:`inspect` module."
msgstr ""

#: ../../whatsnew/3.4.rst:1296
msgid ""
"As the :func:`help` builtin is based on :mod:`pydoc`, the above changes "
"also affect the behaviour of :func:`help`."
msgstr ""

#: ../../whatsnew/3.4.rst:1303
msgid ""
"New :func:`~re.fullmatch` function and :meth:`.regex.fullmatch` method "
"anchor the pattern at both ends of the string to match.  This provides a "
"way to be explicit about the goal of the match, which avoids a class of "
"subtle bugs where ``$`` characters get lost during code changes or the "
"addition of alternatives to an existing regular expression.  (Contributed"
" by Matthew Barnett in :issue:`16203`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1310
msgid ""
"The repr of :ref:`regex objects <re-objects>` now includes the pattern "
"and the flags; the repr of :ref:`match objects <match-objects>` now "
"includes the start, end, and the part of the string that matched.  "
"(Contributed by Hugo Lopes Tavares and Serhiy Storchaka in :issue:`13592`"
" and :issue:`17087`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1318
msgid "resource"
msgstr ""

#: ../../whatsnew/3.4.rst:1320
msgid ""
"New :func:`~resource.prlimit` function, available on Linux platforms with"
" a kernel version of 2.6.36 or later and glibc of 2.13 or later, provides"
" the ability to query or set the resource limits for processes other than"
" the one making the call.  (Contributed by Christian Heimes in "
":issue:`16595`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1325
msgid ""
"On Linux kernel version 2.6.36 or later, there are also some new Linux "
"specific constants: :attr:`~resource.RLIMIT_MSGQUEUE`, "
":attr:`~resource.RLIMIT_NICE`, :attr:`~resource.RLIMIT_RTPRIO`, "
":attr:`~resource.RLIMIT_RTTIME`, and :attr:`~resource.RLIMIT_SIGPENDING`."
" (Contributed by Christian Heimes in :issue:`19324`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1331
msgid ""
"On FreeBSD version 9 and later, there some new FreeBSD specific "
"constants: :attr:`~resource.RLIMIT_SBSIZE`, "
":attr:`~resource.RLIMIT_SWAP`, and :attr:`~resource.RLIMIT_NPTS`.  "
"(Contributed by Claudiu Popa in :issue:`19343`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1340
msgid ""
":class:`~select.epoll` objects now support the context management "
"protocol. When used in a :keyword:`with` statement, the "
":meth:`~select.epoll.close` method will be called automatically at the "
"end of the block.  (Contributed by Serhiy Storchaka in :issue:`16488`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1345
msgid ""
":class:`~select.devpoll` objects now have :meth:`~select.devpoll.fileno` "
"and :meth:`~select.devpoll.close` methods, as well as a new attribute "
":attr:`~select.devpoll.closed`.  (Contributed by Victor Stinner in "
":issue:`18794`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1352
msgid "shelve"
msgstr ""

#: ../../whatsnew/3.4.rst:1354
msgid ""
":class:`~shelve.Shelf` instances may now be used in :keyword:`with` "
"statements, and will be automatically closed at the end of the "
":keyword:`!with` block. (Contributed by Filip Gruszczy≈Ñski in "
":issue:`13896`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1362
msgid ""
":func:`~shutil.copyfile` now raises a specific :exc:`~shutil.Error` "
"subclass, :exc:`~shutil.SameFileError`, when the source and destination "
"are the same file, which allows an application to take appropriate action"
" on this specific error.  (Contributed by Atsuo Ishimoto and Hynek "
"Schlawack in :issue:`1492704`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1372
msgid ""
"The :class:`~smtpd.SMTPServer` and :class:`~smtpd.SMTPChannel` classes "
"now accept a *map* keyword argument which, if specified, is passed in to "
":class:`asynchat.async_chat` as its *map* argument.  This allows an "
"application to avoid affecting the global socket map.  (Contributed by "
"Vinay Sajip in :issue:`11959`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1382
msgid ""
":exc:`~smtplib.SMTPException` is now a subclass of :exc:`OSError`, which "
"allows both socket level errors and SMTP protocol level errors to be "
"caught in one try/except statement by code that only cares whether or not"
" an error occurred. (Contributed by Ned Jackson Lovely in :issue:`2118`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1391
msgid ""
"The socket module now supports the :data:`~socket.CAN_BCM` protocol on "
"platforms that support it.  (Contributed by Brian Thorne in "
":issue:`15359`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1394
msgid ""
"Socket objects have new methods to get or set their :ref:`inheritable "
"flag <fd_inheritance>`, :meth:`~socket.socket.get_inheritable` and "
":meth:`~socket.socket.set_inheritable`."
msgstr ""

#: ../../whatsnew/3.4.rst:1398
msgid ""
"The ``socket.AF_*`` and ``socket.SOCK_*`` constants are now enumeration "
"values using the new :mod:`enum` module.  This allows meaningful names to"
" be printed during debugging, instead of integer \"magic numbers\"."
msgstr ""

#: ../../whatsnew/3.4.rst:1402
msgid "The :data:`~socket.AF_LINK` constant is now available on BSD and OSX."
msgstr ""

#: ../../whatsnew/3.4.rst:1404
msgid ""
":func:`~socket.inet_pton` and :func:`~socket.inet_ntop` are now supported"
" on Windows.  (Contributed by Atsuo Ishimoto in :issue:`7171`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1411
msgid ""
"A new boolean parameter to the :func:`~sqlite3.connect` function, *uri*, "
"can be used to indicate that the *database* parameter is a ``uri`` (see "
"the `SQLite URI documentation <https://www.sqlite.org/uri.html>`_).  "
"(Contributed by poq in :issue:`13773`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1422
msgid ""
":data:`~ssl.PROTOCOL_TLSv1_1` and :data:`~ssl.PROTOCOL_TLSv1_2` (TLSv1.1 "
"and TLSv1.2 support) have been added; support for these protocols is only"
" available if Python is linked with OpenSSL 1.0.1 or later.  (Contributed"
" by Michele Orr√π and Antoine Pitrou in :issue:`16692`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1429
msgid ""
"New function :func:`~ssl.create_default_context` provides a standard way "
"to obtain an :class:`~ssl.SSLContext` whose settings are intended to be a"
" reasonable balance between compatibility and security.  These settings "
"are more stringent than the defaults provided by the "
":class:`~ssl.SSLContext` constructor, and may be adjusted in the future, "
"without prior deprecation, if best-practice security requirements change."
"  The new recommended best practice for using stdlib libraries that "
"support SSL is to use :func:`~ssl.create_default_context` to obtain an "
":class:`~ssl.SSLContext` object, modify it if needed, and then pass it as"
" the *context* argument of the appropriate stdlib API.  (Contributed by "
"Christian Heimes in :issue:`19689`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1441
msgid ""
":class:`~ssl.SSLContext` method "
":meth:`~ssl.SSLContext.load_verify_locations` accepts a new optional "
"argument *cadata*, which can be used to provide PEM or DER encoded "
"certificates directly via strings or bytes, respectively. (Contributed by"
" Christian Heimes in :issue:`18138`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1446
msgid ""
"New function :func:`~ssl.get_default_verify_paths` returns a named tuple "
"of the paths and environment variables that the "
":meth:`~ssl.SSLContext.set_default_verify_paths` method uses to set "
"OpenSSL's default ``cafile`` and ``capath``.  This can be an aid in "
"debugging default verification issues.  (Contributed by Christian Heimes "
"in :issue:`18143`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1453
msgid ""
":class:`~ssl.SSLContext` has a new method, "
":meth:`~ssl.SSLContext.cert_store_stats`, that reports the number of "
"loaded ``X.509`` certs, ``X.509 CA`` certs, and certificate revocation "
"lists (``crl``\\ s), as well as a :meth:`~ssl.SSLContext.get_ca_certs` "
"method that returns a list of the loaded ``CA`` certificates.  "
"(Contributed by Christian Heimes in :issue:`18147`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1460
msgid ""
"If OpenSSL 0.9.8 or later is available, :class:`~ssl.SSLContext` has a "
"new attribute :attr:`~ssl.SSLContext.verify_flags` that can be used to "
"control the certificate verification process by setting it to some "
"combination of the new constants :data:`~ssl.VERIFY_DEFAULT`, "
":data:`~ssl.VERIFY_CRL_CHECK_LEAF`, :data:`~ssl.VERIFY_CRL_CHECK_CHAIN`, "
"or :data:`~ssl.VERIFY_X509_STRICT`. OpenSSL does not do any CRL "
"verification by default.  (Contributed by Christien Heimes in "
":issue:`8813`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1468
msgid ""
"New :class:`~ssl.SSLContext` method "
":meth:`~ssl.SSLContext.load_default_certs` loads a set of default "
"\"certificate authority\" (CA) certificates from default locations, which"
" vary according to the platform.  It can be used to load both TLS web "
"server authentication certificates "
"(``purpose=``:data:`~ssl.Purpose.SERVER_AUTH`) for a client to use to "
"verify a server, and certificates for a server to use in verifying client"
" certificates (``purpose=``:data:`~ssl.Purpose.CLIENT_AUTH`).  "
"(Contributed by Christian Heimes in :issue:`19292`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1479
msgid ""
"Two new windows-only functions, :func:`~ssl.enum_certificates` and "
":func:`~ssl.enum_crls` provide the ability to retrieve certificates, "
"certificate information, and CRLs from the Windows cert store.  "
"(Contributed by Christian Heimes in :issue:`17134`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1486
msgid ""
"Support for server-side SNI (Server Name Indication) using the new "
":meth:`ssl.SSLContext.set_servername_callback` method. (Contributed by "
"Daniel Black in :issue:`8109`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1490
msgid ""
"The dictionary returned by :meth:`.SSLSocket.getpeercert` contains "
"additional ``X509v3`` extension items: ``crlDistributionPoints``, "
"``calIssuers``, and ``OCSP`` URIs.  (Contributed by Christian Heimes in "
":issue:`18379`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1498
msgid ""
"The :mod:`stat` module is now backed by a C implementation in "
":mod:`_stat`. A C implementation is required as most of the values aren't"
" standardized and are platform-dependent.  (Contributed by Christian "
"Heimes in :issue:`11016`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1502
msgid ""
"The module supports new :mod:`~stat.ST_MODE` flags, "
":mod:`~stat.S_IFDOOR`, :attr:`~stat.S_IFPORT`, and :attr:`~stat.S_IFWHT`."
"  (Contributed by Christian Hiemes in :issue:`11016`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1510
msgid ""
"New function :mod:`~struct.iter_unpack` and a new "
":meth:`struct.Struct.iter_unpack` method on compiled formats provide "
"streamed unpacking of a buffer containing repeated instances of a given "
"format of data. (Contributed by Antoine Pitrou in :issue:`17804`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1519
msgid ""
":func:`~subprocess.check_output` now accepts an *input* argument that can"
" be used to provide the contents of ``stdin`` for the command that is "
"run. (Contributed by Zack Weinberg in :issue:`16624`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1523
msgid ""
":func:`~subprocess.getstatus` and :func:`~subprocess.getstatusoutput` now"
" work on Windows.  This change was actually inadvertently made in 3.3.4. "
"(Contributed by Tim Golden in :issue:`10197`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1529 ../../whatsnew/3.7.rst:2061
msgid "sunau"
msgstr ""

#: ../../whatsnew/3.4.rst:1531
msgid ""
"The :meth:`~sunau.getparams` method now returns a namedtuple rather than "
"a plain tuple.  (Contributed by Claudiu Popa in :issue:`18901`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1534
msgid ""
":meth:`sunau.open` now supports the context management protocol: when "
"used in a :keyword:`with` block, the ``close`` method of the returned "
"object will be called automatically at the end of the block.  "
"(Contributed by Serhiy Storchaka in :issue:`18878`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1539
msgid ""
":meth:`.AU_write.setsampwidth` now supports 24 bit samples, thus adding "
"support for writing 24 sample using the module.  (Contributed by Serhiy "
"Storchaka in :issue:`19261`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1543
msgid ""
"The :meth:`~sunau.AU_write.writeframesraw` and "
":meth:`~sunau.AU_write.writeframes` methods now accept any :term:`bytes-"
"like object`.  (Contributed by Serhiy Storchaka in :issue:`8311`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1551
msgid ""
"New function :func:`sys.getallocatedblocks` returns the current number of"
" blocks allocated by the interpreter.  (In CPython with the default "
"``--with-pymalloc`` setting, this is allocations made through the "
":c:func:`PyObject_Malloc` API.)  This can be useful for tracking memory "
"leaks, especially if automated via a test suite.  (Contributed by Antoine"
" Pitrou in :issue:`13390`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1558
msgid ""
"When the Python interpreter starts in :ref:`interactive mode <tut-"
"interactive>`, it checks for an :data:`~sys.__interactivehook__` "
"attribute on the :mod:`sys` module.  If the attribute exists, its value "
"is called with no arguments just before interactive mode is started.  The"
" check is made after the :envvar:`PYTHONSTARTUP` file is read, so it can "
"be set there.  The :mod:`site` module :ref:`sets it <rlcompleter-config>`"
" to a function that enables tab completion and history saving (in :file"
":`~/.python-history`) if the platform supports :mod:`readline`.  If you "
"do not want this (new) behavior, you can override it in "
":envvar:`PYTHONSTARTUP`, :mod:`sitecustomize`, or :mod:`usercustomize` by"
" deleting this attribute from :mod:`sys` (or setting it to some other "
"callable).  (Contributed by √âric Araujo and Antoine Pitrou in "
":issue:`5845`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1575
msgid ""
"The :mod:`tarfile` module now supports a simple :ref:`tarfile-"
"commandline` when called as a script directly or via ``-m``.  This can be"
" used to create and extract tarfile archives.  (Contributed by Berker "
"Peksag in :issue:`13477`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1583
msgid ""
"The :class:`~textwrap.TextWrapper` class has two new "
"attributes/constructor arguments: "
":attr:`~textwrap.TextWrapper.max_lines`, which limits the number of lines"
" in the output, and :attr:`~textwrap.TextWrapper.placeholder`, which is a"
" string that will appear at the end of the output if it has been "
"truncated because of *max_lines*.  Building on these capabilities, a new "
"convenience function :func:`~textwrap.shorten` collapses all of the "
"whitespace in the input to single spaces and produces a single line of a "
"given *width* that ends with the *placeholder* (by default, ``[...]``).  "
"(Contributed by Antoine Pitrou and Serhiy Storchaka in :issue:`18585` and"
" :issue:`18725`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1597
msgid ""
"The :class:`~threading.Thread` object representing the main thread can be"
" obtained from the new :func:`~threading.main_thread` function.  In "
"normal conditions this will be the thread from which the Python "
"interpreter was started.  (Contributed by Andrew Svetlov in "
":issue:`18882`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1604 ../../whatsnew/3.5.rst:1947
#: ../../whatsnew/3.6.rst:1563
msgid "traceback"
msgstr ""

#: ../../whatsnew/3.4.rst:1606
msgid ""
"A new :func:`traceback.clear_frames` function takes a traceback object "
"and clears the local variables in all of the frames it references, "
"reducing the amount of memory consumed.  (Contributed by Andrew Kuchling "
"in :issue:`1565525`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1615
msgid ""
"A new :func:`~types.DynamicClassAttribute` descriptor provides a way to "
"define an attribute that acts normally when looked up through an instance"
" object, but which is routed to the *class* ``__getattr__`` when looked "
"up through the class.  This allows one to have properties active on a "
"class, and have virtual attributes on the class with the same name (see "
":mod:`Enum` for an example). (Contributed by Ethan Furman in "
":issue:`19030`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1626
msgid ""
":mod:`urllib.request` now supports ``data:`` URLs via the "
":class:`~urllib.request.DataHandler` class.  (Contributed by Mathias "
"Panzenb√∂ck in :issue:`16423`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1630
msgid ""
"The http method that will be used by a :class:`~urllib.request.Request` "
"class can now be specified by setting a "
":class:`~urllib.request.Request.method` class attribute on the subclass."
"  (Contributed by Jason R Coombs in :issue:`18978`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1635
msgid ""
":class:`~urllib.request.Request` objects are now reusable: if the "
":attr:`~urllib.request.Request.full_url` or "
":attr:`~urllib.request.Request.data` attributes are modified, all "
"relevant internal properties are updated.  This means, for example, that "
"it is now possible to use the same :class:`~urllib.request.Request` "
"object in more than one :meth:`.OpenerDirector.open` call with different "
"*data* arguments, or to modify a :class:`~urllib.request.Request`\\ 's "
"``url`` rather than recomputing it from scratch.  There is also a new "
":meth:`~urllib.request.Request.remove_header` method that can be used to "
"remove headers from a :class:`~urllib.request.Request`.  (Contributed by "
"Alexey Kachayev in :issue:`16464`, Daniel Wozniak in :issue:`17485`, and "
"Damien Brecht and Senthil Kumaran in :issue:`17272`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1648
msgid ""
":class:`~urllib.error.HTTPError` objects now have a "
":attr:`~urllib.error.HTTPError.headers` attribute that provides access to"
" the HTTP response headers associated with the error.  (Contributed by "
"Berker Peksag in :issue:`15701`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1657
msgid ""
"The :class:`~unittest.TestCase` class has a new method, "
":meth:`~unittest.TestCase.subTest`, that produces a context manager whose"
" :keyword:`with` block becomes a \"sub-test\".  This context manager "
"allows a test method to dynamically generate subtests  by, say, calling "
"the ``subTest`` context manager inside a loop.  A single test method can "
"thereby produce an indefinite number of separately-identified and "
"separately-counted tests, all of which will run even if one or more of "
"them fail.  For example::"
msgstr ""

#: ../../whatsnew/3.4.rst:1671
msgid ""
"will result in six subtests, each identified in the unittest verbose "
"output with a label consisting of the variable name ``i`` and a "
"particular value for that variable (``i=0``, ``i=1``, etc).  See "
":ref:`subtests` for the full version of this example.  (Contributed by "
"Antoine Pitrou in :issue:`16997`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1676
msgid ""
":func:`unittest.main` now accepts an iterable of test names for "
"*defaultTest*, where previously it only accepted a single test name as a "
"string.  (Contributed by Jyrki Pulliainen in :issue:`15132`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1680
msgid ""
"If :class:`~unittest.SkipTest` is raised during test discovery (that is, "
"at the module level in the test file), it is now reported as a skip "
"instead of an error.  (Contributed by Zach Ware in :issue:`16935`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1684
msgid ""
":meth:`~unittest.TestLoader.discover` now sorts the discovered files to "
"provide consistent test ordering.  (Contributed by Martin Melin and Jeff "
"Ramnani in :issue:`16709`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1688
msgid ""
":class:`~unittest.TestSuite` now drops references to tests as soon as the"
" test has been run, if the test is successful.  On Python interpreters "
"that do garbage collection, this allows the tests to be garbage collected"
" if nothing else is holding a reference to the test.  It is possible to "
"override this behavior by creating a :class:`~unittest.TestSuite` "
"subclass that defines a custom ``_removeTestAtIndex`` method.  "
"(Contributed by Tom Wardill, Matt McClure, and Andrew Svetlov in "
":issue:`11798`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1696
msgid ""
"A new test assertion context-manager, "
":meth:`~unittest.TestCase.assertLogs`, will ensure that a given block of "
"code emits a log message using the :mod:`logging` module.  By default the"
" message can come from any logger and have a priority of ``INFO`` or "
"higher, but both the logger name and an alternative minimum logging level"
" may be specified.  The object returned by the context manager can be "
"queried for the :class:`~logging.LogRecord`\\ s and/or formatted messages"
" that were logged.  (Contributed by Antoine Pitrou in :issue:`18937`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1705
msgid ""
"Test discovery now works with namespace packages (Contributed by Claudiu "
"Popa in :issue:`17457`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1708
msgid ""
":mod:`unittest.mock` objects now inspect their specification signatures "
"when matching calls, which means an argument can now be matched by either"
" position or name, instead of only by position.  (Contributed by Antoine "
"Pitrou in :issue:`17015`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1713
msgid ""
":func:`~mock.mock_open` objects now have ``readline`` and ``readlines`` "
"methods.  (Contributed by Toshio Kuratomi in :issue:`17467`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1718 ../../whatsnew/3.6.rst:1687
#: ../../whatsnew/3.6.rst:2056 ../../whatsnew/3.8.rst:1402
msgid "venv"
msgstr ""

#: ../../whatsnew/3.4.rst:1720
msgid ""
":mod:`venv` now includes activation scripts for the ``csh`` and ``fish`` "
"shells.  (Contributed by Andrew Svetlov in :issue:`15417`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1723
msgid ""
":class:`~venv.EnvBuilder` and the :func:`~venv.create` convenience "
"function take a new keyword argument *with_pip*, which defaults to "
"``False``, that controls whether or not :class:`~venv.EnvBuilder` ensures"
" that ``pip`` is installed in the virtual environment.  (Contributed by "
"Nick Coghlan in :issue:`19552` as part of the :pep:`453` implementation.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1731 ../../whatsnew/3.7.rst:2080
msgid "wave"
msgstr ""

#: ../../whatsnew/3.4.rst:1733
msgid ""
"The :meth:`~wave.getparams` method now returns a namedtuple rather than a"
" plain tuple.  (Contributed by Claudiu Popa in :issue:`17487`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1736
msgid ""
":meth:`wave.open` now supports the context management protocol.  "
"(Contributed by Claudiu Popa in :issue:`17616`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1739
msgid ""
":mod:`wave` can now :ref:`write output to unseekable files <wave-write-"
"objects>`.  (Contributed by David Jones, Guilherme Polo, and Serhiy "
"Storchaka in :issue:`5202`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1743
msgid ""
"The :meth:`~wave.Wave_write.writeframesraw` and "
":meth:`~wave.Wave_write.writeframes` methods now accept any :term:`bytes-"
"like object`.  (Contributed by Serhiy Storchaka in :issue:`8311`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1749 ../../whatsnew/3.8.rst:1410
msgid "weakref"
msgstr ""

#: ../../whatsnew/3.4.rst:1751
msgid ""
"New :class:`~weakref.WeakMethod` class simulates weak references to bound"
" methods.  (Contributed by Antoine Pitrou in :issue:`14631`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1754
msgid ""
"New :class:`~weakref.finalize` class makes it possible to register a "
"callback to be invoked when an object is garbage collected, without "
"needing to carefully manage the lifecycle of the weak reference itself.  "
"(Contributed by Richard Oudkerk in :issue:`15528`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1759
msgid ""
"The callback, if any, associated with a :class:`~weakref.ref` is now "
"exposed via the :attr:`~weakref.ref.__callback__` attribute.  "
"(Contributed by Mark Dickinson in :issue:`17643`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1765 ../../whatsnew/3.7.rst:1602
msgid "xml.etree"
msgstr ""

#: ../../whatsnew/3.4.rst:1767
msgid ""
"A new parser, :class:`~xml.etree.ElementTree.XMLPullParser`, allows a "
"non-blocking applications to parse XML documents.  An example can be seen"
" at :ref:`elementtree-pull-parsing`.  (Contributed by Antoine Pitrou in "
":issue:`17741`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1772
msgid ""
"The :mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree.tostring` "
"and :func:`~xml.etree.ElementTree.tostringlist` functions, and the "
":class:`~xml.etree.ElementTree.ElementTree` "
":meth:`~xml.etree.ElementTree.ElementTree.write` method, now have a "
"*short_empty_elements* :ref:`keyword-only parameter <keyword-"
"only_parameter>` providing control over whether elements with no content "
"are written in abbreviated (``<tag />``) or expanded (``<tag></tag>``) "
"form.  (Contributed by Ariel Poliak and Serhiy Storchaka in "
":issue:`14377`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1783 ../../whatsnew/3.5.rst:2085
#: ../../whatsnew/3.6.rst:1756 ../../whatsnew/3.7.rst:1632
msgid "zipfile"
msgstr ""

#: ../../whatsnew/3.4.rst:1785
msgid ""
"The :meth:`~zipfile.PyZipFile.writepy` method of the "
":class:`~zipfile.PyZipFile` class has a new *filterfunc* option that can "
"be used to control which directories and files are added to the archive."
"  For example, this could be used to exclude test files from the archive."
" (Contributed by Christian Tismer in :issue:`19274`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1791
msgid ""
"The *allowZip64* parameter to :class:`~zipfile.ZipFile` and "
":class:`~zipfile.PyZipfile` is now ``True`` by default.  (Contributed by "
"William Mallard in :issue:`17201`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1798
msgid "CPython Implementation Changes"
msgstr ""

#: ../../whatsnew/3.4.rst:1804
msgid "PEP 445: Customization of CPython Memory Allocators"
msgstr ""

#: ../../whatsnew/3.4.rst:1806
msgid ""
":pep:`445` adds new C level interfaces to customize memory allocation in "
"the CPython interpreter."
msgstr ""

#: ../../whatsnew/3.4.rst:1811
msgid ":pep:`445` -- Add new APIs to customize Python memory allocators"
msgstr ""

#: ../../whatsnew/3.4.rst:1818
msgid "PEP 442: Safe Object Finalization"
msgstr ""

#: ../../whatsnew/3.4.rst:1820
msgid ""
":pep:`442` removes the current limitations and quirks of object "
"finalization in CPython. With it, objects with :meth:`__del__` methods, "
"as well as generators with :keyword:`finally` clauses, can be finalized "
"when they are part of a reference cycle."
msgstr ""

#: ../../whatsnew/3.4.rst:1825
msgid ""
"As part of this change, module globals are no longer forcibly set to "
":const:`None` during interpreter shutdown in most cases, instead relying "
"on the normal operation of the cyclic garbage collector.  This avoids a "
"whole class of interpreter-shutdown-time errors, usually involving "
"``__del__`` methods, that have plagued Python since the cyclic GC was "
"first introduced."
msgstr ""

#: ../../whatsnew/3.4.rst:1834
msgid ":pep:`442` -- Safe object finalization"
msgstr ""

#: ../../whatsnew/3.4.rst:1841
msgid "PEP 456: Secure and Interchangeable Hash Algorithm"
msgstr ""

#: ../../whatsnew/3.4.rst:1843
msgid ""
":pep:`456` follows up on earlier security fix work done on Python's hash "
"algorithm to address certain DOS attacks to which public facing APIs "
"backed by dictionary lookups may be subject.  (See :issue:`14621` for the"
" start of the current round of improvements.)  The PEP unifies CPython's "
"hash code to make it easier for a packager to substitute a different hash"
" algorithm, and switches Python's default implementation to a SipHash "
"implementation on platforms that have a 64 bit data type.  Any "
"performance differences in comparison with the older FNV algorithm are "
"trivial."
msgstr ""

#: ../../whatsnew/3.4.rst:1852
msgid ""
"The PEP adds additional fields to the :attr:`sys.hash_info` named tuple "
"to describe the hash algorithm in use by the currently executing binary."
"  Otherwise, the PEP does not alter any existing CPython APIs."
msgstr ""

#: ../../whatsnew/3.4.rst:1860
msgid "PEP 436: Argument Clinic"
msgstr ""

#: ../../whatsnew/3.4.rst:1862
msgid ""
"\"Argument Clinic\" (:pep:`436`) is now part of the CPython build process"
" and can be used to simplify the process of defining and maintaining "
"accurate signatures for builtins and standard library extension modules "
"implemented in C."
msgstr ""

#: ../../whatsnew/3.4.rst:1867
msgid ""
"Some standard library extension modules have been converted to use "
"Argument Clinic in Python 3.4, and :mod:`pydoc` and :mod:`inspect` have "
"been updated accordingly."
msgstr ""

#: ../../whatsnew/3.4.rst:1871
msgid ""
"It is expected that signature metadata for programmatic introspection "
"will be added to additional callables implemented in C as part of Python "
"3.4 maintenance releases."
msgstr ""

#: ../../whatsnew/3.4.rst:1876
msgid ""
"The Argument Clinic PEP is not fully up to date with the state of the "
"implementation. This has been deemed acceptable by the release manager "
"and core development team in this case, as Argument Clinic will not be "
"made available as a public API for third party use in Python 3.4."
msgstr ""

#: ../../whatsnew/3.4.rst:1883
msgid ":pep:`436` -- The Argument Clinic DSL"
msgstr ""

#: ../../whatsnew/3.4.rst:1884
msgid "PEP written and implemented by Larry Hastings."
msgstr ""

#: ../../whatsnew/3.4.rst:1888
msgid "Other Build and C API Changes"
msgstr ""

#: ../../whatsnew/3.4.rst:1890
msgid ""
"The new :c:func:`PyType_GetSlot` function has been added to the stable "
"ABI, allowing retrieval of function pointers from named type slots when "
"using the limited API.  (Contributed by Martin von L√∂wis in "
":issue:`17162`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1894
msgid ""
"The new :c:func:`Py_SetStandardStreamEncoding` pre-initialization API "
"allows applications embedding the CPython interpreter to reliably force a"
" particular encoding and error handler for the standard streams. "
"(Contributed by Bastien Montagne and Nick Coghlan in :issue:`16129`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1899
msgid ""
"Most Python C APIs that don't mutate string arguments are now correctly "
"marked as accepting ``const char *`` rather than ``char *``.  "
"(Contributed by Serhiy Storchaka in :issue:`1772673`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1903
msgid ""
"A new shell version of ``python-config`` can be used even when a python "
"interpreter is not available (for example, in cross compilation "
"scenarios)."
msgstr ""

#: ../../whatsnew/3.4.rst:1906
#, python-format
msgid ""
":c:func:`PyUnicode_FromFormat` now supports width and precision "
"specifications for ``%s``, ``%A``, ``%U``, ``%V``, ``%S``, and ``%R``. "
"(Contributed by Ysj Ray and Victor Stinner in :issue:`7330`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1910
msgid ""
"New function :c:func:`PyStructSequence_InitType2` supplements the "
"existing :c:func:`PyStructSequence_InitType` function.  The difference is"
" that it returns ``0`` on success and ``-1`` on failure."
msgstr ""

#: ../../whatsnew/3.4.rst:1914
msgid ""
"The CPython source can now be compiled using the address sanity checking "
"features of recent versions of GCC and clang:  the false alarms in the "
"small object allocator have been silenced.  (Contributed by Dhiru Kholia "
"in :issue:`18596`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1919
msgid ""
"The Windows build now uses `Address Space Layout Randomization "
"<https://en.wikipedia.org/wiki/Address_space_layout_randomization>`_ and "
"`Data Execution Prevention "
"<https://en.wikipedia.org/wiki/Data_Execution_Prevention>`_.  "
"(Contributed by Christian Heimes in :issue:`16632`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1924
msgid ""
"New function :c:func:`PyObject_LengthHint` is the C API equivalent of "
":func:`operator.length_hint`.  (Contributed by Armin Ronacher in "
":issue:`16148`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1932 ../../whatsnew/3.6.rst:1910
msgid "Other Improvements"
msgstr ""

#: ../../whatsnew/3.4.rst:1936
msgid ""
"The :ref:`python <using-on-cmdline>` command has a new :ref:`option "
"<using-on-misc-options>`, ``-I``, which causes it to run in \"isolated "
"mode\", which means that :data:`sys.path` contains neither the script's "
"directory nor the user's ``site-packages`` directory, and all "
":envvar:`PYTHON*` environment variables are ignored (it implies both "
"``-s`` and ``-E``).  Other restrictions may also be applied in the "
"future, with the goal being to isolate the execution of a script from the"
" user's environment.  This is appropriate, for example, when Python is "
"used to run a system script.  On most POSIX systems it can and should be "
"used in the ``#!`` line of system scripts.  (Contributed by Christian "
"Heimes in :issue:`16499`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1947
msgid ""
"Tab-completion is now enabled by default in the interactive interpreter "
"on systems that support :mod:`readline`.  History is also enabled by "
"default, and is written to (and read from) the file :file:`~/.python-"
"history`. (Contributed by Antoine Pitrou and √âric Araujo in "
":issue:`5845`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1952
msgid ""
"Invoking the Python interpreter with ``--version`` now outputs the "
"version to standard output instead of standard error (:issue:`18338`). "
"Similar changes were made to :mod:`argparse` (:issue:`18920`) and other "
"modules that have script-like invocation capabilities (:issue:`18922`)."
msgstr ""

#: ../../whatsnew/3.4.rst:1957
msgid ""
"The CPython Windows installer now adds ``.py`` to the :envvar:`PATHEXT` "
"variable when extensions are registered, allowing users to run a python "
"script at the windows command prompt by just typing its name without the "
"``.py`` extension.  (Contributed by Paul Moore in :issue:`18569`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1962
msgid ""
"A new ``make`` target `coverage-report "
"<https://devguide.python.org/coverage/#measuring-coverage-of-c-code-with-"
"gcov-and-lcov>`_ will build python, run the test suite, and generate an "
"HTML coverage report for the C codebase using ``gcov`` and `lcov "
"<http://ltp.sourceforge.net/coverage/lcov.php>`_."
msgstr ""

#: ../../whatsnew/3.4.rst:1968
msgid ""
"The ``-R`` option to the :ref:`python regression test suite <regrtest>` "
"now also checks for memory allocation leaks, using "
":func:`sys.getallocatedblocks()`.  (Contributed by Antoine Pitrou in "
":issue:`13390`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1973
msgid "``python -m`` now works with namespace packages."
msgstr ""

#: ../../whatsnew/3.4.rst:1975
msgid ""
"The :mod:`stat` module is now implemented in C, which means it gets the "
"values for its constants from the C header files, instead of having the "
"values hard-coded in the python module as was previously the case."
msgstr ""

#: ../../whatsnew/3.4.rst:1979
msgid ""
"Loading multiple python modules from a single OS module (``.so``, "
"``.dll``) now works correctly (previously it silently returned the first "
"python module in the file).  (Contributed by V√°clav ≈†milauer in "
":issue:`16421`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1983
msgid ""
"A new opcode, :opcode:`LOAD_CLASSDEREF`, has been added to fix a bug in "
"the loading of free variables in class bodies that could be triggered by "
"certain uses of :ref:`__prepare__ <prepare>`.  (Contributed by Benjamin "
"Peterson in :issue:`17853`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1988
msgid ""
"A number of MemoryError-related crashes were identified and fixed by "
"Victor Stinner using his :pep:`445`-based ``pyfailmalloc`` tool "
"(:issue:`18408`, :issue:`18520`)."
msgstr ""

#: ../../whatsnew/3.4.rst:1992
msgid ""
"The ``pyvenv`` command now accepts a ``--copies`` option to use copies "
"rather than symlinks even on systems where symlinks are the default.  "
"(Contributed by Vinay Sajip in :issue:`18807`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1996
msgid ""
"The ``pyvenv`` command also accepts a ``--without-pip`` option to "
"suppress the otherwise-automatic bootstrapping of pip into the virtual "
"environment.  (Contributed by Nick Coghlan in :issue:`19552` as part of "
"the :pep:`453` implementation.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2001
msgid ""
"The encoding name is now optional in the value set for the "
":envvar:`PYTHONIOENCODING` environment variable.  This makes it possible "
"to set just the error handler, without changing the default encoding. "
"(Contributed by Serhiy Storchaka in :issue:`18818`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2006
msgid ""
"The :mod:`bz2`, :mod:`lzma`, and :mod:`gzip` module ``open`` functions "
"now support ``x`` (exclusive creation) mode.  (Contributed by Tim Heaney "
"and Vajrasky Kok in :issue:`19201`, :issue:`19222`, and :issue:`19223`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2012
msgid "Significant Optimizations"
msgstr ""

#: ../../whatsnew/3.4.rst:2014
msgid ""
"The UTF-32 decoder is now 3x to 4x faster.  (Contributed by Serhiy "
"Storchaka in :issue:`14625`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2017
msgid ""
"The cost of hash collisions for sets is now reduced.  Each hash table "
"probe now checks a series of consecutive, adjacent key/hash pairs before "
"continuing to make random probes through the hash table.  This exploits "
"cache locality to make collision resolution less expensive. The collision"
" resolution scheme can be described as a hybrid of linear probing and "
"open addressing.  The number of additional linear probes defaults to "
"nine.  This can be changed at compile-time by defining LINEAR_PROBES to "
"be any value.  Set LINEAR_PROBES=0 to turn-off linear probing entirely.  "
"(Contributed by Raymond Hettinger in :issue:`18771`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2028
#, python-format
msgid ""
"The interpreter starts about 30% faster. A couple of measures lead to the"
" speedup. The interpreter loads fewer modules on startup, e.g. the "
":mod:`re`, :mod:`collections` and :mod:`locale` modules and their "
"dependencies are no longer imported by default. The marshal module has "
"been improved to load compiled Python code faster.  (Contributed by "
"Antoine Pitrou, Christian Heimes and Victor Stinner in :issue:`19219`, "
":issue:`19218`, :issue:`19209`, :issue:`19205` and :issue:`9548`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2036
msgid ""
":class:`bz2.BZ2File` is now as fast or faster than the Python2 version "
"for most cases.  :class:`lzma.LZMAFile` has also been optimized.  "
"(Contributed by Serhiy Storchaka and Nadeem Vawda in :issue:`16034`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2040
#, python-format
msgid ""
":func:`random.getrandbits` is 20%-40% faster for small integers (the most"
" common use case).  (Contributed by Serhiy Storchaka in :issue:`16674`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2043
msgid ""
"By taking advantage of the new storage format for strings, pickling of "
"strings is now significantly faster.  (Contributed by Victor Stinner and "
"Antoine Pitrou in :issue:`15596`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2047
msgid ""
"A performance issue in :meth:`io.FileIO.readall` has been solved.  This "
"particularly affects Windows, and significantly speeds up the case of "
"piping significant amounts of data through :mod:`subprocess`.  "
"(Contributed by Richard Oudkerk in :issue:`15758`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2052
msgid ""
":func:`html.escape` is now 10x faster.  (Contributed by Matt Bryant in "
":issue:`18020`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2055
msgid ""
"On Windows, the native ``VirtualAlloc`` is now used instead of the CRT "
"``malloc`` in ``obmalloc``.  Artificial benchmarks show about a 3% memory"
" savings."
msgstr ""

#: ../../whatsnew/3.4.rst:2059
msgid ""
":func:`os.urandom` now uses a lazily-opened persistent file descriptor so"
" as to avoid using many file descriptors when run in parallel from "
"multiple threads.  (Contributed by Antoine Pitrou in :issue:`18756`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2069
msgid ""
"This section covers various APIs and other features that have been "
"deprecated in Python 3.4, and will be removed in Python 3.5 or later.  In"
" most (but not all) cases, using the deprecated APIs will produce a "
":exc:`DeprecationWarning` when the interpreter is run with deprecation "
"warnings enabled (for example, by using ``-Wd``)."
msgstr ""

#: ../../whatsnew/3.4.rst:2077
msgid "Deprecations in the Python API"
msgstr ""

#: ../../whatsnew/3.4.rst:2079
msgid ""
"As mentioned in :ref:`whatsnew-pep-451`, a number of :mod:`importlib` "
"methods and functions are deprecated: :meth:`importlib.find_loader` is "
"replaced by :func:`importlib.util.find_spec`; "
":meth:`importlib.machinery.PathFinder.find_module` is replaced by "
":meth:`importlib.machinery.PathFinder.find_spec`; "
":meth:`importlib.abc.MetaPathFinder.find_module` is replaced by "
":meth:`importlib.abc.MetaPathFinder.find_spec`; "
":meth:`importlib.abc.PathEntryFinder.find_loader` and "
":meth:`~importlib.abc.PathEntryFinder.find_module` are replaced by "
":meth:`importlib.abc.PathEntryFinder.find_spec`; all of the ``xxxLoader``"
" ABC ``load_module`` methods (:meth:`importlib.abc.Loader.load_module`, "
":meth:`importlib.abc.InspectLoader.load_module`, "
":meth:`importlib.abc.FileLoader.load_module`, "
":meth:`importlib.abc.SourceLoader.load_module`) should no longer be "
"implemented, instead loaders should implement an ``exec_module`` method "
"(:meth:`importlib.abc.Loader.exec_module`, "
":meth:`importlib.abc.InspectLoader.exec_module` "
":meth:`importlib.abc.SourceLoader.exec_module`) and let the import system"
" take care of the rest; and :meth:`importlib.abc.Loader.module_repr`, "
":meth:`importlib.util.module_for_loader`, "
":meth:`importlib.util.set_loader`, and :meth:`importlib.util.set_package`"
" are no longer needed because their functions are now handled "
"automatically by the import system."
msgstr ""

#: ../../whatsnew/3.4.rst:2104
msgid ""
"The :mod:`imp` module is pending deprecation. To keep compatibility with "
"Python 2/3 code bases, the module's removal is currently not scheduled."
msgstr ""

#: ../../whatsnew/3.4.rst:2107
msgid ""
"The :mod:`formatter` module is pending deprecation and is slated for "
"removal in Python 3.6."
msgstr ""

#: ../../whatsnew/3.4.rst:2110
msgid ""
"``MD5`` as the default *digestmod* for the :func:`hmac.new` function is "
"deprecated.  Python 3.6 will require an explicit digest name or "
"constructor as *digestmod* argument."
msgstr ""

#: ../../whatsnew/3.4.rst:2114
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module has been "
"documented as deprecated in its docstring for quite some time.  It now "
"emits a :exc:`DeprecationWarning` and will be removed completely in "
"Python 3.5."
msgstr ""

#: ../../whatsnew/3.4.rst:2118
msgid ""
"The undocumented *endtime* argument to :meth:`subprocess.Popen.wait` "
"should not have been exposed and is hopefully not in use; it is "
"deprecated and will mostly likely be removed in Python 3.5."
msgstr ""

#: ../../whatsnew/3.4.rst:2122
msgid "The *strict* argument of :class:`~html.parser.HTMLParser` is deprecated."
msgstr ""

#: ../../whatsnew/3.4.rst:2124
msgid ""
"The :mod:`plistlib` :func:`~plistlib.readPlist`, "
":func:`~plistlib.writePlist`, :func:`~plistlib.readPlistFromBytes`, and "
":func:`~plistlib.writePlistToBytes` functions are deprecated in favor of "
"the corresponding new functions :func:`~plistlib.load`, "
":func:`~plistlib.dump`, :func:`~plistlib.loads`, and "
":func:`~plistlib.dumps`.  :func:`~plistlib.Data` is deprecated in favor "
"of just using the :class:`bytes` constructor."
msgstr ""

#: ../../whatsnew/3.4.rst:2131
msgid ""
"The :mod:`sysconfig` key ``SO`` is deprecated, it has been replaced by "
"``EXT_SUFFIX``."
msgstr ""

#: ../../whatsnew/3.4.rst:2134
msgid ""
"The ``U`` mode accepted by various ``open`` functions is deprecated. In "
"Python3 it does not do anything useful, and should be replaced by "
"appropriate uses of :class:`io.TextIOWrapper` (if needed) and its "
"*newline* argument."
msgstr ""

#: ../../whatsnew/3.4.rst:2139
msgid ""
"The *parser* argument of :func:`xml.etree.ElementTree.iterparse` has been"
" deprecated, as has the *html* argument of "
":func:`~xml.etree.ElementTree.XMLParser`.  To prepare for the removal of "
"the latter, all arguments to ``XMLParser`` should be passed by keyword."
msgstr ""

#: ../../whatsnew/3.4.rst:2146
msgid "Deprecated Features"
msgstr ""

#: ../../whatsnew/3.4.rst:2148
msgid ""
"Running :ref:`idle` with the ``-n`` flag (no subprocess) is deprecated. "
"However, the feature will not be removed until :issue:`18823` is "
"resolved."
msgstr ""

#: ../../whatsnew/3.4.rst:2151
msgid ""
"The site module adding a \"site-python\" directory to sys.path, if it "
"exists, is deprecated (:issue:`19375`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2157 ../../whatsnew/3.5.rst:2352
#: ../../whatsnew/3.6.rst:2084
msgid "Removed"
msgstr ""

#: ../../whatsnew/3.4.rst:2161
msgid "Operating Systems No Longer Supported"
msgstr ""

#: ../../whatsnew/3.4.rst:2163
msgid ""
"Support for the following operating systems has been removed from the "
"source and build tools:"
msgstr ""

#: ../../whatsnew/3.4.rst:2166
msgid "OS/2 (:issue:`16135`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2167
msgid "Windows 2000 (changeset e52df05b496a)."
msgstr ""

#: ../../whatsnew/3.4.rst:2168
msgid ""
"Windows systems where ``COMSPEC`` points to ``command.com`` "
"(:issue:`14470`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2169
msgid "VMS (:issue:`16136`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2173 ../../whatsnew/3.5.rst:2355
#: ../../whatsnew/3.6.rst:2087 ../../whatsnew/3.7.rst:2130
#: ../../whatsnew/3.8.rst:1747
msgid "API and Feature Removals"
msgstr ""

#: ../../whatsnew/3.4.rst:2175 ../../whatsnew/3.5.rst:2357
msgid ""
"The following obsolete and previously deprecated APIs and features have "
"been removed:"
msgstr ""

#: ../../whatsnew/3.4.rst:2178
msgid ""
"The unmaintained ``Misc/TextMate`` and ``Misc/vim`` directories have been"
" removed (see the `devguide <https://devguide.python.org>`_ for "
"suggestions on what to use instead)."
msgstr ""

#: ../../whatsnew/3.4.rst:2182
msgid ""
"The ``SO`` makefile macro is removed (it was replaced by the "
"``SHLIB_SUFFIX`` and ``EXT_SUFFIX`` macros) (:issue:`16754`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2185
msgid ""
"The ``PyThreadState.tick_counter`` field has been removed; its value has "
"been meaningless since Python 3.2, when the \"new GIL\" was introduced "
"(:issue:`19199`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2189
msgid ""
"``PyLoader`` and ``PyPycLoader`` have been removed from :mod:`importlib`."
" (Contributed by Taras Lyapun in :issue:`15641`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2192
msgid ""
"The *strict* argument to :class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` has been removed.  HTTP 0.9-style "
"\"Simple Responses\" are no longer supported."
msgstr ""

#: ../../whatsnew/3.4.rst:2196
msgid ""
"The deprecated :mod:`urllib.request.Request` getter and setter methods "
"``add_data``, ``has_data``, ``get_data``, ``get_type``, ``get_host``, "
"``get_selector``, ``set_proxy``, ``get_origin_req_host``, and "
"``is_unverifiable`` have been removed (use direct attribute access "
"instead)."
msgstr ""

#: ../../whatsnew/3.4.rst:2201
msgid ""
"Support for loading the deprecated ``TYPE_INT64`` has been removed from "
":mod:`marshal`.  (Contributed by Dan Riti in :issue:`15480`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2204
msgid ""
":class:`inspect.Signature`: positional-only parameters are now required "
"to have a valid name."
msgstr ""

#: ../../whatsnew/3.4.rst:2207
msgid ""
":meth:`object.__format__` no longer accepts non-empty format strings, it "
"now raises a :exc:`TypeError` instead.  Using a non-empty string has been"
" deprecated since Python 3.2.  This change has been made to prevent a "
"situation where previously working (but incorrect) code would start "
"failing if an object gained a __format__ method, which means that your "
"code may now raise a :exc:`TypeError` if you are using an ``'s'`` format "
"code with objects that do not have a __format__ method that handles it.  "
"See :issue:`7994` for background."
msgstr ""

#: ../../whatsnew/3.4.rst:2216
msgid ""
":meth:`difflib.SequenceMatcher.isbjunk` and "
":meth:`difflib.SequenceMatcher.isbpopular` were deprecated in 3.2, and "
"have now been removed: use ``x in sm.bjunk`` and ``x in sm.bpopular``, "
"where *sm* is a :class:`~difflib.SequenceMatcher` object "
"(:issue:`13248`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2224
msgid "Code Cleanups"
msgstr ""

#: ../../whatsnew/3.4.rst:2226
msgid ""
"The unused and undocumented internal ``Scanner`` class has been removed "
"from the :mod:`pydoc` module."
msgstr ""

#: ../../whatsnew/3.4.rst:2229
msgid ""
"The private and effectively unused ``_gestalt`` module has been removed, "
"along with the private :mod:`platform` functions ``_mac_ver_lookup``, "
"``_mac_ver_gstalt``, and ``_bcd2str``, which would only have ever been "
"called on badly broken OSX systems (see :issue:`18393`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2234
msgid ""
"The hardcoded copies of certain :mod:`stat` constants that were included "
"in the :mod:`tarfile` module namespace have been removed."
msgstr ""

#: ../../whatsnew/3.4.rst:2240
msgid "Porting to Python 3.4"
msgstr ""

#: ../../whatsnew/3.4.rst:2247 ../../whatsnew/3.6.rst:2132
msgid "Changes in 'python' Command Behavior"
msgstr ""

#: ../../whatsnew/3.4.rst:2249
msgid ""
"In a posix shell, setting the :envvar:`PATH` environment variable to an "
"empty value is equivalent to not setting it at all.  However, setting "
":envvar:`PYTHONPATH` to an empty value was *not* equivalent to not "
"setting it at all: setting :envvar:`PYTHONPATH` to an empty value was "
"equivalent to setting it to ``.``, which leads to confusion when "
"reasoning by analogy to how :envvar:`PATH` works.  The behavior now "
"conforms to the posix convention for :envvar:`PATH`."
msgstr ""

#: ../../whatsnew/3.4.rst:2257
msgid ""
"The [X refs, Y blocks] output of a debug (``--with-pydebug``) build of "
"the CPython interpreter is now off by default.  It can be re-enabled "
"using the ``-X showrefcount`` option.  (Contributed by Ezio Melotti in "
":issue:`17323`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2261
msgid ""
"The python command and most stdlib scripts (as well as :mod:`argparse`) "
"now output ``--version`` information to ``stdout`` instead of ``stderr`` "
"(for issue list see :ref:`other-improvements-3.4` above)."
msgstr ""

#: ../../whatsnew/3.4.rst:2267 ../../whatsnew/3.5.rst:2396
#: ../../whatsnew/3.6.rst:2142 ../../whatsnew/3.7.rst:2261
#: ../../whatsnew/3.8.rst:1854 ../../whatsnew/3.8.rst:2317
msgid "Changes in the Python API"
msgstr ""

#: ../../whatsnew/3.4.rst:2269
msgid ""
"The ABCs defined in :mod:`importlib.abc` now either raise the appropriate"
" exception or return a default value instead of raising "
":exc:`NotImplementedError` blindly. This will only affect code calling "
":func:`super` and falling through all the way to the ABCs. For "
"compatibility, catch both :exc:`NotImplementedError` or the appropriate "
"exception as needed."
msgstr ""

#: ../../whatsnew/3.4.rst:2275
msgid ""
"The module type now initializes the :attr:`__package__` and "
":attr:`__loader__` attributes to ``None`` by default. To determine if "
"these attributes were set in a backwards-compatible fashion, use e.g. "
"``getattr(module, '__loader__', None) is not None``.  (:issue:`17115`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2280
msgid ""
":meth:`importlib.util.module_for_loader` now sets ``__loader__`` and "
"``__package__`` unconditionally to properly support reloading. If this is"
" not desired then you will need to set these attributes manually. You can"
" use :func:`importlib.util.module_to_load` for module management."
msgstr ""

#: ../../whatsnew/3.4.rst:2285
msgid ""
"Import now resets relevant attributes (e.g. ``__name__``, ``__loader__``,"
" ``__package__``, ``__file__``, ``__cached__``) unconditionally when "
"reloading. Note that this restores a pre-3.3 behavior in that it means a "
"module is re-found when re-loaded (:issue:`19413`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2290
msgid ""
"Frozen packages no longer set ``__path__`` to a list containing the "
"package name, they now set it to an empty list.  The previous behavior "
"could cause the import system to do the wrong thing on submodule imports "
"if there was also a directory with the same name as the frozen package.  "
"The correct way to determine if a module is a package or not is to use "
"``hasattr(module, '__path__')`` (:issue:`18065`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2297
msgid ""
"Frozen modules no longer define a ``__file__`` attribute. It's "
"semantically incorrect for frozen modules to set the attribute as they "
"are not loaded from any explicit location. If you must know that a module"
" comes from frozen code then you can see if the module's "
"``__spec__.location`` is set to ``'frozen'``, check if the loader is a "
"subclass of :class:`importlib.machinery.FrozenImporter`, or if Python 2 "
"compatibility is necessary you can use :func:`imp.is_frozen`."
msgstr ""

#: ../../whatsnew/3.4.rst:2305
msgid ""
":func:`py_compile.compile` now raises :exc:`FileExistsError` if the file "
"path it would write to is a symlink or a non-regular file. This is to act"
" as a warning that import will overwrite those files with a regular file "
"regardless of what type of file path they were originally."
msgstr ""

#: ../../whatsnew/3.4.rst:2310
msgid ""
":meth:`importlib.abc.SourceLoader.get_source` no longer raises "
":exc:`ImportError` when the source code being loaded triggers a "
":exc:`SyntaxError` or :exc:`UnicodeDecodeError`. As :exc:`ImportError` is"
" meant to be raised only when source code cannot be found but it should, "
"it was felt to be over-reaching/overloading of that meaning when the "
"source code is found but improperly structured. If you were catching "
"ImportError before and wish to continue to ignore syntax or decoding "
"issues, catch all three exceptions now."
msgstr ""

#: ../../whatsnew/3.4.rst:2319
msgid ""
":func:`functools.update_wrapper` and :func:`functools.wraps` now "
"correctly set the ``__wrapped__`` attribute to the function being "
"wrapped, even if that function also had its ``__wrapped__`` attribute "
"set. This means ``__wrapped__`` attributes now correctly link a stack of "
"decorated functions rather than every ``__wrapped__`` attribute in the "
"chain referring to the innermost function. Introspection libraries that "
"assumed the previous behaviour was intentional can use "
":func:`inspect.unwrap` to access the first function in the chain that has"
" no ``__wrapped__`` attribute."
msgstr ""

#: ../../whatsnew/3.4.rst:2329
msgid ""
":func:`inspect.getfullargspec` has been reimplemented on top of "
":func:`inspect.signature` and hence handles a much wider variety of "
"callable objects than it did in the past. It is expected that additional "
"builtin and extension module callables will gain signature metadata over "
"the course of the Python 3.4 series. Code that assumes that "
":func:`inspect.getfullargspec` will fail on non-Python callables may need"
" to be adjusted accordingly."
msgstr ""

#: ../../whatsnew/3.4.rst:2337
msgid ""
":class:`importlib.machinery.PathFinder` now passes on the current working"
" directory to objects in :data:`sys.path_hooks` for the empty string. "
"This results in :data:`sys.path_importer_cache` never containing ``''``, "
"thus iterating through :data:`sys.path_importer_cache` based on "
":data:`sys.path` will not find all keys. A module's ``__file__`` when "
"imported in the current working directory will also now have an absolute "
"path, including when using ``-m`` with the interpreter (except for "
"``__main__.__file__`` when a script has been executed directly using a "
"relative path) (Contributed by Brett Cannon in :issue:`18416`).  is "
"specified on the command-line) (:issue:`18416`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2348
msgid ""
"The removal of the *strict* argument to "
":class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` changes the meaning of the "
"remaining arguments if you are specifying them positionally rather than "
"by keyword.  If you've been paying attention to deprecation warnings your"
" code should already be specifying any additional arguments via keywords."
msgstr ""

#: ../../whatsnew/3.4.rst:2354
msgid ""
"Strings between ``from __future__ import ...`` statements now *always* "
"raise a :exc:`SyntaxError`.  Previously if there was no leading "
"docstring, an interstitial string would sometimes be ignored.  This "
"brings CPython into compliance with the language spec; Jython and PyPy "
"already were. (:issue:`17434`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2360
msgid ""
":meth:`ssl.SSLSocket.getpeercert` and :meth:`ssl.SSLSocket.do_handshake` "
"now raise an :exc:`OSError` with ``ENOTCONN`` when the ``SSLSocket`` is "
"not connected, instead of the previous behavior of raising an "
":exc:`AttributeError`.  In addition, :meth:`~ssl.SSLSocket.getpeercert` "
"will raise a :exc:`ValueError` if the handshake has not yet been done."
msgstr ""

#: ../../whatsnew/3.4.rst:2366
msgid ""
":func:`base64.b32decode` now raises a :exc:`binascii.Error` when the "
"input string contains non-b32-alphabet characters, instead of a "
":exc:`TypeError`.  This particular :exc:`TypeError` was missed when the "
"other :exc:`TypeError`\\ s were converted.  (Contributed by Serhiy "
"Storchaka in :issue:`18011`.)  Note: this change was also inadvertently "
"applied in Python 3.3.3."
msgstr ""

#: ../../whatsnew/3.4.rst:2373
msgid ""
"The :attr:`~cgi.FieldStorage.file` attribute is now automatically closed "
"when the creating :class:`cgi.FieldStorage` instance is garbage "
"collected. If you were pulling the file object out separately from the "
":class:`cgi.FieldStorage` instance and not keeping the instance alive, "
"then you should either store the entire :class:`cgi.FieldStorage` "
"instance or read the contents of the file before the "
":class:`cgi.FieldStorage` instance is garbage collected."
msgstr ""

#: ../../whatsnew/3.4.rst:2380
msgid ""
"Calling ``read`` or ``write`` on a closed SSL socket now raises an "
"informative :exc:`ValueError` rather than the previous more mysterious "
":exc:`AttributeError` (:issue:`9177`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2384
msgid ""
":meth:`slice.indices` no longer produces an :exc:`OverflowError` for huge"
" values.  As a consequence of this fix, :meth:`slice.indices` now raises "
"a :exc:`ValueError` if given a negative length; previously it returned "
"nonsense values (:issue:`14794`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2389
msgid ""
"The :class:`complex` constructor, unlike the :mod:`cmath` functions, was "
"incorrectly accepting :class:`float` values if an object's "
"``__complex__`` special method returned one.  This now raises a "
":exc:`TypeError`. (:issue:`16290`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2394
msgid ""
"The :class:`int` constructor in 3.2 and 3.3 erroneously accepts "
":class:`float` values for the *base* parameter.  It is unlikely anyone "
"was doing this, but if so, it will now raise a :exc:`TypeError` "
"(:issue:`16772`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2398
msgid ""
"Defaults for keyword-only arguments are now evaluated *after* defaults "
"for regular keyword arguments, instead of before.  Hopefully no one wrote"
" any code that depends on the previous buggy behavior (:issue:`16967`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2402
msgid ""
"Stale thread states are now cleared after :func:`~os.fork`.  This may "
"cause some system resources to be released that previously were "
"incorrectly kept perpetually alive (for example, database connections "
"kept in thread-local storage).  (:issue:`17094`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2407
msgid ""
"Parameter names in ``__annotations__`` dicts are now mangled properly, "
"similarly to ``__kwdefaults__``.  (Contributed by Yury Selivanov in "
":issue:`20625`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2411
msgid ""
":attr:`hashlib.hash.name` now always returns the identifier in lower "
"case. Previously some builtin hashes had uppercase names, but now that it"
" is a formal public interface the naming has been made consistent "
"(:issue:`18532`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2415
msgid ""
"Because :mod:`unittest.TestSuite` now drops references to tests after "
"they are run, test harnesses that re-use a :class:`~unittest.TestSuite` "
"to re-run a set of tests may fail.   Test suites should not be re-used in"
" this fashion since it means state is retained between test runs, "
"breaking the test isolation that :mod:`unittest` is designed to provide."
"  However, if the lack of isolation is considered acceptable, the old "
"behavior can be restored by creating a :mod:`~unittest.TestSuite` "
"subclass that defines a ``_removeTestAtIndex`` method that does nothing "
"(see :meth:`.TestSuite.__iter__`) (:issue:`11798`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2425
msgid ""
":mod:`unittest` now uses :mod:`argparse` for command line parsing.  There"
" are certain invalid command forms that used to work that are no longer "
"allowed; in theory this should not cause backward compatibility issues "
"since the disallowed command forms didn't make any sense and are unlikely"
" to be in use."
msgstr ""

#: ../../whatsnew/3.4.rst:2430
msgid ""
"The :func:`re.split`, :func:`re.findall`, and :func:`re.sub` functions, "
"and the :meth:`~re.match.group` and :meth:`~re.match.groups` methods of "
"``match`` objects now always return a *bytes* object when the string to "
"be matched is a :term:`bytes-like object`.  Previously the return type "
"matched the input type, so if your code was depending on the return value"
" being, say, a ``bytearray``, you will need to change your code."
msgstr ""

#: ../../whatsnew/3.4.rst:2437
msgid ""
":mod:`audioop` functions now raise an error immediately if passed string "
"input, instead of failing randomly later on (:issue:`16685`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2440
msgid ""
"The new *convert_charrefs* argument to :class:`~html.parser.HTMLParser` "
"currently defaults to ``False`` for backward compatibility, but will "
"eventually be changed to default to ``True``.  It is recommended that you"
" add this keyword, with the appropriate value, to any "
":class:`~html.parser.HTMLParser` calls in your code (:issue:`13633`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2446
msgid ""
"Since the *digestmod* argument to the :func:`hmac.new` function will in "
"the future have no default, all calls to :func:`hmac.new` should be "
"changed to explicitly specify a *digestmod* (:issue:`17276`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2450
msgid ""
"Calling :func:`sysconfig.get_config_var` with the ``SO`` key, or looking "
"``SO`` up in the results of a call to :func:`sysconfig.get_config_vars` "
"is deprecated.  This key should be replaced by ``EXT_SUFFIX`` or "
"``SHLIB_SUFFIX``, depending on the context (:issue:`19555`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2455
msgid ""
"Any calls to ``open`` functions that specify ``U`` should be modified. "
"``U`` is ineffective in Python3 and will eventually raise an error if "
"used. Depending on the function, the equivalent of its old Python2 "
"behavior can be achieved using either a *newline* argument, or if "
"necessary by wrapping the stream in :mod:`~io.TextIOWrapper` to use its "
"*newline* argument (:issue:`15204`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2462
msgid ""
"If you use ``pyvenv`` in a script and desire that pip *not* be installed,"
" you must add ``--without-pip`` to your command invocation."
msgstr ""

#: ../../whatsnew/3.4.rst:2466
msgid ""
"The default behavior of :func:`json.dump` and :func:`json.dumps` when an "
"indent is specified has changed: it no longer produces trailing spaces "
"after the item separating commas at the ends of lines.  This will matter "
"only if you have tests that are doing white-space-sensitive comparisons "
"of such output (:issue:`16333`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2472
msgid ""
":mod:`doctest` now looks for doctests in extension module ``__doc__`` "
"strings, so if your doctest test discovery includes extension modules "
"that have things that look like doctests in them you may see test "
"failures you've never seen before when running your tests "
"(:issue:`3158`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2477
msgid ""
"The :mod:`collections.abc` module has been slightly refactored as part of"
" the Python startup improvements.  As a consequence of this, it is no "
"longer the case that importing :mod:`collections` automatically imports "
":mod:`collections.abc`.  If your program depended on the (undocumented) "
"implicit import, you will need to add an explicit ``import "
"collections.abc`` (:issue:`20784`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2486 ../../whatsnew/3.5.rst:2513
#: ../../whatsnew/3.6.rst:2331 ../../whatsnew/3.7.rst:2449
#: ../../whatsnew/3.8.rst:2012
msgid "Changes in the C API"
msgstr ""

#: ../../whatsnew/3.4.rst:2488
msgid ""
":c:func:`PyEval_EvalFrameEx`, :c:func:`PyObject_Repr`, and "
":c:func:`PyObject_Str`, along with some other internal C APIs, now "
"include a debugging assertion that ensures they are not used in "
"situations where they may silently discard a currently active exception. "
"In cases where discarding the active exception is expected and desired "
"(for example, because it has already been saved locally with "
":c:func:`PyErr_Fetch` or is being deliberately replaced with a different "
"exception), an explicit :c:func:`PyErr_Clear` call will be needed to "
"avoid triggering the assertion when invoking these operations (directly "
"or indirectly) and running against a version of Python that is compiled "
"with assertions enabled."
msgstr ""

#: ../../whatsnew/3.4.rst:2500
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg**"
" argument is not set. Previously only ``NULL`` was returned with no "
"exception set."
msgstr ""

#: ../../whatsnew/3.4.rst:2504
msgid ""
"The result of the :c:data:`PyOS_ReadlineFunctionPointer` callback must "
"now be a string allocated by :c:func:`PyMem_RawMalloc` or "
":c:func:`PyMem_RawRealloc`, or ``NULL`` if an error occurred, instead of "
"a string allocated by :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc` "
"(:issue:`16742`)"
msgstr ""

#: ../../whatsnew/3.4.rst:2510
msgid ""
":c:func:`PyThread_set_key_value` now always set the value. In Python 3.3,"
" the function did nothing if the key already exists (if the current value"
" is a non-``NULL`` pointer)."
msgstr ""

#: ../../whatsnew/3.4.rst:2514
msgid ""
"The ``f_tstate`` (thread state) field of the :c:type:`PyFrameObject` "
"structure has been removed to fix a bug: see :issue:`14432` for the "
"rationale."
msgstr ""

#: ../../whatsnew/3.4.rst:2519
msgid "Changed in 3.4.3"
msgstr ""

#: ../../whatsnew/3.4.rst:2526
msgid ""
":mod:`http.client` and modules which use it, such as "
":mod:`urllib.request` and :mod:`xmlrpc.client`, will now verify that the "
"server presents a certificate which is signed by a CA in the platform "
"trust store and whose hostname matches the hostname being requested by "
"default, significantly improving security for many applications."
msgstr ""

#: ../../whatsnew/3.5.rst:3
msgid "What's New In Python 3.5"
msgstr ""

#: ../../whatsnew/3.5.rst ../../whatsnew/3.6.rst
msgid "Editors"
msgstr ""

#: ../../whatsnew/3.5.rst:5 ../../whatsnew/3.6.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr ""

#: ../../whatsnew/3.5.rst:47
msgid ""
"This article explains the new features in Python 3.5, compared to 3.4. "
"Python 3.5 was released on September 13, 2015. ¬†See the `changelog "
"<https://docs.python.org/3.5/whatsnew/changelog.html>`_ for a full list "
"of changes."
msgstr ""

#: ../../whatsnew/3.5.rst:54
msgid ":pep:`478` - Python 3.5 Release Schedule"
msgstr ""

#: ../../whatsnew/3.5.rst:62
msgid ":ref:`PEP 492 <whatsnew-pep-492>`, coroutines with async and await syntax."
msgstr ""

#: ../../whatsnew/3.5.rst:63
msgid ""
":ref:`PEP 465 <whatsnew-pep-465>`, a new matrix multiplication operator: "
"``a @ b``."
msgstr ""

#: ../../whatsnew/3.5.rst:64
msgid ":ref:`PEP 448 <whatsnew-pep-448>`, additional unpacking generalizations."
msgstr ""

#: ../../whatsnew/3.5.rst:69
msgid ":mod:`typing`: :ref:`PEP 484 -- Type Hints <whatsnew-pep-484>`."
msgstr ""

#: ../../whatsnew/3.5.rst:70
msgid ""
":mod:`zipapp`: :ref:`PEP 441 Improving Python ZIP Application Support "
"<whatsnew-zipapp>`."
msgstr ""

#: ../../whatsnew/3.5.rst:76
msgid ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>`"
" -- Adding ``%`` formatting to bytes and bytearray."
msgstr ""

#: ../../whatsnew/3.5.rst:79
msgid ""
"New :meth:`bytes.hex`, :meth:`bytearray.hex` and :meth:`memoryview.hex` "
"methods. (Contributed by Arnon Yaari in :issue:`9951`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:82
msgid ""
":class:`memoryview` now supports tuple indexing (including multi-"
"dimensional). (Contributed by Antoine Pitrou in :issue:`23632`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:85
msgid ""
"Generators have a new ``gi_yieldfrom`` attribute, which returns the "
"object being iterated by ``yield from`` expressions. (Contributed by "
"Benno Leslie and Yury Selivanov in :issue:`24450`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:89
msgid ""
"A new :exc:`RecursionError` exception is now raised when maximum "
"recursion depth is reached.  (Contributed by Georg Brandl in "
":issue:`19235`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:96
msgid ""
"When the ``LC_TYPE`` locale is the POSIX locale (``C`` locale), "
":py:data:`sys.stdin` and :py:data:`sys.stdout` now use the "
"``surrogateescape`` error handler, instead of the ``strict`` error "
"handler. (Contributed by Victor Stinner in :issue:`19977`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:101
msgid ""
"``.pyo`` files are no longer used and have been replaced by a more "
"flexible scheme that includes the optimization level explicitly in "
"``.pyc`` name. (See :ref:`PEP 488 overview <whatsnew-pep-488>`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:105
msgid ""
"Builtin and extension modules are now initialized in a multi-phase "
"process, which is similar to how Python modules are loaded. (See "
":ref:`PEP 489 overview <whatsnew-pep-489>`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:110 ../../whatsnew/3.6.rst:105
#: ../../whatsnew/3.7.rst:90
msgid "Significant improvements in the standard library:"
msgstr ""

#: ../../whatsnew/3.5.rst:112
msgid ""
":class:`collections.OrderedDict` is now :ref:`implemented in C <whatsnew-"
"ordereddict>`, which makes it 4 to 100 times faster."
msgstr ""

#: ../../whatsnew/3.5.rst:116
msgid ""
"The :mod:`ssl` module gained :ref:`support for Memory BIO <whatsnew-"
"sslmemorybio>`, which decouples SSL protocol handling from network IO."
msgstr ""

#: ../../whatsnew/3.5.rst:120
msgid ""
"The new :func:`os.scandir` function provides a :ref:`better and "
"significantly faster way <whatsnew-pep-471>` of directory traversal."
msgstr ""

#: ../../whatsnew/3.5.rst:124
msgid ""
":func:`functools.lru_cache` has been mostly :ref:`reimplemented in C "
"<whatsnew-lrucache>`, yielding much better performance."
msgstr ""

#: ../../whatsnew/3.5.rst:128
msgid ""
"The new :func:`subprocess.run` function provides a :ref:`streamlined way "
"to run subprocesses <whatsnew-subprocess>`."
msgstr ""

#: ../../whatsnew/3.5.rst:131
msgid ""
"The :mod:`traceback` module has been significantly :ref:`enhanced "
"<whatsnew-traceback>` for improved performance and developer convenience."
msgstr ""

#: ../../whatsnew/3.5.rst:138
msgid ""
"SSLv3 is now disabled throughout the standard library. It can still be "
"enabled by instantiating a :class:`ssl.SSLContext` manually.  (See "
":issue:`22638` for more details; this change was backported to CPython "
"3.4 and 2.7.)"
msgstr ""

#: ../../whatsnew/3.5.rst:143
msgid ""
"HTTP cookie parsing is now stricter, in order to protect against "
"potential injection attacks. (Contributed by Antoine Pitrou in "
":issue:`22796`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:148 ../../whatsnew/3.6.rst:149
msgid "Windows improvements:"
msgstr ""

#: ../../whatsnew/3.5.rst:150
msgid ""
"A new installer for Windows has replaced the old MSI. See :ref:`using-on-"
"windows` for more information."
msgstr ""

#: ../../whatsnew/3.5.rst:153
msgid ""
"Windows builds now use Microsoft Visual C++ 14.0, and extension modules "
"should use the same."
msgstr ""

#: ../../whatsnew/3.5.rst:168
msgid "PEP 492 - Coroutines with async and await syntax"
msgstr ""

#: ../../whatsnew/3.5.rst:170
msgid ""
":pep:`492` greatly improves support for asynchronous programming in "
"Python by adding :term:`awaitable objects <awaitable>`, :term:`coroutine "
"functions <coroutine function>`, :term:`asynchronous iteration "
"<asynchronous iterable>`, and :term:`asynchronous context managers "
"<asynchronous context manager>`."
msgstr ""

#: ../../whatsnew/3.5.rst:176
msgid ""
"Coroutine functions are declared using the new :keyword:`async def` "
"syntax::"
msgstr ""

#: ../../whatsnew/3.5.rst:181
msgid ""
"Inside a coroutine function, the new :keyword:`await` expression can be "
"used to suspend coroutine execution until the result is available.  Any "
"object can be *awaited*, as long as it implements the :term:`awaitable` "
"protocol by defining the :meth:`__await__` method."
msgstr ""

#: ../../whatsnew/3.5.rst:186
msgid ""
"PEP 492 also adds :keyword:`async for` statement for convenient iteration"
" over asynchronous iterables."
msgstr ""

#: ../../whatsnew/3.5.rst:189
msgid "An example of a rudimentary HTTP client written using the new syntax::"
msgstr ""

#: ../../whatsnew/3.5.rst:215
msgid ""
"Similarly to asynchronous iteration, there is a new syntax for "
"asynchronous context managers.  The following script::"
msgstr ""

#: ../../whatsnew/3.5.rst:235
msgid "will output::"
msgstr ""

#: ../../whatsnew/3.5.rst:244
msgid ""
"Note that both :keyword:`async for` and :keyword:`async with` can only be"
" used inside a coroutine function declared with :keyword:`async def`."
msgstr ""

#: ../../whatsnew/3.5.rst:247
msgid ""
"Coroutine functions are intended to be run inside a compatible event "
"loop, such as the :ref:`asyncio loop <asyncio-event-loop>`."
msgstr ""

#: ../../whatsnew/3.5.rst:253
msgid ""
"Starting with CPython 3.5.2, ``__aiter__`` can directly return "
":term:`asynchronous iterators <asynchronous iterator>`.  Returning an "
":term:`awaitable` object will result in a "
":exc:`PendingDeprecationWarning`."
msgstr ""

#: ../../whatsnew/3.5.rst:259
msgid "See more details in the :ref:`async-iterators` documentation section."
msgstr ""

#: ../../whatsnew/3.5.rst:265
msgid ":pep:`492` -- Coroutines with async and await syntax"
msgstr ""

#: ../../whatsnew/3.5.rst:266 ../../whatsnew/3.6.rst:302
#: ../../whatsnew/3.6.rst:323
msgid "PEP written and implemented by Yury Selivanov."
msgstr ""

#: ../../whatsnew/3.5.rst:272
msgid "PEP 465 - A dedicated infix operator for matrix multiplication"
msgstr ""

#: ../../whatsnew/3.5.rst:274
msgid ""
":pep:`465` adds the ``@`` infix operator for matrix multiplication. "
"Currently, no builtin Python types implement the new operator, however, "
"it can be implemented by defining :meth:`__matmul__`, "
":meth:`__rmatmul__`, and :meth:`__imatmul__` for regular, reflected, and "
"in-place matrix multiplication.  The semantics of these methods is "
"similar to that of methods defining other infix arithmetic operators."
msgstr ""

#: ../../whatsnew/3.5.rst:281
msgid ""
"Matrix multiplication is a notably common operation in many fields of "
"mathematics, science, engineering, and the addition of ``@`` allows "
"writing cleaner code::"
msgstr ""

#: ../../whatsnew/3.5.rst:287
msgid "instead of::"
msgstr ""

#: ../../whatsnew/3.5.rst:292
msgid "NumPy 1.10 has support for the new operator::"
msgstr ""

#: ../../whatsnew/3.5.rst:312
msgid ":pep:`465` -- A dedicated infix operator for matrix multiplication"
msgstr ""

#: ../../whatsnew/3.5.rst:313
msgid "PEP written by Nathaniel J. Smith; implemented by Benjamin Peterson."
msgstr ""

#: ../../whatsnew/3.5.rst:319
msgid "PEP 448 - Additional Unpacking Generalizations"
msgstr ""

#: ../../whatsnew/3.5.rst:321
msgid ""
":pep:`448` extends the allowed uses of the ``*`` iterable unpacking "
"operator and ``**`` dictionary unpacking operator.  It is now possible to"
" use an arbitrary number of unpackings in :ref:`function calls <calls>`::"
msgstr ""

#: ../../whatsnew/3.5.rst:335
msgid ""
"Similarly, tuple, list, set, and dictionary displays allow multiple "
"unpackings (see :ref:`exprlists` and :ref:`dict`)::"
msgstr ""

#: ../../whatsnew/3.5.rst:353
msgid ":pep:`448` -- Additional Unpacking Generalizations"
msgstr ""

#: ../../whatsnew/3.5.rst:353
msgid ""
"PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas "
"Wouters, and Joshua Landau."
msgstr ""

#: ../../whatsnew/3.5.rst:360
msgid "PEP 461 - percent formatting support for bytes and bytearray"
msgstr ""

#: ../../whatsnew/3.5.rst:362
msgid ""
":pep:`461` adds support for the ``%`` :ref:`interpolation operator "
"<bytes-formatting>` to :class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../../whatsnew/3.5.rst:366
msgid ""
"While interpolation is usually thought of as a string operation, there "
"are cases where interpolation on ``bytes`` or ``bytearrays`` makes sense,"
" and the work needed to make up for this missing functionality detracts "
"from the overall readability of the code.  This issue is particularly "
"important when dealing with wire format protocols, which are often a "
"mixture of binary and ASCII compatible text."
msgstr ""

#: ../../whatsnew/3.5.rst:373 ../../whatsnew/3.5.rst:1848
msgid "Examples::"
msgstr ""

#: ../../whatsnew/3.5.rst:381
msgid ""
"Unicode is not allowed for ``%b``, but it is accepted by ``%a`` "
"(equivalent of ``repr(obj).encode('ascii', 'backslashreplace')``)::"
msgstr ""

#: ../../whatsnew/3.5.rst:392
#, python-format
msgid ""
"Note that ``%s`` and ``%r`` conversion types, although supported, should "
"only be used in codebases that need compatibility with Python 2."
msgstr ""

#: ../../whatsnew/3.5.rst:398
#, python-format
msgid ":pep:`461` -- Adding % formatting to bytes and bytearray"
msgstr ""

#: ../../whatsnew/3.5.rst:398
msgid ""
"PEP written by Ethan Furman; implemented by Neil Schemenauer and Ethan "
"Furman."
msgstr ""

#: ../../whatsnew/3.5.rst:405
msgid "PEP 484 - Type Hints"
msgstr ""

#: ../../whatsnew/3.5.rst:407
msgid ""
"Function annotation syntax has been a Python feature since version 3.0 "
"(:pep:`3107`), however the semantics of annotations has been left "
"undefined."
msgstr ""

#: ../../whatsnew/3.5.rst:410
msgid ""
"Experience has shown that the majority of function annotation uses were "
"to provide type hints to function parameters and return values.  It "
"became evident that it would be beneficial for Python users, if the "
"standard library included the base definitions and tools for type "
"annotations."
msgstr ""

#: ../../whatsnew/3.5.rst:415
msgid ""
":pep:`484` introduces a :term:`provisional module <provisional API>` to "
"provide these standard definitions and tools, along with some conventions"
" for situations where annotations are not available."
msgstr ""

#: ../../whatsnew/3.5.rst:419
msgid ""
"For example, here is a simple function whose argument and return type are"
" declared in the annotations::"
msgstr ""

#: ../../whatsnew/3.5.rst:425
msgid ""
"While these annotations are available at runtime through the usual "
":attr:`__annotations__` attribute, *no automatic type checking happens at"
" runtime*.  Instead, it is assumed that a separate off-line type checker "
"(e.g. `mypy <http://mypy-lang.org>`_) will be used for on-demand source "
"code analysis."
msgstr ""

#: ../../whatsnew/3.5.rst:431
msgid ""
"The type system supports unions, generic types, and a special type named "
":class:`~typing.Any` which is consistent with (i.e. assignable to and "
"from) all types."
msgstr ""

#: ../../whatsnew/3.5.rst:437
msgid ":mod:`typing` module documentation"
msgstr ""

#: ../../whatsnew/3.5.rst:439
msgid ":pep:`484` -- Type Hints"
msgstr ""

#: ../../whatsnew/3.5.rst:439
msgid ""
"PEP written by Guido van Rossum, Jukka Lehtosalo, and ≈Åukasz Langa; "
"implemented by Guido van Rossum."
msgstr ""

#: ../../whatsnew/3.5.rst:441
msgid ":pep:`483` -- The Theory of Type Hints"
msgstr ""

#: ../../whatsnew/3.5.rst:442
msgid "PEP written by Guido van Rossum"
msgstr ""

#: ../../whatsnew/3.5.rst:448
msgid "PEP 471 - os.scandir() function -- a better and faster directory iterator"
msgstr ""

#: ../../whatsnew/3.5.rst:450
msgid ""
":pep:`471` adds a new directory iteration function, :func:`os.scandir`, "
"to the standard library.  Additionally, :func:`os.walk` is now "
"implemented using ``scandir``, which makes it 3 to 5 times faster on "
"POSIX systems and 7 to 20 times faster on Windows systems.  This is "
"largely achieved by greatly reducing the number of calls to "
":func:`os.stat` required to walk a directory tree."
msgstr ""

#: ../../whatsnew/3.5.rst:457
msgid ""
"Additionally, ``scandir`` returns an iterator, as opposed to returning a "
"list of file names, which improves memory efficiency when iterating over "
"very large directories."
msgstr ""

#: ../../whatsnew/3.5.rst:461
msgid ""
"The following example shows a simple use of :func:`os.scandir` to display"
" all the files (excluding directories) in the given *path* that don't "
"start with ``'.'``. The :meth:`entry.is_file() <os.DirEntry.is_file>` "
"call will generally not make an additional system call::"
msgstr ""

#: ../../whatsnew/3.5.rst:472
msgid ""
":pep:`471` -- os.scandir() function -- a better and faster directory "
"iterator"
msgstr ""

#: ../../whatsnew/3.5.rst:473
msgid "PEP written and implemented by Ben Hoyt with the help of Victor Stinner."
msgstr ""

#: ../../whatsnew/3.5.rst:479
msgid "PEP 475: Retry system calls failing with EINTR"
msgstr ""

#: ../../whatsnew/3.5.rst:481
msgid ""
"An :py:data:`errno.EINTR` error code is returned whenever a system call, "
"that is waiting for I/O, is interrupted by a signal.  Previously, Python "
"would raise :exc:`InterruptedError` in such cases.  This meant that, when"
" writing a Python application, the developer had two choices:"
msgstr ""

#: ../../whatsnew/3.5.rst:486
msgid "Ignore the ``InterruptedError``."
msgstr ""

#: ../../whatsnew/3.5.rst:487
msgid ""
"Handle the ``InterruptedError`` and attempt to restart the interrupted "
"system call at every call site."
msgstr ""

#: ../../whatsnew/3.5.rst:490
msgid ""
"The first option makes an application fail intermittently. The second "
"option adds a large amount of boilerplate that makes the code nearly "
"unreadable.  Compare::"
msgstr ""

#: ../../whatsnew/3.5.rst:496
msgid "and::"
msgstr ""

#: ../../whatsnew/3.5.rst:505
msgid ""
":pep:`475` implements automatic retry of system calls on ``EINTR``.  This"
" removes the burden of dealing with ``EINTR`` or :exc:`InterruptedError` "
"in user code in most situations and makes Python programs, including the "
"standard library, more robust.  Note that the system call is only retried"
" if the signal handler does not raise an exception."
msgstr ""

#: ../../whatsnew/3.5.rst:512
msgid ""
"Below is a list of functions which are now retried when interrupted by a "
"signal:"
msgstr ""

#: ../../whatsnew/3.5.rst:515
msgid ":func:`open` and :func:`io.open`;"
msgstr ""

#: ../../whatsnew/3.5.rst:517
msgid "functions of the :mod:`faulthandler` module;"
msgstr ""

#: ../../whatsnew/3.5.rst:519
msgid ""
":mod:`os` functions: :func:`~os.fchdir`, :func:`~os.fchmod`, "
":func:`~os.fchown`, :func:`~os.fdatasync`, :func:`~os.fstat`, "
":func:`~os.fstatvfs`, :func:`~os.fsync`, :func:`~os.ftruncate`, "
":func:`~os.mkfifo`, :func:`~os.mknod`, :func:`~os.open`, "
":func:`~os.posix_fadvise`, :func:`~os.posix_fallocate`, "
":func:`~os.pread`, :func:`~os.pwrite`, :func:`~os.read`, "
":func:`~os.readv`, :func:`~os.sendfile`, :func:`~os.wait3`, "
":func:`~os.wait4`, :func:`~os.wait`, :func:`~os.waitid`, "
":func:`~os.waitpid`, :func:`~os.write`, :func:`~os.writev`;"
msgstr ""

#: ../../whatsnew/3.5.rst:529
msgid ""
"special cases: :func:`os.close` and :func:`os.dup2` now ignore "
":py:data:`~errno.EINTR` errors; the syscall is not retried (see the PEP "
"for the rationale);"
msgstr ""

#: ../../whatsnew/3.5.rst:533
msgid ""
":mod:`select` functions: :func:`devpoll.poll() <select.devpoll.poll>`, "
":func:`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() "
"<select.kqueue.control>`, :func:`poll.poll() <select.poll.poll>`, "
":func:`~select.select`;"
msgstr ""

#: ../../whatsnew/3.5.rst:538
msgid ""
"methods of the :class:`~socket.socket` class: "
":meth:`~socket.socket.accept`, :meth:`~socket.socket.connect` (except for"
" non-blocking sockets), :meth:`~socket.socket.recv`, "
":meth:`~socket.socket.recvfrom`, :meth:`~socket.socket.recvmsg`, "
":meth:`~socket.socket.send`, :meth:`~socket.socket.sendall`, "
":meth:`~socket.socket.sendmsg`, :meth:`~socket.socket.sendto`;"
msgstr ""

#: ../../whatsnew/3.5.rst:545
msgid ":func:`signal.sigtimedwait` and :func:`signal.sigwaitinfo`;"
msgstr ""

#: ../../whatsnew/3.5.rst:547
msgid ":func:`time.sleep`."
msgstr ""

#: ../../whatsnew/3.5.rst:552
msgid ":pep:`475` -- Retry system calls failing with EINTR"
msgstr ""

#: ../../whatsnew/3.5.rst:552
msgid ""
"PEP and implementation written by Charles-Fran√ßois Natali and Victor "
"Stinner, with the help of Antoine Pitrou (the French connection)."
msgstr ""

#: ../../whatsnew/3.5.rst:559
msgid "PEP 479: Change StopIteration handling inside generators"
msgstr ""

#: ../../whatsnew/3.5.rst:561
msgid ""
"The interaction of generators and :exc:`StopIteration` in Python 3.4 and "
"earlier was sometimes surprising, and could conceal obscure bugs.  "
"Previously, ``StopIteration`` raised accidentally inside a generator "
"function was interpreted as the end of the iteration by the loop "
"construct driving the generator."
msgstr ""

#: ../../whatsnew/3.5.rst:567
msgid ""
":pep:`479` changes the behavior of generators: when a ``StopIteration`` "
"exception is raised inside a generator, it is replaced with a "
":exc:`RuntimeError` before it exits the generator frame.  The main goal "
"of this change is to ease debugging in the situation where an unguarded "
":func:`next` call raises ``StopIteration`` and causes the iteration "
"controlled by the generator to terminate silently. This is particularly "
"pernicious in combination with the ``yield from`` construct."
msgstr ""

#: ../../whatsnew/3.5.rst:575
msgid ""
"This is a backwards incompatible change, so to enable the new behavior, a"
" :term:`__future__` import is necessary::"
msgstr ""

#: ../../whatsnew/3.5.rst:595
msgid ""
"Without a ``__future__`` import, a :exc:`PendingDeprecationWarning` will "
"be raised whenever a :exc:`StopIteration` exception is raised inside a "
"generator."
msgstr ""

#: ../../whatsnew/3.5.rst:601
msgid ":pep:`479` -- Change StopIteration handling inside generators"
msgstr ""

#: ../../whatsnew/3.5.rst:601
msgid ""
"PEP written by Chris Angelico and Guido van Rossum. Implemented by Chris "
"Angelico, Yury Selivanov and Nick Coghlan."
msgstr ""

#: ../../whatsnew/3.5.rst:608
msgid "PEP 485: A function for testing approximate equality"
msgstr ""

#: ../../whatsnew/3.5.rst:610
msgid ""
":pep:`485` adds the :func:`math.isclose` and :func:`cmath.isclose` "
"functions which tell whether two values are approximately equal or "
"\"close\" to each other.  Whether or not two values are considered close "
"is determined according to given absolute and relative tolerances. "
"Relative tolerance is the maximum allowed difference between ``isclose`` "
"arguments, relative to the larger absolute value::"
msgstr ""

#: ../../whatsnew/3.5.rst:625
msgid ""
"It is also possible to compare two values using absolute tolerance, which"
" must be a non-negative value::"
msgstr ""

#: ../../whatsnew/3.5.rst:639
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ""

#: ../../whatsnew/3.5.rst:639
msgid ""
"PEP written by Christopher Barker; implemented by Chris Barker and Tal "
"Einat."
msgstr ""

#: ../../whatsnew/3.5.rst:646
msgid "PEP 486: Make the Python Launcher aware of virtual environments"
msgstr ""

#: ../../whatsnew/3.5.rst:648
msgid ""
":pep:`486` makes the Windows launcher (see :pep:`397`) aware of an active"
" virtual environment. When the default interpreter would be used and the "
"``VIRTUAL_ENV`` environment variable is set, the interpreter in the "
"virtual environment will be used."
msgstr ""

#: ../../whatsnew/3.5.rst:655
msgid ":pep:`486` -- Make the Python Launcher aware of virtual environments"
msgstr ""

#: ../../whatsnew/3.5.rst:656
msgid "PEP written and implemented by Paul Moore."
msgstr ""

#: ../../whatsnew/3.5.rst:662
msgid "PEP 488: Elimination of PYO files"
msgstr ""

#: ../../whatsnew/3.5.rst:664
msgid ""
":pep:`488` does away with the concept of ``.pyo`` files. This means that "
"``.pyc`` files represent both unoptimized and optimized bytecode. To "
"prevent the need to constantly regenerate bytecode files, ``.pyc`` files "
"now have an optional ``opt-`` tag in their name when the bytecode is "
"optimized. This has the side-effect of no more bytecode file name clashes"
" when running under either :option:`-O` or :option:`-OO`. Consequently, "
"bytecode files generated from :option:`-O`, and :option:`-OO` may now "
"exist simultaneously. :func:`importlib.util.cache_from_source` has an "
"updated API to help with this change."
msgstr ""

#: ../../whatsnew/3.5.rst:676
msgid ":pep:`488` -- Elimination of PYO files"
msgstr ""

#: ../../whatsnew/3.5.rst:677
msgid "PEP written and implemented by Brett Cannon."
msgstr ""

#: ../../whatsnew/3.5.rst:683
msgid "PEP 489: Multi-phase extension module initialization"
msgstr ""

#: ../../whatsnew/3.5.rst:685
msgid ""
":pep:`489` updates extension module initialization to take advantage of "
"the two step module loading mechanism introduced by :pep:`451` in Python "
"3.4."
msgstr ""

#: ../../whatsnew/3.5.rst:688
msgid ""
"This change brings the import semantics of extension modules that opt-in "
"to using the new mechanism much closer to those of Python source and "
"bytecode modules, including the ability to use any valid identifier as a "
"module name, rather than being restricted to ASCII."
msgstr ""

#: ../../whatsnew/3.5.rst:696
msgid ":pep:`489` -- Multi-phase extension module initialization"
msgstr ""

#: ../../whatsnew/3.5.rst:696
msgid ""
"PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan; "
"implemented by Petr Viktorin."
msgstr ""

#: ../../whatsnew/3.5.rst:705
msgid ""
"Added the ``\"namereplace\"`` error handlers.  The "
"``\"backslashreplace\"`` error handlers now work with decoding and "
"translating. (Contributed by Serhiy Storchaka in :issue:`19676` and "
":issue:`22286`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:709
msgid ""
"The :option:`-b` option now affects comparisons of :class:`bytes` with "
":class:`int`.  (Contributed by Serhiy Storchaka in :issue:`23681`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:712
msgid ""
"New Kazakh ``kz1048`` and Tajik ``koi8_t`` :ref:`codecs <standard-"
"encodings>`. (Contributed by Serhiy Storchaka in :issue:`22682` and "
":issue:`22681`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:715
msgid ""
"Property docstrings are now writable. This is especially useful for "
":func:`collections.namedtuple` docstrings. (Contributed by Berker Peksag "
"in :issue:`24064`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:719
msgid ""
"Circular imports involving relative imports are now supported. "
"(Contributed by Brett Cannon and Antoine Pitrou in :issue:`17636`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:727 ../../whatsnew/3.6.rst:1598
#: ../../whatsnew/3.8.rst:1309
msgid "typing"
msgstr ""

#: ../../whatsnew/3.5.rst:729
msgid ""
"The new :mod:`typing` :term:`provisional <provisional API>` module "
"provides standard definitions and tools for function type annotations. "
"See :ref:`Type Hints <whatsnew-pep-484>` for more information."
msgstr ""

#: ../../whatsnew/3.5.rst:736 ../../whatsnew/3.7.rst:1619
msgid "zipapp"
msgstr ""

#: ../../whatsnew/3.5.rst:738
msgid ""
"The new :mod:`zipapp` module (specified in :pep:`441`) provides an API "
"and command line tool for creating executable Python Zip Applications, "
"which were introduced in Python 2.6 in :issue:`1739468`, but which were "
"not well publicized, either at the time or since."
msgstr ""

#: ../../whatsnew/3.5.rst:743
msgid ""
"With the new module, bundling your application is as simple as putting "
"all the files, including a ``__main__.py`` file, into a directory "
"``myapp`` and running:"
msgstr ""

#: ../../whatsnew/3.5.rst:752
msgid ""
"The module implementation has been contributed by Paul Moore in "
":issue:`23491`."
msgstr ""

#: ../../whatsnew/3.5.rst:757
msgid ":pep:`441` -- Improving Python ZIP Application Support"
msgstr ""

#: ../../whatsnew/3.5.rst:766
msgid ""
"The :class:`~argparse.ArgumentParser` class now allows disabling "
":ref:`abbreviated usage <prefix-matching>` of long options by setting "
":ref:`allow_abbrev` to ``False``.  (Contributed by Jonathan Paugh, Steven"
" Bethard, paul j3 and Daniel Eriksson in :issue:`14910`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:775
msgid ""
"Since the :mod:`asyncio` module is :term:`provisional <provisional API>`,"
" all changes introduced in Python 3.5 have also been backported to Python"
" 3.4.x."
msgstr ""

#: ../../whatsnew/3.5.rst:778
msgid "Notable changes in the :mod:`asyncio` module since Python 3.4.0:"
msgstr ""

#: ../../whatsnew/3.5.rst:780
msgid ""
"New debugging APIs: :meth:`loop.set_debug() <asyncio.loop.set_debug>` and"
" :meth:`loop.get_debug() <asyncio.loop.get_debug>` methods. (Contributed "
"by Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.5.rst:784
msgid ""
"The proactor event loop now supports SSL. (Contributed by Antoine Pitrou "
"and Victor Stinner in :issue:`22560`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:787
msgid ""
"A new :meth:`loop.is_closed() <asyncio.loop.is_closed>` method to check "
"if the event loop is closed. (Contributed by Victor Stinner in "
":issue:`21326`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:791
msgid ""
"A new :meth:`loop.create_task() <asyncio.loop.create_task>` to "
"conveniently create and schedule a new :class:`~asyncio.Task` for a "
"coroutine.  The ``create_task`` method is also used by all asyncio "
"functions that wrap coroutines into tasks, such as :func:`asyncio.wait`, "
":func:`asyncio.gather`, etc. (Contributed by Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.5.rst:798
msgid ""
"A new :meth:`transport.get_write_buffer_limits() "
"<asyncio.WriteTransport.get_write_buffer_limits>` method to inquire for "
"*high-* and *low-* water limits of the flow control. (Contributed by "
"Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.5.rst:803
msgid ""
"The :func:`~asyncio.async` function is deprecated in favor of "
":func:`~asyncio.ensure_future`. (Contributed by Yury Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:807
msgid ""
"New :meth:`loop.set_task_factory() <asyncio.loop.set_task_factory>` and "
":meth:`loop.get_task_factory() <asyncio.loop.get_task_factory>` methods "
"to customize the task factory that :meth:`loop.create_task() "
"<asyncio.loop.create_task>` method uses.  (Contributed by Yury "
"Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:814
msgid ""
"New :meth:`Queue.join() <asyncio.Queue.join>` and "
":meth:`Queue.task_done() <asyncio.Queue.task_done>` queue methods. "
"(Contributed by Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.5.rst:818
msgid ""
"The ``JoinableQueue`` class was removed, in favor of the "
":class:`asyncio.Queue` class. (Contributed by Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.5.rst:822
msgid "Updates in 3.5.1:"
msgstr ""

#: ../../whatsnew/3.5.rst:824 ../../whatsnew/3.6.rst:826
msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use "
"it, such as :meth:`loop.run_until_complete() "
"<asyncio.loop.run_until_complete>`, now accept all kinds of "
":term:`awaitable objects <awaitable>`. (Contributed by Yury Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:829 ../../whatsnew/3.6.rst:831
msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit "
"coroutines to event loops from other threads. (Contributed by Vincent "
"Michel.)"
msgstr ""

#: ../../whatsnew/3.5.rst:833 ../../whatsnew/3.6.rst:835
msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` "
"method to check if the transport is closing or closed. (Contributed by "
"Yury Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:837 ../../whatsnew/3.6.rst:839
msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can "
"now accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""

#: ../../whatsnew/3.5.rst:841
msgid "Updates in 3.5.2:"
msgstr ""

#: ../../whatsnew/3.5.rst:843
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop "
"implementations, such as `uvloop "
"<https://github.com/MagicStack/uvloop>`_, to provide a faster "
":class:`asyncio.Future` implementation. (Contributed by Yury Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:850
msgid ""
"New :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` method to get the current exception"
" handler. (Contributed by Yury Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:854 ../../whatsnew/3.6.rst:854
msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` "
"method to read data from the stream until a separator bytes sequence "
"appears. (Contributed by Mark Korenberg.)"
msgstr ""

#: ../../whatsnew/3.5.rst:859
msgid ""
"The :meth:`loop.create_connection() <asyncio.loop.create_connection>` and"
" :meth:`loop.create_server() <asyncio.loop.create_server>` methods are "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""

#: ../../whatsnew/3.5.rst:865
msgid ""
"The :meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>` "
"no longer requires the *address* to be resolved prior to the call. "
"(Contributed by A. Jesse Jiryu Davis.)"
msgstr ""

#: ../../whatsnew/3.5.rst:873
msgid ""
"The :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"method now accepts an optional *max_length* argument to limit the maximum"
" size of decompressed data. (Contributed by Nikolaus Rath in "
":issue:`15955`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:879
msgid "cgi"
msgstr ""

#: ../../whatsnew/3.5.rst:881
msgid ""
"The :class:`~cgi.FieldStorage` class now supports the :term:`context "
"manager` protocol.  (Contributed by Berker Peksag in :issue:`20289`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:886 ../../whatsnew/3.6.rst:909
msgid "cmath"
msgstr ""

#: ../../whatsnew/3.5.rst:888
msgid ""
"A new function :func:`~cmath.isclose` provides a way to test for "
"approximate equality.  (Contributed by Chris Barker and Tal Einat in "
":issue:`24270`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:893
msgid "code"
msgstr ""

#: ../../whatsnew/3.5.rst:895
msgid ""
"The :func:`InteractiveInterpreter.showtraceback() "
"<code.InteractiveInterpreter.showtraceback>` method now prints the full "
"chained traceback, just like the interactive interpreter.  (Contributed "
"by Claudiu Popa in :issue:`17442`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:905
msgid ""
"The :class:`~collections.OrderedDict` class is now implemented in C, "
"which makes it 4 to 100 times faster.  (Contributed by Eric Snow in "
":issue:`16991`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:908
msgid ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, "
":meth:`OrderedDict.keys() <collections.OrderedDict.keys>`, "
":meth:`OrderedDict.values() <collections.OrderedDict.values>` views now "
"support :func:`reversed` iteration. (Contributed by Serhiy Storchaka in "
":issue:`19505`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:914
msgid ""
"The :class:`~collections.deque` class now defines "
":meth:`~collections.deque.index`, :meth:`~collections.deque.insert`, and "
":meth:`~collections.deque.copy`, and supports the ``+`` and ``*`` "
"operators. This allows deques to be recognized as a "
":class:`~collections.abc.MutableSequence` and improves their "
"substitutability for lists. (Contributed by Raymond Hettinger in "
":issue:`23704`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:921
msgid ""
"Docstrings produced by :func:`~collections.namedtuple` can now be "
"updated::"
msgstr ""

#: ../../whatsnew/3.5.rst:928
msgid "(Contributed by Berker Peksag in :issue:`24064`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:930
msgid ""
"The :class:`~collections.UserString` class now implements the "
":meth:`__getnewargs__`, :meth:`__rmod__`, :meth:`~str.casefold`, "
":meth:`~str.format_map`, :meth:`~str.isprintable`, and "
":meth:`~str.maketrans` methods to match the corresponding methods of "
":class:`str`. (Contributed by Joe Jevnik in :issue:`22189`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:938
msgid "collections.abc"
msgstr ""

#: ../../whatsnew/3.5.rst:940
msgid ""
"The :meth:`Sequence.index() <collections.abc.Sequence.index>` method now "
"accepts *start* and *stop* arguments to match the corresponding methods "
"of :class:`tuple`, :class:`list`, etc. (Contributed by Devin Jeanpierre "
"in :issue:`23086`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:945
msgid ""
"A new :class:`~collections.abc.Generator` abstract base class. "
"(Contributed by Stefan Behnel in :issue:`24018`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:948
msgid ""
"New :class:`~collections.abc.Awaitable`, "
":class:`~collections.abc.Coroutine`, "
":class:`~collections.abc.AsyncIterator`, and "
":class:`~collections.abc.AsyncIterable` abstract base classes. "
"(Contributed by Yury Selivanov in :issue:`24184`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:953
msgid ""
"For earlier Python versions, a backport of the new ABCs is available in "
"an external `PyPI package <https://pypi.org/project/backports_abc>`_."
msgstr ""

#: ../../whatsnew/3.5.rst:958 ../../whatsnew/3.7.rst:802
msgid "compileall"
msgstr ""

#: ../../whatsnew/3.5.rst:960
msgid ""
"A new :mod:`compileall` option, :samp:`-j {N}`, allows running *N* "
"workers simultaneously to perform parallel bytecode compilation. The "
":func:`~compileall.compile_dir` function has a corresponding ``workers`` "
"parameter.  (Contributed by Claudiu Popa in :issue:`16104`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:965
msgid ""
"Another new option, ``-r``, allows controlling the maximum recursion "
"level for subdirectories.  (Contributed by Claudiu Popa in "
":issue:`19628`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:968
msgid ""
"The ``-q`` command line option can now be specified more than once, in "
"which case all output, including errors, will be suppressed.  The "
"corresponding ``quiet`` parameter in :func:`~compileall.compile_dir`, "
":func:`~compileall.compile_file`, and :func:`~compileall.compile_path` "
"can now accept an integer value indicating the level of output "
"suppression. (Contributed by Thomas Kluyver in :issue:`21338`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:977 ../../whatsnew/3.6.rst:949
#: ../../whatsnew/3.7.rst:813
msgid "concurrent.futures"
msgstr ""

#: ../../whatsnew/3.5.rst:979
msgid ""
"The :meth:`Executor.map() <concurrent.futures.Executor.map>` method now "
"accepts a *chunksize* argument to allow batching of tasks to improve "
"performance when :meth:`~concurrent.futures.ProcessPoolExecutor` is used."
" (Contributed by Dan O'Reilly in :issue:`11271`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:984
msgid ""
"The number of workers in the "
":class:`~concurrent.futures.ThreadPoolExecutor` constructor is optional "
"now.  The default value is 5 times the number of CPUs. (Contributed by "
"Claudiu Popa in :issue:`21527`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:992
msgid ""
":mod:`configparser` now provides a way to customize the conversion of "
"values by specifying a dictionary of converters in the "
":class:`~configparser.ConfigParser` constructor, or by defining them as "
"methods in ``ConfigParser`` subclasses.  Converters defined in a parser "
"instance are inherited by its section proxies."
msgstr ""

#: ../../whatsnew/3.5.rst:998 ../../whatsnew/3.7.rst:579
#: ../../whatsnew/3.8.rst:1379
msgid "Example::"
msgstr ""

#: ../../whatsnew/3.5.rst:1016
msgid "(Contributed by ≈Åukasz Langa in :issue:`18159`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1022
msgid ""
"The new :func:`~contextlib.redirect_stderr` :term:`context manager` "
"(similar to :func:`~contextlib.redirect_stdout`) makes it easier for "
"utility scripts to handle inflexible APIs that write their output to "
":data:`sys.stderr` and don't provide any options to redirect it::"
msgstr ""

#: ../../whatsnew/3.5.rst:1035
msgid "(Contributed by Berker Peksag in :issue:`22389`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1041
msgid ""
"The :meth:`~csv.csvwriter.writerow` method now supports arbitrary "
"iterables, not just sequences.  (Contributed by Serhiy Storchaka in "
":issue:`23171`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1048
msgid ""
"The new :func:`~curses.update_lines_cols` function updates the "
":envvar:`LINES` and :envvar:`COLS` environment variables.  This is useful"
" for detecting manual screen resizing.  (Contributed by Arnon Yaari in "
":issue:`4254`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1056
msgid ""
":func:`dumb.open <dbm.dumb.open>` always creates a new database when the "
"flag has the value ``\"n\"``.  (Contributed by Claudiu Popa in "
":issue:`18039`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1061
msgid "difflib"
msgstr ""

#: ../../whatsnew/3.5.rst:1063
msgid ""
"The charset of HTML documents generated by :meth:`HtmlDiff.make_file() "
"<difflib.HtmlDiff.make_file>` can now be customized by using a new "
"*charset* keyword-only argument. The default charset of HTML document "
"changed from ``\"ISO-8859-1\"`` to ``\"utf-8\"``. (Contributed by Berker "
"Peksag in :issue:`2052`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1070
msgid ""
"The :func:`~difflib.diff_bytes` function can now compare lists of byte "
"strings.  This fixes a regression from Python 2. (Contributed by Terry J."
" Reedy and Greg Ward in :issue:`17445`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1076 ../../whatsnew/3.6.rst:1012
#: ../../whatsnew/3.6.rst:1986 ../../whatsnew/3.7.rst:897
msgid "distutils"
msgstr ""

#: ../../whatsnew/3.5.rst:1078
msgid ""
"Both the ``build`` and ``build_ext`` commands now accept a ``-j`` option "
"to enable parallel building of extension modules. (Contributed by Antoine"
" Pitrou in :issue:`5309`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1082
msgid ""
"The :mod:`distutils` module now supports ``xz`` compression, and can be "
"enabled by passing ``xztar`` as an argument to ``bdist --format``. "
"(Contributed by Serhiy Storchaka in :issue:`16314`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1090
msgid ""
"The :func:`~doctest.DocTestSuite` function returns an empty "
":class:`unittest.TestSuite` if *module* contains no docstrings, instead "
"of raising :exc:`ValueError`.  (Contributed by Glenn Jones in "
":issue:`15916`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1098
msgid ""
"A new policy option :attr:`Policy.mangle_from_ "
"<email.policy.Policy.mangle_from_>` controls whether or not lines that "
"start with ``\"From \"`` in email bodies are prefixed with a ``\">\"`` "
"character by generators.  The default is ``True`` for "
":attr:`~email.policy.compat32` and ``False`` for all other policies. "
"(Contributed by Milan Oberkirch in :issue:`20098`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1104
msgid ""
"A new :meth:`Message.get_content_disposition() "
"<email.message.Message.get_content_disposition>` method provides easy "
"access to a canonical value for the :mailheader:`Content-Disposition` "
"header. (Contributed by Abhilash Raj in :issue:`21083`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1110
msgid ""
"A new policy option :attr:`EmailPolicy.utf8 "
"<email.policy.EmailPolicy.utf8>` can be set to ``True`` to encode email "
"headers using the UTF-8 charset instead of using encoded words.  This "
"allows ``Messages`` to be formatted according to :rfc:`6532` and used "
"with an SMTP server that supports the :rfc:`6531` ``SMTPUTF8`` extension."
"  (Contributed by R. David Murray in :issue:`24211`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1117
msgid ""
"The :class:`mime.text.MIMEText <email.mime.text.MIMEText>` constructor "
"now accepts a :class:`charset.Charset <email.charset.Charset>` instance. "
"(Contributed by Claude Paroz and Berker Peksag in :issue:`16324`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1125
msgid ""
"The :class:`~enum.Enum` callable has a new parameter *start* to specify "
"the initial number of enum values if only *names* are provided::"
msgstr ""

#: ../../whatsnew/3.5.rst:1134
msgid "(Contributed by Ethan Furman in :issue:`21706`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1140
msgid ""
"The :func:`~faulthandler.enable`, :func:`~faulthandler.register`, "
":func:`~faulthandler.dump_traceback` and "
":func:`~faulthandler.dump_traceback_later` functions now accept file "
"descriptors in addition to file-like objects. (Contributed by Wei Wu in "
":issue:`23566`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1152
msgid ""
"Most of the :func:`~functools.lru_cache` machinery is now implemented in "
"C, making it significantly faster.  (Contributed by Matt Joiner, Alexey "
"Kachayev, and Serhiy Storchaka in :issue:`14373`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1160
msgid ""
"The :func:`~glob.iglob` and :func:`~glob.glob` functions now support "
"recursive search in subdirectories, using the ``\"**\"`` pattern. "
"(Contributed by Serhiy Storchaka in :issue:`13968`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1166 ../../whatsnew/3.8.rst:835
msgid "gzip"
msgstr ""

#: ../../whatsnew/3.5.rst:1168
msgid ""
"The *mode* argument of the :class:`~gzip.GzipFile` constructor now "
"accepts ``\"x\"`` to request exclusive creation. (Contributed by Tim "
"Heaney in :issue:`19222`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1174
msgid "heapq"
msgstr ""

#: ../../whatsnew/3.5.rst:1176
msgid ""
"Element comparison in :func:`~heapq.merge` can now be customized by "
"passing a :term:`key function` in a new optional *key* keyword argument, "
"and a new optional *reverse* keyword argument can be used to reverse "
"element comparison::"
msgstr ""

#: ../../whatsnew/3.5.rst:1189
msgid "(Contributed by Raymond Hettinger in :issue:`13742`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1195
msgid ""
"A new :class:`HTTPStatus <http.HTTPStatus>` enum that defines a set of "
"HTTP status codes, reason phrases and long descriptions written in "
"English. (Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1203
msgid ""
":meth:`HTTPConnection.getresponse() "
"<http.client.HTTPConnection.getresponse>` now raises a "
":exc:`~http.client.RemoteDisconnected` exception when a remote server "
"connection is closed unexpectedly.  Additionally, if a "
":exc:`ConnectionError` (of which ``RemoteDisconnected`` is a subclass) is"
" raised, the client socket is now closed automatically, and will "
"reconnect on the next request::"
msgstr ""

#: ../../whatsnew/3.5.rst:1219
msgid "(Contributed by Martin Panter in :issue:`3566`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1225
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended "
"for import by other programs, it gets improvements with every release.  "
"See :file:`Lib/idlelib/NEWS.txt` for a cumulative list of changes since "
"3.4.0, as well as changes made in future 3.5.x releases. This file is "
"also available from the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""

#: ../../whatsnew/3.5.rst:1235
msgid ""
"The :class:`~imaplib.IMAP4` class now supports the :term:`context "
"manager` protocol. When used in a :keyword:`with` statement, the IMAP4 "
"``LOGOUT`` command will be called automatically at the end of the block. "
"(Contributed by Tarek Ziad√© and Serhiy Storchaka in :issue:`4972`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1240
msgid ""
"The :mod:`imaplib` module now supports :rfc:`5161` (ENABLE Extension) and"
" :rfc:`6855` (UTF-8 Support) via the :meth:`IMAP4.enable() "
"<imaplib.IMAP4.enable>` method.  A new :attr:`IMAP4.utf8_enabled "
"<imaplib.IMAP4.utf8_enabled>` attribute tracks whether or not :rfc:`6855`"
" support is enabled. (Contributed by Milan Oberkirch, R. David Murray, "
"and Maciej Szulik in :issue:`21800`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1247
msgid ""
"The :mod:`imaplib` module now automatically encodes non-ASCII string "
"usernames and passwords using UTF-8, as recommended by the RFCs.  "
"(Contributed by Milan Oberkirch in :issue:`21800`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1253
msgid "imghdr"
msgstr ""

#: ../../whatsnew/3.5.rst:1255
msgid ""
"The :func:`~imghdr.what` function now recognizes the `OpenEXR "
"<http://www.openexr.com>`_ format (contributed by Martin Vignali and "
"Claudiu Popa in :issue:`20295`), and the `WebP "
"<https://en.wikipedia.org/wiki/WebP>`_ format (contributed by Fabrice "
"Aneche and Claudiu Popa in :issue:`20197`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1265
msgid ""
"The :class:`util.LazyLoader <importlib.util.LazyLoader>` class allows for"
" lazy loading of modules in applications where startup time is important."
" (Contributed by Brett Cannon in :issue:`17621`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1269
msgid ""
"The :func:`abc.InspectLoader.source_to_code() "
"<importlib.abc.InspectLoader.source_to_code>` method is now a static "
"method.  This makes it easier to initialize a module object with code "
"compiled from a string by running ``exec(code, module.__dict__)``. "
"(Contributed by Brett Cannon in :issue:`21156`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1275
msgid ""
"The new :func:`util.module_from_spec() <importlib.util.module_from_spec>`"
" function is now the preferred way to create a new module.  As opposed to"
" creating a :class:`types.ModuleType` instance directly, this new "
"function will set the various import-controlled attributes based on the "
"passed-in spec object.  (Contributed by Brett Cannon in :issue:`20383`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1285
msgid ""
"Both the :class:`~inspect.Signature` and :class:`~inspect.Parameter` "
"classes are now picklable and hashable.  (Contributed by Yury Selivanov "
"in :issue:`20726` and :issue:`20334`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1289
msgid ""
"A new :meth:`BoundArguments.apply_defaults() "
"<inspect.BoundArguments.apply_defaults>` method provides a way to set "
"default values for missing arguments::"
msgstr ""

#: ../../whatsnew/3.5.rst:1299
msgid "(Contributed by Yury Selivanov in :issue:`24190`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1301
msgid ""
"A new class method :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>` makes subclassing of "
":class:`~inspect.Signature` easier.  (Contributed by Yury Selivanov and "
"Eric Snow in :issue:`17373`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1306
msgid ""
"The :func:`~inspect.signature` function now accepts a *follow_wrapped* "
"optional keyword argument, which, when set to ``False``, disables "
"automatic following of ``__wrapped__`` links. (Contributed by Yury "
"Selivanov in :issue:`20691`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1311
msgid ""
"A set of new functions to inspect :term:`coroutine functions <coroutine "
"function>` and :term:`coroutine objects <coroutine>` has been added: "
":func:`~inspect.iscoroutine`, :func:`~inspect.iscoroutinefunction`, "
":func:`~inspect.isawaitable`, :func:`~inspect.getcoroutinelocals`, and "
":func:`~inspect.getcoroutinestate`. (Contributed by Yury Selivanov in "
":issue:`24017` and :issue:`24400`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1319
msgid ""
"The :func:`~inspect.stack`, :func:`~inspect.trace`, "
":func:`~inspect.getouterframes`, and :func:`~inspect.getinnerframes` "
"functions now return a list of named tuples. (Contributed by Daniel "
"Shahaf in :issue:`16808`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1328
msgid ""
"A new :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>` "
"method, that uses at most one call to the underlying raw stream's "
":meth:`RawIOBase.read() <io.RawIOBase.read>` or "
":meth:`RawIOBase.readinto() <io.RawIOBase.readinto>` methods. "
"(Contributed by Nikolaus Rath in :issue:`20578`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1338
msgid ""
"Both the :class:`~ipaddress.IPv4Network` and "
":class:`~ipaddress.IPv6Network` classes now accept an ``(address, "
"netmask)`` tuple argument, so as to easily construct network objects from"
" existing addresses::"
msgstr ""

#: ../../whatsnew/3.5.rst:1348
msgid "(Contributed by Peter Moody and Antoine Pitrou in :issue:`16531`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1350
msgid ""
"A new :attr:`~ipaddress.IPv4Network.reverse_pointer` attribute for the "
":class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network` "
"classes returns the name of the reverse DNS PTR record::"
msgstr ""

#: ../../whatsnew/3.5.rst:1362
msgid "(Contributed by Leon Weber in :issue:`20480`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1366 ../../whatsnew/3.6.rst:1235
msgid "json"
msgstr ""

#: ../../whatsnew/3.5.rst:1368
msgid ""
"The :mod:`json.tool` command line interface now preserves the order of "
"keys in JSON objects passed in input.  The new ``--sort-keys`` option can"
" be used to sort the keys alphabetically. (Contributed by Berker Peksag "
"in :issue:`21650`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1373
msgid ""
"JSON decoder now raises :exc:`~json.JSONDecodeError` instead of "
":exc:`ValueError` to provide better context information about the error. "
"(Contributed by Serhiy Storchaka in :issue:`19361`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1379
msgid "linecache"
msgstr ""

#: ../../whatsnew/3.5.rst:1381
msgid ""
"A new :func:`~linecache.lazycache` function can be used to capture "
"information about a non-file-based module to permit getting its lines "
"later via :func:`~linecache.getline`. This avoids doing I/O until a line "
"is actually needed, without having to carry the module globals around "
"indefinitely. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1389 ../../whatsnew/3.7.rst:1092
#: ../../whatsnew/3.7.rst:2021
msgid "locale"
msgstr ""

#: ../../whatsnew/3.5.rst:1391
msgid ""
"A new :func:`~locale.delocalize` function can be used to convert a string"
" into a normalized number string, taking the ``LC_NUMERIC`` settings into"
" account::"
msgstr ""

#: ../../whatsnew/3.5.rst:1404
msgid "(Contributed by C√©dric Krier in :issue:`13918`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1410
msgid ""
"All logging methods (:class:`~logging.Logger` "
":meth:`~logging.Logger.log`, :meth:`~logging.Logger.exception`, "
":meth:`~logging.Logger.critical`, :meth:`~logging.Logger.debug`, etc.), "
"now accept exception instances as an *exc_info* argument, in addition to "
"boolean values and exception tuples::"
msgstr ""

#: ../../whatsnew/3.5.rst:1423
msgid "(Contributed by Yury Selivanov in :issue:`20537`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1425
msgid ""
"The :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` class "
"now accepts an optional :class:`ssl.SSLContext` instance to configure SSL"
" settings used in an HTTP connection. (Contributed by Alex Gaynor in "
":issue:`22788`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1430
msgid ""
"The :class:`handlers.QueueListener <logging.handlers.QueueListener>` "
"class now takes a *respect_handler_level* keyword argument which, if set "
"to ``True``, will pass messages to handlers taking handler levels into "
"account. (Contributed by Vinay Sajip.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1439
msgid ""
"The :meth:`LZMADecompressor.decompress() "
"<lzma.LZMADecompressor.decompress>` method now accepts an optional "
"*max_length* argument to limit the maximum size of decompressed data. "
"(Contributed by Martin Panter in :issue:`15955`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1448
msgid ""
"Two new constants have been added to the :mod:`math` module: "
":data:`~math.inf` and :data:`~math.nan`.  (Contributed by Mark Dickinson "
"in :issue:`23185`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1451
msgid ""
"A new function :func:`~math.isclose` provides a way to test for "
"approximate equality. (Contributed by Chris Barker and Tal Einat in "
":issue:`24270`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1454
msgid ""
"A new :func:`~math.gcd` function has been added.  The "
":func:`fractions.gcd` function is now deprecated. (Contributed by Mark "
"Dickinson and Serhiy Storchaka in :issue:`22486`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1462
msgid ""
":func:`sharedctypes.synchronized() "
"<multiprocessing.sharedctypes.synchronized>` objects now support the "
":term:`context manager` protocol. (Contributed by Charles-Fran√ßois Natali"
" in :issue:`21565`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1470
msgid ""
":func:`~operator.attrgetter`, :func:`~operator.itemgetter`, and "
":func:`~operator.methodcaller` objects now support pickling. (Contributed"
" by Josh Rosenberg and Serhiy Storchaka in :issue:`22955`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1474
msgid ""
"New :func:`~operator.matmul` and :func:`~operator.imatmul` functions to "
"perform matrix multiplication. (Contributed by Benjamin Peterson in "
":issue:`21176`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1482
msgid ""
"The new :func:`~os.scandir` function returning an iterator of "
":class:`~os.DirEntry` objects has been added.  If possible, "
":func:`~os.scandir` extracts file attributes while scanning a directory, "
"removing the need to perform subsequent system calls to determine file "
"type or attributes, which may significantly improve performance.  "
"(Contributed by Ben Hoyt with the help of Victor Stinner in "
":issue:`22524`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1489
msgid ""
"On Windows, a new :attr:`stat_result.st_file_attributes "
"<os.stat_result.st_file_attributes>` attribute is now available.  It "
"corresponds to the ``dwFileAttributes`` member of the "
"``BY_HANDLE_FILE_INFORMATION`` structure returned by "
"``GetFileInformationByHandle()``.  (Contributed by Ben Hoyt in "
":issue:`21719`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1495
msgid ""
"The :func:`~os.urandom` function now uses the ``getrandom()`` syscall on "
"Linux 3.17 or newer, and ``getentropy()`` on OpenBSD 5.6 and newer, "
"removing the need to use ``/dev/urandom`` and avoiding failures due to "
"potential file descriptor exhaustion.  (Contributed by Victor Stinner in "
":issue:`22181`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1500
msgid ""
"New :func:`~os.get_blocking` and :func:`~os.set_blocking` functions allow"
" getting and setting a file descriptor's blocking mode "
"(:data:`~os.O_NONBLOCK`.) (Contributed by Victor Stinner in "
":issue:`22054`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1504
msgid ""
"The :func:`~os.truncate` and :func:`~os.ftruncate` functions are now "
"supported on Windows.  (Contributed by Steve Dower in :issue:`23668`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1507
msgid ""
"There is a new :func:`os.path.commonpath` function returning the longest "
"common sub-path of each passed pathname.  Unlike the "
":func:`os.path.commonprefix` function, it always returns a valid path::"
msgstr ""

#: ../../whatsnew/3.5.rst:1518
msgid "(Contributed by Rafik Draoui and Serhiy Storchaka in :issue:`10395`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1524
msgid ""
"The new :meth:`Path.samefile() <pathlib.Path.samefile>` method can be "
"used to check whether the path points to the same file as another path, "
"which can be either another :class:`~pathlib.Path` object, or a string::"
msgstr ""

#: ../../whatsnew/3.5.rst:1534
msgid "(Contributed by Vajrasky Kok and Antoine Pitrou in :issue:`19775`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1536
msgid ""
"The :meth:`Path.mkdir() <pathlib.Path.mkdir>` method now accepts a new "
"optional *exist_ok* argument to match ``mkdir -p`` and "
":func:`os.makedirs` functionality.  (Contributed by Berker Peksag in "
":issue:`21539`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1540
msgid ""
"There is a new :meth:`Path.expanduser() <pathlib.Path.expanduser>` method"
" to expand ``~`` and ``~user`` prefixes.  (Contributed by Serhiy "
"Storchaka and Claudiu Popa in :issue:`19776`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1544
msgid ""
"A new :meth:`Path.home() <pathlib.Path.home>` class method can be used to"
" get a :class:`~pathlib.Path` instance representing the user‚Äôs home "
"directory. (Contributed by Victor Salgado and Mayank Tripathi in "
":issue:`19777`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1549
msgid ""
"New :meth:`Path.write_text() <pathlib.Path.write_text>`, "
":meth:`Path.read_text() <pathlib.Path.read_text>`, "
":meth:`Path.write_bytes() <pathlib.Path.write_bytes>`, "
":meth:`Path.read_bytes() <pathlib.Path.read_bytes>` methods to simplify "
"read/write operations on files."
msgstr ""

#: ../../whatsnew/3.5.rst:1555
msgid ""
"The following code snippet will create or rewrite existing file "
"``~/spam42``::"
msgstr ""

#: ../../whatsnew/3.5.rst:1563
msgid "(Contributed by Christopher Welborn in :issue:`20218`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1569
msgid ""
"Nested objects, such as unbound methods or nested classes, can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than "
"protocol version 4. Protocol version 4 already supports these cases.  "
"(Contributed by Serhiy Storchaka in :issue:`23611`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1578
msgid ""
"A new :meth:`POP3.utf8() <poplib.POP3.utf8>` command enables :rfc:`6856` "
"(Internationalized Email) support, if a POP server supports it. "
"(Contributed by Milan OberKirch in :issue:`21804`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1586
msgid ""
"References and conditional references to groups with fixed length are now"
" allowed in lookbehind assertions::"
msgstr ""

#: ../../whatsnew/3.5.rst:1596
msgid "(Contributed by Serhiy Storchaka in :issue:`9179`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1598
msgid ""
"The number of capturing groups in regular expressions is no longer "
"limited to 100.  (Contributed by Serhiy Storchaka in :issue:`22437`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1601
msgid ""
"The :func:`~re.sub` and :func:`~re.subn` functions now replace unmatched "
"groups with empty strings instead of raising an exception. (Contributed "
"by Serhiy Storchaka in :issue:`1519638`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1605
msgid ""
"The :class:`re.error` exceptions have new attributes, "
":attr:`~re.error.msg`, :attr:`~re.error.pattern`, :attr:`~re.error.pos`, "
":attr:`~re.error.lineno`, and :attr:`~re.error.colno`, that provide "
"better context information about the error::"
msgstr ""

#: ../../whatsnew/3.5.rst:1619
msgid "(Contributed by Serhiy Storchaka in :issue:`22578`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1623 ../../whatsnew/3.6.rst:1363
msgid "readline"
msgstr ""

#: ../../whatsnew/3.5.rst:1625
msgid ""
"A new :func:`~readline.append_history_file` function can be used to "
"append the specified number of trailing elements in history to the given "
"file. (Contributed by Bruno Cauet in :issue:`22940`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1633
msgid ""
"The new :class:`~selectors.DevpollSelector` supports efficient "
"``/dev/poll`` polling on Solaris. (Contributed by Giampaolo Rodola' in "
":issue:`18931`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1641
msgid ""
"The :func:`~shutil.move` function now accepts a *copy_function* argument,"
" allowing, for example, the :func:`~shutil.copy` function to be used "
"instead of the default :func:`~shutil.copy2` if there is a need to ignore"
" file metadata when moving. (Contributed by Claudiu Popa in "
":issue:`19840`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1647
msgid ""
"The :func:`~shutil.make_archive` function now supports the *xztar* "
"format. (Contributed by Serhiy Storchaka in :issue:`5411`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1654
msgid ""
"On Windows, the :func:`~signal.set_wakeup_fd` function now also supports "
"socket handles.  (Contributed by Victor Stinner in :issue:`22018`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1657
msgid ""
"Various ``SIG*`` constants in the :mod:`signal` module have been "
"converted into :mod:`Enums <enum>`.  This allows meaningful names to be "
"printed during debugging, instead of integer \"magic numbers\". "
"(Contributed by Giampaolo Rodola' in :issue:`21076`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1666
msgid ""
"Both the :class:`~smtpd.SMTPServer` and :class:`~smtpd.SMTPChannel` "
"classes now accept a *decode_data* keyword argument to determine if the "
"``DATA`` portion of the SMTP transaction is decoded using the "
"``\"utf-8\"`` codec or is instead provided to the "
":meth:`SMTPServer.process_message() <smtpd.SMTPServer.process_message>` "
"method as a byte string.  The default is ``True`` for backward "
"compatibility reasons, but will change to ``False`` in Python 3.6.  If "
"*decode_data* is set to ``False``, the ``process_message`` method must be"
" prepared to accept keyword arguments. (Contributed by Maciej Szulik in "
":issue:`19662`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1677
msgid ""
"The :class:`~smtpd.SMTPServer` class now advertises the ``8BITMIME`` "
"extension (:rfc:`6152`) if *decode_data* has been set ``True``.  If the "
"client specifies ``BODY=8BITMIME`` on the ``MAIL`` command, it is passed "
"to :meth:`SMTPServer.process_message() "
"<smtpd.SMTPServer.process_message>` via the *mail_options* keyword. "
"(Contributed by Milan Oberkirch and R.  David Murray in :issue:`21795`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1684
msgid ""
"The :class:`~smtpd.SMTPServer` class now also supports the ``SMTPUTF8`` "
"extension (:rfc:`6531`: Internationalized Email).  If the client "
"specified ``SMTPUTF8 BODY=8BITMIME`` on the ``MAIL`` command, they are "
"passed to :meth:`SMTPServer.process_message() "
"<smtpd.SMTPServer.process_message>` via the *mail_options* keyword.  It "
"is the responsibility of the ``process_message`` method to correctly "
"handle the ``SMTPUTF8`` data. (Contributed by Milan Oberkirch in "
":issue:`21725`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1692
msgid ""
"It is now possible to provide, directly or via name resolution, IPv6 "
"addresses in the :class:`~smtpd.SMTPServer` constructor, and have it "
"successfully connect.  (Contributed by Milan Oberkirch in "
":issue:`14758`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1700
msgid ""
"A new :meth:`SMTP.auth() <smtplib.SMTP.auth>` method provides a "
"convenient way to implement custom authentication mechanisms. "
"(Contributed by Milan Oberkirch in :issue:`15014`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1704
msgid ""
"The :meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` method "
"now accepts an additional debuglevel (2), which enables timestamps in "
"debug messages. (Contributed by Gavin Chappell and Maciej Szulik in "
":issue:`16914`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1708
msgid ""
"Both the :meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>` and "
":meth:`SMTP.send_message() <smtplib.SMTP.send_message>` methods now "
"support :rfc:`6531` (SMTPUTF8). (Contributed by Milan Oberkirch and R. "
"David Murray in :issue:`22027`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1715
msgid "sndhdr"
msgstr ""

#: ../../whatsnew/3.5.rst:1717
msgid ""
"The :func:`~sndhdr.what` and :func:`~sndhdr.whathdr` functions  now "
"return a :func:`~collections.namedtuple`.  (Contributed by Claudiu Popa "
"in :issue:`18615`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1725
msgid ""
"Functions with timeouts now use a monotonic clock, instead of a system "
"clock. (Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1728
msgid ""
"A new :meth:`socket.sendfile() <socket.socket.sendfile>` method allows "
"sending a file over a socket by using the high-performance "
":func:`os.sendfile` function on UNIX, resulting in uploads being from 2 "
"to 3 times faster than when using plain :meth:`socket.send() "
"<socket.socket.send>`. (Contributed by Giampaolo Rodola' in "
":issue:`17552`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1734
msgid ""
"The :meth:`socket.sendall() <socket.socket.sendall>` method no longer "
"resets the socket timeout every time bytes are received or sent.  The "
"socket timeout is now the maximum total duration to send all data. "
"(Contributed by Victor Stinner in :issue:`23853`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1739
msgid ""
"The *backlog* argument of the :meth:`socket.listen() "
"<socket.socket.listen>` method is now optional.  By default it is set to "
":data:`SOMAXCONN <socket.SOMAXCONN>` or to ``128``, whichever is less. "
"(Contributed by Charles-Fran√ßois Natali in :issue:`21455`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1751
msgid "Memory BIO Support"
msgstr ""

#: ../../whatsnew/3.5.rst:1753
msgid "(Contributed by Geert Jansen in :issue:`21965`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1755
msgid ""
"The new :class:`~ssl.SSLObject` class has been added to provide SSL "
"protocol support for cases when the network I/O capabilities of "
":class:`~ssl.SSLSocket` are not necessary or are suboptimal.  "
"``SSLObject`` represents an SSL protocol instance, but does not implement"
" any network I/O methods, and instead provides a memory buffer interface."
"  The new :class:`~ssl.MemoryBIO` class can be used to pass data between "
"Python and an SSL protocol instance."
msgstr ""

#: ../../whatsnew/3.5.rst:1762
msgid ""
"The memory BIO SSL support is primarily intended to be used in frameworks"
" implementing asynchronous I/O for which :class:`~ssl.SSLSocket`'s "
"readiness model (\"select/poll\") is inefficient."
msgstr ""

#: ../../whatsnew/3.5.rst:1766
msgid ""
"A new :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>` method can "
"be used to create a new ``SSLObject`` instance."
msgstr ""

#: ../../whatsnew/3.5.rst:1771
msgid "Application-Layer Protocol Negotiation Support"
msgstr ""

#: ../../whatsnew/3.5.rst:1773
msgid "(Contributed by Benjamin Peterson in :issue:`20188`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1775
msgid ""
"Where OpenSSL support is present, the :mod:`ssl` module now implements "
"the *Application-Layer Protocol Negotiation* TLS extension as described "
"in :rfc:`7301`."
msgstr ""

#: ../../whatsnew/3.5.rst:1779
msgid ""
"The new :meth:`SSLContext.set_alpn_protocols() "
"<ssl.SSLContext.set_alpn_protocols>` can be used to specify which "
"protocols a socket should advertise during the TLS handshake."
msgstr ""

#: ../../whatsnew/3.5.rst:1783
msgid ""
"The new :meth:`SSLSocket.selected_alpn_protocol() "
"<ssl.SSLSocket.selected_alpn_protocol>` returns the protocol that was "
"selected during the TLS handshake. The :data:`~ssl.HAS_ALPN` flag "
"indicates whether ALPN support is present."
msgstr ""

#: ../../whatsnew/3.5.rst:1790
msgid "Other Changes"
msgstr ""

#: ../../whatsnew/3.5.rst:1792
msgid ""
"There is a new :meth:`SSLSocket.version() <ssl.SSLSocket.version>` method"
" to query the actual protocol version in use. (Contributed by Antoine "
"Pitrou in :issue:`20421`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1796
msgid ""
"The :class:`~ssl.SSLSocket` class now implements a "
":meth:`SSLSocket.sendfile() <ssl.SSLSocket.sendfile>` method. "
"(Contributed by Giampaolo Rodola' in :issue:`17552`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1800
msgid ""
"The :meth:`SSLSocket.send() <ssl.SSLSocket.send>` method now raises "
"either the :exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` "
"exception on a non-blocking socket if the operation would block. "
"Previously, it would return ``0``.  (Contributed by Nikolaus Rath in "
":issue:`20951`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1805
msgid ""
"The :func:`~ssl.cert_time_to_seconds` function now interprets the input "
"time as UTC and not as local time, per :rfc:`5280`.  Additionally, the "
"return value is always an :class:`int`. (Contributed by Akira Li in "
":issue:`19940`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1809
msgid ""
"New :meth:`SSLObject.shared_ciphers() <ssl.SSLObject.shared_ciphers>` and"
" :meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket.shared_ciphers>` "
"methods return the list of ciphers sent by the client during the "
"handshake. (Contributed by Benjamin Peterson in :issue:`23186`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1814
msgid ""
"The :meth:`SSLSocket.do_handshake() <ssl.SSLSocket.do_handshake>`, "
":meth:`SSLSocket.read() <ssl.SSLSocket.read>`, "
":meth:`SSLSocket.shutdown() <ssl.SSLSocket.shutdown>`, and "
":meth:`SSLSocket.write() <ssl.SSLSocket.write>` methods of the "
":class:`~ssl.SSLSocket` class no longer reset the socket timeout every "
"time bytes are received or sent. The socket timeout is now the maximum "
"total duration of the method. (Contributed by Victor Stinner in "
":issue:`23853`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1822
msgid ""
"The :func:`~ssl.match_hostname` function now supports matching of IP "
"addresses. (Contributed by Antoine Pitrou in :issue:`23239`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1829
msgid ""
"The :class:`~sqlite3.Row` class now fully supports the sequence protocol,"
" in particular :func:`reversed` iteration and slice indexing. "
"(Contributed by Claudiu Popa in :issue:`10203`; by Lucas Sinclair, "
"Jessica McKellar, and  Serhiy Storchaka in :issue:`13583`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1840
msgid ""
"The new :func:`~subprocess.run` function has been added. It runs the "
"specified command and returns a :class:`~subprocess.CompletedProcess` "
"object, which describes a finished process.  The new API is more "
"consistent and is the recommended approach to invoking subprocesses in "
"Python code that does not need to maintain compatibility with earlier "
"Python versions. (Contributed by Thomas Kluyver in :issue:`23342`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1866
msgid ""
"A new :func:`~sys.set_coroutine_wrapper` function allows setting a global"
" hook that will be called whenever a :term:`coroutine object <coroutine>`"
" is created by an :keyword:`async def` function.  A corresponding "
":func:`~sys.get_coroutine_wrapper` can be used to obtain a currently set "
"wrapper.  Both functions are :term:`provisional <provisional API>`, and "
"are intended for debugging purposes only.  (Contributed by Yury Selivanov"
" in :issue:`24017`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1874
msgid ""
"A new :func:`~sys.is_finalizing` function can be used to check if the "
"Python interpreter is :term:`shutting down <interpreter shutdown>`. "
"(Contributed by Antoine Pitrou in :issue:`22696`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1882
msgid ""
"The name of the user scripts directory on Windows now includes the first "
"two components of the Python version. (Contributed by Paul Moore in "
":issue:`23437`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1890
msgid ""
"The *mode* argument of the :func:`~tarfile.open` function now accepts "
"``\"x\"`` to request exclusive creation.  (Contributed by Berker Peksag "
"in :issue:`21717`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1893
msgid ""
"The :meth:`TarFile.extractall() <tarfile.TarFile.extractall>` and "
":meth:`TarFile.extract() <tarfile.TarFile.extract>` methods now take a "
"keyword argument *numeric_owner*.  If set to ``True``, the extracted "
"files and directories will be owned by the numeric ``uid`` and ``gid`` "
"from the tarfile. If set to ``False`` (the default, and the behavior in "
"versions prior to 3.5), they will be owned by the named user and group in"
" the tarfile. (Contributed by Michael Vogt and Eric Smith in "
":issue:`23193`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1901
msgid ""
"The :meth:`TarFile.list() <tarfile.TarFile.list>` now accepts an optional"
" *members* keyword argument that can be set to a subset of the list "
"returned by :meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>`. "
"(Contributed by Serhiy Storchaka in :issue:`21549`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1910
msgid ""
"Both the :meth:`Lock.acquire() <threading.Lock.acquire>` and "
":meth:`RLock.acquire() <threading.RLock.acquire>` methods now use a "
"monotonic clock for timeout management. (Contributed by Victor Stinner in"
" :issue:`22043`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1919
msgid ""
"The :func:`~time.monotonic` function is now always available. "
"(Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1924 ../../whatsnew/3.6.rst:1535
msgid "timeit"
msgstr ""

#: ../../whatsnew/3.5.rst:1926
msgid ""
"A new command line option ``-u`` or :samp:`--unit={U}` can be used to "
"specify the time unit for the timer output.  Supported options are "
"``usec``, ``msec``, or ``sec``.  (Contributed by Julian Gindi in "
":issue:`18983`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1930
msgid ""
"The :func:`~timeit.timeit` function has a new *globals* parameter for "
"specifying the namespace in which the code will be running. (Contributed "
"by Ben Roberts in :issue:`2527`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1936 ../../whatsnew/3.6.rst:1548
#: ../../whatsnew/3.6.rst:2050 ../../whatsnew/3.7.rst:1473
#: ../../whatsnew/3.8.rst:1282
msgid "tkinter"
msgstr ""

#: ../../whatsnew/3.5.rst:1938
msgid ""
"The :mod:`tkinter._fix` module used for setting up the Tcl/Tk environment"
" on Windows has been replaced by a private function in the "
":mod:`_tkinter` module which makes no permanent changes to environment "
"variables. (Contributed by Zachary Ware in :issue:`20035`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1949
msgid ""
"New :func:`~traceback.walk_stack` and :func:`~traceback.walk_tb` "
"functions to conveniently traverse frame and traceback objects. "
"(Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1953
msgid ""
"New lightweight classes: :class:`~traceback.TracebackException`, "
":class:`~traceback.StackSummary`, and :class:`~traceback.FrameSummary`. "
"(Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1957
msgid ""
"Both the :func:`~traceback.print_tb` and :func:`~traceback.print_stack` "
"functions now support negative values for the *limit* argument. "
"(Contributed by Dmitry Kazakov in :issue:`22619`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1965
msgid ""
"A new :func:`~types.coroutine` function to transform :term:`generator "
"<generator iterator>` and :class:`generator-like "
"<collections.abc.Generator>` objects into :term:`awaitables <awaitable>`."
" (Contributed by Yury Selivanov in :issue:`24017`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1971
msgid ""
"A new type called :class:`~types.CoroutineType`, which is used for "
":term:`coroutine` objects created by :keyword:`async def` functions. "
"(Contributed by Yury Selivanov in :issue:`24400`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1977 ../../whatsnew/3.6.rst:1644
#: ../../whatsnew/3.7.rst:1506 ../../whatsnew/3.8.rst:1347
msgid "unicodedata"
msgstr ""

#: ../../whatsnew/3.5.rst:1979
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 8.0.0 "
"<http://unicode.org/versions/Unicode8.0.0/>`_."
msgstr ""

#: ../../whatsnew/3.5.rst:1986
msgid ""
"The :meth:`TestLoader.loadTestsFromModule() "
"<unittest.TestLoader.loadTestsFromModule>` method now accepts a keyword-"
"only argument *pattern* which is passed to ``load_tests`` as the third "
"argument.  Found packages are now checked for ``load_tests`` regardless "
"of whether their path matches *pattern*, because it is impossible for a "
"package name to match the default pattern. (Contributed by Robert Collins"
" and Barry A. Warsaw in :issue:`16662`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1993
msgid ""
"Unittest discovery errors now are exposed in the :data:`TestLoader.errors"
" <unittest.TestLoader.errors>` attribute of the "
":class:`~unittest.TestLoader` instance. (Contributed by Robert Collins in"
" :issue:`19746`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1998
msgid ""
"A new command line option ``--locals`` to show local variables in "
"tracebacks.  (Contributed by Robert Collins in :issue:`22936`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2003 ../../whatsnew/3.6.rst:1652
#: ../../whatsnew/3.7.rst:1525
msgid "unittest.mock"
msgstr ""

#: ../../whatsnew/3.5.rst:2005 ../../whatsnew/3.6.rst:1654
msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr ""

#: ../../whatsnew/3.5.rst:2007
msgid ""
"The class constructor has a new *unsafe* parameter, which causes mock "
"objects to raise :exc:`AttributeError` on attribute names starting with "
"``\"assert\"``. (Contributed by Kushal Das in :issue:`21238`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2012
msgid ""
"A new :meth:`Mock.assert_not_called() "
"<unittest.mock.Mock.assert_not_called>` method to check if the mock "
"object was called. (Contributed by Kushal Das in :issue:`21262`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2016
msgid ""
"The :class:`~unittest.mock.MagicMock` class now supports "
":meth:`__truediv__`, :meth:`__divmod__` and :meth:`__matmul__` operators."
" (Contributed by Johannes Baiter in :issue:`20968`, and H√•kan L√∂vdahl in "
":issue:`23581` and :issue:`23568`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2021
msgid ""
"It is no longer necessary to explicitly pass ``create=True`` to the "
":func:`~unittest.mock.patch` function when patching builtin names. "
"(Contributed by Kushal Das in :issue:`17660`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2029
msgid ""
"A new :class:`request.HTTPPasswordMgrWithPriorAuth "
"<urllib.request.HTTPPasswordMgrWithPriorAuth>` class allows HTTP Basic "
"Authentication credentials to be managed so as to eliminate unnecessary "
"``401`` response handling, or to unconditionally send credentials on the "
"first request in order to communicate with servers that return a ``404`` "
"response instead of a ``401`` if the ``Authorization`` header is not "
"sent. (Contributed by Matej Cepl in :issue:`19494` and Akshit Khurana in "
":issue:`7159`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2038
msgid ""
"A new *quote_via* argument for the :func:`parse.urlencode() "
"<urllib.parse.urlencode>` function provides a way to control the encoding"
" of query parts if needed. (Contributed by Samwyse and Arnon Yaari in "
":issue:`13866`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2043
msgid ""
"The :func:`request.urlopen() <urllib.request.urlopen>` function accepts "
"an :class:`ssl.SSLContext` object as a *context* argument, which will be "
"used for the HTTPS connection.  (Contributed by Alex Gaynor in "
":issue:`22366`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2047
msgid ""
"The :func:`parse.urljoin() <urllib.parse.urljoin>` was updated to use the"
" :rfc:`3986` semantics for the resolution of relative URLs, rather than "
":rfc:`1808` and :rfc:`2396`. (Contributed by Demian Brecht and Senthil "
"Kumaran in :issue:`22118`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2054
msgid "wsgiref"
msgstr ""

#: ../../whatsnew/3.5.rst:2056
msgid ""
"The *headers* argument of the :class:`headers.Headers "
"<wsgiref.headers.Headers>` class constructor is now optional. "
"(Contributed by Pablo Torres Navarrete and SilentGhost in :issue:`5800`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2062 ../../whatsnew/3.8.rst:1444
msgid "xmlrpc"
msgstr ""

#: ../../whatsnew/3.5.rst:2064
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` class now "
"supports the :term:`context manager` protocol. (Contributed by Claudiu "
"Popa in :issue:`20627`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2068
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` constructor "
"now accepts an optional :class:`ssl.SSLContext` instance. (Contributed by"
" Alex Gaynor in :issue:`22960`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2074
msgid "xml.sax"
msgstr ""

#: ../../whatsnew/3.5.rst:2076
msgid ""
"SAX parsers now support a character stream of the "
":class:`xmlreader.InputSource <xml.sax.xmlreader.InputSource>` object. "
"(Contributed by Serhiy Storchaka in :issue:`2175`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2080
msgid ""
":func:`~xml.sax.parseString` now accepts a :class:`str` instance. "
"(Contributed by Serhiy Storchaka in :issue:`10590`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2087
msgid ""
"ZIP output can now be written to unseekable streams. (Contributed by "
"Serhiy Storchaka in :issue:`23252`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2090
msgid ""
"The *mode* argument of :meth:`ZipFile.open() <zipfile.ZipFile.open>` "
"method now accepts ``\"x\"`` to request exclusive creation. (Contributed "
"by Serhiy Storchaka in :issue:`21717`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2096
msgid "Other module-level changes"
msgstr ""

#: ../../whatsnew/3.5.rst:2098
msgid ""
"Many functions in the :mod:`mmap`, :mod:`ossaudiodev`, :mod:`socket`, "
":mod:`ssl`, and :mod:`codecs` modules now accept writable :term:`bytes-"
"like objects <bytes-like object>`. (Contributed by Serhiy Storchaka in "
":issue:`23001`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2107
msgid ""
"The :func:`os.walk` function has been sped up by 3 to 5 times on POSIX "
"systems, and by 7 to 20 times on Windows.  This was done using the new "
":func:`os.scandir` function, which exposes file information from the "
"underlying ``readdir`` or ``FindFirstFile``/``FindNextFile`` system "
"calls.  (Contributed by Ben Hoyt with help from Victor Stinner in "
":issue:`23605`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2113
msgid ""
"Construction of ``bytes(int)`` (filled by zero bytes) is faster and uses "
"less memory for large objects. ``calloc()`` is used instead of "
"``malloc()`` to allocate memory for these objects. (Contributed by Victor"
" Stinner in :issue:`21233`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2118
msgid ""
"Some operations on :mod:`ipaddress` :class:`~ipaddress.IPv4Network` and "
":class:`~ipaddress.IPv6Network` have been massively sped up, such as "
":meth:`~ipaddress.IPv4Network.subnets`, "
":meth:`~ipaddress.IPv4Network.supernet`, "
":func:`~ipaddress.summarize_address_range`, "
":func:`~ipaddress.collapse_addresses`. The speed up can range from 3 to "
"15 times. (Contributed by Antoine Pitrou, Michel Albert, and Markus in "
":issue:`21486`, :issue:`21487`, :issue:`20826`, :issue:`23266`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2126
msgid ""
"Pickling of :mod:`ipaddress` objects was optimized to produce "
"significantly smaller output.  (Contributed by Serhiy Storchaka in "
":issue:`23133`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2129
#, python-format
msgid ""
"Many operations on :class:`io.BytesIO` are now 50% to 100% faster. "
"(Contributed by Serhiy Storchaka in :issue:`15381` and David Wilson in "
":issue:`22003`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2133
msgid ""
"The :func:`marshal.dumps` function is now faster: 65--85% with versions 3"
" and 4, 20--25% with versions 0 to 2 on typical data, and up to 5 times "
"in best cases. (Contributed by Serhiy Storchaka in :issue:`20416` and "
":issue:`23344`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2138
msgid ""
"The UTF-32 encoder is now 3 to 7 times faster. (Contributed by Serhiy "
"Storchaka in :issue:`15027`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2141
#, python-format
msgid ""
"Regular expressions are now parsed up to 10% faster. (Contributed by "
"Serhiy Storchaka in :issue:`19380`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2144
msgid ""
"The :func:`json.dumps` function was optimized to run with "
"``ensure_ascii=False`` as fast as with ``ensure_ascii=True``. "
"(Contributed by Naoki Inada in :issue:`23206`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2148
msgid ""
"The :c:func:`PyObject_IsInstance` and :c:func:`PyObject_IsSubclass` "
"functions have been sped up in the common case that the second argument "
"has :class:`type` as its metaclass. (Contributed Georg Brandl by in "
":issue:`22540`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2153
msgid ""
"Method caching was slightly improved, yielding up to 5% performance "
"improvement in some benchmarks. (Contributed by Antoine Pitrou in "
":issue:`22847`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2157
#, python-format
msgid ""
"Objects from the :mod:`random` module now use 50% less memory on 64-bit "
"builds.  (Contributed by Serhiy Storchaka in :issue:`23488`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2160
#, python-format
msgid ""
"The :func:`property` getter calls are up to 25% faster. (Contributed by "
"Joe Jevnik in :issue:`23910`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2163
#, python-format
msgid ""
"Instantiation of :class:`fractions.Fraction` is now up to 30% faster. "
"(Contributed by Stefan Behnel in :issue:`22464`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2166
msgid ""
"String methods :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`,"
" :meth:`~str.partition` and the :keyword:`in` string operator are now "
"significantly faster for searching 1-character substrings. (Contributed "
"by Serhiy Storchaka in :issue:`23573`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2175
msgid "New ``calloc`` functions were added:"
msgstr ""

#: ../../whatsnew/3.5.rst:2177
msgid ":c:func:`PyMem_RawCalloc`,"
msgstr ""

#: ../../whatsnew/3.5.rst:2178
msgid ":c:func:`PyMem_Calloc`,"
msgstr ""

#: ../../whatsnew/3.5.rst:2179
msgid ":c:func:`PyObject_Calloc`."
msgstr ""

#: ../../whatsnew/3.5.rst:2181
msgid "(Contributed by Victor Stinner in :issue:`21233`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2183
msgid "New encoding/decoding helper functions:"
msgstr ""

#: ../../whatsnew/3.5.rst:2185
msgid ":c:func:`Py_DecodeLocale` (replaced ``_Py_char2wchar()``),"
msgstr ""

#: ../../whatsnew/3.5.rst:2186
msgid ":c:func:`Py_EncodeLocale` (replaced ``_Py_wchar2char()``)."
msgstr ""

#: ../../whatsnew/3.5.rst:2188
msgid "(Contributed by Victor Stinner in :issue:`18395`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2190
msgid ""
"A new :c:func:`PyCodec_NameReplaceErrors` function to replace the unicode"
" encode error with ``\\N{...}`` escapes. (Contributed by Serhiy Storchaka"
" in :issue:`19676`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2194
msgid ""
"A new :c:func:`PyErr_FormatV` function similar to :c:func:`PyErr_Format`,"
" but accepts a ``va_list`` argument. (Contributed by Antoine Pitrou in "
":issue:`18711`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2198
msgid ""
"A new :c:data:`PyExc_RecursionError` exception. (Contributed by Georg "
"Brandl in :issue:`19235`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2201
msgid ""
"New :c:func:`PyModule_FromDefAndSpec`, "
":c:func:`PyModule_FromDefAndSpec2`, and :c:func:`PyModule_ExecDef` "
"functions introduced by :pep:`489` -- multi-phase extension module "
"initialization. (Contributed by Petr Viktorin in :issue:`24268`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2206
msgid ""
"New :c:func:`PyNumber_MatrixMultiply` and "
":c:func:`PyNumber_InPlaceMatrixMultiply` functions to perform matrix "
"multiplication. (Contributed by Benjamin Peterson in :issue:`21176`.  See"
" also :pep:`465` for details.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2212
msgid ""
"The :c:member:`PyTypeObject.tp_finalize` slot is now part of the stable "
"ABI."
msgstr ""

#: ../../whatsnew/3.5.rst:2214
msgid ""
"Windows builds now require Microsoft Visual C++ 14.0, which is available "
"as part of `Visual Studio 2015 <https://www.visualstudio.com/>`_."
msgstr ""

#: ../../whatsnew/3.5.rst:2217
msgid ""
"Extension modules now include a platform information tag in their "
"filename on some platforms (the tag is optional, and CPython will import "
"extensions without it, although if the tag is present and mismatched, the"
" extension won't be loaded):"
msgstr ""

#: ../../whatsnew/3.5.rst:2222
msgid ""
"On Linux, extension module filenames end with "
"``.cpython-<major><minor>m-<architecture>-<os>.pyd``:"
msgstr ""

#: ../../whatsnew/3.5.rst:2225 ../../whatsnew/3.5.rst:2242
msgid ""
"``<major>`` is the major number of the Python version; for Python 3.5 "
"this is ``3``."
msgstr ""

#: ../../whatsnew/3.5.rst:2228 ../../whatsnew/3.5.rst:2245
msgid ""
"``<minor>`` is the minor number of the Python version; for Python 3.5 "
"this is ``5``."
msgstr ""

#: ../../whatsnew/3.5.rst:2231
msgid ""
"``<architecture>`` is the hardware architecture the extension module was "
"built to run on. It's most commonly either ``i386`` for 32-bit Intel "
"platforms or ``x86_64`` for 64-bit Intel (and AMD) platforms."
msgstr ""

#: ../../whatsnew/3.5.rst:2235
msgid ""
"``<os>`` is always ``linux-gnu``, except for extensions built to talk to "
"the 32-bit ABI on 64-bit platforms, in which case it is ``linux-gnu32`` "
"(and ``<architecture>`` will be ``x86_64``)."
msgstr ""

#: ../../whatsnew/3.5.rst:2239
msgid ""
"On Windows, extension module filenames end with "
"``<debug>.cp<major><minor>-<platform>.pyd``:"
msgstr ""

#: ../../whatsnew/3.5.rst:2248
msgid ""
"``<platform>`` is the platform the extension module was built for, either"
" ``win32`` for Win32, ``win_amd64`` for Win64, ``win_ia64`` for Windows "
"Itanium 64, and ``win_arm`` for Windows on ARM."
msgstr ""

#: ../../whatsnew/3.5.rst:2252
msgid ""
"If built in debug mode, ``<debug>`` will be ``_d``, otherwise it will be "
"blank."
msgstr ""

#: ../../whatsnew/3.5.rst:2255
msgid "On OS X platforms, extension module filenames now end with ``-darwin.so``."
msgstr ""

#: ../../whatsnew/3.5.rst:2257
msgid ""
"On all other platforms, extension module filenames are the same as they "
"were with Python 3.4."
msgstr ""

#: ../../whatsnew/3.5.rst:2265 ../../whatsnew/3.6.rst:1926
msgid "New Keywords"
msgstr ""

#: ../../whatsnew/3.5.rst:2267
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, "
"class, function or module names.  Introduced by :pep:`492` in Python 3.5,"
" they will become proper keywords in Python 3.7."
msgstr ""

#: ../../whatsnew/3.5.rst:2273 ../../whatsnew/3.7.rst:1915
msgid "Deprecated Python Behavior"
msgstr ""

#: ../../whatsnew/3.5.rst:2275
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a silent :exc:`PendingDeprecationWarning`, which will become a "
"non-silent deprecation warning in Python 3.6 and will trigger a "
":exc:`RuntimeError` in Python 3.7. See :ref:`PEP 479: Change "
"StopIteration handling inside generators <whatsnew-pep-479>` for details."
msgstr ""

#: ../../whatsnew/3.5.rst:2285
msgid ""
"Windows XP is no longer supported by Microsoft, thus, per :PEP:`11`, "
"CPython 3.5 is no longer officially supported on this OS."
msgstr ""

#: ../../whatsnew/3.5.rst:2292
msgid ""
"The :mod:`formatter` module has now graduated to full deprecation and is "
"still slated for removal in Python 3.6."
msgstr ""

#: ../../whatsnew/3.5.rst:2295
msgid ""
"The :func:`asyncio.async` function is deprecated in favor of "
":func:`~asyncio.ensure_future`."
msgstr ""

#: ../../whatsnew/3.5.rst:2298
msgid ""
"The :mod:`smtpd` module has in the past always decoded the DATA portion "
"of email messages using the ``utf-8`` codec.  This can now be controlled "
"by the new *decode_data* keyword to :class:`~smtpd.SMTPServer`.  The "
"default value is ``True``, but this default is deprecated.  Specify the "
"*decode_data* keyword with an appropriate value to avoid the deprecation "
"warning."
msgstr ""

#: ../../whatsnew/3.5.rst:2304
msgid ""
"Directly assigning values to the :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` and "
":attr:`~http.cookies.Morsel.coded_value` of :class:`http.cookies.Morsel` "
"objects is deprecated.  Use the :meth:`~http.cookies.Morsel.set` method "
"instead.  In addition, the undocumented *LegalChars* parameter of "
":meth:`~http.cookies.Morsel.set` is deprecated, and is now ignored."
msgstr ""

#: ../../whatsnew/3.5.rst:2311
msgid ""
"Passing a format string as keyword argument *format_string* to the "
":meth:`~string.Formatter.format` method of the :class:`string.Formatter` "
"class has been deprecated. (Contributed by Serhiy Storchaka in "
":issue:`23671`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2316
msgid ""
"The :func:`platform.dist` and :func:`platform.linux_distribution` "
"functions are now deprecated.  Linux distributions use too many different"
" ways of describing themselves, so the functionality is left to a "
"package. (Contributed by Vajrasky Kok and Berker Peksag in "
":issue:`1322`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2321
msgid ""
"The previously undocumented ``from_function`` and ``from_builtin`` "
"methods of :class:`inspect.Signature` are deprecated.  Use the new "
":meth:`Signature.from_callable() <inspect.Signature.from_callable>` "
"method instead. (Contributed by Yury Selivanov in :issue:`24248`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2326
msgid ""
"The :func:`inspect.getargspec` function is deprecated and scheduled to be"
" removed in Python 3.6.  (See :issue:`20438` for details.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2329
msgid ""
"The :mod:`inspect` :func:`~inspect.getfullargspec`, "
":func:`~inspect.getcallargs`, and :func:`~inspect.formatargspec` "
"functions are deprecated in favor of the :func:`inspect.signature` API. "
"(Contributed by Yury Selivanov in :issue:`20438`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2334
msgid ""
":func:`~inspect.getargvalues` and :func:`~inspect.formatargvalues` "
"functions were inadvertently marked as deprecated with the release of "
"Python 3.5.0."
msgstr ""

#: ../../whatsnew/3.5.rst:2337
msgid ""
"Use of :const:`re.LOCALE` flag with str patterns or :const:`re.ASCII` is "
"now deprecated.  (Contributed by Serhiy Storchaka in :issue:`22407`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2340
msgid ""
"Use of unrecognized special sequences consisting of ``'\\'`` and an ASCII"
" letter in regular expression patterns and replacement patterns now "
"raises a deprecation warning and will be forbidden in Python 3.6. "
"(Contributed by Serhiy Storchaka in :issue:`23622`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2345
msgid ""
"The undocumented and unofficial *use_load_tests* default argument of the "
":meth:`unittest.TestLoader.loadTestsFromModule` method now is deprecated "
"and ignored. (Contributed by Robert Collins and Barry A. Warsaw in "
":issue:`16662`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2360
msgid ""
"The ``__version__`` attribute has been dropped from the email package.  "
"The email code hasn't been shipped separately from the stdlib for a long "
"time, and the ``__version__`` string was not updated in the last few "
"releases."
msgstr ""

#: ../../whatsnew/3.5.rst:2364
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module was deprecated "
"in 3.4, and has now been removed. (Contributed by Matt Chaput in "
":issue:`6623`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2368
msgid "The concept of ``.pyo`` files has been removed."
msgstr ""

#: ../../whatsnew/3.5.rst:2370
msgid ""
"The JoinableQueue class in the provisional :mod:`asyncio` module was "
"deprecated in 3.4.4 and is now removed. (Contributed by A. Jesse Jiryu "
"Davis in :issue:`23464`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2376
msgid "Porting to Python 3.5"
msgstr ""

#: ../../whatsnew/3.5.rst:2383 ../../whatsnew/3.8.rst:1812
msgid "Changes in Python behavior"
msgstr ""

#: ../../whatsnew/3.5.rst:2385 ../../whatsnew/3.7.rst:2237
msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr ""

#: ../../whatsnew/3.5.rst:2391
msgid ""
"Python 3.5 now correctly raises a :exc:`SyntaxError`, as generator "
"expressions must be put in parentheses if not a sole argument to a "
"function."
msgstr ""

#: ../../whatsnew/3.5.rst:2398
msgid ""
":pep:`475`: System calls are now retried when interrupted by a signal "
"instead of raising :exc:`InterruptedError` if the Python signal handler "
"does not raise an exception."
msgstr ""

#: ../../whatsnew/3.5.rst:2402
msgid ""
"Before Python 3.5, a :class:`datetime.time` object was considered to be "
"false if it represented midnight in UTC.  This behavior was considered "
"obscure and error-prone and has been removed in Python 3.5.  See "
":issue:`13936` for full details."
msgstr ""

#: ../../whatsnew/3.5.rst:2407
msgid ""
"The :meth:`ssl.SSLSocket.send()` method now raises either "
":exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` on a non-"
"blocking socket if the operation would block.  Previously, it would "
"return ``0``.  (Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2412
msgid ""
"The ``__name__`` attribute of generators is now set from the function "
"name, instead of being set from the code name. Use "
"``gen.gi_code.co_name`` to retrieve the code name. Generators also have a"
" new ``__qualname__`` attribute, the qualified name, which is now used "
"for the representation of a generator (``repr(gen)``). (Contributed by "
"Victor Stinner in :issue:`21205`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2419
msgid ""
"The deprecated \"strict\" mode and argument of "
":class:`~html.parser.HTMLParser`, :meth:`HTMLParser.error`, and the "
":exc:`HTMLParserError` exception have been removed.  (Contributed by Ezio"
" Melotti in :issue:`15114`.) The *convert_charrefs* argument of "
":class:`~html.parser.HTMLParser` is now ``True`` by default.  "
"(Contributed by Berker Peksag in :issue:`21047`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2425
msgid ""
"Although it is not formally part of the API, it is worth noting for "
"porting purposes (ie: fixing tests) that error messages that were "
"previously of the form \"'sometype' does not support the buffer "
"protocol\" are now of the form \"a :term:`bytes-like object` is required,"
" not 'sometype'\". (Contributed by Ezio Melotti in :issue:`16518`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2431
msgid ""
"If the current directory is set to a directory that no longer exists then"
" :exc:`FileNotFoundError` will no longer be raised and instead "
":meth:`~importlib.machinery.FileFinder.find_spec` will return ``None`` "
"**without** caching ``None`` in :data:`sys.path_importer_cache`, which is"
" different than the typical case (:issue:`22834`)."
msgstr ""

#: ../../whatsnew/3.5.rst:2437
msgid ""
"HTTP status code and messages from :mod:`http.client` and "
":mod:`http.server` were refactored into a common "
":class:`~http.HTTPStatus` enum.  The values in :mod:`http.client` and "
":mod:`http.server` remain available for backwards compatibility.  "
"(Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2442
msgid ""
"When an import loader defines "
":meth:`importlib.machinery.Loader.exec_module` it is now expected to also"
" define :meth:`~importlib.machinery.Loader.create_module` (raises a "
":exc:`DeprecationWarning` now, will be an error in Python 3.6). If the "
"loader inherits from :class:`importlib.abc.Loader` then there is nothing "
"to do, else simply define "
":meth:`~importlib.machinery.Loader.create_module` to return ``None``.  "
"(Contributed by Brett Cannon in :issue:`23014`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2450
msgid ""
"The :func:`re.split` function always ignored empty pattern matches, so "
"the ``\"x*\"`` pattern worked the same as ``\"x+\"``, and the ``\"\\b\"``"
" pattern never worked.  Now :func:`re.split` raises a warning if the "
"pattern could match an empty string.  For compatibility, use patterns "
"that never match an empty string (e.g. ``\"x+\"`` instead of ``\"x*\"``)."
"  Patterns that could only match an empty string (such as ``\"\\b\"``) "
"now raise an error. (Contributed by Serhiy Storchaka in :issue:`22818`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2458
msgid ""
"The :class:`http.cookies.Morsel` dict-like interface has been made self "
"consistent:  morsel comparison now takes the "
":attr:`~http.cookies.Morsel.key` and :attr:`~http.cookies.Morsel.value` "
"into account, :meth:`~http.cookies.Morsel.copy` now results in a "
":class:`~http.cookies.Morsel` instance rather than a :class:`dict`, and "
":meth:`~http.cookies.Morsel.update` will now raise an exception if any of"
" the keys in the update dictionary are invalid.  In addition, the "
"undocumented *LegalChars* parameter of :func:`~http.cookies.Morsel.set` "
"is deprecated and is now ignored.  (Contributed by Demian Brecht in "
":issue:`2211`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2468
msgid ""
":pep:`488` has removed ``.pyo`` files from Python and introduced the "
"optional ``opt-`` tag in ``.pyc`` file names. The "
":func:`importlib.util.cache_from_source` has gained an *optimization* "
"parameter to help control the ``opt-`` tag. Because of this, the "
"*debug_override* parameter of the function is now deprecated. `.pyo` "
"files are also no longer supported as a file argument to the Python "
"interpreter and thus serve no purpose when distributed on their own (i.e."
" sourceless code distribution). Due to the fact that the magic number for"
" bytecode has changed in Python 3.5, all old `.pyo` files from previous "
"versions of Python are invalid regardless of this PEP."
msgstr ""

#: ../../whatsnew/3.5.rst:2479
msgid ""
"The :mod:`socket` module now exports the "
":data:`~socket.CAN_RAW_FD_FRAMES` constant on linux 3.6 and greater."
msgstr ""

#: ../../whatsnew/3.5.rst:2482
msgid ""
"The :func:`ssl.cert_time_to_seconds` function now interprets the input "
"time as UTC and not as local time, per :rfc:`5280`.  Additionally, the "
"return value is always an :class:`int`. (Contributed by Akira Li in "
":issue:`19940`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2486
msgid ""
"The ``pygettext.py`` Tool now uses the standard +NNNN format for "
"timezones in the POT-Creation-Date header."
msgstr ""

#: ../../whatsnew/3.5.rst:2489
msgid ""
"The :mod:`smtplib` module now uses :data:`sys.stderr` instead of the "
"previous module-level :data:`stderr` variable for debug output.  If your "
"(test) program depends on patching the module-level variable to capture "
"the debug output, you will need to update it to capture sys.stderr "
"instead."
msgstr ""

#: ../../whatsnew/3.5.rst:2494
msgid ""
"The :meth:`str.startswith` and :meth:`str.endswith` methods no longer "
"return ``True`` when finding the empty string and the indexes are "
"completely out of range.  (Contributed by Serhiy Storchaka in "
":issue:`24284`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2498
msgid ""
"The :func:`inspect.getdoc` function now returns documentation strings "
"inherited from base classes.  Documentation strings no longer need to be "
"duplicated if the inherited documentation is appropriate.  To suppress an"
" inherited string, an empty string must be specified (or the "
"documentation may be filled in).  This change affects the output of the "
":mod:`pydoc` module and the :func:`help` function. (Contributed by Serhiy"
" Storchaka in :issue:`15582`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2506
msgid ""
"Nested :func:`functools.partial` calls are now flattened.  If you were "
"relying on the previous behavior, you can now either add an attribute to "
"a :func:`functools.partial` object or you can create a subclass of "
":func:`functools.partial`. (Contributed by Alexander Belopolsky in "
":issue:`7830`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2515
msgid ""
"The undocumented :c:member:`~PyMemoryViewObject.format` member of the "
"(non-public) :c:type:`PyMemoryViewObject` structure has been removed. All"
" extensions relying on the relevant parts in ``memoryobject.h`` must be "
"rebuilt."
msgstr ""

#: ../../whatsnew/3.5.rst:2520
msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to "
":c:type:`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""

#: ../../whatsnew/3.5.rst:2523
msgid ""
"Removed non-documented macro :c:macro:`PyObject_REPR` which leaked "
"references. Use format character ``%R`` in "
":c:func:`PyUnicode_FromFormat`-like functions to format the :func:`repr` "
"of the object. (Contributed by Serhiy Storchaka in :issue:`22453`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2528
msgid ""
"Because the lack of the :attr:`__module__` attribute breaks pickling and "
"introspection, a deprecation warning is now raised for builtin types "
"without the :attr:`__module__` attribute.  This would be an "
"AttributeError in the future. (Contributed by Serhiy Storchaka in "
":issue:`20204`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2534
msgid ""
"As part of the :pep:`492` implementation, the ``tp_reserved`` slot of "
":c:type:`PyTypeObject` was replaced with a :c:member:`tp_as_async` slot."
"  Refer to :ref:`coro-objects` for new types, structures and functions."
msgstr ""

#: ../../whatsnew/3.5.rst:2541
msgid "Notable changes in Python 3.5.4"
msgstr ""

#: ../../whatsnew/3.6.rst:3
msgid "What's New In Python 3.6"
msgstr ""

#: ../../whatsnew/3.6.rst:47
msgid ""
"This article explains the new features in Python 3.6, compared to 3.5. "
"Python 3.6 was released on December 23, 2016. ¬†See the `changelog "
"<https://docs.python.org/3.6/whatsnew/changelog.html>`_ for a full list "
"of changes."
msgstr ""

#: ../../whatsnew/3.6.rst:54
msgid ":pep:`494` - Python 3.6 Release Schedule"
msgstr ""

#: ../../whatsnew/3.6.rst:62
msgid ":ref:`PEP 498 <whatsnew36-pep498>`, formatted string literals."
msgstr ""

#: ../../whatsnew/3.6.rst:64
msgid ":ref:`PEP 515 <whatsnew36-pep515>`, underscores in numeric literals."
msgstr ""

#: ../../whatsnew/3.6.rst:66
msgid ":ref:`PEP 526 <whatsnew36-pep526>`, syntax for variable annotations."
msgstr ""

#: ../../whatsnew/3.6.rst:68
msgid ":ref:`PEP 525 <whatsnew36-pep525>`, asynchronous generators."
msgstr ""

#: ../../whatsnew/3.6.rst:70
msgid ":ref:`PEP 530 <whatsnew36-pep530>`: asynchronous comprehensions."
msgstr ""

#: ../../whatsnew/3.6.rst:75
msgid ""
":mod:`secrets`: :ref:`PEP 506 -- Adding A Secrets Module To The Standard "
"Library <whatsnew36-pep506>`."
msgstr ""

#: ../../whatsnew/3.6.rst:80
#, python-format
msgid ""
"The :ref:`dict <typesmapping>` type has been reimplemented to use a "
":ref:`more compact representation <whatsnew36-compactdict>` based on `a "
"proposal by Raymond Hettinger <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_ and similar to the `PyPy dict "
"implementation`_.  This resulted in dictionaries using 20% to 25% less "
"memory when compared to Python 3.5."
msgstr ""

#: ../../whatsnew/3.6.rst:87
msgid ""
"Customization of class creation has been simplified with the :ref:`new "
"protocol <whatsnew36-pep487>`."
msgstr ""

#: ../../whatsnew/3.6.rst:90
msgid ""
"The class attribute definition order is :ref:`now preserved  "
"<whatsnew36-pep520>`."
msgstr ""

#: ../../whatsnew/3.6.rst:93
msgid ""
"The order of elements in ``**kwargs`` now :ref:`corresponds to the order "
"<whatsnew36-pep468>` in which keyword arguments were passed to the "
"function."
msgstr ""

#: ../../whatsnew/3.6.rst:97
msgid ""
"DTrace and SystemTap :ref:`probing support <whatsnew36-tracing>` has been"
" added."
msgstr ""

#: ../../whatsnew/3.6.rst:100
msgid ""
"The new :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` environment "
"variable can now be used to debug the interpreter memory allocation and "
"access errors."
msgstr ""

#: ../../whatsnew/3.6.rst:107
msgid ""
"The :mod:`asyncio` module has received new features, significant "
"usability and performance improvements, and a fair amount of bug fixes. "
"Starting with Python 3.6 the ``asyncio`` module is no longer provisional "
"and its API is considered stable."
msgstr ""

#: ../../whatsnew/3.6.rst:112
msgid ""
"A new :ref:`file system path protocol <whatsnew36-pep519>` has been "
"implemented to support :term:`path-like objects <path-like object>`. All "
"standard library functions operating on paths have been updated to work "
"with the new protocol."
msgstr ""

#: ../../whatsnew/3.6.rst:117
msgid ""
"The :mod:`datetime` module has gained support for :ref:`Local Time "
"Disambiguation <whatsnew36-pep495>`."
msgstr ""

#: ../../whatsnew/3.6.rst:120
msgid ""
"The :mod:`typing` module received a number of :ref:`improvements "
"<whatsnew36-typing>`."
msgstr ""

#: ../../whatsnew/3.6.rst:123
msgid ""
"The :mod:`tracemalloc` module has been significantly reworked and is now "
"used to provide better output for :exc:`ResourceWarning` as well as "
"provide better diagnostics for memory allocation errors. See the "
":ref:`PYTHONMALLOC section <whatsnew36-pythonmalloc>` for more "
"information."
msgstr ""

#: ../../whatsnew/3.6.rst:132
msgid ""
"The new :mod:`secrets` module has been added to simplify the generation "
"of cryptographically strong pseudo-random numbers suitable for managing "
"secrets such as account authentication, tokens, and similar."
msgstr ""

#: ../../whatsnew/3.6.rst:136 ../../whatsnew/3.6.rst:1283
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security. See the :pep:`524` for the "
"rationale."
msgstr ""

#: ../../whatsnew/3.6.rst:140
msgid "The :mod:`hashlib` and :mod:`ssl` modules now support OpenSSL 1.1.0."
msgstr ""

#: ../../whatsnew/3.6.rst:142
msgid ""
"The default settings and feature set of the :mod:`ssl` module have been "
"improved."
msgstr ""

#: ../../whatsnew/3.6.rst:145
msgid ""
"The :mod:`hashlib` module received support for the BLAKE2, SHA-3 and "
"SHAKE hash algorithms and the :func:`~hashlib.scrypt` key derivation "
"function."
msgstr ""

#: ../../whatsnew/3.6.rst:151
msgid ""
":ref:`PEP 528 <whatsnew36-pep528>` and :ref:`PEP 529 "
"<whatsnew36-pep529>`, Windows filesystem and console encoding changed to "
"UTF-8."
msgstr ""

#: ../../whatsnew/3.6.rst:154
msgid ""
"The ``py.exe`` launcher, when used interactively, no longer prefers "
"Python 2 over Python 3 when the user doesn't specify a version (via "
"command line arguments or a config file).  Handling of shebang lines "
"remains unchanged - \"python\" refers to Python 2 in that case."
msgstr ""

#: ../../whatsnew/3.6.rst:159
msgid ""
"``python.exe`` and ``pythonw.exe`` have been marked as long-path aware, "
"which means that the 260 character path limit may no longer apply. See "
":ref:`removing the MAX_PATH limitation <max-path>` for details."
msgstr ""

#: ../../whatsnew/3.6.rst:163
msgid ""
"A ``._pth`` file can be added to force isolated mode and fully specify "
"all search paths to avoid registry and environment lookup. See :ref:`the "
"documentation <finding_modules>` for more information."
msgstr ""

#: ../../whatsnew/3.6.rst:167
msgid ""
"A ``python36.zip`` file now works as a landmark to infer "
":envvar:`PYTHONHOME`. See :ref:`the documentation <finding_modules>` for "
"more information."
msgstr ""

#: ../../whatsnew/3.6.rst:181
msgid "PEP 498: Formatted string literals"
msgstr ""

#: ../../whatsnew/3.6.rst:183
msgid ""
":pep:`498` introduces a new kind of string literals: *f-strings*, or "
":ref:`formatted string literals <f-strings>`."
msgstr ""

#: ../../whatsnew/3.6.rst:186
msgid ""
"Formatted string literals are prefixed with ``'f'`` and are similar to "
"the format strings accepted by :meth:`str.format`.  They contain "
"replacement fields surrounded by curly braces.  The replacement fields "
"are expressions, which are evaluated at run time, and then formatted "
"using the :func:`format` protocol::"
msgstr ""

#: ../../whatsnew/3.6.rst:204
msgid ":pep:`498` -- Literal String Interpolation."
msgstr ""

#: ../../whatsnew/3.6.rst:204
msgid "PEP written and implemented by Eric V. Smith."
msgstr ""

#: ../../whatsnew/3.6.rst:206
msgid ":ref:`Feature documentation <f-strings>`."
msgstr ""

#: ../../whatsnew/3.6.rst:212
msgid "PEP 526: Syntax for variable annotations"
msgstr ""

#: ../../whatsnew/3.6.rst:214
msgid ""
":pep:`484` introduced the standard for type annotations of function "
"parameters, a.k.a. type hints. This PEP adds syntax to Python for "
"annotating the types of variables including class variables and instance "
"variables::"
msgstr ""

#: ../../whatsnew/3.6.rst:225
msgid ""
"Just as for function annotations, the Python interpreter does not attach "
"any particular meaning to variable annotations and only stores them in "
"the ``__annotations__`` attribute of a class or module."
msgstr ""

#: ../../whatsnew/3.6.rst:229
msgid ""
"In contrast to variable declarations in statically typed languages, the "
"goal of annotation syntax is to provide an easy way to specify structured"
" type metadata for third party tools and libraries via the abstract "
"syntax tree and the ``__annotations__`` attribute."
msgstr ""

#: ../../whatsnew/3.6.rst:238
msgid ":pep:`526` -- Syntax for variable annotations."
msgstr ""

#: ../../whatsnew/3.6.rst:237
msgid ""
"PEP written by Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, "
"and Guido van Rossum. Implemented by Ivan Levkivskyi."
msgstr ""

#: ../../whatsnew/3.6.rst:240
msgid ""
"Tools that use or will use the new syntax: `mypy <http://www.mypy-"
"lang.org/>`_, `pytype <https://github.com/google/pytype>`_, PyCharm, etc."
msgstr ""

#: ../../whatsnew/3.6.rst:248
msgid "PEP 515: Underscores in Numeric Literals"
msgstr ""

#: ../../whatsnew/3.6.rst:250
msgid ""
":pep:`515` adds the ability to use underscores in numeric literals for "
"improved readability.  For example::"
msgstr ""

#: ../../whatsnew/3.6.rst:258
msgid ""
"Single underscores are allowed between digits and after any base "
"specifier.  Leading, trailing, or multiple underscores in a row are not "
"allowed."
msgstr ""

#: ../../whatsnew/3.6.rst:262
msgid ""
"The :ref:`string formatting <formatspec>` language also now has support "
"for the ``'_'`` option to signal the use of an underscore for a thousands"
" separator for floating point presentation types and for integer "
"presentation type ``'d'``.  For integer presentation types ``'b'``, "
"``'o'``, ``'x'``, and ``'X'``, underscores will be inserted every 4 "
"digits::"
msgstr ""

#: ../../whatsnew/3.6.rst:276
msgid ":pep:`515` -- Underscores in Numeric Literals"
msgstr ""

#: ../../whatsnew/3.6.rst:277
msgid "PEP written by Georg Brandl and Serhiy Storchaka."
msgstr ""

#: ../../whatsnew/3.6.rst:283
msgid "PEP 525: Asynchronous Generators"
msgstr ""

#: ../../whatsnew/3.6.rst:285
msgid ""
":pep:`492` introduced support for native coroutines and ``async`` / "
"``await`` syntax to Python 3.5.  A notable limitation of the Python 3.5 "
"implementation is that it was not possible to use ``await`` and ``yield``"
" in the same function body.  In Python 3.6 this restriction has been "
"lifted, making it possible to define *asynchronous generators*::"
msgstr ""

#: ../../whatsnew/3.6.rst:297
msgid "The new syntax allows for faster and more concise code."
msgstr ""

#: ../../whatsnew/3.6.rst:301
msgid ":pep:`525` -- Asynchronous Generators"
msgstr ""

#: ../../whatsnew/3.6.rst:308
msgid "PEP 530: Asynchronous Comprehensions"
msgstr ""

#: ../../whatsnew/3.6.rst:310
msgid ""
":pep:`530` adds support for using ``async for`` in list, set, dict "
"comprehensions and generator expressions::"
msgstr ""

#: ../../whatsnew/3.6.rst:315
msgid ""
"Additionally, ``await`` expressions are supported in all kinds of "
"comprehensions::"
msgstr ""

#: ../../whatsnew/3.6.rst:322
msgid ":pep:`530` -- Asynchronous Comprehensions"
msgstr ""

#: ../../whatsnew/3.6.rst:329
msgid "PEP 487: Simpler customization of class creation"
msgstr ""

#: ../../whatsnew/3.6.rst:331
msgid ""
"It is now possible to customize subclass creation without using a "
"metaclass. The new ``__init_subclass__`` classmethod will be called on "
"the base class whenever a new subclass is created::"
msgstr ""

#: ../../whatsnew/3.6.rst:348
msgid ""
"In order to allow zero-argument :func:`super` calls to work correctly "
"from :meth:`~object.__init_subclass__` implementations, custom "
"metaclasses must ensure that the new ``__classcell__`` namespace entry is"
" propagated to ``type.__new__`` (as described in :ref:`class-object-"
"creation`)."
msgstr ""

#: ../../whatsnew/3.6.rst:356 ../../whatsnew/3.6.rst:394
msgid ":pep:`487` -- Simpler customization of class creation"
msgstr ""

#: ../../whatsnew/3.6.rst:356 ../../whatsnew/3.6.rst:394
msgid "PEP written and implemented by Martin Teichmann."
msgstr ""

#: ../../whatsnew/3.6.rst:358
msgid ":ref:`Feature documentation <class-customization>`"
msgstr ""

#: ../../whatsnew/3.6.rst:364
msgid "PEP 487: Descriptor Protocol Enhancements"
msgstr ""

#: ../../whatsnew/3.6.rst:366
msgid ""
":pep:`487` extends the descriptor protocol to include the new optional "
":meth:`~object.__set_name__` method.  Whenever a new class is defined, "
"the new method will be called on all descriptors included in the "
"definition, providing them with a reference to the class being defined "
"and the name given to the descriptor within the class namespace.  In "
"other words, instances of descriptors can now know the attribute name of "
"the descriptor in the owner class::"
msgstr ""

#: ../../whatsnew/3.6.rst:396
msgid ":ref:`Feature documentation <descriptors>`"
msgstr ""

#: ../../whatsnew/3.6.rst:402
msgid "PEP 519: Adding a file system path protocol"
msgstr ""

#: ../../whatsnew/3.6.rst:404
msgid ""
"File system paths have historically been represented as :class:`str` or "
":class:`bytes` objects. This has led to people who write code which "
"operate on file system paths to assume that such objects are only one of "
"those two types (an :class:`int` representing a file descriptor does not "
"count as that is not a file path). Unfortunately that assumption prevents"
" alternative object representations of file system paths like "
":mod:`pathlib` from working with pre-existing code, including Python's "
"standard library."
msgstr ""

#: ../../whatsnew/3.6.rst:413
msgid ""
"To fix this situation, a new interface represented by "
":class:`os.PathLike` has been defined. By implementing the "
":meth:`~os.PathLike.__fspath__` method, an object signals that it "
"represents a path. An object can then provide a low-level representation "
"of a file system path as a :class:`str` or :class:`bytes` object. This "
"means an object is considered :term:`path-like <path-like object>` if it "
"implements :class:`os.PathLike` or is a :class:`str` or :class:`bytes` "
"object which represents a file system path. Code can use "
":func:`os.fspath`, :func:`os.fsdecode`, or :func:`os.fsencode` to "
"explicitly get a :class:`str` and/or :class:`bytes` representation of a "
"path-like object."
msgstr ""

#: ../../whatsnew/3.6.rst:426
msgid ""
"The built-in :func:`open` function has been updated to accept "
":class:`os.PathLike` objects, as have all relevant functions in the "
":mod:`os` and :mod:`os.path` modules, and most other functions and "
"classes in the standard library.  The :class:`os.DirEntry` class and "
"relevant classes in :mod:`pathlib` have also been updated to implement "
":class:`os.PathLike`."
msgstr ""

#: ../../whatsnew/3.6.rst:433
msgid ""
"The hope is that updating the fundamental functions for operating on file"
" system paths will lead to third-party code to implicitly support all "
":term:`path-like objects <path-like object>` without any code changes, or"
" at least very minimal ones (e.g. calling :func:`os.fspath` at the "
"beginning of code before operating on a path-like object)."
msgstr ""

#: ../../whatsnew/3.6.rst:440
msgid ""
"Here are some examples of how the new interface allows for "
":class:`pathlib.Path` to be used more easily and transparently with pre-"
"existing code::"
msgstr ""

#: ../../whatsnew/3.6.rst:457
msgid ""
"(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle "
"Zijlstra.)"
msgstr ""

#: ../../whatsnew/3.6.rst:461
msgid ":pep:`519` -- Adding a file system path protocol"
msgstr ""

#: ../../whatsnew/3.6.rst:462
msgid "PEP written by Brett Cannon and Koos Zevenhoven."
msgstr ""

#: ../../whatsnew/3.6.rst:468
msgid "PEP 495: Local Time Disambiguation"
msgstr ""

#: ../../whatsnew/3.6.rst:470
msgid ""
"In most world locations, there have been and will be times when local "
"clocks are moved back.  In those times, intervals are introduced in which"
" local clocks show the same time twice in the same day. In these "
"situations, the information displayed on a local clock (or stored in a "
"Python datetime instance) is insufficient to identify a particular moment"
" in time."
msgstr ""

#: ../../whatsnew/3.6.rst:476
msgid ""
":pep:`495` adds the new *fold* attribute to instances of "
":class:`datetime.datetime` and :class:`datetime.time` classes to "
"differentiate between two moments in time for which local times are the "
"same::"
msgstr ""

#: ../../whatsnew/3.6.rst:491
msgid ""
"The values of the :attr:`fold <datetime.datetime.fold>` attribute have "
"the value ``0`` for all instances except those that represent the second "
"(chronologically) moment in time in an ambiguous case."
msgstr ""

#: ../../whatsnew/3.6.rst:498
msgid ":pep:`495` -- Local Time Disambiguation"
msgstr ""

#: ../../whatsnew/3.6.rst:498
msgid ""
"PEP written by Alexander Belopolsky and Tim Peters, implementation by "
"Alexander Belopolsky."
msgstr ""

#: ../../whatsnew/3.6.rst:505
msgid "PEP 529: Change Windows filesystem encoding to UTF-8"
msgstr ""

#: ../../whatsnew/3.6.rst:507
msgid ""
"Representing filesystem paths is best performed with str (Unicode) rather"
" than bytes. However, there are some situations where using bytes is "
"sufficient and correct."
msgstr ""

#: ../../whatsnew/3.6.rst:511
msgid ""
"Prior to Python 3.6, data loss could result when using bytes paths on "
"Windows. With this change, using bytes to represent paths is now "
"supported on Windows, provided those bytes are encoded with the encoding "
"returned by :func:`sys.getfilesystemencoding()`, which now defaults to "
"``'utf-8'``."
msgstr ""

#: ../../whatsnew/3.6.rst:516
msgid ""
"Applications that do not use str to represent paths should use "
":func:`os.fsencode()` and :func:`os.fsdecode()` to ensure their bytes are"
" correctly encoded. To revert to the previous behaviour, set "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` or call "
":func:`sys._enablelegacywindowsfsencoding`."
msgstr ""

#: ../../whatsnew/3.6.rst:522
msgid ""
"See :pep:`529` for more information and discussion of code modifications "
"that may be required."
msgstr ""

#: ../../whatsnew/3.6.rst:529
msgid "PEP 528: Change Windows console encoding to UTF-8"
msgstr ""

#: ../../whatsnew/3.6.rst:531
msgid ""
"The default console on Windows will now accept all Unicode characters and"
" provide correctly read str objects to Python code. ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` now default to utf-8 encoding."
msgstr ""

#: ../../whatsnew/3.6.rst:535
msgid ""
"This change only applies when using an interactive console, and not when "
"redirecting files or pipes. To revert to the previous behaviour for "
"interactive console use, set :envvar:`PYTHONLEGACYWINDOWSSTDIO`."
msgstr ""

#: ../../whatsnew/3.6.rst:541
msgid ":pep:`528` -- Change Windows console encoding to UTF-8"
msgstr ""

#: ../../whatsnew/3.6.rst:542
msgid "PEP written and implemented by Steve Dower."
msgstr ""

#: ../../whatsnew/3.6.rst:548
msgid "PEP 520: Preserving Class Attribute Definition Order"
msgstr ""

#: ../../whatsnew/3.6.rst:550
msgid ""
"Attributes in a class definition body have a natural ordering: the same "
"order in which the names appear in the source.  This order is now "
"preserved in the new class's :attr:`~object.__dict__` attribute."
msgstr ""

#: ../../whatsnew/3.6.rst:554
msgid ""
"Also, the effective default class *execution* namespace (returned from "
":ref:`type.__prepare__() <prepare>`) is now an insertion-order-preserving"
" mapping."
msgstr ""

#: ../../whatsnew/3.6.rst:560
msgid ":pep:`520` -- Preserving Class Attribute Definition Order"
msgstr ""

#: ../../whatsnew/3.6.rst:567
msgid "PEP 468: Preserving Keyword Argument Order"
msgstr ""

#: ../../whatsnew/3.6.rst:569
msgid ""
"``**kwargs`` in a function signature is now guaranteed to be an "
"insertion-order-preserving mapping."
msgstr ""

#: ../../whatsnew/3.6.rst:574
msgid ":pep:`468` -- Preserving Keyword Argument Order"
msgstr ""

#: ../../whatsnew/3.6.rst:581
msgid "New :ref:`dict <typesmapping>` implementation"
msgstr ""

#: ../../whatsnew/3.6.rst:583
#, python-format
msgid ""
"The :ref:`dict <typesmapping>` type now uses a \"compact\" representation"
" based on `a proposal by Raymond Hettinger "
"<https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_ which was `first implemented by PyPy "
"<https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-"
"more.html>`_. The memory usage of the new :func:`dict` is between 20% and"
" 25% smaller compared to Python 3.5."
msgstr ""

#: ../../whatsnew/3.6.rst:591
msgid ""
"The order-preserving aspect of this new implementation is considered an "
"implementation detail and should not be relied upon (this may change in "
"the future, but it is desired to have this new dict implementation in the"
" language for a few releases before changing the language spec to mandate"
" order-preserving semantics for all current and future Python "
"implementations; this also helps preserve backwards-compatibility with "
"older versions of the language where random iteration order is still in "
"effect, e.g. Python 3.5)."
msgstr ""

#: ../../whatsnew/3.6.rst:600
msgid ""
"(Contributed by INADA Naoki in :issue:`27350`. Idea `originally suggested"
" by Raymond Hettinger <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_.)"
msgstr ""

#: ../../whatsnew/3.6.rst:608
msgid "PEP 523: Adding a frame evaluation API to CPython"
msgstr ""

#: ../../whatsnew/3.6.rst:610
msgid ""
"While Python provides extensive support to customize how code executes, "
"one place it has not done so is in the evaluation of frame objects.  If "
"you wanted some way to intercept frame evaluation in Python there really "
"wasn't any way without directly manipulating function pointers for "
"defined functions."
msgstr ""

#: ../../whatsnew/3.6.rst:616
msgid ""
":pep:`523` changes this by providing an API to make frame evaluation "
"pluggable at the C level. This will allow for tools such as debuggers and"
" JITs to intercept frame evaluation before the execution of Python code "
"begins. This enables the use of alternative evaluation implementations "
"for Python code, tracking frame evaluation, etc."
msgstr ""

#: ../../whatsnew/3.6.rst:623
msgid ""
"This API is not part of the limited C API and is marked as private to "
"signal that usage of this API is expected to be limited and only "
"applicable to very select, low-level use-cases. Semantics of the API will"
" change with Python as necessary."
msgstr ""

#: ../../whatsnew/3.6.rst:630
msgid ":pep:`523` -- Adding a frame evaluation API to CPython"
msgstr ""

#: ../../whatsnew/3.6.rst:631
msgid "PEP written by Brett Cannon and Dino Viehland."
msgstr ""

#: ../../whatsnew/3.6.rst:637
msgid "PYTHONMALLOC environment variable"
msgstr ""

#: ../../whatsnew/3.6.rst:639
msgid ""
"The new :envvar:`PYTHONMALLOC` environment variable allows setting the "
"Python memory allocators and installing debug hooks."
msgstr ""

#: ../../whatsnew/3.6.rst:642
msgid ""
"It is now possible to install debug hooks on Python memory allocators on "
"Python compiled in release mode using ``PYTHONMALLOC=debug``. Effects of "
"debug hooks:"
msgstr ""

#: ../../whatsnew/3.6.rst:645
msgid "Newly allocated memory is filled with the byte ``0xCB``"
msgstr ""

#: ../../whatsnew/3.6.rst:646
msgid "Freed memory is filled with the byte ``0xDB``"
msgstr ""

#: ../../whatsnew/3.6.rst:647
msgid ""
"Detect violations of the Python memory allocator API. For example, "
":c:func:`PyObject_Free` called on a memory block allocated by "
":c:func:`PyMem_Malloc`."
msgstr ""

#: ../../whatsnew/3.6.rst:650
msgid "Detect writes before the start of a buffer (buffer underflows)"
msgstr ""

#: ../../whatsnew/3.6.rst:651
msgid "Detect writes after the end of a buffer (buffer overflows)"
msgstr ""

#: ../../whatsnew/3.6.rst:652
msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when "
"allocator functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: "
":c:func:`PyObject_Malloc`) and :c:data:`PYMEM_DOMAIN_MEM` (ex: "
":c:func:`PyMem_Malloc`) domains are called."
msgstr ""

#: ../../whatsnew/3.6.rst:656
msgid "Checking if the GIL is held is also a new feature of Python 3.6."
msgstr ""

#: ../../whatsnew/3.6.rst:658
msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on "
"Python memory allocators."
msgstr ""

#: ../../whatsnew/3.6.rst:661
msgid ""
"It is now also possible to force the usage of the :c:func:`malloc` "
"allocator of the C library for all Python memory allocations using "
"``PYTHONMALLOC=malloc``. This is helpful when using external memory "
"debuggers like Valgrind on a Python compiled in release mode."
msgstr ""

#: ../../whatsnew/3.6.rst:666
msgid ""
"On error, the debug hooks on Python memory allocators now use the "
":mod:`tracemalloc` module to get the traceback where a memory block was "
"allocated."
msgstr ""

#: ../../whatsnew/3.6.rst:670
msgid ""
"Example of fatal error on buffer overflow using ``python3.6 -X "
"tracemalloc=5`` (store 5 frames in traces)::"
msgstr ""

#: ../../whatsnew/3.6.rst:707
msgid "(Contributed by Victor Stinner in :issue:`26516` and :issue:`26564`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:713
msgid "DTrace and SystemTap probing support"
msgstr ""

#: ../../whatsnew/3.6.rst:715
msgid ""
"Python can now be built ``--with-dtrace`` which enables static markers "
"for the following events in the interpreter:"
msgstr ""

#: ../../whatsnew/3.6.rst:718
msgid "function call/return"
msgstr ""

#: ../../whatsnew/3.6.rst:720
msgid "garbage collection started/finished"
msgstr ""

#: ../../whatsnew/3.6.rst:722
msgid "line of code executed."
msgstr ""

#: ../../whatsnew/3.6.rst:724
msgid ""
"This can be used to instrument running interpreters in production, "
"without the need to recompile specific debug builds or providing "
"application-specific profiling/debugging code."
msgstr ""

#: ../../whatsnew/3.6.rst:728
msgid "More details in :ref:`instrumentation`."
msgstr ""

#: ../../whatsnew/3.6.rst:730
msgid ""
"The current implementation is tested on Linux and macOS.  Additional "
"markers may be added in the future."
msgstr ""

#: ../../whatsnew/3.6.rst:733
msgid ""
"(Contributed by ≈Åukasz Langa in :issue:`21590`, based on patches by Jes√∫s"
" Cea Avi√≥n, David Malcolm, and Nikhil Benesch.)"
msgstr ""

#: ../../whatsnew/3.6.rst:742
msgid ""
"A ``global`` or ``nonlocal`` statement must now textually appear before "
"the first use of the affected name in the same scope. Previously this was"
" a :exc:`SyntaxWarning`."
msgstr ""

#: ../../whatsnew/3.6.rst:746
msgid ""
"It is now possible to set a :ref:`special method <specialnames>` to "
"``None`` to indicate that the corresponding operation is not available. "
"For example, if a class sets :meth:`__iter__` to ``None``, the class is "
"not iterable. (Contributed by Andrew Barnert and Ivan Levkivskyi in "
":issue:`25958`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:752
msgid ""
"Long sequences of repeated traceback lines are now abbreviated as "
"``\"[Previous line repeated {count} more times]\"`` (see "
":ref:`whatsnew36-traceback` for an example). (Contributed by Emanuel "
"Barry in :issue:`26823`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:757
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass "
"of :exc:`ImportError`) when it cannot find a module.  Code that currently"
" checks for ImportError (in try-except) will still work. (Contributed by "
"Eric Snow in :issue:`15767`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:762
msgid ""
"Class methods relying on zero-argument ``super()`` will now work "
"correctly when called from metaclass methods during class creation. "
"(Contributed by Martin Teichmann in :issue:`23722`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:773
msgid "secrets"
msgstr ""

#: ../../whatsnew/3.6.rst:775
msgid ""
"The main purpose of the new :mod:`secrets` module is to provide an "
"obvious way to reliably generate cryptographically strong pseudo-random "
"values suitable for managing secrets, such as account authentication, "
"tokens, and similar."
msgstr ""

#: ../../whatsnew/3.6.rst:781
msgid ""
"Note that the pseudo-random generators in the :mod:`random` module should"
" *NOT* be used for security purposes.  Use :mod:`secrets` on Python 3.6+ "
"and :func:`os.urandom()` on Python 3.5 and earlier."
msgstr ""

#: ../../whatsnew/3.6.rst:787
msgid ":pep:`506` -- Adding A Secrets Module To The Standard Library"
msgstr ""

#: ../../whatsnew/3.6.rst:788
msgid "PEP written and implemented by Steven D'Aprano."
msgstr ""

#: ../../whatsnew/3.6.rst:797
msgid ""
"Exhausted iterators of :class:`array.array` will now stay exhausted even "
"if the iterated array is extended.  This is consistent with the behavior "
"of other mutable sequences."
msgstr ""

#: ../../whatsnew/3.6.rst:801
msgid "Contributed by Serhiy Storchaka in :issue:`26492`."
msgstr ""

#: ../../whatsnew/3.6.rst:806
msgid ""
"The new :class:`ast.Constant` AST node has been added.  It can be used by"
" external AST optimizers for the purposes of constant folding."
msgstr ""

#: ../../whatsnew/3.6.rst:809
msgid "Contributed by Victor Stinner in :issue:`26146`."
msgstr ""

#: ../../whatsnew/3.6.rst:815
msgid ""
"Starting with Python 3.6 the ``asyncio`` module is no longer provisional "
"and its API is considered stable."
msgstr ""

#: ../../whatsnew/3.6.rst:818
msgid ""
"Notable changes in the :mod:`asyncio` module since Python 3.5.0 (all "
"backported to 3.5.x due to the provisional status):"
msgstr ""

#: ../../whatsnew/3.6.rst:821
msgid ""
"The :func:`~asyncio.get_event_loop` function has been changed to always "
"return the currently running loop when called from coroutines and "
"callbacks. (Contributed by Yury Selivanov in :issue:`28613`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:843
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop "
"implementations, such as `uvloop "
"<https://github.com/MagicStack/uvloop>`_, to provide a faster "
":class:`asyncio.Future` implementation. (Contributed by Yury Selivanov in"
" :issue:`27041`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:850
msgid ""
"New :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` method to get the current exception"
" handler. (Contributed by Yury Selivanov in :issue:`27040`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:859
msgid ""
"The performance of :meth:`StreamReader.readexactly() "
"<asyncio.StreamReader.readexactly>` has been improved. (Contributed by "
"Mark Korenberg in :issue:`28370`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:863
msgid ""
"The :meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` method is "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""

#: ../../whatsnew/3.6.rst:868
msgid ""
"The :meth:`loop.stop() <asyncio.loop.stop>` method has been changed to "
"stop the loop immediately after the current iteration.  Any new callbacks"
" scheduled as a result of the last iteration will be discarded. "
"(Contributed by Guido van Rossum in :issue:`25593`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:874
msgid ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>` will "
"now raise :exc:`TypeError` when passed an instance of the "
":exc:`StopIteration` exception. (Contributed by Chris Angelico in "
":issue:`26221`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:879
msgid ""
"New :meth:`loop.connect_accepted_socket() "
"<asyncio.loop.connect_accepted_socket>` method to be used by servers that"
" accept connections outside of asyncio, but that use asyncio to handle "
"them. (Contributed by Jim Fulton in :issue:`27392`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:884
msgid ""
"``TCP_NODELAY`` flag is now set for all TCP transports by default. "
"(Contributed by Yury Selivanov in :issue:`27456`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:887
msgid ""
"New :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` "
"to properly close pending asynchronous generators before closing the "
"loop. (Contributed by Yury Selivanov in :issue:`28003`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:892
#, python-format
msgid ""
":class:`Future <asyncio.Future>` and :class:`Task <asyncio.Task>` classes"
" now have an optimized C implementation which makes asyncio code up to "
"30% faster. (Contributed by Yury Selivanov and INADA Naoki in "
":issue:`26081` and :issue:`28544`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:902
msgid ""
"The :func:`~binascii.b2a_base64` function now accepts an optional "
"*newline* keyword argument to control whether the newline character is "
"appended to the return value. (Contributed by Victor Stinner in "
":issue:`25357`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:911
msgid ""
"The new :const:`cmath.tau` (*œÑ*) constant has been added. (Contributed by"
" Lisa Roach in :issue:`12345`, see :pep:`628` for details.)"
msgstr ""

#: ../../whatsnew/3.6.rst:914
msgid ""
"New constants: :const:`cmath.inf` and :const:`cmath.nan` to match "
":const:`math.inf` and :const:`math.nan`, and also :const:`cmath.infj` and"
" :const:`cmath.nanj` to match the format used by complex repr. "
"(Contributed by Mark Dickinson in :issue:`23229`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:923
msgid ""
"The new :class:`~collections.abc.Collection` abstract base class has been"
" added to represent sized iterable container classes. (Contributed by "
"Ivan Levkivskyi, docs by Neil Girdhar in :issue:`27598`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:927
msgid ""
"The new :class:`~collections.abc.Reversible` abstract base class "
"represents iterable classes that also provide the :meth:`__reversed__` "
"method. (Contributed by Ivan Levkivskyi in :issue:`25987`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:931
msgid ""
"The new :class:`~collections.abc.AsyncGenerator` abstract base class "
"represents asynchronous generators. (Contributed by Yury Selivanov in "
":issue:`28720`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:935
msgid ""
"The :func:`~collections.namedtuple` function now accepts an optional "
"keyword argument *module*, which, when specified, is used for the "
"``__module__`` attribute of the returned named tuple class. (Contributed "
"by Raymond Hettinger in :issue:`17941`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:940 ../../whatsnew/3.6.rst:2278
msgid ""
"The *verbose* and *rename* arguments for :func:`~collections.namedtuple` "
"are now keyword-only. (Contributed by Raymond Hettinger in "
":issue:`25628`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:944
msgid ""
"Recursive :class:`collections.deque` instances can now be pickled. "
"(Contributed by Serhiy Storchaka in :issue:`26482`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:951
msgid ""
"The :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` "
"class constructor now accepts an optional *thread_name_prefix* argument "
"to make it possible to customize the names of the threads created by the "
"pool. (Contributed by Gregory P. Smith in :issue:`27664`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:961
msgid ""
"The :class:`contextlib.AbstractContextManager` class has been added to "
"provide an abstract base class for context managers.  It provides a "
"sensible default implementation for `__enter__()` which returns ``self`` "
"and leaves `__exit__()` an abstract method.  A matching class has been "
"added to the :mod:`typing` module as :class:`typing.ContextManager`. "
"(Contributed by Brett Cannon in :issue:`25609`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:973
msgid ""
"The :class:`~datetime.datetime` and :class:`~datetime.time` classes have "
"the new :attr:`~time.fold` attribute used to disambiguate local time when"
" necessary.  Many functions in the :mod:`datetime` have been updated to "
"support local time disambiguation. See :ref:`Local Time Disambiguation "
"<whatsnew36-pep495>` section for more information. (Contributed by "
"Alexander Belopolsky in :issue:`24773`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:981
#, python-format
msgid ""
"The :meth:`datetime.strftime() <datetime.datetime.strftime>` and "
":meth:`date.strftime() <datetime.date.strftime>` methods now support ISO "
"8601 date directives ``%G``, ``%u`` and ``%V``. (Contributed by Ashley "
"Anderson in :issue:`12006`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:986
msgid ""
"The :func:`datetime.isoformat() <datetime.datetime.isoformat>` function "
"now accepts an optional *timespec* argument that specifies the number of "
"additional components of the time value to include. (Contributed by "
"Alessandro Cucci and Alexander Belopolsky in :issue:`19475`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:991
msgid ""
"The :meth:`datetime.combine() <datetime.datetime.combine>` now accepts an"
" optional *tzinfo* argument. (Contributed by Alexander Belopolsky in "
":issue:`27661`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:999
msgid ""
"New :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>`"
" method that returns a pair ``(n, d)`` of integers that represent the "
"given :class:`~decimal.Decimal` instance as a fraction, in lowest terms "
"and with a positive denominator::"
msgstr ""

#: ../../whatsnew/3.6.rst:1007
msgid "(Contributed by Stefan Krah amd Mark Dickinson in :issue:`25928`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1014
msgid ""
"The ``default_format`` attribute has been removed from "
":class:`distutils.command.sdist.sdist` and the ``formats`` attribute "
"defaults to ``['gztar']``. Although not anticipated, any code relying on "
"the presence of ``default_format`` may need to be adapted. See "
":issue:`27819` for more details."
msgstr ""

#: ../../whatsnew/3.6.rst:1024
msgid ""
"The new email API, enabled via the *policy* keyword to various "
"constructors, is no longer provisional.  The :mod:`email` documentation "
"has been reorganized and rewritten to focus on the new API, while "
"retaining the old documentation for the legacy API.  (Contributed by R. "
"David Murray in :issue:`24277`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1029
msgid ""
"The :mod:`email.mime` classes now all accept an optional *policy* "
"keyword. (Contributed by Berker Peksag in :issue:`27331`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1032
msgid ""
"The :class:`~email.generator.DecodedGenerator` now supports the *policy* "
"keyword."
msgstr ""

#: ../../whatsnew/3.6.rst:1035
msgid ""
"There is a new :mod:`~email.policy` attribute, "
":attr:`~email.policy.Policy.message_factory`, that controls what class is"
" used by default when the parser creates new message objects.  For the "
":attr:`email.policy.compat32` policy this is "
":class:`~email.message.Message`, for the new policies it is "
":class:`~email.message.EmailMessage`. (Contributed by R. David Murray in "
":issue:`20476`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1044
msgid "encodings"
msgstr ""

#: ../../whatsnew/3.6.rst:1046
msgid ""
"On Windows, added the ``'oem'`` encoding to use ``CP_OEMCP``, and the "
"``'ansi'`` alias for the existing ``'mbcs'`` encoding, which uses the "
"``CP_ACP`` code page. (Contributed by Steve Dower in :issue:`27959`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1054
msgid ""
"Two new enumeration base classes have been added to the :mod:`enum` "
"module: :class:`~enum.Flag` and :class:`~enum.IntFlags`.  Both are used "
"to define constants that can be combined using the bitwise operators. "
"(Contributed by Ethan Furman in :issue:`23591`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1059
msgid ""
"Many standard library modules have been updated to use the "
":class:`~enum.IntFlags` class for their constants."
msgstr ""

#: ../../whatsnew/3.6.rst:1062
msgid ""
"The new :class:`enum.auto` value can be used to assign values to enum "
"members automatically::"
msgstr ""

#: ../../whatsnew/3.6.rst:1078
msgid ""
"On Windows, the :mod:`faulthandler` module now installs a handler for "
"Windows exceptions: see :func:`faulthandler.enable`. (Contributed by "
"Victor Stinner in :issue:`23848`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1084
msgid "fileinput"
msgstr ""

#: ../../whatsnew/3.6.rst:1086
msgid ""
":func:`~fileinput.hook_encoded` now supports the *errors* argument. "
"(Contributed by Joseph Hackman in :issue:`25788`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1093
msgid ""
":mod:`hashlib` supports OpenSSL 1.1.0.  The minimum recommend version is "
"1.0.2. (Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1096
msgid ""
"BLAKE2 hash functions were added to the module. :func:`~hashlib.blake2b` "
"and :func:`~hashlib.blake2s` are always available and support the full "
"feature set of BLAKE2. (Contributed by Christian Heimes in :issue:`26798`"
" based on code by Dmitry Chestnykh and Samuel Neves. Documentation "
"written by Dmitry Chestnykh.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1102
msgid ""
"The SHA-3 hash functions :func:`~hashlib.sha3_224`, "
":func:`~hashlib.sha3_256`, :func:`~hashlib.sha3_384`, "
":func:`~hashlib.sha3_512`, and SHAKE hash functions "
":func:`~hashlib.shake_128` and :func:`~hashlib.shake_256` were added. "
"(Contributed by Christian Heimes in :issue:`16113`. Keccak Code Package "
"by Guido Bertoni, Joan Daemen, Micha√´l Peeters, Gilles Van Assche, and "
"Ronny Van Keer.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1109
msgid ""
"The password-based key derivation function :func:`~hashlib.scrypt` is now"
" available with OpenSSL 1.1.0 and newer. (Contributed by Christian Heimes"
" in :issue:`27928`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1116
msgid ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` and"
" :meth:`~http.client.HTTPConnection.endheaders` both now support chunked "
"encoding request bodies. (Contributed by Demian Brecht and Rolf Krahl in "
":issue:`12319`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1125
msgid ""
"The idlelib package is being modernized and refactored to make IDLE look "
"and work better and to make the code easier to understand, test, and "
"improve. Part of making IDLE look better, especially on Linux and Mac, is"
" using ttk widgets, mostly in the dialogs.  As a result, IDLE no longer "
"runs with tcl/tk 8.4.  It now requires tcl/tk 8.5 or 8.6.  We recommend "
"running the latest release of either."
msgstr ""

#: ../../whatsnew/3.6.rst:1132
msgid ""
"'Modernizing' includes renaming and consolidation of idlelib modules. The"
" renaming of files with partial uppercase names is similar to the "
"renaming of, for instance, Tkinter and TkFont to tkinter and tkinter.font"
" in 3.0.  As a result, imports of idlelib files that worked in 3.5 will "
"usually not work in 3.6.  At least a module name change will be needed "
"(see idlelib/README.txt), sometimes more.  (Name changes contributed by "
"Al Swiegart and Terry Reedy in :issue:`24225`.  Most idlelib patches "
"since have been and will be part of the process.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1141
msgid ""
"In compensation, the eventual result with be that some idlelib classes "
"will be easier to use, with better APIs and docstrings explaining them.  "
"Additional useful information will be added to idlelib when available."
msgstr ""

#: ../../whatsnew/3.6.rst:1145
msgid "New in 3.6.2:"
msgstr ""

#: ../../whatsnew/3.6.rst:1147 ../../whatsnew/3.7.rst:979
msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in "
":issue:`15786`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1149
msgid "New in 3.6.3:"
msgstr ""

#: ../../whatsnew/3.6.rst:1151 ../../whatsnew/3.7.rst:981
msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions "
"and classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry "
"Jan Reedy in :issue:`1612262`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1157 ../../whatsnew/3.7.rst:997
msgid ""
"The IDLE features formerly implemented as extensions have been "
"reimplemented as normal features.  Their settings have been moved from "
"the Extensions tab to other dialog tabs. (Contributed by Charles "
"Wohlganger and Terry Jan Reedy in :issue:`27099`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1162 ../../whatsnew/3.7.rst:987
msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten "
"to improve both appearance and function. (Contributed by Cheryl Sabella "
"and Terry Jan Reedy in multiple issues.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1166
msgid "New in 3.6.4:"
msgstr ""

#: ../../whatsnew/3.6.rst:1168 ../../whatsnew/3.7.rst:991
msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. "
"(Contributed by Terry Jan Reedy in :issue:`13802`.) The sample can be "
"edited to include other characters. (Contributed by Serhiy Storchaka in "
":issue:`31860`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1174
msgid "New in 3.6.6:"
msgstr ""

#: ../../whatsnew/3.6.rst:1176 ../../whatsnew/3.7.rst:1002
msgid ""
"Editor code context option revised.  Box displays all context lines up to"
" maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in "
":issue:`33642`, :issue:`33768`, and :issue:`33679`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1182 ../../whatsnew/3.7.rst:1008
msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On "
"Windows 8.1+ or 10, with DPI compatibility properties of the Python "
"binary unchanged, and a monitor resolution greater than 96 DPI, this "
"should make text and lines sharper.  It should otherwise have no effect. "
"(Contributed by Terry Jan Reedy in :issue:`33656`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1188
msgid "New in 3.6.7:"
msgstr ""

#: ../../whatsnew/3.6.rst:1190 ../../whatsnew/3.7.rst:1016
#: ../../whatsnew/3.8.rst:849
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can "
"be changed in the PyShell section of the General page of the Settings "
"dialog.  Fewer, but possibly extra long, lines can be squeezed by right "
"clicking on the output.  Squeezed output can be expanded in place by "
"double-clicking the button or into the clipboard or a separate window by "
"right-clicking the button.  (Contributed by Tal Einat in "
":issue:`1529353`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1201
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass "
"of :exc:`ImportError`) when it cannot find a module.  Code that current "
"checks for ``ImportError`` (in try-except) will still work. (Contributed "
"by Eric Snow in :issue:`15767`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1206
msgid ""
":class:`importlib.util.LazyLoader` now calls "
":meth:`~importlib.abc.Loader.create_module` on the wrapped loader, "
"removing the restriction that "
":class:`importlib.machinery.BuiltinImporter` and "
":class:`importlib.machinery.ExtensionFileLoader` couldn't be used with "
":class:`importlib.util.LazyLoader`."
msgstr ""

#: ../../whatsnew/3.6.rst:1212
msgid ""
":func:`importlib.util.cache_from_source`, "
":func:`importlib.util.source_from_cache`, and "
":func:`importlib.util.spec_from_file_location` now accept a :term:`path-"
"like object`."
msgstr ""

#: ../../whatsnew/3.6.rst:1221
msgid ""
"The :func:`inspect.signature() <inspect.signature>` function now reports "
"the implicit ``.0`` parameters generated by the compiler for "
"comprehension and generator expression scopes as if they were positional-"
"only parameters called ``implicit0``. (Contributed by Jelle Zijlstra in "
":issue:`19611`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1226
msgid ""
"To reduce code churn when upgrading from Python 2.7 and the legacy "
":func:`inspect.getargspec` API, the previously documented deprecation of "
":func:`inspect.getfullargspec` has been reversed. While this function is "
"convenient for single/source Python 2/3 code bases, the richer "
":func:`inspect.signature` interface remains the recommended approach for "
"new code. (Contributed by Nick Coghlan in :issue:`27172`)"
msgstr ""

#: ../../whatsnew/3.6.rst:1237
msgid ""
":func:`json.load` and :func:`json.loads` now support binary input.  "
"Encoded JSON should be represented using either UTF-8, UTF-16, or UTF-32."
" (Contributed by Serhiy Storchaka in :issue:`17909`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1245
msgid ""
"The new :meth:`WatchedFileHandler.reopenIfNeeded() "
"<logging.handlers.WatchedFileHandler.reopenIfNeeded>` method has been "
"added to add the ability to check if the log file needs to be reopened. "
"(Contributed by Marian Horban in :issue:`24884`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1254
msgid ""
"The tau (*œÑ*) constant has been added to the :mod:`math` and :mod:`cmath`"
" modules. (Contributed by Lisa Roach in :issue:`12345`, see :pep:`628` "
"for details.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1262
msgid ""
":ref:`Proxy Objects <multiprocessing-proxy_objects>` returned by "
":func:`multiprocessing.Manager` can now be nested. (Contributed by Davin "
"Potts in :issue:`6766`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1270
msgid ""
"See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details on how "
"the :mod:`os` and :mod:`os.path` modules now support :term:`path-like "
"objects <path-like object>`."
msgstr ""

#: ../../whatsnew/3.6.rst:1274
msgid ":func:`~os.scandir` now supports :class:`bytes` paths on Windows."
msgstr ""

#: ../../whatsnew/3.6.rst:1276
msgid ""
"A new :meth:`~os.scandir.close` method allows explicitly closing a "
":func:`~os.scandir` iterator.  The :func:`~os.scandir` iterator now "
"supports the :term:`context manager` protocol.  If a :func:`scandir` "
"iterator is neither exhausted nor explicitly closed a "
":exc:`ResourceWarning` will be emitted in its destructor. (Contributed by"
" Serhiy Storchaka in :issue:`25994`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1286
msgid ""
"The Linux ``getrandom()`` syscall (get random bytes) is now exposed as "
"the new :func:`os.getrandom` function. (Contributed by Victor Stinner, "
"part of the :pep:`524`)"
msgstr ""

#: ../../whatsnew/3.6.rst:1294
msgid ""
":mod:`pathlib` now supports :term:`path-like objects <path-like object>`."
" (Contributed by Brett Cannon in :issue:`27186`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1297
msgid "See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details."
msgstr ""

#: ../../whatsnew/3.6.rst:1303
msgid ""
"The :class:`~pdb.Pdb` class constructor has a new optional *readrc* "
"argument to control whether ``.pdbrc`` files should be read."
msgstr ""

#: ../../whatsnew/3.6.rst:1310
msgid ""
"Objects that need ``__new__`` called with keyword arguments can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than "
"protocol version 4. Protocol version 4 already supports this case.  "
"(Contributed by Serhiy Storchaka in :issue:`24164`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1317
msgid "pickletools"
msgstr ""

#: ../../whatsnew/3.6.rst:1319
msgid ""
":func:`pickletools.dis()` now outputs the implicit memo index for the "
"``MEMOIZE`` opcode. (Contributed by Serhiy Storchaka in :issue:`25382`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1327
msgid ""
"The :mod:`pydoc` module has learned to respect the ``MANPAGER`` "
"environment variable. (Contributed by Matthias Klose in :issue:`8637`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1331
msgid ""
":func:`help` and :mod:`pydoc` can now list named tuple fields in the "
"order they were defined rather than alphabetically. (Contributed by "
"Raymond Hettinger in :issue:`24879`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1339
msgid ""
"The new :func:`~random.choices` function returns a list of elements of "
"specified size from the given population with optional weights. "
"(Contributed by Raymond Hettinger in :issue:`18844`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1347
msgid ""
"Added support of modifier spans in regular expressions.  Examples: "
"``'(?i:p)ython'`` matches ``'python'`` and ``'Python'``, but not "
"``'PYTHON'``; ``'(?i)g(?-i:v)r'`` matches ``'GvR'`` and ``'gvr'``, but "
"not ``'GVR'``. (Contributed by Serhiy Storchaka in :issue:`433028`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1352
msgid ""
"Match object groups can be accessed by ``__getitem__``, which is "
"equivalent to ``group()``.  So ``mo['name']`` is now equivalent to "
"``mo.group('name')``.  (Contributed by Eric Smith in :issue:`24454`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1356
msgid ""
":class:`~re.Match` objects now support :meth:`index-like objects "
"<object.__index__>` as group indices. (Contributed by Jeroen Demeyer and "
"Xiang Zhang in :issue:`27177`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1365
msgid ""
"Added :func:`~readline.set_auto_history` to enable or disable automatic "
"addition of input to the history list.  (Contributed by Tyler Crompton in"
" :issue:`26870`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1371
msgid "rlcompleter"
msgstr ""

#: ../../whatsnew/3.6.rst:1373
msgid ""
"Private and special attribute names now are omitted unless the prefix "
"starts with underscores.  A space or a colon is added after some "
"completed keywords. (Contributed by Serhiy Storchaka in :issue:`25011` "
"and :issue:`25209`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1381
msgid ""
"The :class:`~shlex.shlex` has much :ref:`improved shell compatibility "
"<improved-shell-compatibility>` through the new *punctuation_chars* "
"argument to control which characters are treated as punctuation. "
"(Contributed by Vinay Sajip in :issue:`1521950`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1391
msgid ""
"When specifying paths to add to :attr:`sys.path` in a `.pth` file, you "
"may now specify file paths on top of directories (e.g. zip files). "
"(Contributed by Wolfgang Langner in :issue:`26587`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1399
msgid ""
":attr:`sqlite3.Cursor.lastrowid` now supports the ``REPLACE`` statement. "
"(Contributed by Alex LordThorsen in :issue:`16864`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1406
msgid ""
"The :func:`~socket.socket.ioctl` function now supports the "
":data:`~socket.SIO_LOOPBACK_FAST_PATH` control code. (Contributed by "
"Daniel Stokes in :issue:`26536`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1410
msgid ""
"The :meth:`~socket.socket.getsockopt` constants ``SO_DOMAIN``, "
"``SO_PROTOCOL``, ``SO_PEERSEC``, and ``SO_PASSSEC`` are now supported. "
"(Contributed by Christian Heimes in :issue:`26907`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1414
msgid ""
"The :meth:`~socket.socket.setsockopt` now supports the "
"``setsockopt(level, optname, None, optlen: int)`` form. (Contributed by "
"Christian Heimes in :issue:`27744`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1418
msgid ""
"The socket module now supports the address family :data:`~socket.AF_ALG` "
"to interface with Linux Kernel crypto API. ``ALG_*``, ``SOL_ALG`` and "
":meth:`~socket.socket.sendmsg_afalg` were added. (Contributed by "
"Christian Heimes in :issue:`27744` with support from Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1424
msgid ""
"New Linux constants ``TCP_USER_TIMEOUT`` and ``TCP_CONGESTION`` were "
"added. (Contributed by Omar Sandoval, issue:`26273`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1431
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined "
"in :mod:`http.server`, :mod:`xmlrpc.server` and "
":mod:`wsgiref.simple_server`, now support the :term:`context manager` "
"protocol. (Contributed by Aviv Palivoda in :issue:`26404`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1437
msgid ""
"The :attr:`~socketserver.StreamRequestHandler.wfile` attribute of "
":class:`~socketserver.StreamRequestHandler` classes now implements the "
":class:`io.BufferedIOBase` writable interface.  In particular, calling "
":meth:`~io.BufferedIOBase.write` is now guaranteed to send the data in "
"full.  (Contributed by Martin Panter in :issue:`26721`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1447
msgid ""
":mod:`ssl` supports OpenSSL 1.1.0.  The minimum recommend version is "
"1.0.2. (Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1450
msgid ""
"3DES has been removed from the default cipher suites and ChaCha20 "
"Poly1305 cipher suites have been added. (Contributed by Christian Heimes "
"in :issue:`27850` and :issue:`27766`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1454
msgid ""
":class:`~ssl.SSLContext` has better default configuration for options and"
" ciphers. (Contributed by Christian Heimes in :issue:`28043`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1458
msgid ""
"SSL session can be copied from one client-side connection to another with"
" the new :class:`~ssl.SSLSession` class.  TLS session resumption can "
"speed up the initial handshake, reduce latency and improve performance "
"(Contributed by Christian Heimes in :issue:`19500` based on a draft by "
"Alex Warhawk.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1464
msgid ""
"The new :meth:`~ssl.SSLContext.get_ciphers` method can be used to get a "
"list of enabled ciphers in order of cipher priority."
msgstr ""

#: ../../whatsnew/3.6.rst:1467
msgid ""
"All constants and flags have been converted to :class:`~enum.IntEnum` and"
" :class:`~enum.IntFlags`. (Contributed by Christian Heimes in "
":issue:`28025`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1471
msgid ""
"Server and client-side specific TLS protocols for "
":class:`~ssl.SSLContext` were added. (Contributed by Christian Heimes in "
":issue:`28085`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1479
msgid ""
"A new :func:`~statistics.harmonic_mean` function has been added. "
"(Contributed by Steven D'Aprano in :issue:`27181`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1486
msgid ""
":mod:`struct` now supports IEEE 754 half-precision floats via the ``'e'``"
" format specifier. (Contributed by Eli Stevens, Mark Dickinson in "
":issue:`11734`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1494
msgid ""
":class:`subprocess.Popen` destructor now emits a :exc:`ResourceWarning` "
"warning if the child process is still running. Use the context manager "
"protocol (``with proc: ...``) or explicitly call the "
":meth:`~subprocess.Popen.wait` method to read the exit status of the "
"child process. (Contributed by Victor Stinner in :issue:`26741`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1500
msgid ""
"The :class:`subprocess.Popen` constructor and all functions that pass "
"arguments through to it now accept *encoding* and *errors* arguments. "
"Specifying either of these will enable text mode for the *stdin*, "
"*stdout* and *stderr* streams. (Contributed by Steve Dower in "
":issue:`6135`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1509
msgid ""
"The new :func:`~sys.getfilesystemencodeerrors` function returns the name "
"of the error mode used to convert between Unicode filenames and bytes "
"filenames. (Contributed by Steve Dower in :issue:`27781`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1513
msgid ""
"On Windows the return value of the :func:`~sys.getwindowsversion` "
"function now includes the *platform_version* field which contains the "
"accurate major version, minor version and build number of the current "
"operating system, rather than the version that is being emulated for the "
"process (Contributed by Steve Dower in :issue:`27932`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1521
msgid "telnetlib"
msgstr ""

#: ../../whatsnew/3.6.rst:1523
msgid ""
":class:`~telnetlib.Telnet` is now a context manager (contributed by "
"St√©phane Wirtel in :issue:`25485`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1530
msgid ""
"The :class:`~time.struct_time` attributes :attr:`tm_gmtoff` and "
":attr:`tm_zone` are now available on all platforms."
msgstr ""

#: ../../whatsnew/3.6.rst:1537
msgid ""
"The new :meth:`Timer.autorange() <timeit.Timer.autorange>` convenience "
"method has been added to call :meth:`Timer.timeit() "
"<timeit.Timer.timeit>` repeatedly so that the total run time is greater "
"or equal to 200 milliseconds. (Contributed by Steven D'Aprano in "
":issue:`6422`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1542
msgid ""
":mod:`timeit` now warns when there is substantial (4x) variance between "
"best and worst times. (Contributed by Serhiy Storchaka in "
":issue:`23552`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1550
msgid ""
"Added methods :meth:`~tkinter.Variable.trace_add`, "
":meth:`~tkinter.Variable.trace_remove` and "
":meth:`~tkinter.Variable.trace_info` in the :class:`tkinter.Variable` "
"class.  They replace old methods "
":meth:`~tkinter.Variable.trace_variable`, "
":meth:`~tkinter.Variable.trace`, :meth:`~tkinter.Variable.trace_vdelete` "
"and :meth:`~tkinter.Variable.trace_vinfo` that use obsolete Tcl commands "
"and might not work in future versions of Tcl. (Contributed by Serhiy "
"Storchaka in :issue:`22115`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1565
msgid ""
"Both the traceback module and the interpreter's builtin exception display"
" now abbreviate long sequences of repeated lines in tracebacks as shown "
"in the following example::"
msgstr ""

#: ../../whatsnew/3.6.rst:1580
msgid "(Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1586
msgid ""
"The :mod:`tracemalloc` module now supports tracing memory allocations in "
"multiple different address spaces."
msgstr ""

#: ../../whatsnew/3.6.rst:1589
msgid ""
"The new :class:`~tracemalloc.DomainFilter` filter class has been added to"
" filter block traces by their address space (domain)."
msgstr ""

#: ../../whatsnew/3.6.rst:1592
msgid "(Contributed by Victor Stinner in :issue:`26588`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1600
msgid ""
"Since the :mod:`typing` module is :term:`provisional <provisional API>`, "
"all changes introduced in Python 3.6 have also been backported to Python "
"3.5.x."
msgstr ""

#: ../../whatsnew/3.6.rst:1604
msgid ""
"The :mod:`typing` module has a much improved support for generic type "
"aliases.  For example ``Dict[str, Tuple[S, T]]`` is now a valid type "
"annotation. (Contributed by Guido van Rossum in `Github #195 "
"<https://github.com/python/typing/pull/195>`_.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1610
msgid ""
"The :class:`typing.ContextManager` class has been added for representing "
":class:`contextlib.AbstractContextManager`. (Contributed by Brett Cannon "
"in :issue:`25609`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1614
msgid ""
"The :class:`typing.Collection` class has been added for representing "
":class:`collections.abc.Collection`. (Contributed by Ivan Levkivskyi in "
":issue:`27598`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1618
msgid ""
"The :const:`typing.ClassVar` type construct has been added to mark class "
"variables.  As introduced in :pep:`526`, a variable annotation wrapped in"
" ClassVar indicates that a given attribute is intended to be used as a "
"class variable and should not be set on instances of that class. "
"(Contributed by Ivan Levkivskyi in `Github #280 "
"<https://github.com/python/typing/pull/280>`_.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1625
msgid ""
"A new :const:`~typing.TYPE_CHECKING` constant that is assumed to be "
"``True`` by the static type checkers, but is ``False`` at runtime. "
"(Contributed by Guido van Rossum in `Github #230 "
"<https://github.com/python/typing/issues/230>`_.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1630
msgid ""
"A new :func:`~typing.NewType` helper function has been added to create "
"lightweight distinct types for annotations::"
msgstr ""

#: ../../whatsnew/3.6.rst:1638
msgid ""
"The static type checker will treat the new type as if it were a subclass "
"of the original type.  (Contributed by Ivan Levkivskyi in `Github #189 "
"<https://github.com/python/typing/issues/189>`_.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1646
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 9.0.0 "
"<http://unicode.org/versions/Unicode9.0.0/>`_. (Contributed by Benjamin "
"Peterson.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1656
msgid ""
"Two new methods, :meth:`Mock.assert_called() "
"<unittest.mock.Mock.assert_called>` and :meth:`Mock.assert_called_once() "
"<unittest.mock.Mock.assert_called_once>` to check if the mock object was "
"called. (Contributed by Amit Saha in :issue:`26323`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1662
msgid ""
"The :meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` method now "
"has two optional keyword only arguments: *return_value* and "
"*side_effect*. (Contributed by Kushal Das in :issue:`21271`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1669
msgid "urllib.request"
msgstr ""

#: ../../whatsnew/3.6.rst:1671
msgid ""
"If a HTTP request has a file or iterable body (other than a bytes object)"
" but no ``Content-Length`` header, rather than throwing an error, "
":class:`~urllib.request.AbstractHTTPHandler` now falls back to use "
"chunked transfer encoding. (Contributed by Demian Brecht and Rolf Krahl "
"in :issue:`12319`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1679
msgid "urllib.robotparser"
msgstr ""

#: ../../whatsnew/3.6.rst:1681
msgid ""
":class:`~urllib.robotparser.RobotFileParser` now supports the ``Crawl-"
"delay`` and ``Request-rate`` extensions. (Contributed by Nikolay "
"Bogoychev in :issue:`16099`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1689
msgid ""
":mod:`venv` accepts a new parameter ``--prompt``. This parameter provides"
" an alternative prefix for the virtual environment. (Proposed by ≈Åukasz "
"Balcerzak and ported to 3.6 by St√©phane Wirtel in :issue:`22829`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1695 ../../whatsnew/3.7.rst:1571
msgid "warnings"
msgstr ""

#: ../../whatsnew/3.6.rst:1697
msgid ""
"A new optional *source* parameter has been added to the "
":func:`warnings.warn_explicit` function: the destroyed object which "
"emitted a :exc:`ResourceWarning`. A *source* attribute has also been "
"added to :class:`warnings.WarningMessage` (contributed by Victor Stinner "
"in :issue:`26568` and :issue:`26567`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1703
msgid ""
"When a :exc:`ResourceWarning` warning is logged, the :mod:`tracemalloc` "
"module is now used to try to retrieve the traceback where the destroyed "
"object was allocated."
msgstr ""

#: ../../whatsnew/3.6.rst:1706
msgid "Example with the script ``example.py``::"
msgstr ""

#: ../../whatsnew/3.6.rst:1716
msgid "Output of the command ``python3.6 -Wd -X tracemalloc=5 example.py``::"
msgstr ""

#: ../../whatsnew/3.6.rst:1726
msgid ""
"The \"Object allocated at\" traceback is new and is only displayed if "
":mod:`tracemalloc` is tracing Python memory allocations and if the "
":mod:`warnings` module was already imported."
msgstr ""

#: ../../whatsnew/3.6.rst:1734
msgid ""
"Added the 64-bit integer type :data:`REG_QWORD <winreg.REG_QWORD>`. "
"(Contributed by Clement Rouault in :issue:`23026`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1739
msgid "winsound"
msgstr ""

#: ../../whatsnew/3.6.rst:1741
msgid ""
"Allowed keyword arguments to be passed to :func:`Beep <winsound.Beep>`, "
":func:`MessageBeep <winsound.MessageBeep>`, and :func:`PlaySound "
"<winsound.PlaySound>` (:issue:`27982`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1747
msgid "xmlrpc.client"
msgstr ""

#: ../../whatsnew/3.6.rst:1749
msgid ""
"The :mod:`xmlrpc.client` module now supports unmarshalling additional "
"data types used by the Apache XML-RPC implementation for numerics and "
"``None``. (Contributed by Serhiy Storchaka in :issue:`26885`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1758
msgid ""
"A new :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` class "
"method allows making a :class:`~zipfile.ZipInfo` instance from a "
"filesystem file. A new :meth:`ZipInfo.is_dir() <zipfile.ZipInfo.is_dir>` "
"method can be used to check if the :class:`~zipfile.ZipInfo` instance "
"represents a directory. (Contributed by Thomas Kluyver in "
":issue:`26039`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1764
msgid ""
"The :meth:`ZipFile.open() <zipfile.ZipFile.open>` method can now be used "
"to write data into a ZIP file, as well as for extracting data. "
"(Contributed by Thomas Kluyver in :issue:`26039`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1772
msgid ""
"The :func:`~zlib.compress` and :func:`~zlib.decompress` functions now "
"accept keyword arguments. (Contributed by Aviv Palivoda in :issue:`26243`"
" and Xiang Zhang in :issue:`16764` respectively.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1781
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode "
"which made a number of opcode optimizations possible. (Contributed by "
"Demur Rumed with input and reviews from Serhiy Storchaka and Victor "
"Stinner in :issue:`26647` and :issue:`28050`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1786
msgid ""
"The :class:`asyncio.Future` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26081`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1789
msgid ""
"The :class:`asyncio.Task` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov in :issue:`28544`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1792
msgid ""
"Various implementation improvements in the :mod:`typing` module (such as "
"caching of generic types) allow up to 30 times performance improvements "
"and reduced memory footprint."
msgstr ""

#: ../../whatsnew/3.6.rst:1796
msgid ""
"The ASCII decoder is now up to 60 times as fast for error handlers "
"``surrogateescape``, ``ignore`` and ``replace`` (Contributed by Victor "
"Stinner in :issue:`24870`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1800
msgid ""
"The ASCII and the Latin1 encoders are now up to 3 times as fast for the "
"error handler ``surrogateescape`` (Contributed by Victor Stinner in "
":issue:`25227`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1804
msgid ""
"The UTF-8 encoder is now up to 75 times as fast for error handlers "
"``ignore``, ``replace``, ``surrogateescape``, ``surrogatepass`` "
"(Contributed by Victor Stinner in :issue:`25267`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1808
msgid ""
"The UTF-8 decoder is now up to 15 times as fast for error handlers "
"``ignore``, ``replace`` and ``surrogateescape`` (Contributed by Victor "
"Stinner in :issue:`25301`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1812
msgid ""
"``bytes % args`` is now up to 2 times faster. (Contributed by Victor "
"Stinner in :issue:`25349`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1815
msgid ""
"``bytearray % args`` is now between 2.5 and 5 times faster. (Contributed "
"by Victor Stinner in :issue:`25399`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1818
msgid ""
"Optimize :meth:`bytes.fromhex` and :meth:`bytearray.fromhex`: they are "
"now between 2x and 3.5x faster. (Contributed by Victor Stinner in "
":issue:`25401`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1821
#, python-format
msgid ""
"Optimize ``bytes.replace(b'', b'.')`` and ``bytearray.replace(b'', "
"b'.')``: up to 80% faster. (Contributed by Josh Snider in "
":issue:`26574`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1824
msgid ""
"Allocator functions of the :c:func:`PyMem_Malloc` domain "
"(:c:data:`PYMEM_DOMAIN_MEM`) now use the :ref:`pymalloc memory allocator "
"<pymalloc>` instead of :c:func:`malloc` function of the C library. The "
"pymalloc allocator is optimized for objects smaller or equal to 512 bytes"
" with a short lifetime, and use :c:func:`malloc` for larger memory "
"blocks. (Contributed by Victor Stinner in :issue:`26249`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1831
#, python-format
msgid ""
":func:`pickle.load` and :func:`pickle.loads` are now up to 10% faster "
"when deserializing many small objects (Contributed by Victor Stinner in "
":issue:`27056`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1835
msgid ""
"Passing :term:`keyword arguments <keyword argument>` to a function has an"
" overhead in comparison with passing :term:`positional arguments "
"<positional argument>`.  Now in extension functions implemented with "
"using Argument Clinic this overhead is significantly decreased. "
"(Contributed by Serhiy Storchaka in :issue:`27574`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1841
msgid ""
"Optimized :func:`~glob.glob` and :func:`~glob.iglob` functions in the "
":mod:`glob` module; they are now about 3--6 times faster. (Contributed by"
" Serhiy Storchaka in :issue:`25596`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1845
msgid ""
"Optimized globbing in :mod:`pathlib` by using :func:`os.scandir`; it is "
"now about 1.5--4 times faster. (Contributed by Serhiy Storchaka in "
":issue:`26032`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1849
msgid ""
":class:`xml.etree.ElementTree` parsing, iteration and deepcopy "
"performance has been significantly improved. (Contributed by Serhiy "
"Storchaka in :issue:`25638`, :issue:`25873`, and :issue:`25869`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1854
msgid ""
"Creation of :class:`fractions.Fraction` instances from floats and "
"decimals is now 2 to 3 times faster. (Contributed by Serhiy Storchaka in "
":issue:`25971`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1862
msgid ""
"Python now requires some C99 support in the toolchain to build. Most "
"notably, Python now uses standard integer types and macros in place of "
"custom macros like ``PY_LONG_LONG``. For more information, see :pep:`7` "
"and :issue:`17884`."
msgstr ""

#: ../../whatsnew/3.6.rst:1867
msgid ""
"Cross-compiling CPython with the Android NDK and the Android API level "
"set to 21 (Android 5.0 Lollipop) or greater runs successfully. While "
"Android is not yet a supported platform, the Python test suite runs on "
"the Android emulator with only about 16 tests failures. See the Android "
"meta-issue :issue:`26865`."
msgstr ""

#: ../../whatsnew/3.6.rst:1872
msgid ""
"The ``--enable-optimizations`` configure flag has been added. Turning it "
"on will activate expensive optimizations like PGO. (Original patch by "
"Alecsandru Patrascu of Intel in :issue:`26359`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1876
msgid ""
"The :term:`GIL <global interpreter lock>` must now be held when allocator"
" functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) "
"and :c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are "
"called."
msgstr ""

#: ../../whatsnew/3.6.rst:1880
msgid ""
"New :c:func:`Py_FinalizeEx` API which indicates if flushing buffered data"
" failed. (Contributed by Martin Panter in :issue:`5319`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1884
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports :ref:`positional-only "
"parameters <positional-only_parameter>`.  Positional-only parameters are "
"defined by empty names. (Contributed by Serhiy Storchaka in "
":issue:`26282`)."
msgstr ""

#: ../../whatsnew/3.6.rst:1889
msgid ""
"``PyTraceback_Print`` method now abbreviates long sequences of repeated "
"lines as ``\"[Previous line repeated {count} more times]\"``. "
"(Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1893
msgid ""
"The new :c:func:`PyErr_SetImportErrorSubclass` function allows for "
"specifying a subclass of :exc:`ImportError` to raise. (Contributed by "
"Eric Snow in :issue:`15767`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1897
msgid ""
"The new :c:func:`PyErr_ResourceWarning` function can be used to generate "
"a :exc:`ResourceWarning` providing the source of the resource allocation."
" (Contributed by Victor Stinner in :issue:`26567`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1901
msgid ""
"The new :c:func:`PyOS_FSPath` function returns the file system "
"representation of a :term:`path-like object`. (Contributed by Brett "
"Cannon in :issue:`27186`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1905
msgid ""
"The :c:func:`PyUnicode_FSConverter` and :c:func:`PyUnicode_FSDecoder` "
"functions will now accept :term:`path-like objects <path-like object>`."
msgstr ""

#: ../../whatsnew/3.6.rst:1912
msgid ""
"When :option:`--version` (short form: :option:`-V`) is supplied twice, "
"Python prints :data:`sys.version` for detailed information."
msgstr ""

#: ../../whatsnew/3.6.rst:1928
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, "
"class, function or module names.  Introduced by :pep:`492` in Python 3.5,"
" they will become proper keywords in Python 3.7.  Starting in Python 3.6,"
" the use of ``async`` or ``await`` as names will generate a "
":exc:`DeprecationWarning`."
msgstr ""

#: ../../whatsnew/3.6.rst:1935
msgid "Deprecated Python behavior"
msgstr ""

#: ../../whatsnew/3.6.rst:1937
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a :exc:`DeprecationWarning`, and will trigger a "
":exc:`RuntimeError` in Python 3.7.  See :ref:`whatsnew-pep-479` for "
"details."
msgstr ""

#: ../../whatsnew/3.6.rst:1941
msgid ""
"The :meth:`__aiter__` method is now expected to return an asynchronous "
"iterator directly instead of returning an awaitable as previously. Doing "
"the former will trigger a :exc:`DeprecationWarning`.  Backward "
"compatibility will be removed in Python 3.7. (Contributed by Yury "
"Selivanov in :issue:`27243`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1947
msgid ""
"A backslash-character pair that is not a valid escape sequence now "
"generates a :exc:`DeprecationWarning`.  Although this will eventually "
"become a :exc:`SyntaxError`, that will not be for several Python "
"releases. (Contributed by Emanuel Barry in :issue:`27364`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1952
msgid ""
"When performing a relative import, falling back on ``__name__`` and "
"``__path__`` from the calling module when ``__spec__`` or ``__package__``"
" are not defined now raises an :exc:`ImportWarning`. (Contributed by Rose"
" Ames in :issue:`25791`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1962
msgid "asynchat"
msgstr ""

#: ../../whatsnew/3.6.rst:1964
msgid ""
"The :mod:`asynchat` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1971
msgid ""
"The :mod:`asyncore` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1978
msgid ""
"Unlike other :mod:`dbm` implementations, the :mod:`dbm.dumb` module "
"creates databases with the ``'rw'`` mode and allows modifying the "
"database opened with the ``'r'`` mode.  This behavior is now deprecated "
"and will be removed in 3.8. (Contributed by Serhiy Storchaka in "
":issue:`21708`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1988
msgid ""
"The undocumented ``extra_path`` argument to the "
":class:`~distutils.Distribution` constructor is now considered deprecated"
" and will raise a warning if set.   Support for this parameter will be "
"removed in a future Python release.  See :issue:`27919` for details."
msgstr ""

#: ../../whatsnew/3.6.rst:1995
msgid "grp"
msgstr ""

#: ../../whatsnew/3.6.rst:1997
msgid ""
"The support of non-integer arguments in :func:`~grp.getgrgid` has been "
"deprecated. (Contributed by Serhiy Storchaka in :issue:`26129`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2005
msgid ""
"The :meth:`importlib.machinery.SourceFileLoader.load_module` and "
":meth:`importlib.machinery.SourcelessFileLoader.load_module` methods are "
"now deprecated. They were the only remaining implementations of "
":meth:`importlib.abc.Loader.load_module` in :mod:`importlib` that had not"
" been deprecated in previous versions of Python in favour of "
":meth:`importlib.abc.Loader.exec_module`."
msgstr ""

#: ../../whatsnew/3.6.rst:2012
msgid ""
"The :class:`importlib.machinery.WindowsRegistryFinder` class is now "
"deprecated. As of 3.6.0, it is still added to :attr:`sys.meta_path` by "
"default (on Windows), but this may change in future releases."
msgstr ""

#: ../../whatsnew/3.6.rst:2019
msgid ""
"Undocumented support of general :term:`bytes-like objects <bytes-like "
"object>` as paths in :mod:`os` functions, :func:`compile` and similar "
"functions is now deprecated. (Contributed by Serhiy Storchaka in "
":issue:`25791` and :issue:`26754`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2027
msgid ""
"Support for inline flags ``(?letters)`` in the middle of the regular "
"expression has been deprecated and will be removed in a future Python "
"version.  Flags at the start of a regular expression are still allowed. "
"(Contributed by Serhiy Storchaka in :issue:`22493`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2035
msgid ""
"OpenSSL 0.9.8, 1.0.0 and 1.0.1 are deprecated and no longer supported. In"
" the future the :mod:`ssl` module will require at least OpenSSL 1.0.2 or "
"1.1.0."
msgstr ""

#: ../../whatsnew/3.6.rst:2039
msgid ""
"SSL-related arguments like ``certfile``, ``keyfile`` and "
"``check_hostname`` in :mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, "
":mod:`poplib`, and :mod:`smtplib` have been deprecated in favor of "
"``context``. (Contributed by Christian Heimes in :issue:`28022`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2044
msgid ""
"A couple of protocols and functions of the :mod:`ssl` module are now "
"deprecated. Some features will no longer be available in future versions "
"of OpenSSL. Other features are deprecated in favor of a different API. "
"(Contributed by Christian Heimes in :issue:`28022` and :issue:`26470`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2052
msgid ""
"The :mod:`tkinter.tix` module is now deprecated.  :mod:`tkinter` users "
"should use :mod:`tkinter.ttk` instead."
msgstr ""

#: ../../whatsnew/3.6.rst:2058
msgid ""
"The ``pyvenv`` script has been deprecated in favour of ``python3 -m "
"venv``. This prevents confusion as to what Python interpreter ``pyvenv`` "
"is connected to and thus what Python interpreter will be used by the "
"virtual environment.  (Contributed by Brett Cannon in :issue:`25154`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2067
msgid ""
"Undocumented functions :c:func:`PyUnicode_AsEncodedObject`, "
":c:func:`PyUnicode_AsDecodedObject`, :c:func:`PyUnicode_AsEncodedUnicode`"
" and :c:func:`PyUnicode_AsDecodedUnicode` are deprecated now. Use the "
":ref:`generic codec based API <codec-registry>` instead."
msgstr ""

#: ../../whatsnew/3.6.rst:2074
msgid "Deprecated Build Options"
msgstr ""

#: ../../whatsnew/3.6.rst:2076
msgid ""
"The ``--with-system-ffi`` configure flag is now on by default on non-"
"macOS UNIX platforms.  It may be disabled by using ``--without-system-"
"ffi``, but using the flag is deprecated and will not be accepted in "
"Python 3.7. macOS is unaffected by this change.  Note that many OS "
"distributors already use the ``--with-system-ffi`` flag when building "
"their system Python."
msgstr ""

#: ../../whatsnew/3.6.rst:2089
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in regular "
"expressions will now cause an error.  In replacement templates for "
":func:`re.sub` they are still allowed, but deprecated. The "
":const:`re.LOCALE` flag can now only be used with binary patterns."
msgstr ""

#: ../../whatsnew/3.6.rst:2094
msgid ""
"``inspect.getmoduleinfo()`` was removed (was deprecated since CPython "
"3.3). :func:`inspect.getmodulename` should be used for obtaining the "
"module name for a given path. (Contributed by Yury Selivanov in "
":issue:`13248`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2099
msgid ""
"``traceback.Ignore`` class and ``traceback.usage``, "
"``traceback.modname``, ``traceback.fullmodname``, "
"``traceback.find_lines_from_code``, ``traceback.find_lines``, "
"``traceback.find_strings``, ``traceback.find_executable_lines`` methods "
"were removed from the :mod:`traceback` module. They were undocumented "
"methods deprecated since Python 3.2 and equivalent functionality is "
"available from private methods."
msgstr ""

#: ../../whatsnew/3.6.rst:2106
msgid ""
"The ``tk_menuBar()`` and ``tk_bindForTraversal()`` dummy methods in "
":mod:`tkinter` widget classes were removed (corresponding Tk commands "
"were obsolete since Tk 4.0)."
msgstr ""

#: ../../whatsnew/3.6.rst:2110
msgid ""
"The :meth:`~zipfile.ZipFile.open` method of the :class:`zipfile.ZipFile` "
"class no longer supports the ``'U'`` mode (was deprecated since Python "
"3.4). Use :class:`io.TextIOWrapper` for reading compressed text files in "
":term:`universal newlines` mode."
msgstr ""

#: ../../whatsnew/3.6.rst:2115
msgid ""
"The undocumented ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, ``CDIO``, and "
"``STROPTS`` modules have been removed.  They had been available in the "
"platform specific ``Lib/plat-*/`` directories, but were chronically out "
"of date, inconsistently available across platforms, and unmaintained.  "
"The script that created these modules is still available in the source "
"distribution at :source:`Tools/scripts/h2py.py`."
msgstr ""

#: ../../whatsnew/3.6.rst:2122
msgid "The deprecated ``asynchat.fifo`` class has been removed."
msgstr ""

#: ../../whatsnew/3.6.rst:2126
msgid "Porting to Python 3.6"
msgstr ""

#: ../../whatsnew/3.6.rst:2134
msgid ""
"The output of a special Python build with defined ``COUNT_ALLOCS``, "
"``SHOW_ALLOC_COUNT`` or ``SHOW_TRACK_COUNT`` macros is now off by "
"default.  It can be re-enabled using the ``-X showalloccount`` option. It"
" now outputs to ``stderr`` instead of ``stdout``. (Contributed by Serhiy "
"Storchaka in :issue:`23034`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2144
msgid ""
":func:`open() <open>` will no longer allow combining the ``'U'`` mode "
"flag with ``'+'``. (Contributed by Jeff Balogh and John O'Connor in "
":issue:`2091`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2148
msgid ""
":mod:`sqlite3` no longer implicitly commits an open transaction before "
"DDL statements."
msgstr ""

#: ../../whatsnew/3.6.rst:2151
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security."
msgstr ""

#: ../../whatsnew/3.6.rst:2154
msgid ""
"When :meth:`importlib.abc.Loader.exec_module` is defined, "
":meth:`importlib.abc.Loader.create_module` must also be defined."
msgstr ""

#: ../../whatsnew/3.6.rst:2157
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg**"
" argument is not set. Previously only ``NULL`` was returned."
msgstr ""

#: ../../whatsnew/3.6.rst:2160
msgid ""
"The format of the ``co_lnotab`` attribute of code objects changed to "
"support a negative line number delta. By default, Python does not emit "
"bytecode with a negative line number delta. Functions using "
"``frame.f_lineno``, ``PyFrame_GetLineNumber()`` or ``PyCode_Addr2Line()``"
" are not affected. Functions directly decoding ``co_lnotab`` should be "
"updated to use a signed 8-bit integer type for the line number delta, but"
" this is only required to support applications using a negative line "
"number delta. See ``Objects/lnotab_notes.txt`` for the ``co_lnotab`` "
"format and how to decode it, and see the :pep:`511` for the rationale."
msgstr ""

#: ../../whatsnew/3.6.rst:2170
msgid ""
"The functions in the :mod:`compileall` module now return booleans instead"
" of ``1`` or ``0`` to represent success or failure, respectively. Thanks "
"to booleans being a subclass of integers, this should only be an issue if"
" you were doing identity checks for ``1`` or ``0``. See :issue:`25768`."
msgstr ""

#: ../../whatsnew/3.6.rst:2175
msgid ""
"Reading the :attr:`~urllib.parse.SplitResult.port` attribute of "
":func:`urllib.parse.urlsplit` and :func:`~urllib.parse.urlparse` results "
"now raises :exc:`ValueError` for out-of-range values, rather than "
"returning :const:`None`.  See :issue:`20059`."
msgstr ""

#: ../../whatsnew/3.6.rst:2180
msgid ""
"The :mod:`imp` module now raises a :exc:`DeprecationWarning` instead of "
":exc:`PendingDeprecationWarning`."
msgstr ""

#: ../../whatsnew/3.6.rst:2183
msgid ""
"The following modules have had missing APIs added to their "
":attr:`__all__` attributes to match the documented APIs: :mod:`calendar`,"
" :mod:`cgi`, :mod:`csv`, :mod:`~xml.etree.ElementTree`, :mod:`enum`, "
":mod:`fileinput`, :mod:`ftplib`, :mod:`logging`, :mod:`mailbox`, "
":mod:`mimetypes`, :mod:`optparse`, :mod:`plistlib`, :mod:`smtpd`, "
":mod:`subprocess`, :mod:`tarfile`, :mod:`threading` and :mod:`wave`.  "
"This means they will export new symbols when ``import *`` is used. "
"(Contributed by Joel Taddei and Jacek Ko≈Çodziej in :issue:`23883`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2194
msgid ""
"When performing a relative import, if ``__package__`` does not compare "
"equal to ``__spec__.parent`` then :exc:`ImportWarning` is raised. "
"(Contributed by Brett Cannon in :issue:`25791`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2198
msgid ""
"When a relative import is performed and no parent package is known, then "
":exc:`ImportError` will be raised. Previously, :exc:`SystemError` could "
"be raised. (Contributed by Brett Cannon in :issue:`18018`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2202
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined "
"in :mod:`http.server`, :mod:`xmlrpc.server` and "
":mod:`wsgiref.simple_server`, now only catch exceptions derived from "
":exc:`Exception`. Therefore if a request handler raises an exception like"
" :exc:`SystemExit` or :exc:`KeyboardInterrupt`, "
":meth:`~socketserver.BaseServer.handle_error` is no longer called, and "
"the exception will stop a single-threaded server. (Contributed by Martin "
"Panter in :issue:`23430`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2211
msgid ""
":func:`spwd.getspnam` now raises a :exc:`PermissionError` instead of "
":exc:`KeyError` if the user doesn't have privileges."
msgstr ""

#: ../../whatsnew/3.6.rst:2214
msgid ""
"The :meth:`socket.socket.close` method now raises an exception if an "
"error (e.g. ``EBADF``) was reported by the underlying system call. "
"(Contributed by Martin Panter in :issue:`26685`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2218
msgid ""
"The *decode_data* argument for the :class:`smtpd.SMTPChannel` and "
":class:`smtpd.SMTPServer` constructors is now ``False`` by default. This "
"means that the argument passed to "
":meth:`~smtpd.SMTPServer.process_message` is now a bytes object by "
"default, and ``process_message()`` will be passed keyword arguments. Code"
" that has already been updated in accordance with the deprecation warning"
" generated by 3.5 will not be affected."
msgstr ""

#: ../../whatsnew/3.6.rst:2226
msgid ""
"All optional arguments of the :func:`~json.dump`, :func:`~json.dumps`, "
":func:`~json.load` and :func:`~json.loads` functions and "
":class:`~json.JSONEncoder` and :class:`~json.JSONDecoder` class "
"constructors in the :mod:`json` module are now :ref:`keyword-only "
"<keyword-only_parameter>`. (Contributed by Serhiy Storchaka in "
":issue:`18726`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2233
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""

#: ../../whatsnew/3.6.rst:2236
msgid ""
"As part of :pep:`487`, the handling of keyword arguments passed to "
":class:`type` (other than the metaclass hint, ``metaclass``) is now "
"consistently delegated to :meth:`object.__init_subclass__`. This means "
"that :meth:`type.__new__` and :meth:`type.__init__` both now accept "
"arbitrary keyword arguments, but :meth:`object.__init_subclass__` (which "
"is called from :meth:`type.__new__`) will reject them by default. Custom "
"metaclasses accepting additional keyword arguments will need to adjust "
"their calls to :meth:`type.__new__` (whether direct or via "
":class:`super`) accordingly."
msgstr ""

#: ../../whatsnew/3.6.rst:2245
msgid ""
"In :class:`distutils.command.sdist.sdist`, the ``default_format`` "
"attribute has been removed and is no longer honored. Instead, the gzipped"
" tarfile format is the default on all platforms and no platform-specific "
"selection is made. In environments where distributions are built on "
"Windows and zip distributions are required, configure the project with a "
"``setup.cfg`` file containing the following:"
msgstr ""

#: ../../whatsnew/3.6.rst:2258
msgid ""
"This behavior has also been backported to earlier Python versions by "
"Setuptools 26.0.0."
msgstr ""

#: ../../whatsnew/3.6.rst:2261
msgid ""
"In the :mod:`urllib.request` module and the "
":meth:`http.client.HTTPConnection.request` method, if no Content-Length "
"header field has been specified and the request body is a file object, it"
" is now sent with HTTP 1.1 chunked encoding. If a file object has to be "
"sent to a HTTP 1.0 server, the Content-Length value now has to be "
"specified by the caller. (Contributed by Demian Brecht and Rolf Krahl "
"with tweaks from Martin Panter in :issue:`12319`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2270
msgid ""
"The :class:`~csv.DictReader` now returns rows of type "
":class:`~collections.OrderedDict`. (Contributed by Steve Holden in "
":issue:`27842`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2274
msgid ""
"The :const:`crypt.METHOD_CRYPT` will no longer be added to "
"``crypt.methods`` if unsupported by the platform. (Contributed by Victor "
"Stinner in :issue:`25287`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2282
msgid ""
"On Linux, :func:`ctypes.util.find_library` now looks in "
"``LD_LIBRARY_PATH`` for shared libraries. (Contributed by Vinay Sajip in "
":issue:`9998`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2286
msgid ""
"The :class:`imaplib.IMAP4` class now handles flags containing the ``']'``"
" character in messages sent from the server to improve real-world "
"compatibility. (Contributed by Lita Cho in :issue:`21815`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2291
msgid ""
"The :func:`mmap.write() <mmap.write>` function now returns the number of "
"bytes written like other write methods. (Contributed by Jakub Stasiak in "
":issue:`26335`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2295
msgid ""
"The :func:`pkgutil.iter_modules` and :func:`pkgutil.walk_packages` "
"functions now return :class:`~pkgutil.ModuleInfo` named tuples. "
"(Contributed by Ramchandra Apte in :issue:`17211`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2299
msgid ""
":func:`re.sub` now raises an error for invalid numerical group references"
" in replacement templates even if the pattern is not found in the string."
"  The error message for invalid group references now includes the group "
"index and the position of the reference. (Contributed by SilentGhost, "
"Serhiy Storchaka in :issue:`25953`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2305
msgid ""
":class:`zipfile.ZipFile` will now raise :exc:`NotImplementedError` for "
"unrecognized compression values.  Previously a plain :exc:`RuntimeError` "
"was raised.  Additionally, calling :class:`~zipfile.ZipFile` methods on a"
" closed ZipFile or calling the :meth:`~zipfile.ZipFile.write` method on a"
" ZipFile created with mode ``'r'`` will raise a :exc:`ValueError`. "
"Previously, a :exc:`RuntimeError` was raised in those scenarios."
msgstr ""

#: ../../whatsnew/3.6.rst:2312
msgid ""
"when custom metaclasses are combined with zero-argument :func:`super` or "
"direct references from methods to the implicit ``__class__`` closure "
"variable, the implicit ``__classcell__`` namespace entry must now be "
"passed up to ``type.__new__`` for initialisation. Failing to do so will "
"result in a :exc:`DeprecationWarning` in Python 3.6 and a "
":exc:`RuntimeError` in Python 3.8."
msgstr ""

#: ../../whatsnew/3.6.rst:2319
msgid ""
"With the introduction of :exc:`ModuleNotFoundError`, import system "
"consumers may start expecting import system replacements to raise that "
"more specific exception when appropriate, rather than the less-specific "
":exc:`ImportError`. To provide future compatibility with such consumers, "
"implementors of alternative import systems that completely replace "
":func:`__import__` will need to update their implementations to raise the"
" new subclass when a module can't be found at all. Implementors of "
"compliant plugins to the default import system shouldn't need to make any"
" changes, as the default import system will raise the new subclass when "
"appropriate."
msgstr ""

#: ../../whatsnew/3.6.rst:2333
msgid ""
"The :c:func:`PyMem_Malloc` allocator family now uses the :ref:`pymalloc "
"allocator <pymalloc>` rather than the system :c:func:`malloc`. "
"Applications calling :c:func:`PyMem_Malloc` without holding the GIL can "
"now crash. Set the :envvar:`PYTHONMALLOC` environment variable to "
"``debug`` to validate the usage of memory allocators in your application."
" See :issue:`26249`."
msgstr ""

#: ../../whatsnew/3.6.rst:2339
msgid ""
":c:func:`Py_Exit` (and the main interpreter) now override the exit status"
" with 120 if flushing buffered data failed.  See :issue:`5319`."
msgstr ""

#: ../../whatsnew/3.6.rst:2344 ../../whatsnew/3.7.rst:2462
#: ../../whatsnew/3.8.rst:2143
msgid "CPython bytecode changes"
msgstr ""

#: ../../whatsnew/3.6.rst:2346
msgid ""
"There have been several major changes to the :term:`bytecode` in Python "
"3.6."
msgstr ""

#: ../../whatsnew/3.6.rst:2348
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode. "
"(Contributed by Demur Rumed with input and reviews from Serhiy Storchaka "
"and Victor Stinner in :issue:`26647` and :issue:`28050`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2352
msgid ""
"The new :opcode:`FORMAT_VALUE` and :opcode:`BUILD_STRING` opcodes as part"
" of the  :ref:`formatted string literal <whatsnew36-pep498>` "
"implementation. (Contributed by Eric Smith in :issue:`25483` and Serhiy "
"Storchaka in :issue:`27078`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2357
msgid ""
"The new :opcode:`BUILD_CONST_KEY_MAP` opcode to optimize the creation of "
"dictionaries with constant keys. (Contributed by Serhiy Storchaka in "
":issue:`27140`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2361
msgid ""
"The function call opcodes have been heavily reworked for better "
"performance and simpler implementation. The :opcode:`MAKE_FUNCTION`, "
":opcode:`CALL_FUNCTION`, :opcode:`CALL_FUNCTION_KW` and "
":opcode:`BUILD_MAP_UNPACK_WITH_CALL` opcodes have been modified, the new "
":opcode:`CALL_FUNCTION_EX` and :opcode:`BUILD_TUPLE_UNPACK_WITH_CALL` "
"have been added, and ``CALL_FUNCTION_VAR``, ``CALL_FUNCTION_VAR_KW`` and "
"``MAKE_CLOSURE`` opcodes have been removed. (Contributed by Demur Rumed "
"in :issue:`27095`, and Serhiy Storchaka in :issue:`27213`, "
":issue:`28257`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2372
msgid ""
"The new :opcode:`SETUP_ANNOTATIONS` and :opcode:`STORE_ANNOTATION` "
"opcodes have been added to support the new :term:`variable annotation` "
"syntax. (Contributed by Ivan Levkivskyi in :issue:`27985`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2378
msgid "Notable changes in Python 3.6.2"
msgstr ""

#: ../../whatsnew/3.6.rst:2414
msgid "Notable changes in Python 3.6.4"
msgstr ""

#: ../../whatsnew/3.6.rst:2416
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public "
"API has been removed as its members being never cleared may cause a "
"segfault during finalization of the interpreter. (Contributed by Xavier "
"de Gaye in :issue:`22898` and :issue:`30697`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2423
msgid "Notable changes in Python 3.6.5"
msgstr ""

#: ../../whatsnew/3.6.rst:2425
msgid ""
"The :func:`locale.localeconv` function now sets temporarily the "
"``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale in some cases. "
"(Contributed by Victor Stinner in :issue:`31900`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2430
msgid "Notable changes in Python 3.6.7"
msgstr ""

#: ../../whatsnew/3.6.rst:2432
msgid ""
"In 3.6.7 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` "
"token when provided with input that does not have a trailing new line.  "
"This behavior now matches what the C tokenizer does internally. "
"(Contributed by Ammar Askar in :issue:`33899`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2438
msgid "Notable changes in Python 3.6.10"
msgstr ""

#: ../../whatsnew/3.6.rst:2440 ../../whatsnew/3.7.rst:2553
#: ../../whatsnew/3.8.rst:2235
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. "
"This is because of the behavior of the socket option ``SO_REUSEADDR`` in "
"UDP. For more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, "
"Antoine Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2448
msgid "Notable changes in Python 3.6.13"
msgstr ""

#: ../../whatsnew/3.6.rst:2450 ../../whatsnew/3.7.rst:2563
#: ../../whatsnew/3.8.rst:2260
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform"
" with newer W3C recommendations, this has been changed to allow only a "
"single separator key, with ``&`` as the default.  This change also "
"affects :func:`cgi.parse` and :func:`cgi.parse_multipart` as they use the"
" affected functions internally. For more details, please see their "
"respective documentation. (Contributed by Adam Goldschmidt, Senthil "
"Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:3
msgid "What's New In Python 3.7"
msgstr ""

#: ../../whatsnew/3.7.rst ../../whatsnew/3.8.rst
msgid "Editor"
msgstr ""

#: ../../whatsnew/3.7.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>"
msgstr ""

#: ../../whatsnew/3.7.rst:47
msgid ""
"This article explains the new features in Python 3.7, compared to 3.6. "
"Python 3.7 was released on June 27, 2018. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""

#: ../../whatsnew/3.7.rst:60
msgid ""
":ref:`PEP 563 <whatsnew37-pep563>`, postponed evaluation of type "
"annotations."
msgstr ""

#: ../../whatsnew/3.7.rst:62
msgid "Backwards incompatible syntax changes:"
msgstr ""

#: ../../whatsnew/3.7.rst:64
msgid ":keyword:`async` and :keyword:`await` are now reserved keywords."
msgstr ""

#: ../../whatsnew/3.7.rst:68
msgid ""
":mod:`contextvars`: :ref:`PEP 567 -- Context Variables "
"<whatsnew37-pep567>`"
msgstr ""

#: ../../whatsnew/3.7.rst:69
msgid ":mod:`dataclasses`: :ref:`PEP 557 -- Data Classes <whatsnew37-pep557>`"
msgstr ""

#: ../../whatsnew/3.7.rst:70
msgid ":ref:`whatsnew37_importlib_resources`"
msgstr ""

#: ../../whatsnew/3.7.rst:74
msgid ":ref:`PEP 553 <whatsnew37-pep553>`, the new :func:`breakpoint` function."
msgstr ""

#: ../../whatsnew/3.7.rst:76
msgid "Python data model improvements:"
msgstr ""

#: ../../whatsnew/3.7.rst:78
msgid ""
":ref:`PEP 562 <whatsnew37-pep562>`, customization of access to module "
"attributes."
msgstr ""

#: ../../whatsnew/3.7.rst:81
msgid ""
":ref:`PEP 560 <whatsnew37-pep560>`, core support for typing module and "
"generic types."
msgstr ""

#: ../../whatsnew/3.7.rst:84
msgid ""
"the insertion-order preservation nature of :ref:`dict <typesmapping>` "
"objects `has been declared`_ to be an official part of the Python "
"language spec."
msgstr ""

#: ../../whatsnew/3.7.rst:92
msgid ""
"The :mod:`asyncio` module has received new features, significant "
":ref:`usability and performance improvements <whatsnew37_asyncio>`."
msgstr ""

#: ../../whatsnew/3.7.rst:95
msgid ""
"The :mod:`time` module gained support for :ref:`functions with nanosecond"
" resolution <whatsnew37-pep564>`."
msgstr ""

#: ../../whatsnew/3.7.rst:100
msgid "Avoiding the use of ASCII as a default text encoding:"
msgstr ""

#: ../../whatsnew/3.7.rst:102
msgid ":ref:`PEP 538 <whatsnew37-pep538>`, legacy C locale coercion"
msgstr ""

#: ../../whatsnew/3.7.rst:103
msgid ":ref:`PEP 540 <whatsnew37-pep540>`, forced UTF-8 runtime mode"
msgstr ""

#: ../../whatsnew/3.7.rst:104
msgid ":ref:`PEP 552 <whatsnew37-pep552>`, deterministic .pycs"
msgstr ""

#: ../../whatsnew/3.7.rst:105
msgid ":ref:`the new development runtime mode <whatsnew37-devmode>`"
msgstr ""

#: ../../whatsnew/3.7.rst:106
msgid ""
":ref:`PEP 565 <whatsnew37-pep565>`, improved :exc:`DeprecationWarning` "
"handling"
msgstr ""

#: ../../whatsnew/3.7.rst:109
msgid "C API improvements:"
msgstr ""

#: ../../whatsnew/3.7.rst:111
msgid ":ref:`PEP 539 <whatsnew37-pep539>`, new C API for thread-local storage"
msgstr ""

#: ../../whatsnew/3.7.rst:113
msgid "Documentation improvements:"
msgstr ""

#: ../../whatsnew/3.7.rst:115
msgid ":ref:`PEP 545 <whatsnew37-pep545>`, Python documentation translations"
msgstr ""

#: ../../whatsnew/3.7.rst:116
msgid ""
"New documentation translations: `Japanese "
"<https://docs.python.org/ja/>`_, `French <https://docs.python.org/fr/>`_,"
" and `Korean <https://docs.python.org/ko/>`_."
msgstr ""

#: ../../whatsnew/3.7.rst:120
msgid ""
"This release features notable performance improvements in many areas. The"
" :ref:`whatsnew37-perf` section lists them in detail."
msgstr ""

#: ../../whatsnew/3.7.rst:123
msgid ""
"For a list of changes that may affect compatibility with previous Python "
"releases please refer to the :ref:`porting-to-python-37` section."
msgstr ""

#: ../../whatsnew/3.7.rst:133
msgid "PEP 563: Postponed Evaluation of Annotations"
msgstr ""

#: ../../whatsnew/3.7.rst:135
msgid ""
"The advent of type hints in Python uncovered two glaring usability issues"
" with the functionality of annotations added in :pep:`3107` and refined "
"further in :pep:`526`:"
msgstr ""

#: ../../whatsnew/3.7.rst:139
msgid ""
"annotations could only use names which were already available in the "
"current scope, in other words they didn't support forward references of "
"any kind; and"
msgstr ""

#: ../../whatsnew/3.7.rst:143
msgid ""
"annotating source code had adverse effects on startup time of Python "
"programs."
msgstr ""

#: ../../whatsnew/3.7.rst:146
msgid ""
"Both of these issues are fixed by postponing the evaluation of "
"annotations.  Instead of compiling code which executes expressions in "
"annotations at their definition time, the compiler stores the annotation "
"in a string form equivalent to the AST of the expression in question. If "
"needed, annotations can be resolved at runtime using "
":func:`typing.get_type_hints`.  In the common case where this is not "
"required, the annotations are cheaper to store (since short strings are "
"interned by the interpreter) and make startup time faster."
msgstr ""

#: ../../whatsnew/3.7.rst:155
msgid ""
"Usability-wise, annotations now support forward references, making the "
"following syntax valid::"
msgstr ""

#: ../../whatsnew/3.7.rst:169
msgid ""
"Since this change breaks compatibility, the new behavior needs to be "
"enabled on a per-module basis in Python 3.7 using a :mod:`__future__` "
"import::"
msgstr ""

#: ../../whatsnew/3.7.rst:174
msgid "It will become the default in Python 3.10."
msgstr ""

#: ../../whatsnew/3.7.rst:178
msgid ":pep:`563` -- Postponed evaluation of annotations"
msgstr ""

#: ../../whatsnew/3.7.rst:185
msgid "PEP 538: Legacy C Locale Coercion"
msgstr ""

#: ../../whatsnew/3.7.rst:187
msgid ""
"An ongoing challenge within the Python 3 series has been determining a "
"sensible default strategy for handling the \"7-bit ASCII\" text encoding "
"assumption currently implied by the use of the default C or POSIX locale "
"on non-Windows platforms."
msgstr ""

#: ../../whatsnew/3.7.rst:192
msgid ""
":pep:`538` updates the default interpreter command line interface to "
"automatically coerce that locale to an available UTF-8 based locale as "
"described in the documentation of the new :envvar:`PYTHONCOERCECLOCALE` "
"environment variable. Automatically setting ``LC_CTYPE`` this way means "
"that both the core interpreter and locale-aware C extensions (such as "
":mod:`readline`) will assume the use of UTF-8 as the default text "
"encoding, rather than ASCII."
msgstr ""

#: ../../whatsnew/3.7.rst:200
msgid ""
"The platform support definition in :pep:`11` has also been updated to "
"limit full text handling support to suitably configured non-ASCII based "
"locales."
msgstr ""

#: ../../whatsnew/3.7.rst:203
msgid ""
"As part of this change, the default error handler for :data:`~sys.stdin` "
"and :data:`~sys.stdout` is now ``surrogateescape`` (rather than "
"``strict``) when using any of the defined coercion target locales "
"(currently ``C.UTF-8``, ``C.utf8``, and ``UTF-8``).  The default error "
"handler for :data:`~sys.stderr` continues to be ``backslashreplace``, "
"regardless of locale."
msgstr ""

#: ../../whatsnew/3.7.rst:209
msgid ""
"Locale coercion is silent by default, but to assist in debugging "
"potentially locale related integration problems, explicit warnings "
"(emitted directly on :data:`~sys.stderr`) can be requested by setting "
"``PYTHONCOERCECLOCALE=warn``. This setting will also cause the Python "
"runtime to emit a warning if the legacy C locale remains active when the "
"core interpreter is initialized."
msgstr ""

#: ../../whatsnew/3.7.rst:215
msgid ""
"While :pep:`538`'s locale coercion has the benefit of also affecting "
"extension modules (such as GNU ``readline``), as well as child processes "
"(including those running non-Python applications and older versions of "
"Python), it has the downside of requiring that a suitable target locale "
"be present on the running system. To better handle the case where no "
"suitable target locale is available (as occurs on RHEL/CentOS 7, for "
"example), Python 3.7 also implements :ref:`whatsnew37-pep540`."
msgstr ""

#: ../../whatsnew/3.7.rst:225
msgid ":pep:`538` -- Coercing the legacy C locale to a UTF-8 based locale"
msgstr ""

#: ../../whatsnew/3.7.rst:226
msgid "PEP written and implemented by Nick Coghlan."
msgstr ""

#: ../../whatsnew/3.7.rst:232
msgid "PEP 540: Forced UTF-8 Runtime Mode"
msgstr ""

#: ../../whatsnew/3.7.rst:234
msgid ""
"The new :option:`-X` ``utf8`` command line option and "
":envvar:`PYTHONUTF8` environment variable can be used to enable the "
"CPython *UTF-8 mode*."
msgstr ""

#: ../../whatsnew/3.7.rst:237
msgid ""
"When in UTF-8 mode, CPython ignores the locale settings, and uses the "
"UTF-8 encoding by default.  The error handlers for :data:`sys.stdin` and "
":data:`sys.stdout` streams are set to ``surrogateescape``."
msgstr ""

#: ../../whatsnew/3.7.rst:241
msgid ""
"The forced UTF-8 mode can be used to change the text handling behavior in"
" an embedded Python interpreter without changing the locale settings of "
"an embedding application."
msgstr ""

#: ../../whatsnew/3.7.rst:245
msgid ""
"While :pep:`540`'s UTF-8 mode has the benefit of working regardless of "
"which locales are available on the running system, it has the downside of"
" having no effect on extension modules (such as GNU ``readline``), child "
"processes running non-Python applications, and child processes running "
"older versions of Python. To reduce the risk of corrupting text data when"
" communicating with such components, Python 3.7 also implements "
":ref:`whatsnew37-pep540`)."
msgstr ""

#: ../../whatsnew/3.7.rst:252
msgid ""
"The UTF-8 mode is enabled by default when the locale is ``C`` or "
"``POSIX``, and the :pep:`538` locale coercion feature fails to change it "
"to a UTF-8 based alternative (whether that failure is due to "
"``PYTHONCOERCECLOCALE=0`` being set, ``LC_ALL`` being set, or the lack of"
" a suitable target locale)."
msgstr ""

#: ../../whatsnew/3.7.rst:259
msgid ":pep:`540` -- Add a new UTF-8 mode"
msgstr ""

#: ../../whatsnew/3.7.rst:266
msgid "PEP 553: Built-in ``breakpoint()``"
msgstr ""

#: ../../whatsnew/3.7.rst:268
msgid ""
"Python 3.7 includes the new built-in :func:`breakpoint` function as an "
"easy and consistent way to enter the Python debugger."
msgstr ""

#: ../../whatsnew/3.7.rst:271
msgid ""
"Built-in ``breakpoint()`` calls :func:`sys.breakpointhook`.  By default, "
"the latter imports :mod:`pdb` and then calls ``pdb.set_trace()``, but by "
"binding ``sys.breakpointhook()`` to the function of your choosing, "
"``breakpoint()`` can enter any debugger. Additionally, the environment "
"variable :envvar:`PYTHONBREAKPOINT` can be set to the callable of your "
"debugger of choice.  Set ``PYTHONBREAKPOINT=0`` to completely disable "
"built-in ``breakpoint()``."
msgstr ""

#: ../../whatsnew/3.7.rst:281
msgid ":pep:`553` -- Built-in breakpoint()"
msgstr ""

#: ../../whatsnew/3.7.rst:282
msgid "PEP written and implemented by Barry Warsaw"
msgstr ""

#: ../../whatsnew/3.7.rst:288
msgid "PEP 539: New C API for Thread-Local Storage"
msgstr ""

#: ../../whatsnew/3.7.rst:290
msgid ""
"While Python provides a C API for thread-local storage support; the "
"existing :ref:`Thread Local Storage (TLS) API <thread-local-storage-api>`"
" has used :c:type:`int` to represent TLS keys across all platforms.  This"
" has not generally been a problem for officially-support platforms, but "
"that is neither POSIX-compliant, nor portable in any practical sense."
msgstr ""

#: ../../whatsnew/3.7.rst:296
msgid ""
":pep:`539` changes this by providing a new :ref:`Thread Specific Storage "
"(TSS) API <thread-specific-storage-api>` to CPython which supersedes use "
"of the existing TLS API within the CPython interpreter, while deprecating"
" the existing API.  The TSS API uses a new type :c:type:`Py_tss_t` "
"instead of :c:type:`int` to represent TSS keys--an opaque type the "
"definition of which may depend on the underlying TLS implementation.  "
"Therefore, this will allow to build CPython on platforms where the native"
" TLS key is defined in a way that cannot be safely cast to :c:type:`int`."
msgstr ""

#: ../../whatsnew/3.7.rst:305
msgid ""
"Note that on platforms where the native TLS key is defined in a way that "
"cannot be safely cast to :c:type:`int`, all functions of the existing TLS"
" API will be no-op and immediately return failure. This indicates clearly"
" that the old API is not supported on platforms where it cannot be used "
"reliably, and that no effort will be made to add such support."
msgstr ""

#: ../../whatsnew/3.7.rst:313
msgid ":pep:`539` -- A New C-API for Thread-Local Storage in CPython"
msgstr ""

#: ../../whatsnew/3.7.rst:314
msgid "PEP written by Erik M. Bray; implementation by Masayuki Yamamoto."
msgstr ""

#: ../../whatsnew/3.7.rst:320
msgid "PEP 562: Customization of Access to Module Attributes"
msgstr ""

#: ../../whatsnew/3.7.rst:322
msgid ""
"Python 3.7 allows defining :meth:`__getattr__` on modules and will call "
"it whenever a module attribute is otherwise not found.  Defining "
":meth:`__dir__` on modules is now also allowed."
msgstr ""

#: ../../whatsnew/3.7.rst:326
msgid ""
"A typical example of where this may be useful is module attribute "
"deprecation and lazy loading."
msgstr ""

#: ../../whatsnew/3.7.rst:331
msgid ":pep:`562` -- Module ``__getattr__`` and ``__dir__``"
msgstr ""

#: ../../whatsnew/3.7.rst:332 ../../whatsnew/3.7.rst:421
msgid "PEP written and implemented by Ivan Levkivskyi"
msgstr ""

#: ../../whatsnew/3.7.rst:338
msgid "PEP 564: New Time Functions With Nanosecond Resolution"
msgstr ""

#: ../../whatsnew/3.7.rst:340
msgid ""
"The resolution of clocks in modern systems can exceed the limited "
"precision of a floating point number returned by the :func:`time.time` "
"function and its variants.  To avoid loss of precision, :pep:`564` adds "
"six new \"nanosecond\" variants of the existing timer functions to the "
":mod:`time` module:"
msgstr ""

#: ../../whatsnew/3.7.rst:346 ../../whatsnew/3.7.rst:1446
msgid ":func:`time.clock_gettime_ns`"
msgstr ""

#: ../../whatsnew/3.7.rst:347 ../../whatsnew/3.7.rst:1447
msgid ":func:`time.clock_settime_ns`"
msgstr ""

#: ../../whatsnew/3.7.rst:348 ../../whatsnew/3.7.rst:1448
msgid ":func:`time.monotonic_ns`"
msgstr ""

#: ../../whatsnew/3.7.rst:349 ../../whatsnew/3.7.rst:1449
msgid ":func:`time.perf_counter_ns`"
msgstr ""

#: ../../whatsnew/3.7.rst:350 ../../whatsnew/3.7.rst:1450
msgid ":func:`time.process_time_ns`"
msgstr ""

#: ../../whatsnew/3.7.rst:351 ../../whatsnew/3.7.rst:1451
msgid ":func:`time.time_ns`"
msgstr ""

#: ../../whatsnew/3.7.rst:353
msgid "The new functions return the number of nanoseconds as an integer value."
msgstr ""

#: ../../whatsnew/3.7.rst:355
msgid ""
"`Measurements <https://www.python.org/dev/peps/pep-0564/#annex-clocks-"
"resolution-in-python>`_ show that on Linux and Windows the resolution of "
":func:`time.time_ns` is approximately 3 times better than that of "
":func:`time.time`."
msgstr ""

#: ../../whatsnew/3.7.rst:361
msgid ":pep:`564` -- Add new time functions with nanosecond resolution"
msgstr ""

#: ../../whatsnew/3.7.rst:368
msgid "PEP 565: Show DeprecationWarning in ``__main__``"
msgstr ""

#: ../../whatsnew/3.7.rst:370
msgid ""
"The default handling of :exc:`DeprecationWarning` has been changed such "
"that these warnings are once more shown by default, but only when the "
"code triggering them is running directly in the :mod:`__main__` module.  "
"As a result, developers of single file scripts and those using Python "
"interactively should once again start seeing deprecation warnings for the"
" APIs they use, but deprecation warnings triggered by imported "
"application, library and framework modules will continue to be hidden by "
"default."
msgstr ""

#: ../../whatsnew/3.7.rst:378
msgid ""
"As a result of this change, the standard library now allows developers to"
" choose between three different deprecation warning behaviours:"
msgstr ""

#: ../../whatsnew/3.7.rst:381
msgid ""
":exc:`FutureWarning`: always displayed by default, recommended for "
"warnings intended to be seen by application end users (e.g. for "
"deprecated application configuration settings)."
msgstr ""

#: ../../whatsnew/3.7.rst:384
msgid ""
":exc:`DeprecationWarning`: displayed by default only in :mod:`__main__` "
"and when running tests, recommended for warnings intended to be seen by "
"other Python developers where a version upgrade may result in changed "
"behaviour or an error."
msgstr ""

#: ../../whatsnew/3.7.rst:388
msgid ""
":exc:`PendingDeprecationWarning`: displayed by default only when running "
"tests, intended for cases where a future version upgrade will change the "
"warning category to :exc:`DeprecationWarning` or :exc:`FutureWarning`."
msgstr ""

#: ../../whatsnew/3.7.rst:392
msgid ""
"Previously both :exc:`DeprecationWarning` and "
":exc:`PendingDeprecationWarning` were only visible when running tests, "
"which meant that developers primarily writing single file scripts or "
"using Python interactively could be surprised by breaking changes in the "
"APIs they used."
msgstr ""

#: ../../whatsnew/3.7.rst:399
msgid ":pep:`565` -- Show DeprecationWarning in ``__main__``"
msgstr ""

#: ../../whatsnew/3.7.rst:400
msgid "PEP written and implemented by Nick Coghlan"
msgstr ""

#: ../../whatsnew/3.7.rst:406
msgid "PEP 560: Core Support for ``typing`` module and Generic Types"
msgstr ""

#: ../../whatsnew/3.7.rst:408
msgid ""
"Initially :pep:`484` was designed in such way that it would not introduce"
" *any* changes to the core CPython interpreter. Now type hints and the "
":mod:`typing` module are extensively used by the community, so this "
"restriction is removed. The PEP introduces two special methods "
":meth:`__class_getitem__` and ``__mro_entries__``, these methods are now "
"used by most classes and special constructs in :mod:`typing`. As a "
"result, the speed of various operations with types increased up to 7 "
"times, the generic types can be used without metaclass conflicts, and "
"several long standing bugs in :mod:`typing` module are fixed."
msgstr ""

#: ../../whatsnew/3.7.rst:420
msgid ":pep:`560` -- Core support for typing module and generic types"
msgstr ""

#: ../../whatsnew/3.7.rst:427
msgid "PEP 552: Hash-based .pyc Files"
msgstr ""

#: ../../whatsnew/3.7.rst:429
msgid ""
"Python has traditionally checked the up-to-dateness of bytecode cache "
"files (i.e., ``.pyc`` files) by comparing the source metadata (last-"
"modified timestamp and size) with source metadata saved in the cache file"
" header when it was generated. While effective, this invalidation method "
"has its drawbacks.  When filesystem timestamps are too coarse, Python can"
" miss source updates, leading to user confusion. Additionally, having a "
"timestamp in the cache file is problematic for `build reproducibility "
"<https://reproducible-builds.org/>`_ and content-based build systems."
msgstr ""

#: ../../whatsnew/3.7.rst:438
msgid ""
":pep:`552` extends the pyc format to allow the hash of the source file to"
" be used for invalidation instead of the source timestamp. Such ``.pyc`` "
"files are called \"hash-based\". By default, Python still uses timestamp-"
"based invalidation and does not generate hash-based ``.pyc`` files at "
"runtime. Hash-based ``.pyc`` files may be generated with "
":mod:`py_compile` or :mod:`compileall`."
msgstr ""

#: ../../whatsnew/3.7.rst:444
msgid ""
"Hash-based ``.pyc`` files come in two variants: checked and unchecked. "
"Python validates checked hash-based ``.pyc`` files against the "
"corresponding source files at runtime but doesn't do so for unchecked "
"hash-based pycs. Unchecked hash-based ``.pyc`` files are a useful "
"performance optimization for environments where a system external to "
"Python (e.g., the build system) is responsible for keeping ``.pyc`` files"
" up-to-date."
msgstr ""

#: ../../whatsnew/3.7.rst:451
msgid "See :ref:`pyc-invalidation` for more information."
msgstr ""

#: ../../whatsnew/3.7.rst:455
msgid ":pep:`552` -- Deterministic pycs"
msgstr ""

#: ../../whatsnew/3.7.rst:456
msgid "PEP written and implemented by Benjamin Peterson"
msgstr ""

#: ../../whatsnew/3.7.rst:462
msgid "PEP 545: Python Documentation Translations"
msgstr ""

#: ../../whatsnew/3.7.rst:464
msgid ""
":pep:`545` describes the process of creating and maintaining Python "
"documentation translations."
msgstr ""

#: ../../whatsnew/3.7.rst:467
msgid "Three new translations have been added:"
msgstr ""

#: ../../whatsnew/3.7.rst:469
msgid "Japanese: https://docs.python.org/ja/"
msgstr ""

#: ../../whatsnew/3.7.rst:470
msgid "French: https://docs.python.org/fr/"
msgstr ""

#: ../../whatsnew/3.7.rst:471
msgid "Korean: https://docs.python.org/ko/"
msgstr ""

#: ../../whatsnew/3.7.rst:476
msgid ":pep:`545` -- Python Documentation Translations"
msgstr ""

#: ../../whatsnew/3.7.rst:476
msgid ""
"PEP written and implemented by Julien Palard, Inada Naoki, and Victor "
"Stinner."
msgstr ""

#: ../../whatsnew/3.7.rst:483
msgid "Development Runtime Mode: -X dev"
msgstr ""

#: ../../whatsnew/3.7.rst:485
msgid ""
"The new :option:`-X` ``dev`` command line option or the new "
":envvar:`PYTHONDEVMODE` environment variable can be used to enable "
"CPython's *development mode*.  When in development mode, CPython performs"
" additional runtime checks that are too expensive to be enabled by "
"default. See :option:`-X` ``dev`` documentation for the full description "
"of the effects of this mode."
msgstr ""

#: ../../whatsnew/3.7.rst:496
msgid ""
"An :keyword:`await` expression and comprehensions containing an "
":keyword:`async for` clause were illegal in the expressions in "
":ref:`formatted string literals <f-strings>` due to a problem with the "
"implementation.  In Python 3.7 this restriction was lifted."
msgstr ""

#: ../../whatsnew/3.7.rst:501
msgid ""
"More than 255 arguments can now be passed to a function, and a function "
"can now have more than 255 parameters. (Contributed by Serhiy Storchaka "
"in :issue:`12844` and :issue:`18896`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:505
msgid ""
":meth:`bytes.fromhex` and :meth:`bytearray.fromhex` now ignore all ASCII "
"whitespace, not only spaces. (Contributed by Robert Xiao in "
":issue:`28927`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:508
msgid ""
":class:`str`, :class:`bytes`, and :class:`bytearray` gained support for "
"the new :meth:`isascii() <str.isascii>` method, which can be used to test"
" if a string or bytes contain only the ASCII characters. (Contributed by "
"INADA Naoki in :issue:`32677`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:513
msgid ""
":exc:`ImportError` now displays module name and module ``__file__`` path "
"when ``from ... import ...`` fails. (Contributed by Matthias Bussonnier "
"in :issue:`29546`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:517
msgid ""
"Circular imports involving absolute imports with binding a submodule to a"
" name are now supported. (Contributed by Serhiy Storchaka in "
":issue:`30024`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:521
msgid ""
"``object.__format__(x, '')`` is now equivalent to ``str(x)`` rather than "
"``format(str(self), '')``. (Contributed by Serhiy Storchaka in "
":issue:`28974`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:525
msgid ""
"In order to better support dynamic creation of stack traces, "
":class:`types.TracebackType` can now be instantiated from Python code, "
"and the ``tb_next`` attribute on :ref:`tracebacks <traceback-objects>` is"
" now writable. (Contributed by Nathaniel J. Smith in :issue:`30579`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:531
msgid ""
"When using the :option:`-m` switch, ``sys.path[0]`` is now eagerly "
"expanded to the full starting directory path, rather than being left as "
"the empty directory (which allows imports from the *current* working "
"directory at the time when an import occurs) (Contributed by Nick Coghlan"
" in :issue:`33053`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:537
msgid ""
"The new :option:`-X` ``importtime`` option or the "
":envvar:`PYTHONPROFILEIMPORTTIME` environment variable can be used to "
"show the timing of each module import. (Contributed by Victor Stinner in "
":issue:`31415`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:549
msgid "contextvars"
msgstr ""

#: ../../whatsnew/3.7.rst:551
msgid ""
"The new :mod:`contextvars` module and a set of :ref:`new C APIs "
"<contextvarsobjects>` introduce support for *context variables*.  Context"
" variables are conceptually similar to thread-local variables.  Unlike "
"TLS, context variables support asynchronous code correctly."
msgstr ""

#: ../../whatsnew/3.7.rst:557
msgid ""
"The :mod:`asyncio` and :mod:`decimal` modules have been updated to use "
"and support context variables out of the box.  Particularly the active "
"decimal context is now stored in a context variable, which allows decimal"
" operations to work with the correct context in asynchronous code."
msgstr ""

#: ../../whatsnew/3.7.rst:564
msgid ":pep:`567` -- Context Variables"
msgstr ""

#: ../../whatsnew/3.7.rst:565
msgid "PEP written and implemented by Yury Selivanov"
msgstr ""

#: ../../whatsnew/3.7.rst:571
msgid "dataclasses"
msgstr ""

#: ../../whatsnew/3.7.rst:573
msgid ""
"The new :func:`~dataclasses.dataclass` decorator provides a way to "
"declare *data classes*.  A data class describes its attributes using "
"class variable annotations.  Its constructor and other magic methods, "
"such as :meth:`~object.__repr__`, :meth:`~object.__eq__`, and "
":meth:`~object.__hash__` are generated automatically."
msgstr ""

#: ../../whatsnew/3.7.rst:592
msgid ":pep:`557` -- Data Classes"
msgstr ""

#: ../../whatsnew/3.7.rst:593
msgid "PEP written and implemented by Eric V. Smith"
msgstr ""

#: ../../whatsnew/3.7.rst:599
msgid "importlib.resources"
msgstr ""

#: ../../whatsnew/3.7.rst:601
msgid ""
"The new :mod:`importlib.resources` module provides several new APIs and "
"one new ABC for access to, opening, and reading *resources* inside "
"packages. Resources are roughly similar to files inside packages, but "
"they needn't be actual files on the physical file system.  Module loaders"
" can provide a :meth:`get_resource_reader()` function which returns a "
":class:`importlib.abc.ResourceReader` instance to support this new API.  "
"Built-in file path loaders and zip file loaders both support this."
msgstr ""

#: ../../whatsnew/3.7.rst:609
msgid "Contributed by Barry Warsaw and Brett Cannon in :issue:`32248`."
msgstr ""

#: ../../whatsnew/3.7.rst:613
msgid ""
"`importlib_resources <http://importlib-"
"resources.readthedocs.io/en/latest/>`_ -- a PyPI backport for earlier "
"Python versions."
msgstr ""

#: ../../whatsnew/3.7.rst:624
msgid ""
"The new :meth:`ArgumentParser.parse_intermixed_args() "
"<argparse.ArgumentParser.parse_intermixed_args>` method allows "
"intermixing options and positional arguments. (Contributed by paul.j3 in "
":issue:`14191`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:635
msgid ""
"The :mod:`asyncio` module has received many new features, usability and "
":ref:`performance improvements <whatsnew37-asyncio-perf>`.  Notable "
"changes include:"
msgstr ""

#: ../../whatsnew/3.7.rst:639
msgid ""
"The new :term:`provisional <provisional API>` :func:`asyncio.run` "
"function can be used to run a coroutine from synchronous code by "
"automatically creating and destroying the event loop. (Contributed by "
"Yury Selivanov in :issue:`32314`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:644
msgid ""
"asyncio gained support for :mod:`contextvars`. :meth:`loop.call_soon() "
"<asyncio.loop.call_soon>`, :meth:`loop.call_soon_threadsafe() "
"<asyncio.loop.call_soon_threadsafe>`, :meth:`loop.call_later() "
"<asyncio.loop.call_later>`, :meth:`loop.call_at() "
"<asyncio.loop.call_at>`, and :meth:`Future.add_done_callback() "
"<asyncio.Future.add_done_callback>` have a new optional keyword-only "
"*context* parameter. :class:`Tasks <asyncio.Task>` now track their "
"context automatically. See :pep:`567` for more details. (Contributed by "
"Yury Selivanov in :issue:`32436`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:655
msgid ""
"The new :func:`asyncio.create_task` function has been added as a shortcut"
" to ``asyncio.get_event_loop().create_task()``. (Contributed by Andrew "
"Svetlov in :issue:`32311`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:659
msgid ""
"The new :meth:`loop.start_tls() <asyncio.loop.start_tls>` method can be "
"used to upgrade an existing connection to TLS. (Contributed by Yury "
"Selivanov in :issue:`23749`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:663
msgid ""
"The new :meth:`loop.sock_recv_into() <asyncio.loop.sock_recv_into>` "
"method allows reading data from a socket directly into a provided buffer "
"making it possible to reduce data copies. (Contributed by Antoine Pitrou "
"in :issue:`31819`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:668
msgid ""
"The new :func:`asyncio.current_task` function returns the currently "
"running :class:`~asyncio.Task` instance, and the new "
":func:`asyncio.all_tasks` function returns a set of all existing ``Task``"
" instances in a given loop. The :meth:`Task.current_task() "
"<asyncio.Task.current_task>` and :meth:`Task.all_tasks() "
"<asyncio.Task.all_tasks>` methods have been deprecated. (Contributed by "
"Andrew Svetlov in :issue:`32250`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:675
msgid ""
"The new *provisional* :class:`~asyncio.BufferedProtocol` class allows "
"implementing streaming protocols with manual control over the receive "
"buffer. (Contributed by Yury Selivanov in :issue:`32251`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:679
msgid ""
"The new :func:`asyncio.get_running_loop` function returns the currently "
"running loop, and raises a :exc:`RuntimeError` if no loop is running. "
"This is in contrast with :func:`asyncio.get_event_loop`, which will "
"*create* a new event loop if none is running. (Contributed by Yury "
"Selivanov in :issue:`32269`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:685
msgid ""
"The new :meth:`StreamWriter.wait_closed() "
"<asyncio.StreamWriter.wait_closed>` coroutine method allows waiting until"
" the stream writer is closed.  The new :meth:`StreamWriter.is_closing() "
"<asyncio.StreamWriter.is_closing>` method can be used to determine if the"
" writer is closing. (Contributed by Andrew Svetlov in :issue:`32391`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:691
msgid ""
"The new :meth:`loop.sock_sendfile() <asyncio.loop.sock_sendfile>` "
"coroutine method allows sending files using :mod:`os.sendfile` when "
"possible. (Contributed by Andrew Svetlov in :issue:`32410`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:695
msgid ""
"The new :meth:`Future.get_loop() <asyncio.Future.get_loop>` and "
"``Task.get_loop()`` methods return the instance of the loop on which a "
"task or a future were created. :meth:`Server.get_loop() "
"<asyncio.Server.get_loop>` allows doing the same for "
":class:`asyncio.Server` objects. (Contributed by Yury Selivanov in "
":issue:`32415` and Srinivas Reddy Thatiparthy in :issue:`32418`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:703
msgid ""
"It is now possible to control how instances of :class:`asyncio.Server` "
"begin serving.  Previously, the server would start serving immediately "
"when created. The new *start_serving* keyword argument to "
":meth:`loop.create_server() <asyncio.loop.create_server>` and "
":meth:`loop.create_unix_server() <asyncio.loop.create_unix_server>`, as "
"well as :meth:`Server.start_serving() <asyncio.Server.start_serving>`, "
"and :meth:`Server.serve_forever() <asyncio.Server.serve_forever>` can be "
"used to decouple server instantiation and serving.  The new "
":meth:`Server.is_serving() <asyncio.Server.is_serving>` method returns "
"``True`` if the server is serving.  :class:`~asyncio.Server` objects are "
"now asynchronous context managers::"
msgstr ""

#: ../../whatsnew/3.7.rst:722
msgid "(Contributed by Yury Selivanov in :issue:`32662`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:724
msgid ""
"Callback objects returned by :func:`loop.call_later() "
"<asyncio.loop.call_later>` gained the new :meth:`when() "
"<asyncio.TimerHandle.when>` method which returns an absolute scheduled "
"callback timestamp. (Contributed by Andrew Svetlov in :issue:`32741`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:730
msgid ""
"The :meth:`loop.create_datagram_endpoint() \\ "
"<asyncio.loop.create_datagram_endpoint>` method gained support for Unix "
"sockets. (Contributed by Quentin Dawans in :issue:`31245`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:735
msgid ""
"The :func:`asyncio.open_connection`, :func:`asyncio.start_server` "
"functions, :meth:`loop.create_connection() "
"<asyncio.loop.create_connection>`, :meth:`loop.create_server() "
"<asyncio.loop.create_server>`, :meth:`loop.create_accepted_socket() "
"<asyncio.loop.connect_accepted_socket>` methods and their corresponding "
"UNIX socket variants now accept the *ssl_handshake_timeout* keyword "
"argument. (Contributed by Neil Aspinall in :issue:`29970`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:743
msgid ""
"The new :meth:`Handle.cancelled() <asyncio.Handle.cancelled>` method "
"returns ``True`` if the callback was cancelled. (Contributed by Marat "
"Sharafutdinov in :issue:`31943`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:747
msgid ""
"The asyncio source has been converted to use the "
":keyword:`async`/:keyword:`await` syntax. (Contributed by Andrew Svetlov "
"in :issue:`32193`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:751
msgid ""
"The new :meth:`ReadTransport.is_reading() "
"<asyncio.ReadTransport.is_reading>` method can be used to determine the "
"reading state of the transport. Additionally, calls to "
":meth:`ReadTransport.resume_reading() "
"<asyncio.ReadTransport.resume_reading>` and "
":meth:`ReadTransport.pause_reading() "
"<asyncio.ReadTransport.pause_reading>` are now idempotent. (Contributed "
"by Yury Selivanov in :issue:`32356`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:759
msgid ""
"Loop methods which accept socket paths now support passing :term:`path-"
"like objects <path-like object>`. (Contributed by Yury Selivanov in "
":issue:`32066`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:763
msgid ""
"In :mod:`asyncio` TCP sockets on Linux are now created with "
"``TCP_NODELAY`` flag set by default. (Contributed by Yury Selivanov and "
"Victor Stinner in :issue:`27456`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:767
msgid ""
"Exceptions occurring in cancelled tasks are no longer logged. "
"(Contributed by Yury Selivanov in :issue:`30508`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:770
msgid ""
"New ``WindowsSelectorEventLoopPolicy`` and "
"``WindowsProactorEventLoopPolicy`` classes. (Contributed by Yury "
"Selivanov in :issue:`33792`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:774
msgid ""
"Several ``asyncio`` APIs have been :ref:`deprecated <whatsnew37-asyncio-"
"deprecated>`."
msgstr ""

#: ../../whatsnew/3.7.rst:781
msgid ""
"The :func:`~binascii.b2a_uu` function now accepts an optional *backtick* "
"keyword argument.  When it's true, zeros are represented by ``'`'`` "
"instead of spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:787
msgid "calendar"
msgstr ""

#: ../../whatsnew/3.7.rst:789
msgid ""
"The :class:`~calendar.HTMLCalendar` class has new class attributes which "
"ease the customization of CSS classes in the produced HTML calendar. "
"(Contributed by Oz Tiram in :issue:`30095`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:797
msgid ""
"``collections.namedtuple()`` now supports default values. (Contributed by"
" Raymond Hettinger in :issue:`32320`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:804
msgid ""
":func:`compileall.compile_dir` learned the new *invalidation_mode* "
"parameter, which can be used to enable :ref:`hash-based .pyc invalidation"
" <whatsnew37-pep552>`.  The invalidation mode can also be specified on "
"the command line using the new ``--invalidation-mode`` argument. "
"(Contributed by Benjamin Peterson in :issue:`31650`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:815
msgid ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` and"
" :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` now "
"support the new *initializer* and *initargs* constructor arguments. "
"(Contributed by Antoine Pitrou in :issue:`21423`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:820
msgid ""
"The :class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>`"
" can now take the multiprocessing context via the new *mp_context* "
"argument. (Contributed by Thomas Moreau in :issue:`31540`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:828
msgid ""
"The new :func:`~contextlib.nullcontext` is a simpler and faster no-op "
"context manager than :class:`~contextlib.ExitStack`. (Contributed by "
"Jesse-Bakker in :issue:`10049`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:832
msgid ""
"The new :func:`~contextlib.asynccontextmanager`, "
":class:`~contextlib.AbstractAsyncContextManager`, and "
":class:`~contextlib.AsyncExitStack` have been added to complement their "
"synchronous counterparts.  (Contributed by Jelle Zijlstra in "
":issue:`29679` and :issue:`30241`, and by Alexander Mohr and Ilya Kulakov"
" in :issue:`29302`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:841 ../../whatsnew/3.8.rst:710
msgid "cProfile"
msgstr ""

#: ../../whatsnew/3.7.rst:843
msgid ""
"The :mod:`cProfile` command line now accepts ``-m module_name`` as an "
"alternative to script path.  (Contributed by Sanyam Khurana in "
":issue:`21862`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:850
msgid ""
"The :mod:`crypt` module now supports the Blowfish hashing method. "
"(Contributed by Serhiy Storchaka in :issue:`31664`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:853
msgid ""
"The :func:`~crypt.mksalt` function now allows specifying the number of "
"rounds for hashing.  (Contributed by Serhiy Storchaka in :issue:`31702`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:860
msgid ""
"The new :meth:`datetime.fromisoformat() "
"<datetime.datetime.fromisoformat>` method constructs a "
":class:`~datetime.datetime` object from a string in one of the formats "
"output by :meth:`datetime.isoformat() <datetime.datetime.isoformat>`. "
"(Contributed by Paul Ganssle in :issue:`15873`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:866
msgid ""
"The :class:`tzinfo <datetime.tzinfo>` class now supports sub-minute "
"offsets. (Contributed by Alexander Belopolsky in :issue:`5288`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:873
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes"
" the index file when it is not changed."
msgstr ""

#: ../../whatsnew/3.7.rst:880
msgid ""
"The :mod:`decimal` module now uses :ref:`context variables "
"<whatsnew37-pep567>` to store the decimal context. (Contributed by Yury "
"Selivanov in :issue:`32630`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:888
msgid ""
"The :func:`~dis.dis` function is now able to disassemble nested code "
"objects (the code of comprehensions, generator expressions and nested "
"functions, and the code used for building nested classes).  The maximum "
"depth of disassembly recursion is controlled by the new *depth* "
"parameter. (Contributed by Serhiy Storchaka in :issue:`11822`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:899
msgid ""
"``README.rst`` is now included in the list of distutils standard READMEs "
"and therefore included in source distributions. (Contributed by Ryan "
"Gonzalez in :issue:`11913`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:907
msgid ""
"The :class:`Enum <enum.Enum>` learned the new ``_ignore_`` class "
"property, which allows listing the names of properties which should not "
"become enum members. (Contributed by Ethan Furman in :issue:`31801`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:912
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in :class:`Enum` "
"classes will raise a :exc:`TypeError` (e.g. ``1 in Color``); similarly, "
"attempting to check for non-Flag objects in a :class:`Flag` member will "
"raise :exc:`TypeError` (e.g. ``1 in Perm.RW``); currently, both "
"operations return :const:`False` instead and are deprecated. (Contributed"
" by Ethan Furman in :issue:`33217`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:923
msgid ""
":func:`functools.singledispatch` now supports registering implementations"
" using type annotations. (Contributed by ≈Åukasz Langa in :issue:`32227`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:931
msgid ""
"The new :func:`gc.freeze` function allows freezing all objects tracked by"
" the garbage collector and excluding them from future collections. This "
"can be used before a POSIX ``fork()`` call to make the GC copy-on-write "
"friendly or to speed up collection.  The new :func:`gc.unfreeze` "
"functions reverses this operation.  Additionally, "
":func:`gc.get_freeze_count` can be used to obtain the number of frozen "
"objects. (Contributed by Li Zekun in :issue:`31558`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:943
msgid ""
"The :mod:`hmac` module now has an optimized one-shot :func:`~hmac.digest`"
" function, which is up to three times faster than :func:`~hmac.HMAC`. "
"(Contributed by Christian Heimes in :issue:`32433`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:951
msgid ""
":class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` now support the new *blocksize* "
"argument for improved upload throughput. (Contributed by Nir Soffer in "
":issue:`31945`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:957
msgid "http.server"
msgstr ""

#: ../../whatsnew/3.7.rst:959
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` now supports the HTTP "
"``If-Modified-Since`` header.  The server returns the 304 response status"
" if the target file was not modified after the time specified in the "
"header. (Contributed by Pierre Quentel in :issue:`29654`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:964
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` accepts the new "
"*directory* argument, in addition to the new ``--directory`` command line"
" argument. With this parameter, the server serves the specified "
"directory, by default it uses the current working directory. (Contributed"
" by St√©phane Wirtel and Julien Palard in :issue:`28707`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:970
msgid ""
"The new :class:`ThreadingHTTPServer <http.server.ThreadingHTTPServer>` "
"class uses threads to handle requests using "
":class:`~socketserver.ThreadingMixin`. It is used when ``http.server`` is"
" run with ``-m``. (Contributed by Julien Palard in :issue:`31639`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1014
msgid "New in 3.7.1:"
msgstr ""

#: ../../whatsnew/3.7.rst:1023
msgid "The changes above have been backported to 3.6 maintenance releases."
msgstr ""

#: ../../whatsnew/3.7.rst:1025
msgid "NEW in 3.7.4:"
msgstr ""

#: ../../whatsnew/3.7.rst:1027
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They "
"re-appear in the box for the next customized run.  One can also suppress "
"the normal Shell main module restart.  (Contributed by Cheryl Sabella, "
"Terry Jan Reedy, and others in :issue:`5680` and :issue:`37627`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1033
msgid "New in 3.7.5:"
msgstr ""

#: ../../whatsnew/3.7.rst:1035
msgid ""
"Add optional line numbers for IDLE editor windows. Windows open without "
"line numbers unless set otherwise in the General tab of the configuration"
" dialog.  Line numbers for an existing window are shown and hidden in the"
" Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in "
":issue:`17535`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1045
msgid ""
"The :class:`importlib.abc.ResourceReader` ABC was introduced to support "
"the loading of resources from packages.  See also "
":ref:`whatsnew37_importlib_resources`. (Contributed by Barry Warsaw, "
"Brett Cannon in :issue:`32248`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1050
msgid ""
":func:`importlib.reload` now raises :exc:`ModuleNotFoundError` if the "
"module lacks a spec. (Contributed by Garvit Khatri in :issue:`29851`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1054
msgid ""
":func:`importlib.find_spec` now raises :exc:`ModuleNotFoundError` instead"
" of :exc:`AttributeError` if the specified parent module is not a package"
" (i.e. lacks a ``__path__`` attribute). (Contributed by Milan Oberkirch "
"in :issue:`30436`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1059
msgid ""
"The new :func:`importlib.source_hash` can be used to compute the hash of "
"the passed source.  A :ref:`hash-based .pyc file <whatsnew37-pep552>` "
"embeds the value returned by this function."
msgstr ""

#: ../../whatsnew/3.7.rst:1067
msgid ""
"The new :meth:`TextIOWrapper.reconfigure() "
"<io.TextIOWrapper.reconfigure>` method can be used to reconfigure the "
"text stream with the new settings. (Contributed by Antoine Pitrou in "
":issue:`30526` and INADA Naoki in :issue:`15216`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1076
msgid ""
"The new ``subnet_of()`` and ``supernet_of()`` methods of "
":class:`ipaddress.IPv6Network` and :class:`ipaddress.IPv4Network` can be "
"used for network containment tests. (Contributed by Michel Albert and "
"Cheryl Sabella in :issue:`20825`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1085
msgid ""
":func:`itertools.islice` now accepts :meth:`integer-like objects "
"<object.__index__>` as start, stop, and slice arguments. (Contributed by "
"Will Roberts in :issue:`30537`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1094
msgid ""
"The new *monetary* argument to :func:`locale.format_string` can be used "
"to make the conversion use monetary thousands separators and grouping "
"strings.  (Contributed by Garvit in :issue:`10379`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1098
msgid ""
"The :func:`locale.getpreferredencoding` function now always returns "
"``'UTF-8'`` on Android or when in the :ref:`forced UTF-8 mode "
"<whatsnew37-pep540>`."
msgstr ""

#: ../../whatsnew/3.7.rst:1105
msgid ""
":class:`~logging.Logger` instances can now be pickled. (Contributed by "
"Vinay Sajip in :issue:`30520`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1108
msgid ""
"The new :meth:`StreamHandler.setStream() "
"<logging.StreamHandler.setStream>` method can be used to replace the "
"logger stream after handler creation. (Contributed by Vinay Sajip in "
":issue:`30522`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1112
msgid ""
"It is now possible to specify keyword arguments to handler constructors "
"in configuration passed to :func:`logging.config.fileConfig`. "
"(Contributed by Preston Landers in :issue:`31080`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1120
msgid ""
"The new :func:`math.remainder` function implements the IEEE 754-style "
"remainder operation.  (Contributed by Mark Dickinson in :issue:`29962`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1125
msgid "mimetypes"
msgstr ""

#: ../../whatsnew/3.7.rst:1127
msgid ""
"The MIME type of .bmp has been changed from ``'image/x-ms-bmp'`` to "
"``'image/bmp'``. (Contributed by Nitish Chandra in :issue:`22589`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1133
msgid "msilib"
msgstr ""

#: ../../whatsnew/3.7.rst:1135
msgid ""
"The new :meth:`Database.Close() <msilib.Database.Close>` method can be "
"used to close the :abbr:`MSI` database. (Contributed by Berker Peksag in "
":issue:`20486`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1143
msgid ""
"The new :meth:`Process.close() <multiprocessing.Process.close>` method "
"explicitly closes the process object and releases all resources "
"associated with it.  :exc:`ValueError` is raised if the underlying "
"process is still running. (Contributed by Antoine Pitrou in "
":issue:`30596`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1149
msgid ""
"The new :meth:`Process.kill() <multiprocessing.Process.kill>` method can "
"be used to terminate the process using the :data:`SIGKILL` signal on "
"Unix. (Contributed by Vitor Pereira in :issue:`30794`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1153
msgid ""
"Non-daemonic threads created by :class:`~multiprocessing.Process` are now"
" joined on process exit. (Contributed by Antoine Pitrou in "
":issue:`18966`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1161
msgid ""
":func:`os.fwalk` now accepts the *path* argument as :class:`bytes`. "
"(Contributed by Serhiy Storchaka in :issue:`28682`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1164
msgid ""
":func:`os.scandir` gained support for :ref:`file descriptors <path_fd>`. "
"(Contributed by Serhiy Storchaka in :issue:`25996`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1167
msgid ""
"The new :func:`~os.register_at_fork` function allows registering Python "
"callbacks to be executed at process fork. (Contributed by Antoine Pitrou "
"in :issue:`16500`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1171
msgid ""
"Added :func:`os.preadv` (combine the functionality of :func:`os.readv` "
"and :func:`os.pread`) and :func:`os.pwritev` functions (combine the "
"functionality of :func:`os.writev` and :func:`os.pwrite`). (Contributed "
"by Pablo Galindo in :issue:`31368`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1176
msgid ""
"The mode argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly-created intermediate-level directories. "
"(Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1180
msgid ""
":func:`os.dup2` now returns the new file descriptor.  Previously, "
"``None`` was always returned. (Contributed by Benjamin Peterson in "
":issue:`32441`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1184
msgid ""
"The structure returned by :func:`os.stat` now contains the "
":attr:`~os.stat_result.st_fstype` attribute on Solaris and its "
"derivatives. (Contributed by Jes√∫s Cea Avi√≥n in :issue:`32659`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1192
msgid ""
"The new :meth:`Path.is_mount() <pathlib.Path.is_mount>` method is now "
"available on POSIX systems and can be used to determine whether a path is"
" a mount point. (Contributed by Cooper Ry Lees in :issue:`30897`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1200
msgid ""
":func:`pdb.set_trace` now takes an optional *header* keyword-only "
"argument.  If given, it is printed to the console just before debugging "
"begins.  (Contributed by Barry Warsaw in :issue:`31389`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1204
msgid ""
":mod:`pdb` command line now accepts ``-m module_name`` as an alternative "
"to script file.  (Contributed by Mario Corchero in :issue:`32206`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1209 ../../whatsnew/3.8.rst:1137
msgid "py_compile"
msgstr ""

#: ../../whatsnew/3.7.rst:1211
msgid ""
":func:`py_compile.compile` -- and by extension, :mod:`compileall` -- now "
"respects the :envvar:`SOURCE_DATE_EPOCH` environment variable by "
"unconditionally creating ``.pyc`` files for hash-based validation. This "
"allows for guaranteeing `reproducible builds <https://reproducible-"
"builds.org/>`_ of ``.pyc`` files when they are created eagerly. "
"(Contributed by Bernhard M. Wiedemann in :issue:`29708`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1223
msgid ""
"The pydoc server can now bind to an arbitrary hostname specified by the "
"new ``-n`` command-line argument. (Contributed by Feanil Patel in "
":issue:`31128`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1231
msgid ""
"The new :class:`~queue.SimpleQueue` class is an unbounded :abbr:`FIFO` "
"queue. (Contributed by Antoine Pitrou in :issue:`14976`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1238
msgid ""
"The flags :const:`re.ASCII`, :const:`re.LOCALE` and :const:`re.UNICODE` "
"can be set within the scope of a group. (Contributed by Serhiy Storchaka "
"in :issue:`31690`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1242
msgid ""
":func:`re.split` now supports splitting on a pattern like ``r'\\b'``, "
"``'^$'`` or ``(?=-)`` that matches an empty string. (Contributed by "
"Serhiy Storchaka in :issue:`25054`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1246
msgid ""
"Regular expressions compiled with the :const:`re.LOCALE` flag no longer "
"depend on the locale at compile time.  Locale settings are applied only "
"when the compiled regular expression is used. (Contributed by Serhiy "
"Storchaka in :issue:`30215`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1251
msgid ""
":exc:`FutureWarning` is now emitted if a regular expression contains "
"character set constructs that will change semantically in the future, "
"such as nested sets and set operations. (Contributed by Serhiy Storchaka "
"in :issue:`30349`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1256
msgid ""
"Compiled regular expression and match objects can now be copied using "
":func:`copy.copy` and :func:`copy.deepcopy`. (Contributed by Serhiy "
"Storchaka in :issue:`10076`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1264
msgid ""
"The new *warn_on_full_buffer* argument to the "
":func:`signal.set_wakeup_fd` function makes it possible to specify "
"whether Python prints a warning on stderr when the wakeup buffer "
"overflows. (Contributed by Nathaniel J. Smith in :issue:`30050`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1273
msgid ""
"The new :func:`socket.getblocking() <socket.socket.getblocking>` method "
"returns ``True`` if the socket is in blocking mode and ``False`` "
"otherwise. (Contributed by Yury Selivanov in :issue:`32373`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1277
msgid ""
"The new :func:`socket.close` function closes the passed socket file "
"descriptor. This function should be used instead of :func:`os.close` for "
"better compatibility across platforms. (Contributed by Christian Heimes "
"in :issue:`32454`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1282
msgid ""
"The :mod:`socket` module now exposes the :data:`socket.TCP_CONGESTION` "
"(Linux 2.6.13), :data:`socket.TCP_USER_TIMEOUT` (Linux 2.6.37), and "
":data:`socket.TCP_NOTSENT_LOWAT` (Linux 3.12) constants. (Contributed by "
"Omar Sandoval in :issue:`26273` and Nathaniel J. Smith in "
":issue:`29728`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1288
msgid ""
"Support for :data:`socket.AF_VSOCK` sockets has been added to allow "
"communication between virtual machines and their hosts. (Contributed by "
"Cathy Avery in :issue:`27584`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1292
msgid ""
"Sockets now auto-detect family, type and protocol from file descriptor by"
" default. (Contributed by Christian Heimes in :issue:`28134`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1300
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close` now waits until all non-"
"daemon threads complete. :meth:`socketserver.ForkingMixIn.server_close` "
"now waits until all child processes complete."
msgstr ""

#: ../../whatsnew/3.7.rst:1304
msgid ""
"Add a new :attr:`socketserver.ForkingMixIn.block_on_close` class "
"attribute to :class:`socketserver.ForkingMixIn` and "
":class:`socketserver.ThreadingMixIn` classes. Set the class attribute to "
"``False`` to get the pre-3.7 behaviour."
msgstr ""

#: ../../whatsnew/3.7.rst:1312
msgid ""
":class:`sqlite3.Connection` now exposes the "
":meth:`~sqlite3.Connection.backup` method when the underlying SQLite "
"library is at version 3.6.11 or higher. (Contributed by Lele Gaifax in "
":issue:`27645`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1316
msgid ""
"The *database* argument of :func:`sqlite3.connect` now accepts any :term"
":`path-like object`, instead of just a string. (Contributed by Anders "
"Lorentsen in :issue:`31843`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1324
msgid ""
"The :mod:`ssl` module now uses OpenSSL's builtin API instead of "
":func:`~ssl.match_hostname` to check a host name or an IP address.  "
"Values are validated during TLS handshake.  Any certificate validation "
"error including failing the host name check now raises "
":exc:`~ssl.SSLCertVerificationError` and aborts the handshake with a "
"proper TLS Alert message.  The new exception contains additional "
"information. Host name validation can be customized with "
":attr:`SSLContext.hostname_checks_common_name "
"<ssl.SSLContext.hostname_checks_common_name>`. (Contributed by Christian "
"Heimes in :issue:`31399`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1335
msgid ""
"The improved host name check requires a *libssl* implementation "
"compatible with OpenSSL 1.0.2 or 1.1.  Consequently, OpenSSL 0.9.8 and "
"1.0.1 are no longer supported (see :ref:`37-platform-support-removals` "
"for more details). The ssl module is mostly compatible with LibreSSL "
"2.7.2 and newer."
msgstr ""

#: ../../whatsnew/3.7.rst:1340
msgid ""
"The ``ssl`` module no longer sends IP addresses in SNI TLS extension. "
"(Contributed by Christian Heimes in :issue:`32185`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1343
msgid ""
":func:`~ssl.match_hostname` no longer supports partial wildcards like "
"``www*.example.org``. (Contributed by Mandeep Singh in :issue:`23033` and"
" Christian Heimes in :issue:`31399`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1348
msgid ""
"The default cipher suite selection of the ``ssl`` module now uses a "
"blacklist approach rather than a hard-coded whitelist.  Python no longer "
"re-enables ciphers that have been blocked by OpenSSL security updates.  "
"Default cipher suite selection can be configured at compile time. "
"(Contributed by Christian Heimes in :issue:`31429`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1354
msgid ""
"Validation of server certificates containing internationalized domain "
"names (IDNs) is now supported.  As part of this change, the "
":attr:`SSLSocket.server_hostname <ssl.SSLSocket.server_hostname>` "
"attribute now stores the expected hostname in A-label form (``\"xn"
"--pythn-mua.org\"``), rather than the U-label form (``\"pyth√∂n.org\"``)."
"  (Contributed by Nathaniel J. Smith and Christian Heimes in "
":issue:`28414`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1361
msgid ""
"The ``ssl`` module has preliminary and experimental support for TLS 1.3 "
"and OpenSSL 1.1.1.  At the time of Python 3.7.0 release, OpenSSL 1.1.1 is"
" still under development and TLS 1.3 hasn't been finalized yet.  The TLS "
"1.3 handshake and protocol behaves slightly differently than TLS 1.2 and "
"earlier, see :ref:`ssl-tlsv1_3`. (Contributed by Christian Heimes in "
":issue:`32947`, :issue:`20995`, :issue:`29136`, :issue:`30622` and "
":issue:`33618`)"
msgstr ""

#: ../../whatsnew/3.7.rst:1369
msgid ""
":class:`~ssl.SSLSocket` and :class:`~ssl.SSLObject` no longer have a "
"public constructor.  Direct instantiation was never a documented and "
"supported feature.  Instances must be created with "
":class:`~ssl.SSLContext` methods :meth:`~ssl.SSLContext.wrap_socket` and "
":meth:`~ssl.SSLContext.wrap_bio`. (Contributed by Christian Heimes in "
":issue:`32951`)"
msgstr ""

#: ../../whatsnew/3.7.rst:1375
msgid ""
"OpenSSL 1.1 APIs for setting the minimum and maximum TLS protocol version"
" are available as :attr:`SSLContext.minimum_version "
"<ssl.SSLContext.minimum_version>` and :attr:`SSLContext.maximum_version "
"<ssl.SSLContext.maximum_version>`. Supported protocols are indicated by "
"several new flags, such as :data:`~ssl.HAS_TLSv1_1`. (Contributed by "
"Christian Heimes in :issue:`32609`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1384
msgid "string"
msgstr ""

#: ../../whatsnew/3.7.rst:1386
msgid ""
":class:`string.Template` now lets you to optionally modify the regular "
"expression pattern for braced placeholders and non-braced placeholders "
"separately.  (Contributed by Barry Warsaw in :issue:`1198569`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1394
msgid ""
"The :func:`subprocess.run` function accepts the new *capture_output* "
"keyword argument.  When true, stdout and stderr will be captured. This is"
" equivalent to passing :data:`subprocess.PIPE` as *stdout* and *stderr* "
"arguments. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1400
msgid ""
"The ``subprocess.run`` function and the :class:`subprocess.Popen` "
"constructor now accept the *text* keyword argument as an alias to "
"*universal_newlines*. (Contributed by Andrew Clegg in :issue:`31756`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1405
msgid ""
"On Windows the default for *close_fds* was changed from ``False`` to "
"``True`` when redirecting the standard handles.  It's now possible to set"
" *close_fds* to true when redirecting the standard handles.  See "
":class:`subprocess.Popen`.  This means that *close_fds* now defaults to "
"``True`` on all supported platforms. (Contributed by Segev Finer in "
":issue:`19764`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1412
msgid ""
"The subprocess module is now more graceful when handling "
":exc:`KeyboardInterrupt` during :func:`subprocess.call`, "
":func:`subprocess.run`, or in a :class:`~subprocess.Popen` context "
"manager.  It now waits a short amount of time for the child to exit, "
"before continuing the handling of the ``KeyboardInterrupt`` exception. "
"(Contributed by Gregory P. Smith in :issue:`25942`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1424
msgid ""
"The new :func:`sys.breakpointhook` hook function is called by the built-"
"in :func:`breakpoint`. (Contributed by Barry Warsaw in :issue:`31353`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1428
msgid ""
"On Android, the new :func:`sys.getandroidapilevel` returns the build-time"
" Android API version. (Contributed by Victor Stinner in :issue:`28740`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1432
msgid ""
"The new :func:`sys.get_coroutine_origin_tracking_depth` function returns "
"the current coroutine origin tracking depth, as set by the new "
":func:`sys.set_coroutine_origin_tracking_depth`.  :mod:`asyncio` has been"
" converted to use this new API instead of the deprecated "
":func:`sys.set_coroutine_wrapper`. (Contributed by Nathaniel J. Smith in "
":issue:`32591`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1443
msgid ""
":pep:`564` adds six new functions with nanosecond resolution to the "
":mod:`time` module:"
msgstr ""

#: ../../whatsnew/3.7.rst:1453
msgid "New clock identifiers have been added:"
msgstr ""

#: ../../whatsnew/3.7.rst:1455
msgid ""
":data:`time.CLOCK_BOOTTIME` (Linux): Identical to "
":data:`time.CLOCK_MONOTONIC`, except it also includes any time that the "
"system is suspended."
msgstr ""

#: ../../whatsnew/3.7.rst:1458
msgid ""
":data:`time.CLOCK_PROF` (FreeBSD, NetBSD and OpenBSD): High-resolution "
"per-process CPU timer."
msgstr ""

#: ../../whatsnew/3.7.rst:1460
msgid ""
":data:`time.CLOCK_UPTIME` (FreeBSD, OpenBSD): Time whose absolute value "
"is the time the system has been running and not suspended, providing "
"accurate uptime measurement."
msgstr ""

#: ../../whatsnew/3.7.rst:1464
msgid ""
"The new :func:`time.thread_time` and :func:`time.thread_time_ns` "
"functions can be used to get per-thread CPU time measurements. "
"(Contributed by Antoine Pitrou in :issue:`32025`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1468
msgid ""
"The new :func:`time.pthread_getcpuclockid` function returns the clock ID "
"of the thread-specific CPU-time clock."
msgstr ""

#: ../../whatsnew/3.7.rst:1475
msgid ""
"The new :class:`tkinter.ttk.Spinbox` class is now available. (Contributed"
" by Alan Moore in :issue:`32585`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1482
msgid ""
":class:`tracemalloc.Traceback` behaves more like regular tracebacks, "
"sorting the frames from oldest to most recent. :meth:`Traceback.format() "
"<tracemalloc.Traceback.format>` now accepts negative *limit*, truncating "
"the result to the ``abs(limit)`` oldest frames.  To get the old "
"behaviour, use the new *most_recent_first* argument to "
"``Traceback.format()``. (Contributed by Jesse Bakker in :issue:`32121`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1494
msgid ""
"The new :class:`~types.WrapperDescriptorType`, "
":class:`~types.MethodWrapperType`, :class:`~types.MethodDescriptorType`, "
"and :class:`~types.ClassMethodDescriptorType` classes are now available. "
"(Contributed by Manuel Krebber and Guido van Rossum in :issue:`29377`, "
"and Serhiy Storchaka in :issue:`32265`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1500
msgid ""
"The new :func:`types.resolve_bases` function resolves MRO entries "
"dynamically as specified by :pep:`560`. (Contributed by Ivan Levkivskyi "
"in :issue:`32717`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1508
msgid ""
"The internal :mod:`unicodedata` database has been upgraded to use "
"`Unicode 11 <http://www.unicode.org/versions/Unicode11.0.0/>`_. "
"(Contributed by Benjamin Peterson.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1516
msgid ""
"The new ``-k`` command-line option allows filtering tests by a name "
"substring or a Unix shell-like pattern. For example, ``python -m unittest"
" -k foo`` runs ``foo_tests.SomeTest.test_something``, "
"``bar_tests.SomeTest.test_foo``, but not "
"``bar_tests.FooTest.test_something``. (Contributed by Jonas Haag in "
":issue:`32071`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1527
msgid ""
"The :const:`~unittest.mock.sentinel` attributes now preserve their "
"identity when they are :mod:`copied <copy>` or :mod:`pickled <pickle>`. "
"(Contributed by Serhiy Storchaka in :issue:`20804`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1531
msgid ""
"The new :func:`~unittest.mock.seal` function allows sealing "
":class:`~unittest.mock.Mock` instances, which will disallow further "
"creation of attribute mocks.  The seal is applied recursively to all "
"attributes that are themselves mocks. (Contributed by Mario Corchero in "
":issue:`30541`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1541
msgid ""
":func:`urllib.parse.quote` has been updated from :rfc:`2396` to "
":rfc:`3986`, adding ``~`` to the set of characters that are never quoted "
"by default. (Contributed by Christian Theune and Ratnadeep Debnath in "
":issue:`16285`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1547
msgid "uu"
msgstr ""

#: ../../whatsnew/3.7.rst:1549
msgid ""
"The :func:`uu.encode` function now accepts an optional *backtick* keyword"
" argument.  When it's true, zeros are represented by ``'`'`` instead of "
"spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1555
msgid "uuid"
msgstr ""

#: ../../whatsnew/3.7.rst:1557
msgid ""
"The new :attr:`UUID.is_safe <uuid.UUID.is_safe>` attribute relays "
"information from the platform about whether generated UUIDs are generated"
" with a multiprocessing-safe method. (Contributed by Barry Warsaw in "
":issue:`22807`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1562
msgid ""
":func:`uuid.getnode` now prefers universally administered MAC addresses "
"over locally administered MAC addresses. This makes a better guarantee "
"for global uniqueness of UUIDs returned from :func:`uuid.uuid1`.  If only"
" locally administered MAC addresses are available, the first such one "
"found is returned. (Contributed by Barry Warsaw in :issue:`32107`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1573
msgid "The initialization of the default warnings filters has changed as follows:"
msgstr ""

#: ../../whatsnew/3.7.rst:1575
msgid ""
"warnings enabled via command line options (including those for "
":option:`-b` and the new CPython-specific :option:`-X` ``dev`` option) "
"are always passed to the warnings machinery via the "
":data:`sys.warnoptions` attribute."
msgstr ""

#: ../../whatsnew/3.7.rst:1579
msgid ""
"warnings filters enabled via the command line or the environment now have"
" the following order of precedence:"
msgstr ""

#: ../../whatsnew/3.7.rst:1582
msgid "the ``BytesWarning`` filter for :option:`-b` (or ``-bb``)"
msgstr ""

#: ../../whatsnew/3.7.rst:1583
msgid "any filters specified with the :option:`-W` option"
msgstr ""

#: ../../whatsnew/3.7.rst:1584
msgid ""
"any filters specified with the :envvar:`PYTHONWARNINGS` environment "
"variable"
msgstr ""

#: ../../whatsnew/3.7.rst:1586
msgid ""
"any other CPython specific filters (e.g. the ``default`` filter added for"
" the new ``-X dev`` mode)"
msgstr ""

#: ../../whatsnew/3.7.rst:1588
msgid "any implicit filters defined directly by the warnings machinery"
msgstr ""

#: ../../whatsnew/3.7.rst:1590
msgid ""
"in CPython debug builds, all warnings are now displayed by default (the "
"implicit filter list is empty)"
msgstr ""

#: ../../whatsnew/3.7.rst:1593
msgid ""
"(Contributed by Nick Coghlan and Victor Stinner in :issue:`20361`, "
":issue:`32043`, and :issue:`32230`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1596
msgid ""
"Deprecation warnings are once again shown by default in single-file "
"scripts and at the interactive prompt.  See :ref:`whatsnew37-pep565` for "
"details. (Contributed by Nick Coghlan in :issue:`31975`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1604
msgid ""
":ref:`ElementPath <elementtree-xpath>` predicates in the :meth:`find` "
"methods can now compare text of the current node with ``[. = \"text\"]``,"
" not only text in children.  Predicates also allow adding spaces for "
"better readability.  (Contributed by Stefan Behnel in :issue:`31648`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1611
msgid "xmlrpc.server"
msgstr ""

#: ../../whatsnew/3.7.rst:1613
msgid ""
":meth:`SimpleXMLRPCDispatcher.register_function "
"<xmlrpc.server.SimpleXMLRPCDispatcher>` can now be used as a decorator.  "
"(Contributed by Xiang Zhang in :issue:`7769`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1621
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional *filter* "
"argument to allow the user to select which files should be included in "
"the archive.  (Contributed by Irmen de Jong in :issue:`31072`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1625
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional "
"*compressed* argument to generate a compressed archive.  A command line "
"option ``--compress`` has also been added to support compression. "
"(Contributed by Zhiming Wang in :issue:`31638`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1634
msgid ""
":class:`~zipfile.ZipFile` now accepts the new *compresslevel* parameter "
"to control the compression level. (Contributed by Bo Bayles in "
":issue:`21417`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1638
msgid ""
"Subdirectories in archives created by ``ZipFile`` are now stored in "
"alphabetical order. (Contributed by Bernhard M. Wiedemann in "
":issue:`30693`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1644
msgid "C API Changes"
msgstr ""

#: ../../whatsnew/3.7.rst:1646
msgid ""
"A new API for thread-local storage has been implemented.  See "
":ref:`whatsnew37-pep539` for an overview and :ref:`thread-specific-"
"storage-api` for a complete reference. (Contributed by Masayuki Yamamoto "
"in :issue:`25658`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1651
msgid ""
"The new :ref:`context variables <whatsnew37-pep567>` functionality "
"exposes a number of :ref:`new C APIs <contextvarsobjects>`."
msgstr ""

#: ../../whatsnew/3.7.rst:1654
msgid ""
"The new :c:func:`PyImport_GetModule` function returns the previously "
"imported module with the given name. (Contributed by Eric Snow in "
":issue:`28411`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1658
msgid ""
"The new :c:macro:`Py_RETURN_RICHCOMPARE` macro eases writing rich "
"comparison functions. (Contributed by Petr Victorin in :issue:`23699`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1662
msgid ""
"The new :c:macro:`Py_UNREACHABLE` macro can be used to mark unreachable "
"code paths. (Contributed by Barry Warsaw in :issue:`31338`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1666
msgid ""
"The :mod:`tracemalloc` now exposes a C API through the new "
":c:func:`PyTraceMalloc_Track` and :c:func:`PyTraceMalloc_Untrack` "
"functions. (Contributed by Victor Stinner in :issue:`30054`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1671
msgid ""
"The new :c:func:`import__find__load__start` and "
":c:func:`import__find__load__done` static markers can be used to trace "
"module imports. (Contributed by Christian Heimes in :issue:`31574`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1676
msgid ""
"The fields :c:member:`name` and :c:member:`doc` of structures "
":c:type:`PyMemberDef`, :c:type:`PyGetSetDef`, "
":c:type:`PyStructSequence_Field`, :c:type:`PyStructSequence_Desc`, and "
":c:type:`wrapperbase` are now of type ``const char *`` rather of ``char "
"*``.  (Contributed by Serhiy Storchaka in :issue:`28761`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1682
msgid ""
"The result of :c:func:`PyUnicode_AsUTF8AndSize` and "
":c:func:`PyUnicode_AsUTF8` is now of type ``const char *`` rather of "
"``char *``. (Contributed by Serhiy Storchaka in :issue:`28769`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1686
msgid ""
"The result of :c:func:`PyMapping_Keys`, :c:func:`PyMapping_Values` and "
":c:func:`PyMapping_Items` is now always a list, rather than a list or a "
"tuple. (Contributed by Oren Milman in :issue:`28280`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1690
msgid ""
"Added functions :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`. (Contributed by Serhiy Storchaka in "
":issue:`27867`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1693
msgid ""
":c:func:`PyOS_AfterFork` is deprecated in favour of the new functions "
":c:func:`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` and "
":c:func:`PyOS_AfterFork_Child`.  (Contributed by Antoine Pitrou in "
":issue:`16500`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1698
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public "
"API has been removed as its members being never cleared may cause a "
"segfault during finalization of the interpreter. Contributed by Xavier de"
" Gaye in :issue:`22898` and :issue:`30697`."
msgstr ""

#: ../../whatsnew/3.7.rst:1703
msgid ""
"Added C API support for timezones with timezone constructors "
":c:func:`PyTimeZone_FromOffset` and "
":c:func:`PyTimeZone_FromOffsetAndName`, and access to the UTC singleton "
"with :c:data:`PyDateTime_TimeZone_UTC`. Contributed by Paul Ganssle in "
":issue:`10381`."
msgstr ""

#: ../../whatsnew/3.7.rst:1708
msgid ""
"The type of results of :c:func:`PyThread_start_new_thread` and "
":c:func:`PyThread_get_thread_ident`, and the *id* parameter of "
":c:func:`PyThreadState_SetAsyncExc` changed from :c:type:`long` to "
":c:type:`unsigned long`. (Contributed by Serhiy Storchaka in "
":issue:`6532`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1714
msgid ""
":c:func:`PyUnicode_AsWideCharString` now raises a :exc:`ValueError` if "
"the second argument is ``NULL`` and the :c:type:`wchar_t*` string "
"contains null characters.  (Contributed by Serhiy Storchaka in "
":issue:`30708`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1718
msgid ""
"Changes to the startup sequence and the management of dynamic memory "
"allocators mean that the long documented requirement to call "
":c:func:`Py_Initialize` before calling most C API functions is now relied"
" on more heavily, and failing to abide by it may lead to segfaults in "
"embedding applications. See the :ref:`porting-to-python-37` section in "
"this document and the :ref:`pre-init-safe` section in the C API "
"documentation for more details."
msgstr ""

#: ../../whatsnew/3.7.rst:1726
msgid ""
"The new :c:func:`PyInterpreterState_GetID` returns the unique ID for a "
"given interpreter. (Contributed by Eric Snow in :issue:`29102`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1730
msgid ""
":c:func:`Py_DecodeLocale`, :c:func:`Py_EncodeLocale` now use the UTF-8 "
"encoding when the :ref:`UTF-8 mode <whatsnew37-pep540>` is enabled. "
"(Contributed by Victor Stinner in :issue:`29240`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1734
msgid ""
":c:func:`PyUnicode_DecodeLocaleAndSize` and "
":c:func:`PyUnicode_EncodeLocale` now use the current locale encoding for "
"``surrogateescape`` error handler. (Contributed by Victor Stinner in "
":issue:`29240`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1738
msgid ""
"The *start* and *end* parameters of :c:func:`PyUnicode_FindChar` are now "
"adjusted to behave like string slices. (Contributed by Xiang Zhang in "
":issue:`28822`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1744
msgid "Build Changes"
msgstr ""

#: ../../whatsnew/3.7.rst:1746
msgid ""
"Support for building ``--without-threads`` has been removed.  The "
":mod:`threading` module is now always available. (Contributed by Antoine "
"Pitrou in :issue:`31370`.)."
msgstr ""

#: ../../whatsnew/3.7.rst:1750
msgid ""
"A full copy of libffi is no longer bundled for use when building the "
":mod:`_ctypes <ctypes>` module on non-OSX UNIX platforms.  An installed "
"copy of libffi is now required when building ``_ctypes`` on such "
"platforms. (Contributed by Zachary Ware in :issue:`27979`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1755
msgid ""
"The Windows build process no longer depends on Subversion to pull in "
"external sources, a Python script is used to download zipfiles from "
"GitHub instead. If Python 3.6 is not found on the system (via ``py "
"-3.6``), NuGet is used to download a copy of 32-bit Python for this "
"purpose.  (Contributed by Zachary Ware in :issue:`30450`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1761
msgid ""
"The :mod:`ssl` module requires OpenSSL 1.0.2 or 1.1 compatible libssl. "
"OpenSSL 1.0.1 has reached end of lifetime on 2016-12-31 and is no longer "
"supported. LibreSSL is temporarily not supported as well. LibreSSL "
"releases up to version 2.6.4 are missing required OpenSSL 1.0.2 APIs."
msgstr ""

#: ../../whatsnew/3.7.rst:1772
msgid ""
"The overhead of calling many methods of various standard library classes "
"implemented in C has been significantly reduced by porting more code to "
"use the ``METH_FASTCALL`` convention. (Contributed by Victor Stinner in "
":issue:`29300`, :issue:`29507`, :issue:`29452`, and :issue:`29286`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1778
#, python-format
msgid ""
"Various optimizations have reduced Python startup time by 10% on Linux "
"and up to 30% on macOS. (Contributed by Victor Stinner, INADA Naoki in "
":issue:`29585`, and Ivan Levkivskyi in :issue:`31333`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1783
#, python-format
msgid ""
"Method calls are now up to 20% faster due to the bytecode changes which "
"avoid creating bound method instances. (Contributed by Yury Selivanov and"
" INADA Naoki in :issue:`26110`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1789
msgid ""
"The :mod:`asyncio` module received a number of notable optimizations for "
"commonly used functions:"
msgstr ""

#: ../../whatsnew/3.7.rst:1792
msgid ""
"The :func:`asyncio.get_event_loop` function has been reimplemented in C "
"to make it up to 15 times faster. (Contributed by Yury Selivanov in "
":issue:`32296`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1796
msgid ""
":class:`asyncio.Future` callback management has been optimized. "
"(Contributed by Yury Selivanov in :issue:`32348`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1799
#, python-format
msgid ""
":func:`asyncio.gather` is now up to 15% faster. (Contributed by Yury "
"Selivanov in :issue:`32355`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1802
msgid ""
":func:`asyncio.sleep` is now up to 2 times faster when the *delay* "
"argument is zero or negative. (Contributed by Andrew Svetlov in "
":issue:`32351`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1806
msgid ""
"The performance overhead of asyncio debug mode has been reduced. "
"(Contributed by Antoine Pitrou in :issue:`31970`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1809
msgid ""
"As a result of :ref:`PEP 560 work <whatsnew37-pep560>`, the import time "
"of :mod:`typing` has been reduced by a factor of 7, and many typing "
"operations are now faster. (Contributed by Ivan Levkivskyi in "
":issue:`32226`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1814
#, python-format
msgid ""
":func:`sorted` and :meth:`list.sort` have been optimized for common cases"
" to be up to 40-75% faster. (Contributed by Elliot Gorokhovsky in "
":issue:`28685`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1818
msgid ""
":meth:`dict.copy` is now up to 5.5 times faster. (Contributed by Yury "
"Selivanov in :issue:`31179`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1821
msgid ""
":func:`hasattr` and :func:`getattr` are now about 4 times faster when "
"*name* is not found and *obj* does not override "
":meth:`object.__getattr__` or :meth:`object.__getattribute__`. "
"(Contributed by INADA Naoki in :issue:`32544`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1826
msgid ""
"Searching for certain Unicode characters (like Ukrainian capital \"–Ñ\") "
"in a string was up to 25 times slower than searching for other "
"characters. It is now only 3 times slower in the worst case. (Contributed"
" by Serhiy Storchaka in :issue:`24821`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1831
msgid ""
"The :func:`collections.namedtuple` factory has been reimplemented to make"
" the creation of named tuples 4 to 6 times faster. (Contributed by Jelle "
"Zijlstra with further improvements by INADA Naoki, Serhiy Storchaka, and "
"Raymond Hettinger in :issue:`28638`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1836
#, python-format
msgid ""
":meth:`date.fromordinal` and :meth:`date.fromtimestamp` are now up to 30%"
" faster in the common case. (Contributed by Paul Ganssle in "
":issue:`32403`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1840
msgid ""
"The :func:`os.fwalk` function is now up to 2 times faster thanks to the "
"use of :func:`os.scandir`. (Contributed by Serhiy Storchaka in "
":issue:`25996`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1844
msgid ""
"The speed of the :func:`shutil.rmtree` function has been improved by 20--"
"40% thanks to the use of the :func:`os.scandir` function. (Contributed by"
" Serhiy Storchaka in :issue:`28564`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1848
msgid ""
"Optimized case-insensitive matching and searching of :mod:`regular "
"expressions <re>`.  Searching some patterns can now be up to 20 times "
"faster. (Contributed by Serhiy Storchaka in :issue:`30285`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1852
#, python-format
msgid ""
":func:`re.compile` now converts ``flags`` parameter to int object if it "
"is ``RegexFlag``.  It is now as fast as Python 3.5, and faster than "
"Python 3.6 by about 10% depending on the pattern. (Contributed by INADA "
"Naoki in :issue:`31671`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1857
#, python-format
msgid ""
"The :meth:`~selectors.BaseSelector.modify` methods of classes "
":class:`selectors.EpollSelector`, :class:`selectors.PollSelector` and "
":class:`selectors.DevpollSelector` may be around 10% faster under heavy "
"loads.  (Contributed by Giampaolo Rodola' in :issue:`30014`)"
msgstr ""

#: ../../whatsnew/3.7.rst:1862
msgid ""
"Constant folding has been moved from the peephole optimizer to the new "
"AST optimizer, which is able perform optimizations more consistently. "
"(Contributed by Eugene Toder and INADA Naoki in :issue:`29469` and "
":issue:`11549`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1867
msgid ""
"Most functions and methods in :mod:`abc` have been rewritten in C. This "
"makes creation of abstract base classes, and calling :func:`isinstance` "
"and :func:`issubclass` on them 1.5x faster.  This also reduces Python "
"start-up time by up to 10%. (Contributed by Ivan Levkivskyi and INADA "
"Naoki in :issue:`31333`)"
msgstr ""

#: ../../whatsnew/3.7.rst:1873
msgid ""
"Significant speed improvements to alternate constructors for "
":class:`datetime.date` and :class:`datetime.datetime` by using fast-path "
"constructors when not constructing subclasses. (Contributed by Paul "
"Ganssle in :issue:`32403`)"
msgstr ""

#: ../../whatsnew/3.7.rst:1878
msgid ""
"The speed of comparison of :class:`array.array` instances has been "
"improved considerably in certain cases.  It is now from 10x to 70x faster"
" when comparing arrays holding values of the same integer type. "
"(Contributed by Adrian Wielgosik in :issue:`24700`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1883
msgid ""
"The :func:`math.erf` and :func:`math.erfc` functions now use the (faster)"
" C library implementation on most platforms. (Contributed by Serhiy "
"Storchaka in :issue:`26121`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1889
msgid "Other CPython Implementation Changes"
msgstr ""

#: ../../whatsnew/3.7.rst:1891
msgid ""
"Trace hooks may now opt out of receiving the ``line`` and opt into "
"receiving the ``opcode`` events from the interpreter by setting the "
"corresponding new ``f_trace_lines`` and ``f_trace_opcodes`` attributes on"
" the frame being traced. (Contributed by Nick Coghlan in :issue:`31344`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1896
msgid ""
"Fixed some consistency problems with namespace package module attributes."
" Namespace module objects now have an ``__file__`` that is set to "
"``None`` (previously unset), and their ``__spec__.origin`` is also set to"
" ``None`` (previously the string ``\"namespace\"``).  See :issue:`32305`."
"  Also, the namespace module object's ``__spec__.loader`` is set to the "
"same value as ``__loader__`` (previously, the former was set to "
"``None``).  See :issue:`32303`."
msgstr ""

#: ../../whatsnew/3.7.rst:1904
msgid ""
"The :func:`locals` dictionary now displays in the lexical order that "
"variables were defined.  Previously, the order was undefined. "
"(Contributed by Raymond Hettinger in :issue:`32690`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1908
msgid ""
"The :mod:`distutils` ``upload`` command no longer tries to change CR end-"
"of-line characters to CRLF.  This fixes a corruption issue with sdists "
"that ended with a byte equivalent to CR. (Contributed by Bo Bayles in "
":issue:`32304`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1917
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"deprecated in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). This ensures"
" that comprehensions always immediately return a container of the "
"appropriate type (rather than potentially returning a :term:`generator "
"iterator` object), while generator expressions won't attempt to "
"interleave their implicit output with the output from any explicit yield "
"expressions.  In Python 3.7, such expressions emit "
":exc:`DeprecationWarning` when compiled, in Python 3.8 this will be a "
":exc:`SyntaxError`. (Contributed by Serhiy Storchaka in :issue:`10544`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1928
msgid ""
"Returning a subclass of :class:`complex` from :meth:`object.__complex__` "
"is deprecated and will be an error in future Python versions.  This makes"
" ``__complex__()`` consistent with :meth:`object.__int__` and "
":meth:`object.__float__`. (Contributed by Serhiy Storchaka in "
":issue:`28894`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1942
msgid ""
":func:`aifc.openfp` has been deprecated and will be removed in Python "
"3.9. Use :func:`aifc.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1952
msgid ""
"Support for directly ``await``-ing instances of :class:`asyncio.Lock` and"
" other asyncio synchronization primitives has been deprecated.  An "
"asynchronous context manager must be used in order to acquire and release"
" the synchronization resource. (Contributed by Andrew Svetlov in "
":issue:`32253`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1958
msgid ""
"The :meth:`asyncio.Task.current_task` and :meth:`asyncio.Task.all_tasks` "
"methods have been deprecated. (Contributed by Andrew Svetlov in "
":issue:`32250`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1966
msgid ""
"In Python 3.8, the abstract base classes in :mod:`collections.abc` will "
"no longer be exposed in the regular :mod:`collections` module.  This will"
" help create a clearer distinction between the concrete classes and the "
"abstract base classes. (Contributed by Serhiy Storchaka in "
":issue:`25988`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1976
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes"
" the index file when it is not changed.  A deprecation warning is now "
"emitted if the index file is missing and recreated in the ``'r'`` and "
"``'w'`` modes (this will be an error in future Python releases). "
"(Contributed by Serhiy Storchaka in :issue:`28847`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1986
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in :class:`Enum` "
"classes will raise a :exc:`TypeError` (e.g. ``1 in Color``); similarly, "
"attempting to check for non-Flag objects in a :class:`Flag` member will "
"raise :exc:`TypeError` (e.g. ``1 in Perm.RW``); currently, both "
"operations return :const:`False` instead. (Contributed by Ethan Furman in"
" :issue:`33217`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1995 ../../whatsnew/3.8.rst:828
msgid "gettext"
msgstr ""

#: ../../whatsnew/3.7.rst:1997
msgid ""
"Using non-integer value for selecting a plural form in :mod:`gettext` is "
"now deprecated.  It never correctly worked. (Contributed by Serhiy "
"Storchaka in :issue:`28692`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2005
msgid ""
"Methods :meth:`MetaPathFinder.find_module() "
"<importlib.abc.MetaPathFinder.find_module>` (replaced by "
":meth:`MetaPathFinder.find_spec() "
"<importlib.abc.MetaPathFinder.find_spec>`) and "
":meth:`PathEntryFinder.find_loader() "
"<importlib.abc.PathEntryFinder.find_loader>` (replaced by "
":meth:`PathEntryFinder.find_spec() "
"<importlib.abc.PathEntryFinder.find_spec>`) both deprecated in Python 3.4"
" now emit :exc:`DeprecationWarning`. (Contributed by Matthias Bussonnier "
"in :issue:`29576`)"
msgstr ""

#: ../../whatsnew/3.7.rst:2016
msgid ""
"The :class:`importlib.abc.ResourceLoader` ABC has been deprecated in "
"favour of :class:`importlib.abc.ResourceReader`."
msgstr ""

#: ../../whatsnew/3.7.rst:2023
msgid ""
":func:`locale.format` has been deprecated, use "
":meth:`locale.format_string` instead.  (Contributed by Garvit in "
":issue:`10379`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2028
msgid "macpath"
msgstr ""

#: ../../whatsnew/3.7.rst:2030
msgid ""
"The :mod:`macpath` is now deprecated and will be removed in Python 3.8. "
"(Contributed by Chi Hsuan Yen in :issue:`9850`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2037
msgid ""
":mod:`dummy_threading` and :mod:`_dummy_thread` have been deprecated.  It"
" is no longer possible to build Python with threading disabled. Use "
":mod:`threading` instead. (Contributed by Antoine Pitrou in "
":issue:`31370`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2046
msgid ""
"The silent argument value truncation in :func:`socket.htons` and "
":func:`socket.ntohs` has been deprecated.  In future versions of Python, "
"if the passed argument is larger than 16 bits, an exception will be "
"raised. (Contributed by Oren Milman in :issue:`28332`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2055
msgid ""
":func:`ssl.wrap_socket` is deprecated.  Use "
":meth:`ssl.SSLContext.wrap_socket` instead. (Contributed by Christian "
"Heimes in :issue:`28124`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2063
msgid ""
":func:`sunau.openfp` has been deprecated and will be removed in Python "
"3.9. Use :func:`sunau.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2071
msgid ""
"Deprecated :func:`sys.set_coroutine_wrapper` and "
":func:`sys.get_coroutine_wrapper`."
msgstr ""

#: ../../whatsnew/3.7.rst:2074
msgid ""
"The undocumented ``sys.callstats()`` function has been deprecated and "
"will be removed in a future Python version. (Contributed by Victor "
"Stinner in :issue:`28799`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2082
msgid ""
":func:`wave.openfp` has been deprecated and will be removed in Python "
"3.9. Use :func:`wave.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2090
msgid ""
"Function :c:func:`PySlice_GetIndicesEx` is deprecated and replaced with a"
" macro if ``Py_LIMITED_API`` is not set or set to a value in the range "
"between ``0x03050400`` and ``0x03060000`` (not inclusive), or is "
"``0x03060100`` or higher.  (Contributed by Serhiy Storchaka in "
":issue:`27867`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2095
msgid ""
":c:func:`PyOS_AfterFork` has been deprecated.  Use "
":c:func:`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` or "
":c:func:`PyOS_AfterFork_Child()` instead. (Contributed by Antoine Pitrou "
"in :issue:`16500`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2103
msgid "Platform Support Removals"
msgstr ""

#: ../../whatsnew/3.7.rst:2105
msgid "FreeBSD 9 and older are no longer officially supported."
msgstr ""

#: ../../whatsnew/3.7.rst:2106
msgid ""
"For full Unicode support, including within extension modules, \\*nix "
"platforms are now expected to provide at least one of ``C.UTF-8`` (full "
"locale), ``C.utf8`` (full locale) or ``UTF-8`` (``LC_CTYPE``-only locale)"
" as an alternative to the legacy ``ASCII``-based ``C`` locale."
msgstr ""

#: ../../whatsnew/3.7.rst:2110
msgid ""
"OpenSSL 0.9.8 and 1.0.1 are no longer supported, which means building "
"CPython 3.7 with SSL/TLS support on older platforms still using these "
"versions requires custom build options that link to a more recent version"
" of OpenSSL."
msgstr ""

#: ../../whatsnew/3.7.rst:2114
msgid ""
"Notably, this issue affects the Debian 8 (aka \"jessie\") and Ubuntu "
"14.04 (aka \"Trusty\") LTS Linux distributions, as they still use OpenSSL"
" 1.0.1 by default."
msgstr ""

#: ../../whatsnew/3.7.rst:2118
msgid ""
"Debian 9 (\"stretch\") and Ubuntu 16.04 (\"xenial\"), as well as recent "
"releases of other LTS Linux releases (e.g. RHEL/CentOS 7.5, SLES 12-SP3),"
" use OpenSSL 1.0.2 or later, and remain supported in the default build "
"configuration."
msgstr ""

#: ../../whatsnew/3.7.rst:2122
msgid ""
"CPython's own :source:`CI configuration file <.travis.yml>` provides an "
"example of using the SSL :source:`compatibility testing infrastructure "
"<Tools/ssl/multissltests.py>` in CPython's test suite to build and link "
"against OpenSSL 1.1.0 rather than an outdated system provided OpenSSL."
msgstr ""

#: ../../whatsnew/3.7.rst:2132
msgid "The following features and APIs have been removed from Python 3.7:"
msgstr ""

#: ../../whatsnew/3.7.rst:2134
msgid ""
"The ``os.stat_float_times()`` function has been removed. It was "
"introduced in Python 2.3 for backward compatibility with Python 2.2, and "
"was deprecated since Python 3.1."
msgstr ""

#: ../../whatsnew/3.7.rst:2138
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in replacement"
" templates for :func:`re.sub` were deprecated in Python 3.5, and will now"
" cause an error."
msgstr ""

#: ../../whatsnew/3.7.rst:2142
msgid ""
"Removed support of the *exclude* argument in :meth:`tarfile.TarFile.add`."
" It was deprecated in Python 2.7 and 3.2.  Use the *filter* argument "
"instead."
msgstr ""

#: ../../whatsnew/3.7.rst:2145
msgid ""
"The ``splitunc()`` function in the :mod:`ntpath` module was deprecated in"
" Python 3.1, and has now been removed.  Use the "
":func:`~os.path.splitdrive` function instead."
msgstr ""

#: ../../whatsnew/3.7.rst:2149
msgid ""
":func:`collections.namedtuple` no longer supports the *verbose* parameter"
" or ``_source`` attribute which showed the generated source code for the "
"named tuple class.  This was part of an optimization designed to speed-up"
" class creation.  (Contributed by Jelle Zijlstra with further "
"improvements by INADA Naoki, Serhiy Storchaka, and Raymond Hettinger in "
":issue:`28638`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2155
msgid ""
"Functions :func:`bool`, :func:`float`, :func:`list` and :func:`tuple` no "
"longer take keyword arguments.  The first argument of :func:`int` can now"
" be passed only as positional argument."
msgstr ""

#: ../../whatsnew/3.7.rst:2159
msgid ""
"Removed previously deprecated in Python 2.4 classes ``Plist``, ``Dict`` "
"and ``_InternalDict`` in the :mod:`plistlib` module.  Dict values in the "
"result of functions :func:`~plistlib.readPlist` and "
":func:`~plistlib.readPlistFromBytes` are now normal dicts.  You no longer"
" can use attribute access to access items of these dictionaries."
msgstr ""

#: ../../whatsnew/3.7.rst:2165
msgid ""
"The ``asyncio.windows_utils.socketpair()`` function has been removed.  "
"Use the :func:`socket.socketpair` function instead, it is available on "
"all platforms since Python 3.5. ``asyncio.windows_utils.socketpair`` was "
"just an alias to ``socket.socketpair`` on Python 3.5 and newer."
msgstr ""

#: ../../whatsnew/3.7.rst:2171
msgid ""
":mod:`asyncio` no longer exports the :mod:`selectors` and "
":mod:`_overlapped` modules as ``asyncio.selectors`` and "
"``asyncio._overlapped``. Replace ``from asyncio import selectors`` with "
"``import selectors``."
msgstr ""

#: ../../whatsnew/3.7.rst:2176
msgid ""
"Direct instantiation of :class:`ssl.SSLSocket` and :class:`ssl.SSLObject`"
" objects is now prohibited. The constructors were never documented, "
"tested, or designed as public constructors.  Users were supposed to use "
":func:`ssl.wrap_socket` or :class:`ssl.SSLContext`. (Contributed by "
"Christian Heimes in :issue:`32951`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2182
msgid ""
"The unused :mod:`distutils` ``install_misc`` command has been removed. "
"(Contributed by Eric N. Vander Weele in :issue:`29218`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2187
msgid "Module Removals"
msgstr ""

#: ../../whatsnew/3.7.rst:2189
msgid ""
"The ``fpectl`` module has been removed.  It was never enabled by default,"
" never worked correctly on x86-64, and it changed the Python ABI in ways "
"that caused unexpected breakage of C extensions. (Contributed by "
"Nathaniel J. Smith in :issue:`29137`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2196 ../../whatsnew/3.7.rst:2472
msgid "Windows-only Changes"
msgstr ""

#: ../../whatsnew/3.7.rst:2198
msgid ""
"The python launcher, (py.exe), can accept 32 & 64 bit specifiers "
"**without** having to specify a minor version as well. So ``py -3-32`` "
"and ``py -3-64`` become valid as well as ``py -3.7-32``, also the -*m*-64"
" and -*m.n*-64 forms are now accepted to force 64 bit python even if 32 "
"bit would have otherwise been used. If the specified version is not "
"available py.exe will error exit. (Contributed by Steve Barnes in "
":issue:`30291`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2205
msgid ""
"The launcher can be run as ``py -0`` to produce a list of the installed "
"pythons, *with default marked with an asterisk*. Running ``py -0p`` will "
"include the paths. If py is run with a version specifier that cannot be "
"matched it will also print the *short form* list of available specifiers."
" (Contributed by Steve Barnes in :issue:`30362`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2215
msgid "Porting to Python 3.7"
msgstr ""

#: ../../whatsnew/3.7.rst:2222
msgid "Changes in Python Behavior"
msgstr ""

#: ../../whatsnew/3.7.rst:2224
msgid ""
":keyword:`async` and :keyword:`await` names are now reserved keywords. "
"Code using these names as identifiers will now raise a "
":exc:`SyntaxError`. (Contributed by Jelle Zijlstra in :issue:`30406`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2228
msgid ""
":pep:`479` is enabled for all code in Python 3.7, meaning that "
":exc:`StopIteration` exceptions raised directly or indirectly in "
"coroutines and generators are transformed into :exc:`RuntimeError` "
"exceptions. (Contributed by Yury Selivanov in :issue:`32670`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2234
msgid ""
":meth:`object.__aiter__` methods can no longer be declared as "
"asynchronous.  (Contributed by Yury Selivanov in :issue:`31709`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2245
msgid ""
"Python 3.7 now correctly raises a :exc:`SyntaxError`, as a generator "
"expression always needs to be directly inside a set of parentheses and "
"cannot have a comma on either side, and the duplication of the "
"parentheses can be omitted only on calls. (Contributed by Serhiy "
"Storchaka in :issue:`32012` and :issue:`32023`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2251
msgid ""
"When using the :option:`-m` switch, the initial working directory is now "
"added to :data:`sys.path`, rather than an empty string (which dynamically"
" denoted the current working directory at the time of each import). Any "
"programs that are checking for the empty string, or otherwise relying on "
"the previous behaviour, will need to be updated accordingly (e.g. by also"
" checking for ``os.getcwd()`` or ``os.path.dirname(__main__.__file__)``, "
"depending on why the code was checking for the empty string in the first "
"place)."
msgstr ""

#: ../../whatsnew/3.7.rst:2263
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close` now waits until all non-"
"daemon threads complete.  Set the new "
":attr:`socketserver.ThreadingMixIn.block_on_close` class attribute to "
"``False`` to get the pre-3.7 behaviour. (Contributed by Victor Stinner in"
" :issue:`31233` and :issue:`33540`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2269
msgid ""
":meth:`socketserver.ForkingMixIn.server_close` now waits until all child "
"processes complete. Set the new "
":attr:`socketserver.ForkingMixIn.block_on_close` class attribute to "
"``False`` to get the pre-3.7 behaviour. (Contributed by Victor Stinner in"
" :issue:`31151` and :issue:`33540`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2275
msgid ""
"The :func:`locale.localeconv` function now temporarily sets the "
"``LC_CTYPE`` locale to the value of ``LC_NUMERIC`` in some cases. "
"(Contributed by Victor Stinner in :issue:`31900`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2279
msgid ""
":meth:`pkgutil.walk_packages` now raises a :exc:`ValueError` if *path* is"
" a string.  Previously an empty list was returned. (Contributed by Sanyam"
" Khurana in :issue:`24744`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2283
msgid ""
"A format string argument for :meth:`string.Formatter.format` is now :ref"
":`positional-only <positional-only_parameter>`. Passing it as a keyword "
"argument was deprecated in Python 3.5. (Contributed by Serhiy Storchaka "
"in :issue:`29193`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2288
msgid ""
"Attributes :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` and "
":attr:`~http.cookies.Morsel.coded_value` of class "
":class:`http.cookies.Morsel` are now read-only. Assigning to them was "
"deprecated in Python 3.5. Use the :meth:`~http.cookies.Morsel.set` method"
" for setting them. (Contributed by Serhiy Storchaka in :issue:`29192`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2296
msgid ""
"The *mode* argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly-created intermediate-level directories. To set "
"their file permission bits you can set the umask before invoking "
"``makedirs()``. (Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2302
msgid ""
"The :attr:`struct.Struct.format` type is now :class:`str` instead of "
":class:`bytes`. (Contributed by Victor Stinner in :issue:`21071`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2305
msgid ""
":func:`~cgi.parse_multipart` now accepts the *encoding* and *errors* "
"arguments and returns the same results as :class:`~FieldStorage`: for "
"non-file fields, the value associated to a key is a list of strings, not "
"bytes. (Contributed by Pierre Quentel in :issue:`29979`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2311
msgid ""
"Due to internal changes in :mod:`socket`, calling "
":func:`socket.fromshare` on a socket created by :func:`socket.share "
"<socket.socket.share>` in older Python versions is not supported."
msgstr ""

#: ../../whatsnew/3.7.rst:2315
msgid ""
"``repr`` for :exc:`BaseException` has changed to not include the trailing"
" comma.  Most exceptions are affected by this change. (Contributed by "
"Serhiy Storchaka in :issue:`30399`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2319
msgid ""
"``repr`` for :class:`datetime.timedelta` has changed to include the "
"keyword arguments in the output. (Contributed by Utkarsh Upadhyay in "
":issue:`30302`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2322
msgid ""
"Because :func:`shutil.rmtree` is now implemented using the "
":func:`os.scandir` function, the user specified handler *onerror* is now "
"called with the first argument ``os.scandir`` instead of ``os.listdir`` "
"when listing the directory is failed."
msgstr ""

#: ../../whatsnew/3.7.rst:2327
msgid ""
"Support for nested sets and set operations in regular expressions as in "
"`Unicode Technical Standard #18`_ might be added in the future.  This "
"would change the syntax.  To facilitate this future change a "
":exc:`FutureWarning` will be raised in ambiguous cases for the time "
"being. That include sets starting with a literal ``'['`` or containing "
"literal character sequences ``'--'``, ``'&&'``, ``'~~'``, and ``'||'``.  "
"To avoid a warning, escape them with a backslash. (Contributed by Serhiy "
"Storchaka in :issue:`30349`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2338
msgid ""
"The result of splitting a string on a :mod:`regular expression <re>` that"
" could match an empty string has been changed.  For example splitting on "
"``r'\\s*'`` will now split not only on whitespaces as it did previously, "
"but also on empty strings before all non-whitespace characters and just "
"before the end of the string. The previous behavior can be restored by "
"changing the pattern to ``r'\\s+'``.  A :exc:`FutureWarning` was emitted "
"for such patterns since Python 3.5."
msgstr ""

#: ../../whatsnew/3.7.rst:2347
msgid ""
"For patterns that match both empty and non-empty strings, the result of "
"searching for all matches may also be changed in other cases.  For "
"example in the string ``'a\\n\\n'``, the pattern ``r'(?m)^\\s*?$'`` will "
"not only match empty strings at positions 2 and 3, but also the string "
"``'\\n'`` at positions 2--3.  To match only blank lines, the pattern "
"should be rewritten as ``r'(?m)^[^\\S\\n]*$'``."
msgstr ""

#: ../../whatsnew/3.7.rst:2354
msgid ""
":func:`re.sub()` now replaces empty matches adjacent to a previous non-"
"empty match.  For example ``re.sub('x*', '-', 'abxd')`` returns now "
"``'-a-b--d-'`` instead of ``'-a-b-d-'`` (the first minus between 'b' and "
"'d' replaces 'x', and the second minus replaces an empty string between "
"'x' and 'd')."
msgstr ""

#: ../../whatsnew/3.7.rst:2360
msgid "(Contributed by Serhiy Storchaka in :issue:`25054` and :issue:`32308`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2362
msgid ""
"Change :func:`re.escape` to only escape regex special characters instead "
"of escaping all characters other than ASCII letters, numbers, and "
"``'_'``. (Contributed by Serhiy Storchaka in :issue:`29995`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2366
msgid ""
":class:`tracemalloc.Traceback` frames are now sorted from oldest to most "
"recent to be more consistent with :mod:`traceback`. (Contributed by Jesse"
" Bakker in :issue:`32121`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2370
msgid ""
"On OSes that support :const:`socket.SOCK_NONBLOCK` or "
":const:`socket.SOCK_CLOEXEC` bit flags, the :attr:`socket.type "
"<socket.socket.type>` no longer has them applied. Therefore, checks like "
"``if sock.type == socket.SOCK_STREAM`` work as expected on all platforms."
" (Contributed by Yury Selivanov in :issue:`32331`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2377
msgid ""
"On Windows the default for the *close_fds* argument of "
":class:`subprocess.Popen` was changed from :const:`False` to "
":const:`True` when redirecting the standard handles. If you previously "
"depended on handles being inherited when using :class:`subprocess.Popen` "
"with standard io redirection, you will have to pass ``close_fds=False`` "
"to preserve the previous behaviour, or use "
":attr:`STARTUPINFO.lpAttributeList "
"<subprocess.STARTUPINFO.lpAttributeList>`."
msgstr ""

#: ../../whatsnew/3.7.rst:2385
msgid ""
":meth:`importlib.machinery.PathFinder.invalidate_caches` -- which "
"implicitly affects :func:`importlib.invalidate_caches` -- now deletes "
"entries in :data:`sys.path_importer_cache` which are set to ``None``. "
"(Contributed by Brett Cannon in :issue:`33169`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2390
msgid ""
"In :mod:`asyncio`, :meth:`loop.sock_recv() <asyncio.loop.sock_recv>`, "
":meth:`loop.sock_sendall() <asyncio.loop.sock_sendall>`, "
":meth:`loop.sock_accept() <asyncio.loop.sock_accept>`, "
":meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>`, "
":meth:`loop.getnameinfo() <asyncio.loop.getnameinfo>` have been changed "
"to be proper coroutine methods to match their documentation.  Previously,"
" these methods returned :class:`asyncio.Future` instances. (Contributed "
"by Yury Selivanov in :issue:`32327`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2401
msgid ""
":attr:`asyncio.Server.sockets` now returns a copy of the internal list of"
" server sockets, instead of returning it directly. (Contributed by Yury "
"Selivanov in :issue:`32662`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2405
msgid ""
":attr:`Struct.format <struct.Struct.format>` is now a :class:`str` "
"instance instead of a :class:`bytes` instance. (Contributed by Victor "
"Stinner in :issue:`21071`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2409
msgid ""
":mod:`argparse` subparsers can now be made mandatory by passing "
"``required=True`` to :meth:`ArgumentParser.add_subparsers() "
"<argparse.ArgumentParser.add_subparsers>`. (Contributed by Anthony "
"Sottile in :issue:`26510`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2413
msgid ""
":meth:`ast.literal_eval()` is now stricter.  Addition and subtraction of "
"arbitrary numbers are no longer allowed. (Contributed by Serhiy Storchaka"
" in :issue:`31778`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2417
msgid ""
":meth:`Calendar.itermonthdates <calendar.Calendar.itermonthdates>` will "
"now consistently raise an exception when a date falls outside of the "
"``0001-01-01`` through ``9999-12-31`` range.  To support applications "
"that cannot tolerate such exceptions, the new "
":meth:`Calendar.itermonthdays3 <calendar.Calendar.itermonthdays3>` and "
":meth:`Calendar.itermonthdays4 <calendar.Calendar.itermonthdays4>` can be"
" used. The new methods return tuples and are not restricted by the range "
"supported by :class:`datetime.date`. (Contributed by Alexander Belopolsky"
" in :issue:`28292`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2427
msgid ""
":class:`collections.ChainMap` now preserves the order of the underlying "
"mappings.  (Contributed by Raymond Hettinger in :issue:`32792`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2430
msgid ""
"The ``submit()`` method of :class:`concurrent.futures.ThreadPoolExecutor`"
" and :class:`concurrent.futures.ProcessPoolExecutor` now raises a "
":exc:`RuntimeError` if called during interpreter shutdown. (Contributed "
"by Mark Nemec in :issue:`33097`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2435
msgid ""
"The :class:`configparser.ConfigParser` constructor now uses "
"``read_dict()`` to process the default values, making its behavior "
"consistent with the rest of the parser.  Non-string keys and values in "
"the defaults dictionary are now being implicitly converted to strings. "
"(Contributed by James Tocknell in :issue:`23835`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2441
msgid ""
"Several undocumented internal imports were removed. One example is that "
"``os.errno`` is no longer available; use ``import errno`` directly "
"instead. Note that such undocumented internal imports may be removed any "
"time without notice, even in micro version releases."
msgstr ""

#: ../../whatsnew/3.7.rst:2451
msgid ""
"The function :c:func:`PySlice_GetIndicesEx` is considered unsafe for "
"resizable sequences.  If the slice indices are not instances of "
":class:`int`, but objects that implement the :meth:`!__index__` method, "
"the sequence can be resized after passing its length to "
":c:func:`!PySlice_GetIndicesEx`.  This can lead to returning indices out "
"of the length of the sequence.  For avoiding possible problems use new "
"functions :c:func:`PySlice_Unpack` and :c:func:`PySlice_AdjustIndices`. "
"(Contributed by Serhiy Storchaka in :issue:`27867`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2464
msgid ""
"There are two new opcodes: :opcode:`LOAD_METHOD` and "
":opcode:`CALL_METHOD`. (Contributed by Yury Selivanov and INADA Naoki in "
":issue:`26110`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2467
msgid ""
"The :opcode:`STORE_ANNOTATION` opcode has been removed. (Contributed by "
"Mark Shannon in :issue:`32550`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2474
msgid ""
"The file used to override :data:`sys.path` is now called ``<python-"
"executable>._pth`` instead of ``'sys.path'``. See :ref:`finding_modules` "
"for more information. (Contributed by Steve Dower in :issue:`28137`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2481
msgid "Other CPython implementation changes"
msgstr ""

#: ../../whatsnew/3.7.rst:2483
msgid ""
"In preparation for potential future changes to the public CPython runtime"
" initialization API (see :pep:`432` for an initial, but somewhat "
"outdated, draft), CPython's internal startup and configuration management"
" logic has been significantly refactored. While these updates are "
"intended to be entirely transparent to both embedding applications and "
"users of the regular CPython CLI, they're being mentioned here as the "
"refactoring changes the internal order of various operations during "
"interpreter startup, and hence may uncover previously latent defects, "
"either in embedding applications, or in CPython itself. (Initially "
"contributed by Nick Coghlan and Eric Snow as part of :issue:`22257`, and "
"further updated by Nick, Eric, and Victor Stinner in a number of other "
"issues). Some known details affected:"
msgstr ""

#: ../../whatsnew/3.7.rst:2496
msgid ""
":c:func:`PySys_AddWarnOptionUnicode` is not currently usable by embedding"
" applications due to the requirement to create a Unicode object prior to "
"calling `Py_Initialize`. Use :c:func:`PySys_AddWarnOption` instead."
msgstr ""

#: ../../whatsnew/3.7.rst:2500
msgid ""
"warnings filters added by an embedding application with "
":c:func:`PySys_AddWarnOption` should now more consistently take "
"precedence over the default filters set by the interpreter"
msgstr ""

#: ../../whatsnew/3.7.rst:2504
msgid ""
"Due to changes in the way the default warnings filters are configured, "
"setting :c:data:`Py_BytesWarningFlag` to a value greater than one is no "
"longer sufficient to both emit :exc:`BytesWarning` messages and have them"
" converted to exceptions.  Instead, the flag must be set (to cause the "
"warnings to be emitted in the first place), and an explicit "
"``error::BytesWarning`` warnings filter added to convert them to "
"exceptions."
msgstr ""

#: ../../whatsnew/3.7.rst:2511
msgid ""
"Due to a change in the way docstrings are handled by the compiler, the "
"implicit ``return None`` in a function body consisting solely of a "
"docstring is now marked as occurring on the same line as the docstring, "
"not on the function's header line."
msgstr ""

#: ../../whatsnew/3.7.rst:2516
msgid ""
"The current exception state has been moved from the frame object to the "
"co-routine. This simplified the interpreter and fixed a couple of obscure"
" bugs caused by having swap exception state when entering or exiting a "
"generator. (Contributed by Mark Shannon in :issue:`25612`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2522
msgid "Notable changes in Python 3.7.1"
msgstr ""

#: ../../whatsnew/3.7.rst:2524
msgid ""
"Starting in 3.7.1, :c:func:`Py_Initialize` now consistently reads and "
"respects all of the same environment settings as :c:func:`Py_Main` (in "
"earlier Python versions, it respected an ill-defined subset of those "
"environment variables, while in Python 3.7.0 it didn't read any of them "
"due to :issue:`34247`). If this behavior is unwanted, set "
":c:data:`Py_IgnoreEnvironmentFlag` to 1 before calling "
":c:func:`Py_Initialize`."
msgstr ""

#: ../../whatsnew/3.7.rst:2531
msgid ""
"In 3.7.1 the C API for Context Variables :ref:`was updated "
"<contextvarsobjects_pointertype_change>` to use :c:type:`PyObject` "
"pointers.  See also :issue:`34762`."
msgstr ""

#: ../../whatsnew/3.7.rst:2535
msgid ""
"In 3.7.1 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` "
"token when provided with input that does not have a trailing new line.  "
"This behavior now matches what the C tokenizer does internally. "
"(Contributed by Ammar Askar in :issue:`33899`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2541
msgid "Notable changes in Python 3.7.2"
msgstr ""

#: ../../whatsnew/3.7.rst:2543
msgid ""
"In 3.7.2, :mod:`venv` on Windows no longer copies the original binaries, "
"but creates redirector scripts named ``python.exe`` and ``pythonw.exe`` "
"instead. This resolves a long standing issue where all virtual "
"environments would have to be upgraded or recreated with each Python "
"update. However, note that this release will still require recreation of "
"virtual environments in order to get the new scripts."
msgstr ""

#: ../../whatsnew/3.7.rst:2551
msgid "Notable changes in Python 3.7.6"
msgstr ""

#: ../../whatsnew/3.7.rst:2561
msgid "Notable changes in Python 3.7.10"
msgstr ""

#: ../../whatsnew/3.8.rst:3
msgid "What's New In Python 3.8"
msgstr ""

#: ../../whatsnew/3.8.rst:47
msgid ""
"This article explains the new features in Python 3.8, compared to 3.7. "
"For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../../whatsnew/3.8.rst:50
msgid "Python 3.8 was released on October 14th, 2019."
msgstr ""

#: ../../whatsnew/3.8.rst:76
msgid "Assignment expressions"
msgstr ""

#: ../../whatsnew/3.8.rst:78
msgid ""
"There is new syntax ``:=`` that assigns values to variables as part of a "
"larger expression. It is affectionately known as \"the walrus operator\" "
"due to its resemblance to `the eyes and tusks of a walrus "
"<https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168).jpg>`_."
msgstr ""

#: ../../whatsnew/3.8.rst:83
msgid ""
"In this example, the assignment expression helps avoid calling "
":func:`len` twice::"
msgstr ""

#: ../../whatsnew/3.8.rst:89
msgid ""
"A similar benefit arises during regular expression matching where match "
"objects are needed twice, once to test whether a match occurred and "
"another to extract a subgroup::"
msgstr ""

#: ../../whatsnew/3.8.rst:97
msgid ""
"The operator is also useful with while-loops that compute a value to test"
" loop termination and then need that same value again in the body of the "
"loop::"
msgstr ""

#: ../../whatsnew/3.8.rst:105
msgid ""
"Another motivating use case arises in list comprehensions where a value "
"computed in a filtering condition is also needed in the expression body::"
msgstr ""

#: ../../whatsnew/3.8.rst:112
msgid ""
"Try to limit use of the walrus operator to clean cases that reduce "
"complexity and improve readability."
msgstr ""

#: ../../whatsnew/3.8.rst:115
msgid "See :pep:`572` for a full description."
msgstr ""

#: ../../whatsnew/3.8.rst:117
msgid "(Contributed by Emily Morehouse in :issue:`35224`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:121
msgid "Positional-only parameters"
msgstr ""

#: ../../whatsnew/3.8.rst:123
msgid ""
"There is a new function parameter syntax ``/`` to indicate that some "
"function parameters must be specified positionally and cannot be used as "
"keyword arguments.  This is the same notation shown by ``help()`` for C "
"functions annotated with Larry Hastings' `Argument Clinic "
"<https://docs.python.org/3/howto/clinic.html>`_ tool."
msgstr ""

#: ../../whatsnew/3.8.rst:129
msgid ""
"In the following example, parameters *a* and *b* are positional-only, "
"while *c* or *d* can be positional or keyword, and *e* or *f* are "
"required to be keywords::"
msgstr ""

#: ../../whatsnew/3.8.rst:136
msgid "The following is a valid call::"
msgstr ""

#: ../../whatsnew/3.8.rst:140
msgid "However, these are invalid calls::"
msgstr ""

#: ../../whatsnew/3.8.rst:145
msgid ""
"One use case for this notation is that it allows pure Python functions to"
" fully emulate behaviors of existing C coded functions.  For example, the"
" built-in :func:`divmod` function does not accept keyword arguments::"
msgstr ""

#: ../../whatsnew/3.8.rst:153
msgid ""
"Another use case is to preclude keyword arguments when the parameter name"
" is not helpful.  For example, the builtin :func:`len` function has the "
"signature ``len(obj, /)``.  This precludes awkward calls such as::"
msgstr ""

#: ../../whatsnew/3.8.rst:159
msgid ""
"A further benefit of marking a parameter as positional-only is that it "
"allows the parameter name to be changed in the future without risk of "
"breaking client code.  For example, in the :mod:`statistics` module, the "
"parameter name *dist* may be changed in the future.  This was made "
"possible with the following function specification::"
msgstr ""

#: ../../whatsnew/3.8.rst:168
msgid ""
"Since the parameters to the left of ``/`` are not exposed as possible "
"keywords, the parameters names remain available for use in ``**kwargs``::"
msgstr ""

#: ../../whatsnew/3.8.rst:177
msgid ""
"This greatly simplifies the implementation of functions and methods that "
"need to accept arbitrary keyword arguments.  For example, here is an "
"excerpt from code in the :mod:`collections` module::"
msgstr ""

#: ../../whatsnew/3.8.rst:186
msgid "See :pep:`570` for a full description."
msgstr ""

#: ../../whatsnew/3.8.rst:188
msgid "(Contributed by Pablo Galindo in :issue:`36540`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:194
msgid "Parallel filesystem cache for compiled bytecode files"
msgstr ""

#: ../../whatsnew/3.8.rst:196
msgid ""
"The new :envvar:`PYTHONPYCACHEPREFIX` setting (also available as "
":option:`-X` ``pycache_prefix``) configures the implicit bytecode cache "
"to use a separate parallel filesystem tree, rather than the default "
"``__pycache__`` subdirectories within each source directory."
msgstr ""

#: ../../whatsnew/3.8.rst:202
msgid ""
"The location of the cache is reported in :data:`sys.pycache_prefix` "
"(:const:`None` indicates the default location in ``__pycache__`` "
"subdirectories)."
msgstr ""

#: ../../whatsnew/3.8.rst:206
msgid "(Contributed by Carl Meyer in :issue:`33499`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:210
msgid "Debug build uses the same ABI as release build"
msgstr ""

#: ../../whatsnew/3.8.rst:212
msgid ""
"Python now uses the same ABI whether it's built in release or debug mode."
" On Unix, when Python is built in debug mode, it is now possible to load "
"C extensions built in release mode and C extensions built using the "
"stable ABI."
msgstr ""

#: ../../whatsnew/3.8.rst:216
msgid ""
"Release builds and debug builds are now ABI compatible: defining the "
"``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS`` macro, which "
"introduces the only ABI incompatibility. The ``Py_TRACE_REFS`` macro, "
"which adds the :func:`sys.getobjects` function and the "
":envvar:`PYTHONDUMPREFS` environment variable, can be set using the new "
"``./configure --with-trace-refs`` build option. (Contributed by Victor "
"Stinner in :issue:`36465`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:224
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android"
" and Cygwin. It is now possible for a statically linked Python to load a "
"C extension built using a shared library Python. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:231
msgid ""
"On Unix, when Python is built in debug mode, import now also looks for C "
"extensions compiled in release mode and for C extensions compiled with "
"the stable ABI. (Contributed by Victor Stinner in :issue:`36722`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:236
msgid ""
"To embed Python into an application, a new ``--embed`` option must be "
"passed to ``python3-config --libs --embed`` to get ``-lpython3.8`` (link "
"the application to libpython). To support both 3.8 and older, try "
"``python3-config --libs --embed`` first and fallback to ``python3-config "
"--libs`` (without ``--embed``) if the previous command fails."
msgstr ""

#: ../../whatsnew/3.8.rst:242
msgid ""
"Add a pkg-config ``python-3.8-embed`` module to embed Python into an "
"application: ``pkg-config python-3.8-embed --libs`` includes "
"``-lpython3.8``. To support both 3.8 and older, try ``pkg-config "
"python-X.Y-embed --libs`` first and fallback to ``pkg-config python-X.Y "
"--libs`` (without ``--embed``) if the previous command fails (replace "
"``X.Y`` with the Python version)."
msgstr ""

#: ../../whatsnew/3.8.rst:248
msgid ""
"On the other hand, ``pkg-config python3.8 --libs`` no longer contains "
"``-lpython3.8``. C extensions must not be linked to libpython (except on "
"Android and Cygwin, whose cases are handled by the script); this change "
"is backward incompatible on purpose. (Contributed by Victor Stinner in "
":issue:`36721`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:256
msgid "f-strings support ``=`` for self-documenting expressions and debugging"
msgstr ""

#: ../../whatsnew/3.8.rst:258
msgid ""
"Added an ``=`` specifier to :term:`f-string`\\s. An f-string such as "
"``f'{expr=}'`` will expand to the text of the expression, an equal sign, "
"then the representation of the evaluated expression.  For example:"
msgstr ""

#: ../../whatsnew/3.8.rst:267
msgid ""
"The usual :ref:`f-string format specifiers <f-strings>` allow more "
"control over how the result of the expression is displayed::"
msgstr ""

#: ../../whatsnew/3.8.rst:274
msgid ""
"The ``=`` specifier will display the whole expression so that "
"calculations can be shown::"
msgstr ""

#: ../../whatsnew/3.8.rst:280
msgid "(Contributed by Eric V. Smith and Larry Hastings in :issue:`36817`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:284
msgid "PEP 578: Python Runtime Audit Hooks"
msgstr ""

#: ../../whatsnew/3.8.rst:286
msgid ""
"The PEP adds an Audit Hook and Verified Open Hook. Both are available "
"from Python and native code, allowing applications and frameworks written"
" in pure Python code to take advantage of extra notifications, while also"
" allowing embedders or system administrators to deploy builds of Python "
"where auditing is always enabled."
msgstr ""

#: ../../whatsnew/3.8.rst:292
msgid "See :pep:`578` for full details."
msgstr ""

#: ../../whatsnew/3.8.rst:296
msgid "PEP 587: Python Initialization Configuration"
msgstr ""

#: ../../whatsnew/3.8.rst:298
msgid ""
"The :pep:`587` adds a new C API to configure the Python Initialization "
"providing finer control on the whole configuration and better error "
"reporting."
msgstr ""

#: ../../whatsnew/3.8.rst:301
msgid "New structures:"
msgstr ""

#: ../../whatsnew/3.8.rst:303
msgid ":c:type:`PyConfig`"
msgstr ""

#: ../../whatsnew/3.8.rst:304
msgid ":c:type:`PyPreConfig`"
msgstr ""

#: ../../whatsnew/3.8.rst:305
msgid ":c:type:`PyStatus`"
msgstr ""

#: ../../whatsnew/3.8.rst:306
msgid ":c:type:`PyWideStringList`"
msgstr ""

#: ../../whatsnew/3.8.rst:310
msgid ":c:func:`PyConfig_Clear`"
msgstr ""

#: ../../whatsnew/3.8.rst:311
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ""

#: ../../whatsnew/3.8.rst:312
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ""

#: ../../whatsnew/3.8.rst:313
msgid ":c:func:`PyConfig_Read`"
msgstr ""

#: ../../whatsnew/3.8.rst:314
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ""

#: ../../whatsnew/3.8.rst:315
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ""

#: ../../whatsnew/3.8.rst:316
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ""

#: ../../whatsnew/3.8.rst:317
msgid ":c:func:`PyConfig_SetString`"
msgstr ""

#: ../../whatsnew/3.8.rst:318
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ""

#: ../../whatsnew/3.8.rst:319
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ""

#: ../../whatsnew/3.8.rst:320
msgid ":c:func:`PyStatus_Error`"
msgstr ""

#: ../../whatsnew/3.8.rst:321
msgid ":c:func:`PyStatus_Exception`"
msgstr ""

#: ../../whatsnew/3.8.rst:322
msgid ":c:func:`PyStatus_Exit`"
msgstr ""

#: ../../whatsnew/3.8.rst:323
msgid ":c:func:`PyStatus_IsError`"
msgstr ""

#: ../../whatsnew/3.8.rst:324
msgid ":c:func:`PyStatus_IsExit`"
msgstr ""

#: ../../whatsnew/3.8.rst:325
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ""

#: ../../whatsnew/3.8.rst:326
msgid ":c:func:`PyStatus_Ok`"
msgstr ""

#: ../../whatsnew/3.8.rst:327
msgid ":c:func:`PyWideStringList_Append`"
msgstr ""

#: ../../whatsnew/3.8.rst:328
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ""

#: ../../whatsnew/3.8.rst:329
msgid ":c:func:`Py_BytesMain`"
msgstr ""

#: ../../whatsnew/3.8.rst:330
msgid ":c:func:`Py_ExitStatusException`"
msgstr ""

#: ../../whatsnew/3.8.rst:331
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ""

#: ../../whatsnew/3.8.rst:332
msgid ":c:func:`Py_PreInitialize`"
msgstr ""

#: ../../whatsnew/3.8.rst:333
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ""

#: ../../whatsnew/3.8.rst:334
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ""

#: ../../whatsnew/3.8.rst:335
msgid ":c:func:`Py_RunMain`"
msgstr ""

#: ../../whatsnew/3.8.rst:337
msgid ""
"This PEP also adds ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` "
"type) and ``PyInterpreterState.config`` (:c:type:`PyConfig` type) fields "
"to these internal structures. ``PyInterpreterState.config`` becomes the "
"new reference configuration, replacing global configuration variables and"
" other private variables."
msgstr ""

#: ../../whatsnew/3.8.rst:343
msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for the "
"documentation."
msgstr ""

#: ../../whatsnew/3.8.rst:346
msgid "See :pep:`587` for a full description."
msgstr ""

#: ../../whatsnew/3.8.rst:348
msgid "(Contributed by Victor Stinner in :issue:`36763`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:352
msgid "Vectorcall: a fast calling protocol for CPython"
msgstr ""

#: ../../whatsnew/3.8.rst:354
msgid ""
"The \"vectorcall\" protocol is added to the Python/C API. It is meant to "
"formalize existing optimizations which were already done for various "
"classes. Any extension type implementing a callable can use this "
"protocol."
msgstr ""

#: ../../whatsnew/3.8.rst:359
msgid ""
"This is currently provisional. The aim is to make it fully public in "
"Python 3.9."
msgstr ""

#: ../../whatsnew/3.8.rst:362
msgid "See :pep:`590` for a full description."
msgstr ""

#: ../../whatsnew/3.8.rst:364
msgid "(Contributed by Jeroen Demeyer and Mark Shannon in :issue:`36974`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:368
msgid "Pickle protocol 5 with out-of-band data buffers"
msgstr ""

#: ../../whatsnew/3.8.rst:370
msgid ""
"When :mod:`pickle` is used to transfer large data between Python "
"processes in order to take advantage of multi-core or multi-machine "
"processing, it is important to optimize the transfer by reducing memory "
"copies, and possibly by applying custom techniques such as data-dependent"
" compression."
msgstr ""

#: ../../whatsnew/3.8.rst:375
msgid ""
"The :mod:`pickle` protocol 5 introduces support for out-of-band buffers "
"where :pep:`3118`-compatible data can be transmitted separately from the "
"main pickle stream, at the discretion of the communication layer."
msgstr ""

#: ../../whatsnew/3.8.rst:379
msgid "See :pep:`574` for a full description."
msgstr ""

#: ../../whatsnew/3.8.rst:381
msgid "(Contributed by Antoine Pitrou in :issue:`36785`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:387
msgid ""
"A :keyword:`continue` statement was illegal in the :keyword:`finally` "
"clause due to a problem with the implementation.  In Python 3.8 this "
"restriction was lifted. (Contributed by Serhiy Storchaka in "
":issue:`32489`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:392
msgid ""
"The :class:`bool`, :class:`int`, and :class:`fractions.Fraction` types "
"now have an :meth:`~int.as_integer_ratio` method like that found in "
":class:`float` and :class:`decimal.Decimal`.  This minor API extension "
"makes it possible to write ``numerator, denominator = "
"x.as_integer_ratio()`` and have it work across multiple numeric types. "
"(Contributed by Lisa Roach in :issue:`33073` and Raymond Hettinger in "
":issue:`37819`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:400
msgid ""
"Constructors of :class:`int`, :class:`float` and :class:`complex` will "
"now use the :meth:`~object.__index__` special method, if available and "
"the corresponding method :meth:`~object.__int__`, "
":meth:`~object.__float__` or :meth:`~object.__complex__` is not "
"available. (Contributed by Serhiy Storchaka in :issue:`20092`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:406
msgid ""
"Added support of ``\\N{name}`` escapes in :mod:`regular expressions "
"<re>`::"
msgstr ""

#: ../../whatsnew/3.8.rst:413
msgid "(Contributed by Jonathan Eunice and Serhiy Storchaka in :issue:`30688`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:415
msgid ""
"Dict and dictviews are now iterable in reversed insertion order using "
":func:`reversed`. (Contributed by R√©mi Lapeyre in :issue:`33462`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:418
msgid ""
"The syntax allowed for keyword names in function calls was further "
"restricted. In particular, ``f((keyword)=arg)`` is no longer allowed. It "
"was never intended to permit more than a bare name on the left-hand side "
"of a keyword argument assignment term. (Contributed by Benjamin Peterson "
"in :issue:`34641`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:424
msgid ""
"Generalized iterable unpacking in :keyword:`yield` and :keyword:`return` "
"statements no longer requires enclosing parentheses. This brings the "
"*yield* and *return* syntax into better agreement with normal assignment "
"syntax::"
msgstr ""

#: ../../whatsnew/3.8.rst:436
msgid "(Contributed by David Cuthbert and Jordan Chapman in :issue:`32117`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:438
msgid ""
"When a comma is missed in code such as ``[(10, 20) (30, 40)]``, the "
"compiler displays a :exc:`SyntaxWarning` with a helpful suggestion. This "
"improves on just having a :exc:`TypeError` indicating that the first "
"tuple was not callable.  (Contributed by Serhiy Storchaka in "
":issue:`15248`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:444
msgid ""
"Arithmetic operations between subclasses of :class:`datetime.date` or "
":class:`datetime.datetime` and :class:`datetime.timedelta` objects now "
"return an instance of the subclass, rather than the base class. This also"
" affects the return type of operations whose implementation (directly or "
"indirectly) uses :class:`datetime.timedelta` arithmetic, such as "
":meth:`~datetime.datetime.astimezone`. (Contributed by Paul Ganssle in "
":issue:`32417`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:452
msgid ""
"When the Python interpreter is interrupted by Ctrl-C (SIGINT) and the "
"resulting :exc:`KeyboardInterrupt` exception is not caught, the Python "
"process now exits via a SIGINT signal or with the correct exit code such "
"that the calling process can detect that it died due to a Ctrl-C.  Shells"
" on POSIX and Windows use this to properly terminate scripts in "
"interactive sessions. (Contributed by Google via Gregory P. Smith in "
":issue:`1054041`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:459
msgid ""
"Some advanced styles of programming require updating the "
":class:`types.CodeType` object for an existing function.  Since code "
"objects are immutable, a new code object needs to be created, one that is"
" modeled on the existing code object.  With 19 parameters, this was "
"somewhat tedious.  Now, the new ``replace()`` method makes it possible to"
" create a clone with a few altered parameters."
msgstr ""

#: ../../whatsnew/3.8.rst:466
msgid ""
"Here's an example that alters the :func:`statistics.mean` function to "
"prevent the *data* parameter from being used as a keyword argument::"
msgstr ""

#: ../../whatsnew/3.8.rst:478
msgid "(Contributed by Victor Stinner in :issue:`37032`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:480
msgid ""
"For integers, the three-argument form of the :func:`pow` function now "
"permits the exponent to be negative in the case where the base is "
"relatively prime to the modulus. It then computes a modular inverse to "
"the base when the exponent is ``-1``, and a suitable power of that "
"inverse for other negative exponents.  For example, to compute the "
"`modular multiplicative inverse "
"<https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ of 38 "
"modulo 137, write::"
msgstr ""

#: ../../whatsnew/3.8.rst:494
msgid ""
"Modular inverses arise in the solution of `linear Diophantine equations "
"<https://en.wikipedia.org/wiki/Diophantine_equation>`_. For example, to "
"find integer solutions for ``4258ùë• + 147ùë¶ = 369``, first rewrite as "
"``4258ùë• ‚â° 369 (mod 147)`` then solve:"
msgstr ""

#: ../../whatsnew/3.8.rst:504
msgid "(Contributed by Mark Dickinson in :issue:`36027`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:506
msgid ""
"Dict comprehensions have been synced-up with dict literals so that the "
"key is computed first and the value second::"
msgstr ""

#: ../../whatsnew/3.8.rst:521
msgid ""
"The guaranteed execution order is helpful with assignment expressions "
"because variables assigned in the key expression will be available in the"
" value expression::"
msgstr ""

#: ../../whatsnew/3.8.rst:531
msgid "(Contributed by J√∂rn Heissler in :issue:`35224`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:533
msgid ""
"The :meth:`object.__reduce__` method can now return a tuple from two to "
"six elements long. Formerly, five was the limit.  The new, optional sixth"
" element is a callable with a ``(obj, state)`` signature.  This allows "
"the direct control over the state-updating behavior of a specific object."
"  If not *None*, this callable will have priority over the object's "
":meth:`~__setstate__` method. (Contributed by Pierre Glaser and Olivier "
"Grisel in :issue:`35900`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:544
msgid ""
"The new :mod:`importlib.metadata` module provides (provisional) support "
"for reading metadata from third-party packages.  For example, it can "
"extract an installed package's version number, list of entry points, and "
"more::"
msgstr ""

#: ../../whatsnew/3.8.rst:563
msgid "(Contributed by Barry Warsaw and Jason R. Coombs in :issue:`34632`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:572
msgid ""
"AST nodes now have ``end_lineno`` and ``end_col_offset`` attributes, "
"which give the precise location of the end of the node.  (This only "
"applies to nodes that have ``lineno`` and ``col_offset`` attributes.)"
msgstr ""

#: ../../whatsnew/3.8.rst:576
msgid ""
"New function :func:`ast.get_source_segment` returns the source code for a"
" specific AST node."
msgstr ""

#: ../../whatsnew/3.8.rst:579
msgid "(Contributed by Ivan Levkivskyi in :issue:`33416`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:581
msgid "The :func:`ast.parse` function has some new flags:"
msgstr ""

#: ../../whatsnew/3.8.rst:583
msgid ""
"``type_comments=True`` causes it to return the text of :pep:`484` and "
":pep:`526` type comments associated with certain AST nodes;"
msgstr ""

#: ../../whatsnew/3.8.rst:586
msgid ""
"``mode='func_type'`` can be used to parse :pep:`484` \"signature type "
"comments\" (returned for function definition AST nodes);"
msgstr ""

#: ../../whatsnew/3.8.rst:589
msgid ""
"``feature_version=(3, N)`` allows specifying an earlier Python 3 version."
"  For example, ``feature_version=(3, 4)`` will treat :keyword:`async` and"
" :keyword:`await` as non-reserved words."
msgstr ""

#: ../../whatsnew/3.8.rst:593
msgid "(Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:599
msgid ""
":func:`asyncio.run` has graduated from the provisional to stable API. "
"This function can be used to execute a :term:`coroutine` and return the "
"result while automatically managing the event loop. For example::"
msgstr ""

#: ../../whatsnew/3.8.rst:611
msgid "This is *roughly* equivalent to::"
msgstr ""

#: ../../whatsnew/3.8.rst:628
msgid ""
"The actual implementation is significantly more complex. Thus, "
":func:`asyncio.run` should be the preferred way of running asyncio "
"programs."
msgstr ""

#: ../../whatsnew/3.8.rst:631
msgid "(Contributed by Yury Selivanov in :issue:`32314`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:633
msgid ""
"Running ``python -m asyncio`` launches a natively async REPL.  This "
"allows rapid experimentation with code that has a top-level "
":keyword:`await`.  There is no longer a need to directly call "
"``asyncio.run()`` which would spawn a new event loop on every invocation:"
msgstr ""

#: ../../whatsnew/3.8.rst:648
msgid "(Contributed by Yury Selivanov in :issue:`37028`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:650 ../../whatsnew/3.8.rst:1966
msgid ""
"The exception :class:`asyncio.CancelledError` now inherits from "
":class:`BaseException` rather than :class:`Exception` and no longer "
"inherits from :class:`concurrent.futures.CancelledError`. (Contributed by"
" Yury Selivanov in :issue:`32528`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:655
msgid ""
"On Windows, the default event loop is now "
":class:`~asyncio.ProactorEventLoop`. (Contributed by Victor Stinner in "
":issue:`34687`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:658
msgid ""
":class:`~asyncio.ProactorEventLoop` now also supports UDP. (Contributed "
"by Adam Meily and Andrew Svetlov in :issue:`29883`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:661
msgid ""
":class:`~asyncio.ProactorEventLoop` can now be interrupted by "
":exc:`KeyboardInterrupt` (\"CTRL+C\"). (Contributed by Vladimir Matveev "
"in :issue:`23057`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:665
msgid ""
"Added :meth:`asyncio.Task.get_coro` for getting the wrapped coroutine "
"within an :class:`asyncio.Task`. (Contributed by Alex Gr√∂nholm in "
":issue:`36999`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:669
msgid ""
"Asyncio tasks can now be named, either by passing the ``name`` keyword "
"argument to :func:`asyncio.create_task` or the "
":meth:`~asyncio.loop.create_task` event loop method, or by calling the "
":meth:`~asyncio.Task.set_name` method on the task object. The task name "
"is visible in the ``repr()`` output of :class:`asyncio.Task` and can also"
" be retrieved using the :meth:`~asyncio.Task.get_name` method. "
"(Contributed by Alex Gr√∂nholm in :issue:`34270`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:677
msgid ""
"Added support for `Happy Eyeballs "
"<https://en.wikipedia.org/wiki/Happy_Eyeballs>`_ to "
":func:`asyncio.loop.create_connection`. To specify the behavior, two new "
"parameters have been added: *happy_eyeballs_delay* and *interleave*. The "
"Happy Eyeballs algorithm improves responsiveness in applications that "
"support IPv4 and IPv6 by attempting to simultaneously connect using both."
" (Contributed by twisteroid ambassador in :issue:`33530`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:687
msgid "builtins"
msgstr ""

#: ../../whatsnew/3.8.rst:689
msgid ""
"The :func:`compile` built-in has been improved to accept the "
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag. With this new flag passed, "
":func:`compile` will allow top-level ``await``, ``async for`` and ``async"
" with`` constructs that are usually considered invalid syntax. "
"Asynchronous code object marked with the ``CO_COROUTINE`` flag may then "
"be returned. (Contributed by Matthias Bussonnier in :issue:`34616`)"
msgstr ""

#: ../../whatsnew/3.8.rst:700
msgid ""
"The :meth:`~collections.somenamedtuple._asdict` method for "
":func:`collections.namedtuple` now returns a :class:`dict` instead of a "
":class:`collections.OrderedDict`. This works because regular dicts have "
"guaranteed ordering since Python 3.7. If the extra features of "
":class:`OrderedDict` are required, the suggested remediation is to cast "
"the result to the desired type: ``OrderedDict(nt._asdict())``. "
"(Contributed by Raymond Hettinger in :issue:`35864`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:712
msgid ""
"The :class:`cProfile.Profile <profile.Profile>` class can now be used as "
"a context manager. Profile a block of code by running::"
msgstr ""

#: ../../whatsnew/3.8.rst:721
msgid "(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:727
msgid ""
"The :class:`csv.DictReader` now returns instances of :class:`dict` "
"instead of a :class:`collections.OrderedDict`.  The tool is now faster "
"and uses less memory while still preserving the field order. (Contributed"
" by Michael Selik in :issue:`34003`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:736
msgid ""
"Added a new variable holding structured version information for the "
"underlying ncurses library: :data:`~curses.ncurses_version`. (Contributed"
" by Serhiy Storchaka in :issue:`31680`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:744
msgid ""
"On Windows, :class:`~ctypes.CDLL` and subclasses now accept a *winmode* "
"parameter to specify flags for the underlying ``LoadLibraryEx`` call. The"
" default flags are set to only load DLL dependencies from trusted "
"locations, including the path where the DLL is stored (if a full or "
"partial path is used to load the initial DLL) and paths added by "
":func:`~os.add_dll_directory`. (Contributed by Steve Dower in "
":issue:`36085`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:755
msgid ""
"Added new alternate constructors :meth:`datetime.date.fromisocalendar` "
"and :meth:`datetime.datetime.fromisocalendar`, which construct "
":class:`date` and :class:`datetime` objects respectively from ISO year, "
"week number, and weekday; these are the inverse of each class's "
"``isocalendar`` method. (Contributed by Paul Ganssle in :issue:`36004`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:765
msgid ""
":func:`functools.lru_cache` can now be used as a straight decorator "
"rather than as a function returning a decorator.  So both of these are "
"now supported::"
msgstr ""

#: ../../whatsnew/3.8.rst:776
msgid "(Contributed by Raymond Hettinger in :issue:`36772`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:778
msgid ""
"Added a new :func:`functools.cached_property` decorator, for computed "
"properties cached for the life of the instance. ::"
msgstr ""

#: ../../whatsnew/3.8.rst:792
msgid "(Contributed by Carl Meyer in :issue:`21145`)"
msgstr ""

#: ../../whatsnew/3.8.rst:795
msgid ""
"Added a new :func:`functools.singledispatchmethod` decorator that "
"converts methods into :term:`generic functions <generic function>` using "
":term:`single dispatch`::"
msgstr ""

#: ../../whatsnew/3.8.rst:817
msgid "(Contributed by Ethan Smith in :issue:`32380`)"
msgstr ""

#: ../../whatsnew/3.8.rst:822
msgid ""
":func:`~gc.get_objects` can now receive an optional *generation* "
"parameter indicating a generation to get objects from. (Contributed by "
"Pablo Galindo in :issue:`36016`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:830
msgid ""
"Added :func:`~gettext.pgettext` and its variants. (Contributed by Franz "
"Glasner, √âric Araujo, and Cheryl Sabella in :issue:`2504`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:837
msgid ""
"Added the *mtime* parameter to :func:`gzip.compress` for reproducible "
"output. (Contributed by Guo Ci Teo in :issue:`34898`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:840
msgid ""
"A :exc:`~gzip.BadGzipFile` exception is now raised instead of "
":exc:`OSError` for certain types of invalid or corrupt gzip files. "
"(Contributed by Filip Gruszczy≈Ñski, Michele Orr√π, and Zackery Spytz in "
":issue:`6584`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:847
msgid "IDLE and idlelib"
msgstr ""

#: ../../whatsnew/3.8.rst:856
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They "
"also re-appear in the box for the next customized run.  One can also "
"suppress the normal Shell main module restart.  (Contributed by Cheryl "
"Sabella, Terry Jan Reedy, and others in :issue:`5680` and "
":issue:`37627`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:862
msgid ""
"Added optional line numbers for IDLE editor windows. Windows open without"
" line numbers unless set otherwise in the General tab of the "
"configuration dialog.  Line numbers for an existing window are shown and "
"hidden in the Options menu. (Contributed by Tal Einat and Saimadhav "
"Heblikar in :issue:`17535`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:868
msgid ""
"OS native encoding is now used for converting between Python strings and "
"Tcl objects. This allows IDLE to work with emoji and other non-BMP "
"characters. These characters can be displayed or copied and pasted to or "
"from the clipboard.  Converting strings from Tcl to Python and back now "
"never fails. (Many people worked on this for eight years but the problem "
"was finally solved by Serhiy Storchaka in :issue:`13153`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:875
msgid "New in 3.8.1:"
msgstr ""

#: ../../whatsnew/3.8.rst:877
msgid ""
"Add option to toggle cursor blink off.  (Contributed by Zackery Spytz in "
":issue:`4603`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:880
msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:883
msgid "The changes above have been backported to 3.7 maintenance releases."
msgstr ""

#: ../../whatsnew/3.8.rst:885
msgid ""
"Add keywords to module name completion list.  (Contributed by Terry J. "
"Reedy in :issue:`37765`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:891
msgid ""
"The :func:`inspect.getdoc` function can now find docstrings for "
"``__slots__`` if that attribute is a :class:`dict` where the values are "
"docstrings. This provides documentation options similar to what we "
"already have for :func:`property`, :func:`classmethod`, and "
":func:`staticmethod`::"
msgstr ""

#: ../../whatsnew/3.8.rst:903
msgid "(Contributed by Raymond Hettinger in :issue:`36326`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:909
msgid ""
"In development mode (:option:`-X` ``env``) and in debug build, the "
":class:`io.IOBase` finalizer now logs the exception if the ``close()`` "
"method fails. The exception is ignored silently by default in release "
"build. (Contributed by Victor Stinner in :issue:`18748`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:918
msgid ""
"The :func:`itertools.accumulate` function added an option *initial* "
"keyword argument to specify an initial value::"
msgstr ""

#: ../../whatsnew/3.8.rst:925
msgid "(Contributed by Lisa Roach in :issue:`34659`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:929
msgid "json.tool"
msgstr ""

#: ../../whatsnew/3.8.rst:931
msgid ""
"Add option ``--json-lines`` to parse every input line as a separate JSON "
"object. (Contributed by Weipeng Hong in :issue:`31553`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:938
msgid ""
"Added a *force* keyword argument to :func:`logging.basicConfig()` When "
"set to true, any existing handlers attached to the root logger are "
"removed and closed before carrying out the configuration specified by the"
" other arguments."
msgstr ""

#: ../../whatsnew/3.8.rst:943
msgid ""
"This solves a long-standing problem.  Once a logger or *basicConfig()* "
"had been called, subsequent calls to *basicConfig()* were silently "
"ignored. This made it difficult to update, experiment with, or teach the "
"various logging configuration options using the interactive prompt or a "
"Jupyter notebook."
msgstr ""

#: ../../whatsnew/3.8.rst:949
msgid ""
"(Suggested by Raymond Hettinger, implemented by Dong-hee Na, and reviewed"
" by Vinay Sajip in :issue:`33897`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:956
msgid ""
"Added new function :func:`math.dist` for computing Euclidean distance "
"between two points.  (Contributed by Raymond Hettinger in "
":issue:`33089`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:959
msgid ""
"Expanded the :func:`math.hypot` function to handle multiple dimensions. "
"Formerly, it only supported the 2-D case. (Contributed by Raymond "
"Hettinger in :issue:`33089`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:963
msgid ""
"Added new function, :func:`math.prod`, as analogous function to "
":func:`sum` that returns the product of a 'start' value (default: 1) "
"times an iterable of numbers::"
msgstr ""

#: ../../whatsnew/3.8.rst:972
msgid "(Contributed by Pablo Galindo in :issue:`35606`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:974
msgid ""
"Added two new combinatoric functions :func:`math.perm` and "
":func:`math.comb`::"
msgstr ""

#: ../../whatsnew/3.8.rst:981
msgid ""
"(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and "
"Raymond Hettinger in :issue:`37128`, :issue:`37178`, and :issue:`35431`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:984
msgid ""
"Added a new function :func:`math.isqrt` for computing accurate integer "
"square roots without conversion to floating point.  The new function "
"supports arbitrarily large integers.  It is faster than "
"``floor(sqrt(n))`` but slower than :func:`math.sqrt`::"
msgstr ""

#: ../../whatsnew/3.8.rst:996
msgid "(Contributed by Mark Dickinson in :issue:`36887`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:998
msgid ""
"The function :func:`math.factorial` no longer accepts arguments that are "
"not int-like. (Contributed by Pablo Galindo in :issue:`33083`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1005
msgid ""
"The :class:`mmap.mmap` class now has an :meth:`~mmap.mmap.madvise` method"
" to access the ``madvise()`` system call. (Contributed by Zackery Spytz "
"in :issue:`32941`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1013
msgid ""
"Added new :mod:`multiprocessing.shared_memory` module. (Contributed by "
"Davin Potts in :issue:`35813`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1016
msgid ""
"On macOS, the *spawn* start method is now used by default. (Contributed "
"by Victor Stinner in :issue:`33725`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1023
msgid ""
"Added new function :func:`~os.add_dll_directory` on Windows for providing"
" additional search paths for native dependencies when importing extension"
" modules or loading DLLs using :mod:`ctypes`. (Contributed by Steve Dower"
" in :issue:`36085`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1028
msgid ""
"A new :func:`os.memfd_create` function was added to wrap the "
"``memfd_create()`` syscall. (Contributed by Zackery Spytz and Christian "
"Heimes in :issue:`26836`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1032
msgid ""
"On Windows, much of the manual logic for handling reparse points "
"(including symlinks and directory junctions) has been delegated to the "
"operating system. Specifically, :func:`os.stat` will now traverse "
"anything supported by the operating system, while :func:`os.lstat` will "
"only open reparse points that identify as \"name surrogates\" while "
"others are opened as for :func:`os.stat`. In all cases, "
":attr:`stat_result.st_mode` will only have ``S_IFLNK`` set for symbolic "
"links and not other kinds of reparse points. To identify other kinds of "
"reparse point, check the new :attr:`stat_result.st_reparse_tag` "
"attribute."
msgstr ""

#: ../../whatsnew/3.8.rst:1041
msgid ""
"On Windows, :func:`os.readlink` is now able to read directory junctions. "
"Note that :func:`~os.path.islink` will return ``False`` for directory "
"junctions, and so code that checks ``islink`` first will continue to "
"treat junctions as directories, while code that handles errors from "
":func:`os.readlink` may now treat junctions as links."
msgstr ""

#: ../../whatsnew/3.8.rst:1047 ../../whatsnew/3.8.rst:1072
msgid "(Contributed by Steve Dower in :issue:`37834`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1051
msgid "os.path"
msgstr ""

#: ../../whatsnew/3.8.rst:1053
msgid ""
":mod:`os.path` functions that return a boolean result like "
":func:`~os.path.exists`, :func:`~os.path.lexists`, "
":func:`~os.path.isdir`, :func:`~os.path.isfile`, :func:`~os.path.islink`,"
" and :func:`~os.path.ismount` now return ``False`` instead of raising "
":exc:`ValueError` or its subclasses :exc:`UnicodeEncodeError` and "
":exc:`UnicodeDecodeError` for paths that contain characters or bytes "
"unrepresentable at the OS level. (Contributed by Serhiy Storchaka in "
":issue:`33721`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1061 ../../whatsnew/3.8.rst:1961
msgid ""
":func:`~os.path.expanduser` on Windows now prefers the "
":envvar:`USERPROFILE` environment variable and does not use "
":envvar:`HOME`, which is not normally set for regular user accounts. "
"(Contributed by Anthony Sottile in :issue:`36264`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1066
msgid ""
":func:`~os.path.isdir` on Windows no longer returns ``True`` for a link "
"to a non-existent directory."
msgstr ""

#: ../../whatsnew/3.8.rst:1069
msgid ""
":func:`~os.path.realpath` on Windows now resolves reparse points, "
"including symlinks and directory junctions."
msgstr ""

#: ../../whatsnew/3.8.rst:1078
msgid ""
":mod:`pathlib.Path` methods that return a boolean result like "
":meth:`~pathlib.Path.exists()`, :meth:`~pathlib.Path.is_dir()`, "
":meth:`~pathlib.Path.is_file()`, :meth:`~pathlib.Path.is_mount()`, "
":meth:`~pathlib.Path.is_symlink()`, "
":meth:`~pathlib.Path.is_block_device()`, "
":meth:`~pathlib.Path.is_char_device()`, :meth:`~pathlib.Path.is_fifo()`, "
":meth:`~pathlib.Path.is_socket()` now return ``False`` instead of raising"
" :exc:`ValueError` or its subclass :exc:`UnicodeEncodeError` for paths "
"that contain characters unrepresentable at the OS level. (Contributed by "
"Serhiy Storchaka in :issue:`33721`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1088
msgid ""
"Added :meth:`pathlib.Path.link_to()` which creates a hard link pointing "
"to a path. (Contributed by Joannah Nanjekye in :issue:`26978`)"
msgstr ""

#: ../../whatsnew/3.8.rst:1096
msgid ""
":mod:`pickle` extensions subclassing the C-optimized "
":class:`~pickle.Pickler` can now override the pickling logic of functions"
" and classes by defining the special "
":meth:`~pickle.Pickler.reducer_override` method. (Contributed by Pierre "
"Glaser and Olivier Grisel in :issue:`35900`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1105
msgid ""
"Added new :class:`plistlib.UID` and enabled support for reading and "
"writing NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen"
" in :issue:`26707`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1113
msgid ""
"The :mod:`pprint` module added a *sort_dicts* parameter to several "
"functions. By default, those functions continue to sort dictionaries "
"before rendering or printing.  However, if *sort_dicts* is set to false, "
"the dictionaries retain the order that keys were inserted.  This can be "
"useful for comparison to JSON inputs during debugging."
msgstr ""

#: ../../whatsnew/3.8.rst:1119
msgid ""
"In addition, there is a convenience new function, :func:`pprint.pp` that "
"is like :func:`pprint.pprint` but with *sort_dicts* defaulting to "
"``False``::"
msgstr ""

#: ../../whatsnew/3.8.rst:1133
msgid "(Contributed by R√©mi Lapeyre in :issue:`30670`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1139
msgid ""
":func:`py_compile.compile` now supports silent mode. (Contributed by "
"Joannah Nanjekye in :issue:`22640`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1146
msgid ""
"The new :func:`shlex.join` function acts as the inverse of "
":func:`shlex.split`. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1153
msgid ""
":func:`shutil.copytree` now accepts a new ``dirs_exist_ok`` keyword "
"argument. (Contributed by Josh Bronson in :issue:`20849`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1156
msgid ""
":func:`shutil.make_archive` now defaults to the modern pax (POSIX.1-2001)"
" format for new archives to improve portability and standards "
"conformance, inherited from the corresponding change to the "
":mod:`tarfile` module. (Contributed by C.A.M. Gerlach in :issue:`30661`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1161
msgid ""
":func:`shutil.rmtree` on Windows now removes directory junctions without "
"recursively removing their contents first. (Contributed by Steve Dower in"
" :issue:`37834`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1169
msgid ""
"Added :meth:`~socket.create_server()` and "
":meth:`~socket.has_dualstack_ipv6()` convenience functions to automate "
"the necessary tasks usually involved when creating a server socket, "
"including accepting both IPv4 and IPv6 connections on the same socket.  "
"(Contributed by Giampaolo Rodol√† in :issue:`17561`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1174
msgid ""
"The :func:`socket.if_nameindex()`, :func:`socket.if_nametoindex()`, and "
":func:`socket.if_indextoname()` functions have been implemented on "
"Windows. (Contributed by Zackery Spytz in :issue:`37007`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1182
msgid ""
"Added :attr:`~ssl.SSLContext.post_handshake_auth` to enable and "
":meth:`~ssl.SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 "
"post-handshake authentication. (Contributed by Christian Heimes in "
":issue:`34670`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1191
msgid ""
"Added :func:`statistics.fmean` as a faster, floating point variant of "
":func:`statistics.mean()`.  (Contributed by Raymond Hettinger and Steven "
"D'Aprano in :issue:`35904`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1195
msgid ""
"Added :func:`statistics.geometric_mean()` (Contributed by Raymond "
"Hettinger in :issue:`27181`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1198
msgid ""
"Added :func:`statistics.multimode` that returns a list of the most common"
" values. (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1201
msgid ""
"Added :func:`statistics.quantiles` that divides data or a distribution in"
" to equiprobable intervals (e.g. quartiles, deciles, or percentiles). "
"(Contributed by Raymond Hettinger in :issue:`36546`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1205
msgid ""
"Added :class:`statistics.NormalDist`, a tool for creating and "
"manipulating normal distributions of a random variable. (Contributed by "
"Raymond Hettinger in :issue:`36018`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1237
msgid ""
"Add new :func:`sys.unraisablehook` function which can be overridden to "
"control how \"unraisable exceptions\" are handled. It is called when an "
"exception has occurred but there is no way for Python to handle it. For "
"example, when a destructor raises an exception or during garbage "
"collection (:func:`gc.collect`). (Contributed by Victor Stinner in "
":issue:`36829`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1248
msgid ""
"The :mod:`tarfile` module now defaults to the modern pax (POSIX.1-2001) "
"format for new archives, instead of the previous GNU-specific one. This "
"improves cross-platform portability with a consistent encoding (UTF-8) in"
" a standardized and extensible format, and offers several other benefits."
" (Contributed by C.A.M. Gerlach in :issue:`36268`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1258
msgid ""
"Add a new :func:`threading.excepthook` function which handles uncaught "
":meth:`threading.Thread.run` exception. It can be overridden to control "
"how uncaught :meth:`threading.Thread.run` exceptions are handled. "
"(Contributed by Victor Stinner in :issue:`1230540`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1263
msgid ""
"Add a new :func:`threading.get_native_id` function and a "
":data:`~threading.Thread.native_id` attribute to the "
":class:`threading.Thread` class. These return the native integral Thread "
"ID of the current thread assigned by the kernel. This feature is only "
"available on certain platforms, see :func:`get_native_id "
"<threading.get_native_id>` for more information. (Contributed by Jake "
"Tesler in :issue:`36084`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1273
msgid "tokenize"
msgstr ""

#: ../../whatsnew/3.8.rst:1275
msgid ""
"The :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token when "
"provided with input that does not have a trailing new line.  This "
"behavior now matches what the C tokenizer does internally. (Contributed "
"by Ammar Askar in :issue:`33899`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1284
msgid ""
"Added methods :meth:`~tkinter.Spinbox.selection_from`, "
":meth:`~tkinter.Spinbox.selection_present`, "
":meth:`~tkinter.Spinbox.selection_range` and "
":meth:`~tkinter.Spinbox.selection_to` in the :class:`tkinter.Spinbox` "
"class. (Contributed by Juliette Monsel in :issue:`34829`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1291
msgid ""
"Added method :meth:`~tkinter.Canvas.moveto` in the "
":class:`tkinter.Canvas` class. (Contributed by Juliette Monsel in "
":issue:`23831`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1295
msgid ""
"The :class:`tkinter.PhotoImage` class now has "
":meth:`~tkinter.PhotoImage.transparency_get` and "
":meth:`~tkinter.PhotoImage.transparency_set` methods.  (Contributed by "
"Zackery Spytz in :issue:`25451`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1304
msgid ""
"Added new clock :data:`~time.CLOCK_UPTIME_RAW` for macOS 10.12. "
"(Contributed by Joannah Nanjekye in :issue:`35702`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1311
msgid "The :mod:`typing` module incorporates several new features:"
msgstr ""

#: ../../whatsnew/3.8.rst:1313
msgid ""
"A dictionary type with per-key types.  See :pep:`589` and "
":class:`typing.TypedDict`. TypedDict uses only string keys.  By default, "
"every key is required to be present. Specify \"total=False\" to allow "
"keys to be optional::"
msgstr ""

#: ../../whatsnew/3.8.rst:1323
msgid ""
"Literal types.  See :pep:`586` and :class:`typing.Literal`. Literal types"
" indicate that a parameter or return value is constrained to one or more "
"specific literal values::"
msgstr ""

#: ../../whatsnew/3.8.rst:1330
msgid ""
"\"Final\" variables, functions, methods and classes.  See :pep:`591`, "
":class:`typing.Final` and :func:`typing.final`. The final qualifier "
"instructs a static type checker to restrict subclassing, overriding, or "
"reassignment::"
msgstr ""

#: ../../whatsnew/3.8.rst:1337
msgid ""
"Protocol definitions.  See :pep:`544`, :class:`typing.Protocol` and "
":func:`typing.runtime_checkable`.  Simple ABCs like "
":class:`typing.SupportsInt` are now ``Protocol`` subclasses."
msgstr ""

#: ../../whatsnew/3.8.rst:1341
msgid "New protocol class :class:`typing.SupportsIndex`."
msgstr ""

#: ../../whatsnew/3.8.rst:1343
msgid "New functions :func:`typing.get_origin` and :func:`typing.get_args`."
msgstr ""

#: ../../whatsnew/3.8.rst:1349
msgid ""
"The :mod:`unicodedata` module has been upgraded to use the `Unicode "
"12.1.0 <http://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ release."
msgstr ""

#: ../../whatsnew/3.8.rst:1352
msgid ""
"New function :func:`~unicodedata.is_normalized` can be used to verify a "
"string is in a specific normal form, often much faster than by actually "
"normalizing the string.  (Contributed by Max Belanger, David Euresti, and"
" Greg Price in :issue:`32285` and :issue:`37966`)."
msgstr ""

#: ../../whatsnew/3.8.rst:1361
msgid ""
"Added :class:`~unittest.mock.AsyncMock` to support an asynchronous "
"version of :class:`~unittest.mock.Mock`.  Appropriate new assert "
"functions for testing have been added as well. (Contributed by Lisa Roach"
" in :issue:`26467`)."
msgstr ""

#: ../../whatsnew/3.8.rst:1366
msgid ""
"Added :func:`~unittest.addModuleCleanup()` and "
":meth:`~unittest.TestCase.addClassCleanup()` to unittest to support "
"cleanups for :func:`~unittest.setUpModule()` and "
":meth:`~unittest.TestCase.setUpClass()`. (Contributed by Lisa Roach in "
":issue:`24412`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1372
msgid ""
"Several mock assert functions now also print a list of actual calls upon "
"failure. (Contributed by Petter Strandmark in :issue:`35047`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1375
msgid ""
":mod:`unittest` module gained support for coroutines to be used as test "
"cases with :class:`unittest.IsolatedAsyncioTestCase`. (Contributed by "
"Andrew Svetlov in :issue:`32972`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1404
msgid ""
":mod:`venv` now includes an ``Activate.ps1`` script on all platforms for "
"activating virtual environments under PowerShell Core 6.1. (Contributed "
"by Brett Cannon in :issue:`32718`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1412
msgid ""
"The proxy objects returned by :func:`weakref.proxy` now support the "
"matrix multiplication operators ``@`` and ``@=`` in addition to the other"
" numeric operators. (Contributed by Mark Dickinson in :issue:`36669`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1418
msgid "xml"
msgstr ""

#: ../../whatsnew/3.8.rst:1420
msgid ""
"As mitigation against DTD and external entity retrieval, the "
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process "
"external entities by default. (Contributed by Christian Heimes in "
":issue:`17239`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1425
msgid ""
"The ``.find*()`` methods in the :mod:`xml.etree.ElementTree` module "
"support wildcard searches like ``{*}tag`` which ignores the namespace and"
" ``{namespace}*`` which returns all tags in the given namespace. "
"(Contributed by Stefan Behnel in :issue:`28238`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1430
msgid ""
"The :mod:`xml.etree.ElementTree` module provides a new function "
":func:`‚Äìxml.etree.ElementTree.canonicalize()` that implements C14N 2.0. "
"(Contributed by Stefan Behnel in :issue:`13611`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1434
msgid ""
"The target object of :class:`xml.etree.ElementTree.XMLParser` can receive"
" namespace declaration events through the new callback methods "
"``start_ns()`` and ``end_ns()``.  Additionally, the "
":class:`xml.etree.ElementTree.TreeBuilder` target can be configured to "
"process events about comments and processing instructions to include them"
" in the generated tree. (Contributed by Stefan Behnel in :issue:`36676` "
"and :issue:`36673`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1446
msgid ""
":class:`xmlrpc.client.ServerProxy` now supports an optional *headers* "
"keyword argument for a sequence of HTTP headers to be sent with each "
"request.  Among other things, this makes it possible to upgrade from "
"default basic authentication to faster session authentication. "
"(Contributed by C√©dric Krier in :issue:`35153`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1456
msgid ""
"The :mod:`subprocess` module can now use the :func:`os.posix_spawn` "
"function in some cases for better performance. Currently, it is only used"
" on macOS and Linux (using glibc 2.24 or newer) if all these conditions "
"are met:"
msgstr ""

#: ../../whatsnew/3.8.rst:1460
msgid "*close_fds* is false;"
msgstr ""

#: ../../whatsnew/3.8.rst:1461
msgid ""
"*preexec_fn*, *pass_fds*, *cwd* and *start_new_session* parameters are "
"not set;"
msgstr ""

#: ../../whatsnew/3.8.rst:1463
msgid "the *executable* path contains a directory."
msgstr ""

#: ../../whatsnew/3.8.rst:1465
msgid "(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1467
#, python-format
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls on Linux and macOS in order to copy the file more "
"efficiently. \"fast-copy\" means that the copying operation occurs within"
" the kernel, avoiding the use of userspace buffers in Python as in "
"\"``outfd.write(infd.read())``\". On Windows :func:`shutil.copyfile` uses"
" a bigger default buffer size (1 MiB instead of 16 KiB) and a "
":func:`memoryview`-based variant of :func:`shutil.copyfileobj` is used. "
"The speedup for copying a 512 MiB file within the same partition is about"
" +26% on Linux, +50% on macOS and +40% on Windows. Also, much less CPU "
"cycles are consumed. See :ref:`shutil-platform-dependent-efficient-copy-"
"operations` section. (Contributed by Giampaolo Rodol√† in :issue:`33671`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1483
#, python-format
msgid ""
":func:`shutil.copytree` uses :func:`os.scandir` function and all copy "
"functions depending from it use cached :func:`os.stat` values. The "
"speedup for copying a directory with 8000 files is around +9% on Linux, "
"+20% on Windows and +30% on a Windows SMB share. Also the number of "
":func:`os.stat` syscalls is reduced by 38% making :func:`shutil.copytree`"
" especially faster on network filesystems. (Contributed by Giampaolo "
"Rodol√† in :issue:`33695`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1490
msgid ""
"The default protocol in the :mod:`pickle` module is now Protocol 4, first"
" introduced in Python 3.4.  It offers better performance and smaller size"
" compared to Protocol 3 available since Python 3.0."
msgstr ""

#: ../../whatsnew/3.8.rst:1494
msgid ""
"Removed one ``Py_ssize_t`` member from ``PyGC_Head``.  All GC tracked "
"objects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes. "
"(Contributed by Inada Naoki in :issue:`33597`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1498
msgid ""
":class:`uuid.UUID` now uses ``__slots__`` to reduce its memory footprint."
" (Contributed by Wouter Bolsterlee and Tal Einat in :issue:`30977`)"
msgstr ""

#: ../../whatsnew/3.8.rst:1501
msgid ""
"Improved performance of :func:`operator.itemgetter` by 33%.  Optimized "
"argument handling and added a fast path for the common case of a single "
"non-negative integer index into a tuple (which is the typical use case in"
" the standard library).  (Contributed by Raymond Hettinger in "
":issue:`35664`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1507
msgid ""
"Sped-up field lookups in :func:`collections.namedtuple`.  They are now "
"more than two times faster, making them the fastest form of instance "
"variable lookup in Python. (Contributed by Raymond Hettinger, Pablo "
"Galindo, and Joe Jevnik, Serhiy Storchaka in :issue:`32492`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1512
#, python-format
msgid ""
"The :class:`list` constructor does not overallocate the internal item "
"buffer if the input iterable has a known length (the input implements "
"``__len__``). This makes the created list 12% smaller on average. "
"(Contributed by Raymond Hettinger and Pablo Galindo in :issue:`33234`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1517
msgid ""
"Doubled the speed of class variable writes.  When a non-dunder attribute "
"was updated, there was an unnecessary call to update slots. (Contributed "
"by Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil "
"Schemenauer, and Serhiy Storchaka in :issue:`36012`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1522
msgid ""
"Reduced an overhead of converting arguments passed to many builtin "
"functions and methods.  This sped up calling some simple builtin "
"functions and methods up to 20--50%.  (Contributed by Serhiy Storchaka in"
" :issue:`23867`, :issue:`35582` and :issue:`36127`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1527
#, python-format
msgid ""
"``LOAD_GLOBAL`` instruction now uses new \"per opcode cache\" mechanism. "
"It is about 40% faster now.  (Contributed by Yury Selivanov and Inada "
"Naoki in :issue:`26219`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1535
msgid ""
"Default :data:`sys.abiflags` became an empty string: the ``m`` flag for "
"pymalloc became useless (builds with and without pymalloc are ABI "
"compatible) and so has been removed. (Contributed by Victor Stinner in "
":issue:`36707`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1539
msgid "Example of changes:"
msgstr ""

#: ../../whatsnew/3.8.rst:1541
msgid "Only ``python3.8`` program is installed, ``python3.8m`` program is gone."
msgstr ""

#: ../../whatsnew/3.8.rst:1542
msgid ""
"Only ``python3.8-config`` script is installed, ``python3.8m-config`` "
"script is gone."
msgstr ""

#: ../../whatsnew/3.8.rst:1544
msgid ""
"The ``m`` flag has been removed from the suffix of dynamic library "
"filenames: extension modules in the standard library as well as those "
"produced and installed by third-party packages, like those downloaded "
"from PyPI. On Linux, for example, the Python 3.7 suffix ``.cpython-"
"37m-x86_64-linux-gnu.so`` became ``.cpython-38-x86_64-linux-gnu.so`` in "
"Python 3.8."
msgstr ""

#: ../../whatsnew/3.8.rst:1551
msgid ""
"The header files have been reorganized to better separate the different "
"kinds of APIs:"
msgstr ""

#: ../../whatsnew/3.8.rst:1554
msgid "``Include/*.h`` should be the portable public stable C API."
msgstr ""

#: ../../whatsnew/3.8.rst:1555
msgid ""
"``Include/cpython/*.h`` should be the unstable C API specific to CPython;"
" public API, with some private API prefixed by ``_Py`` or ``_PY``."
msgstr ""

#: ../../whatsnew/3.8.rst:1557
msgid ""
"``Include/internal/*.h`` is the private internal C API very specific to "
"CPython. This API comes with no backward compatibility warranty and "
"should not be used outside CPython. It is only exposed for very specific "
"needs like debuggers and profiles which has to access to CPython "
"internals without calling functions. This API is now installed by ``make "
"install``."
msgstr ""

#: ../../whatsnew/3.8.rst:1563
msgid ""
"(Contributed by Victor Stinner in :issue:`35134` and :issue:`35081`, work"
" initiated by Eric Snow in Python 3.7.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1566
msgid ""
"Some macros have been converted to static inline functions: parameter "
"types and return type are well defined, they don't have issues specific "
"to macros, variables have a local scopes. Examples:"
msgstr ""

#: ../../whatsnew/3.8.rst:1570
msgid ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"
msgstr ""

#: ../../whatsnew/3.8.rst:1571
msgid ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"
msgstr ""

#: ../../whatsnew/3.8.rst:1572
msgid ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"
msgstr ""

#: ../../whatsnew/3.8.rst:1573
msgid ""
"Private functions: :c:func:`_PyObject_GC_TRACK`, "
":c:func:`_PyObject_GC_UNTRACK`, :c:func:`_Py_Dealloc`"
msgstr ""

#: ../../whatsnew/3.8.rst:1576
msgid "(Contributed by Victor Stinner in :issue:`35059`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1578
msgid ""
"The :c:func:`PyByteArray_Init` and :c:func:`PyByteArray_Fini` functions "
"have been removed. They did nothing since Python 2.7.4 and Python 3.2.0, "
"were excluded from the limited API (stable ABI), and were not documented."
" (Contributed by Victor Stinner in :issue:`35713`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1583
msgid ""
"The result of :c:func:`PyExceptionClass_Name` is now of type ``const char"
" *`` rather of ``char *``. (Contributed by Serhiy Storchaka in "
":issue:`33818`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1587
msgid ""
"The duality of ``Modules/Setup.dist`` and ``Modules/Setup`` has been "
"removed.  Previously, when updating the CPython source tree, one had to "
"manually copy ``Modules/Setup.dist`` (inside the source tree) to "
"``Modules/Setup`` (inside the build tree) in order to reflect any changes"
" upstream.  This was of a small benefit to packagers at the expense of a "
"frequent annoyance to developers following CPython development, as "
"forgetting to copy the file could produce build failures."
msgstr ""

#: ../../whatsnew/3.8.rst:1595
msgid ""
"Now the build system always reads from ``Modules/Setup`` inside the "
"source tree.  People who want to customize that file are encouraged to "
"maintain their changes in a git fork of CPython or as patch files, as "
"they would do for any other change to the source tree."
msgstr ""

#: ../../whatsnew/3.8.rst:1600
msgid "(Contributed by Antoine Pitrou in :issue:`32430`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1602
msgid ""
"Functions that convert Python number to C integer like "
":c:func:`PyLong_AsLong` and argument parsing functions like "
":c:func:`PyArg_ParseTuple` with integer converting format units like "
"``'i'`` will now use the :meth:`~object.__index__` special method instead"
" of :meth:`~object.__int__`, if available.  The deprecation warning will "
"be emitted for objects with the ``__int__()`` method but without the "
"``__index__()`` method (like :class:`~decimal.Decimal` and "
":class:`~fractions.Fraction`).  :c:func:`PyNumber_Check` will now return "
"``1`` for objects implementing ``__index__()``. :c:func:`PyNumber_Long`, "
":c:func:`PyNumber_Float` and :c:func:`PyFloat_AsDouble` also now use the "
"``__index__()`` method if available. (Contributed by Serhiy Storchaka in "
":issue:`36048` and :issue:`20092`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1616
msgid ""
"Heap-allocated type objects will now increase their reference count in "
":c:func:`PyObject_Init` (and its parallel macro ``PyObject_INIT``) "
"instead of in :c:func:`PyType_GenericAlloc`. Types that modify instance "
"allocation or deallocation may need to be adjusted. (Contributed by Eddie"
" Elizondo in :issue:`35810`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1622
msgid ""
"The new function :c:func:`PyCode_NewWithPosOnlyArgs` allows to create "
"code objects like :c:func:`PyCode_New`, but with an extra "
"*posonlyargcount* parameter for indicating the number of positional-only "
"arguments. (Contributed by Pablo Galindo in :issue:`37221`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1627
msgid ""
":c:func:`Py_SetPath` now sets :data:`sys.executable` to the program full "
"path (:c:func:`Py_GetProgramFullPath`) rather than to the program name "
"(:c:func:`Py_GetProgramName`). (Contributed by Victor Stinner in "
":issue:`38234`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1636
msgid ""
"The distutils ``bdist_wininst`` command is now deprecated, use "
"``bdist_wheel`` (wheel packages) instead. (Contributed by Victor Stinner "
"in :issue:`37481`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1640
msgid ""
"Deprecated methods ``getchildren()`` and ``getiterator()`` in the "
":mod:`~xml.etree.ElementTree` module now emit a :exc:`DeprecationWarning`"
" instead of :exc:`PendingDeprecationWarning`. They will be removed in "
"Python 3.9. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1646
msgid ""
"Passing an object that is not an instance of "
":class:`concurrent.futures.ThreadPoolExecutor` to "
":meth:`loop.set_default_executor() <asyncio.loop.set_default_executor>` "
"is deprecated and will be prohibited in Python 3.9. (Contributed by Elvis"
" Pranskevichus in :issue:`34075`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1652
msgid ""
"The :meth:`__getitem__` methods of "
":class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput` have "
"been deprecated."
msgstr ""

#: ../../whatsnew/3.8.rst:1656
msgid ""
"Implementations of these methods have been ignoring their *index* "
"parameter, and returning the next item instead. (Contributed by Berker "
"Peksag in :issue:`9372`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1660
msgid ""
"The :class:`typing.NamedTuple` class has deprecated the ``_field_types`` "
"attribute in favor of the ``__annotations__`` attribute which has the "
"same information. (Contributed by Raymond Hettinger in :issue:`36320`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1664
msgid ""
":mod:`ast` classes ``Num``, ``Str``, ``Bytes``, ``NameConstant`` and "
"``Ellipsis`` are considered deprecated and will be removed in future "
"Python versions. :class:`~ast.Constant` should be used instead. "
"(Contributed by Serhiy Storchaka in :issue:`32892`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1669
msgid ""
":class:`ast.NodeVisitor` methods ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` and ``visit_Ellipsis()`` are "
"deprecated now and will not be called in future Python versions. Add the "
":meth:`~ast.NodeVisitor.visit_Constant` method to handle all constant "
"nodes. (Contributed by Serhiy Storchaka in :issue:`36917`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1676
msgid ""
"The :func:`asyncio.coroutine` :term:`decorator` is deprecated and will be"
" removed in version 3.10.  Instead of ``@asyncio.coroutine``, use "
":keyword:`async def` instead. (Contributed by Andrew Svetlov in "
":issue:`36921`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1681
msgid ""
"In :mod:`asyncio`, the explicit passing of a *loop* argument has been "
"deprecated and will be removed in version 3.10 for the following: "
":func:`asyncio.sleep`, :func:`asyncio.gather`, :func:`asyncio.shield`, "
":func:`asyncio.wait_for`, :func:`asyncio.wait`, "
":func:`asyncio.as_completed`, :class:`asyncio.Task`, "
":class:`asyncio.Lock`, :class:`asyncio.Event`, "
":class:`asyncio.Condition`, :class:`asyncio.Semaphore`, "
":class:`asyncio.BoundedSemaphore`, :class:`asyncio.Queue`, "
":func:`asyncio.create_subprocess_exec`, and "
":func:`asyncio.create_subprocess_shell`."
msgstr ""

#: ../../whatsnew/3.8.rst:1691
msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has "
"been deprecated and will be removed in version 3.11. (Contributed by Yury"
" Selivanov in :issue:`34790`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1695
msgid ""
"The following functions and methods are deprecated in the :mod:`gettext` "
"module: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`, "
":func:`~gettext.lngettext` and :func:`~gettext.ldngettext`. They return "
"encoded bytes, and it's possible that you will get unexpected Unicode-"
"related exceptions if there are encoding problems with the translated "
"strings. It's much better to use alternatives which return Unicode "
"strings in Python 3. These functions have been broken for a long time."
msgstr ""

#: ../../whatsnew/3.8.rst:1703
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods "
":meth:`~gettext.NullTranslations.output_charset` and "
":meth:`~gettext.NullTranslations.set_output_charset`, and the *codeset* "
"parameter of functions :func:`~gettext.translation` and "
":func:`~gettext.install` are also deprecated, since they are only used "
"for the ``l*gettext()`` functions. (Contributed by Serhiy Storchaka in "
":issue:`33710`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1711
msgid ""
"The :meth:`~threading.Thread.isAlive()` method of "
":class:`threading.Thread` has been deprecated. (Contributed by Dong-hee "
"Na in :issue:`35283`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1715
msgid ""
"Many builtin and extension functions that take integer arguments will now"
" emit a deprecation warning for :class:`~decimal.Decimal`\\ s, "
":class:`~fractions.Fraction`\\ s and any other objects that can be "
"converted to integers only with a loss (e.g. that have the "
":meth:`~object.__int__` method but do not have the "
":meth:`~object.__index__` method).  In future version they will be "
"errors. (Contributed by Serhiy Storchaka in :issue:`36048`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1723
msgid "Deprecated passing the following arguments as keyword arguments:"
msgstr ""

#: ../../whatsnew/3.8.rst:1725
msgid ""
"*func* in :func:`functools.partialmethod`, :func:`weakref.finalize`, "
":meth:`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, "
":meth:`bdb.Bdb.runcall`, :meth:`trace.Trace.runfunc` and "
":func:`curses.wrapper`."
msgstr ""

#: ../../whatsnew/3.8.rst:1729
msgid "*function* in :meth:`unittest.TestCase.addCleanup`."
msgstr ""

#: ../../whatsnew/3.8.rst:1730
msgid ""
"*fn* in the :meth:`~concurrent.futures.Executor.submit` method of "
":class:`concurrent.futures.ThreadPoolExecutor` and "
":class:`concurrent.futures.ProcessPoolExecutor`."
msgstr ""

#: ../../whatsnew/3.8.rst:1733
msgid ""
"*callback* in :meth:`contextlib.ExitStack.callback`, "
":meth:`contextlib.AsyncExitStack.callback` and "
":meth:`contextlib.AsyncExitStack.push_async_callback`."
msgstr ""

#: ../../whatsnew/3.8.rst:1736
msgid ""
"*c* and *typeid* in the :meth:`~multiprocessing.managers.Server.create` "
"method of :class:`multiprocessing.managers.Server` and "
":class:`multiprocessing.managers.SharedMemoryServer`."
msgstr ""

#: ../../whatsnew/3.8.rst:1739
msgid "*obj* in :func:`weakref.finalize`."
msgstr ""

#: ../../whatsnew/3.8.rst:1741
msgid ""
"In future releases of Python, they will be :ref:`positional-only "
"<positional-only_parameter>`. (Contributed by Serhiy Storchaka in "
":issue:`36492`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1749
msgid "The following features and APIs have been removed from Python 3.8:"
msgstr ""

#: ../../whatsnew/3.8.rst:1751
msgid ""
"Starting with Python 3.3, importing ABCs from :mod:`collections` was "
"deprecated, and importing should be done from :mod:`collections.abc`. "
"Being able to import from collections was marked for removal in 3.8, but "
"has been delayed to 3.9. (See :issue:`36952`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1756
msgid ""
"The :mod:`macpath` module, deprecated in Python 3.7, has been removed. "
"(Contributed by Victor Stinner in :issue:`35471`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1759 ../../whatsnew/3.8.rst:1878
msgid ""
"The function :func:`platform.popen` has been removed, after having been "
"deprecated since Python 3.3: use :func:`os.popen` instead. (Contributed "
"by Victor Stinner in :issue:`35345`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1763
msgid ""
"The function :func:`time.clock` has been removed, after having been "
"deprecated since Python 3.3: use :func:`time.perf_counter` or "
":func:`time.process_time` instead, depending on your requirements, to "
"have well-defined behavior. (Contributed by Matthias Bussonnier in "
":issue:`36895`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1769
msgid ""
"The ``pyvenv`` script has been removed in favor of ``python3.8 -m venv`` "
"to help eliminate confusion as to what Python interpreter the ``pyvenv`` "
"script is tied to. (Contributed by Brett Cannon in :issue:`25427`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1773
msgid ""
"``parse_qs``, ``parse_qsl``, and ``escape`` are removed from the "
":mod:`cgi` module.  They are deprecated in Python 3.2 or older. They "
"should be imported from the ``urllib.parse`` and ``html`` modules "
"instead."
msgstr ""

#: ../../whatsnew/3.8.rst:1777
msgid ""
"``filemode`` function is removed from the :mod:`tarfile` module. It is "
"not documented and deprecated since Python 3.3."
msgstr ""

#: ../../whatsnew/3.8.rst:1780
msgid ""
"The :class:`~xml.etree.ElementTree.XMLParser` constructor no longer "
"accepts the *html* argument.  It never had an effect and was deprecated "
"in Python 3.4. All other parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1785
msgid ""
"Removed the ``doctype()`` method of "
":class:`~xml.etree.ElementTree.XMLParser`. (Contributed by Serhiy "
"Storchaka in :issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1788
msgid ""
"\"unicode_internal\" codec is removed. (Contributed by Inada Naoki in "
":issue:`36297`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1791
msgid ""
"The ``Cache`` and ``Statement`` objects of the :mod:`sqlite3` module are "
"not exposed to the user. (Contributed by Aviv Palivoda in "
":issue:`30262`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1795
msgid ""
"The ``bufsize`` keyword argument of :func:`fileinput.input` and "
":func:`fileinput.FileInput` which was ignored and deprecated since Python"
" 3.6 has been removed. :issue:`36952` (Contributed by Matthias "
"Bussonnier.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1799
msgid ""
"The functions :func:`sys.set_coroutine_wrapper` and "
":func:`sys.get_coroutine_wrapper` deprecated in Python 3.7 have been "
"removed; :issue:`36933` (Contributed by Matthias Bussonnier.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1805
msgid "Porting to Python 3.8"
msgstr ""

#: ../../whatsnew/3.8.rst:1814
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"disallowed in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). (Contributed"
" by Serhiy Storchaka in :issue:`10544`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1819
msgid ""
"The compiler now produces a :exc:`SyntaxWarning` when identity checks "
"(``is`` and ``is not``) are used with certain types of literals (e.g. "
"strings, numbers).  These can often work by accident in CPython, but are "
"not guaranteed by the language spec.  The warning advises users to use "
"equality tests (``==`` and ``!=``) instead. (Contributed by Serhiy "
"Storchaka in :issue:`34850`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1826
msgid ""
"The CPython interpreter can swallow exceptions in some circumstances. In "
"Python 3.8 this happens in fewer cases.  In particular, exceptions raised"
" when getting the attribute from the type dictionary are no longer "
"ignored. (Contributed by Serhiy Storchaka in :issue:`35459`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1831
msgid ""
"Removed ``__str__`` implementations from builtin types :class:`bool`, "
":class:`int`, :class:`float`, :class:`complex` and few classes from the "
"standard library.  They now inherit ``__str__()`` from :class:`object`. "
"As result, defining the ``__repr__()`` method in the subclass of these "
"classes will affect their string representation. (Contributed by Serhiy "
"Storchaka in :issue:`36793`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1838
msgid ""
"On AIX, :attr:`sys.platform` doesn't contain the major version anymore. "
"It is always ``'aix'``, instead of ``'aix3'`` .. ``'aix7'``.  Since older"
" Python versions include the version number, so it is recommended to "
"always use ``sys.platform.startswith('aix')``. (Contributed by M. Felt in"
" :issue:`36588`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1844
msgid ""
":c:func:`PyEval_AcquireLock` and :c:func:`PyEval_AcquireThread` now "
"terminate the current thread if called while the interpreter is "
"finalizing, making them consistent with :c:func:`PyEval_RestoreThread`, "
":c:func:`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`. If this "
"behavior is not desired, guard the call by checking "
":c:func:`_Py_IsFinalizing` or :c:func:`sys.is_finalizing`. (Contributed "
"by Joannah Nanjekye in :issue:`36475`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1856
msgid ""
"The :func:`os.getcwdb` function now uses the UTF-8 encoding on Windows, "
"rather than the ANSI code page: see :pep:`529` for the rationale. The "
"function is no longer deprecated on Windows. (Contributed by Victor "
"Stinner in :issue:`37412`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1861
msgid ""
":class:`subprocess.Popen` can now use :func:`os.posix_spawn` in some "
"cases for better performance. On Windows Subsystem for Linux and QEMU "
"User Emulation, the :class:`Popen` constructor using "
":func:`os.posix_spawn` no longer raises an exception on errors like "
"\"missing program\".  Instead the child process fails with a non-zero "
":attr:`~Popen.returncode`. (Contributed by Joannah Nanjekye and Victor "
"Stinner in :issue:`35537`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1868
msgid ""
"The *preexec_fn* argument of * :class:`subprocess.Popen` is no longer "
"compatible with subinterpreters. The use of the parameter in a "
"subinterpreter now raises :exc:`RuntimeError`. (Contributed by Eric Snow "
"in :issue:`34651`, modified by Christian Heimes in :issue:`37951`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1874
msgid ""
"The :meth:`imap.IMAP4.logout` method no longer silently ignores arbitrary"
" exceptions. (Contributed by Victor Stinner in :issue:`36348`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1882
msgid ""
"The :func:`statistics.mode` function no longer raises an exception when "
"given multimodal data.  Instead, it returns the first mode encountered in"
" the input data.  (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1887
msgid ""
"The :meth:`~tkinter.ttk.Treeview.selection` method of the "
":class:`tkinter.ttk.Treeview` class no longer takes arguments.  Using it "
"with arguments for changing the selection was deprecated in Python 3.6.  "
"Use specialized methods like :meth:`~tkinter.ttk.Treeview.selection_set` "
"for changing the selection.  (Contributed by Serhiy Storchaka in "
":issue:`31508`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1893
msgid ""
"The :meth:`writexml`, :meth:`toxml` and :meth:`toprettyxml` methods of "
":mod:`xml.dom.minidom`, and the :meth:`write` method of :mod:`xml.etree`,"
" now preserve the attribute order specified by the user. (Contributed by "
"Diego Rojas and Raymond Hettinger in :issue:`34160`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1898
msgid ""
"A :mod:`dbm.dumb` database opened with flags ``'r'`` is now read-only. "
":func:`dbm.dumb.open` with flags ``'r'`` and ``'w'`` no longer creates a "
"database if it does not exist. (Contributed by Serhiy Storchaka in "
":issue:`32749`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1903
msgid ""
"The ``doctype()`` method defined in a subclass of "
":class:`~xml.etree.ElementTree.XMLParser` will no longer be called and "
"will emit a :exc:`RuntimeWarning` instead of a :exc:`DeprecationWarning`."
" Define the :meth:`doctype() <xml.etree.ElementTree.TreeBuilder.doctype>`"
" method on a target for handling an XML doctype declaration. (Contributed"
" by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1910
msgid ""
"A :exc:`RuntimeError` is now raised when the custom metaclass doesn't "
"provide the ``__classcell__`` entry in the namespace passed to "
"``type.__new__``.  A :exc:`DeprecationWarning` was emitted in Python 3.6"
"--3.7.  (Contributed by Serhiy Storchaka in :issue:`23722`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1915
msgid ""
"The :class:`cProfile.Profile` class can now be used as a context manager."
" (Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1918
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls (see :ref:`shutil-platform-dependent-efficient-"
"copy-operations` section)."
msgstr ""

#: ../../whatsnew/3.8.rst:1923
msgid ""
":func:`shutil.copyfile` default buffer size on Windows was changed from "
"16 KiB to 1 MiB."
msgstr ""

#: ../../whatsnew/3.8.rst:1926
msgid ""
"The ``PyGC_Head`` struct has changed completely.  All code that touched "
"the struct member should be rewritten.  (See :issue:`33597`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1929
msgid ""
"The :c:type:`PyInterpreterState` struct has been moved into the "
"\"internal\" header files (specifically "
"Include/internal/pycore_pystate.h).  An opaque ``PyInterpreterState`` is "
"still available as part of the public API (and stable ABI).  The docs "
"indicate that none of the struct's fields are public, so we hope no one "
"has been using them.  However, if you do rely on one or more of those "
"private fields and have no alternative then please open a BPO issue.  "
"We'll work on helping you adjust (possibly including adding accessor "
"functions to the public API).  (See :issue:`35886`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1939
msgid ""
"The :meth:`mmap.flush() <mmap.mmap.flush>` method now returns ``None`` on"
" success and raises an exception on error under all platforms.  "
"Previously, its behavior was platform-dependent: a nonzero value was "
"returned on success; zero was returned on error under Windows.  A zero "
"value was returned on success; an exception was raised on error under "
"Unix. (Contributed by Berker Peksag in :issue:`2122`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1946
msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process "
"external entities by default. (Contributed by Christian Heimes in "
":issue:`17239`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1950
msgid ""
"Deleting a key from a read-only :mod:`dbm` database (:mod:`dbm.dumb`, "
":mod:`dbm.gnu` or :mod:`dbm.ndbm`) raises :attr:`error` "
"(:exc:`dbm.dumb.error`, :exc:`dbm.gnu.error` or :exc:`dbm.ndbm.error`) "
"instead of :exc:`KeyError`. (Contributed by Xiang Zhang in "
":issue:`33106`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1955
msgid ""
"Simplified AST for literals.  All constants will be represented as "
":class:`ast.Constant` instances.  Instantiating old classes ``Num``, "
"``Str``, ``Bytes``, ``NameConstant`` and ``Ellipsis`` will return an "
"instance of ``Constant``. (Contributed by Serhiy Storchaka in "
":issue:`32892`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1971
msgid ""
"The function :func:`asyncio.wait_for` now correctly waits for "
"cancellation when using an instance of :class:`asyncio.Task`. Previously,"
" upon reaching *timeout*, it was cancelled and immediately returned. "
"(Contributed by Elvis Pranskevichus in :issue:`32751`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1976
msgid ""
"The function :func:`asyncio.BaseTransport.get_extra_info` now returns a "
"safe to use socket object when 'socket' is passed to the *name* "
"parameter. (Contributed by Yury Selivanov in :issue:`37027`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1980
msgid ":class:`asyncio.BufferedProtocol` has graduated to the stable API."
msgstr ""

#: ../../whatsnew/3.8.rst:1984
msgid ""
"DLL dependencies for extension modules and DLLs loaded with :mod:`ctypes`"
" on Windows are now resolved more securely. Only the system paths, the "
"directory containing the DLL or PYD file, and directories added with "
":func:`~os.add_dll_directory` are searched for load-time dependencies. "
"Specifically, :envvar:`PATH` and the current working directory are no "
"longer used, and modifications to these will no longer have any effect on"
" normal DLL resolution. If your application relies on these mechanisms, "
"you should check for :func:`~os.add_dll_directory` and if it exists, use "
"it to add your DLLs directory while loading your library. Note that "
"Windows 7 users will need to ensure that Windows Update KB2533623 has "
"been installed (this is also verified by the installer). (Contributed by "
"Steve Dower in :issue:`36085`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1997
msgid ""
"The header files and functions related to pgen have been removed after "
"its replacement by a pure Python implementation. (Contributed by Pablo "
"Galindo in :issue:`36623`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2001
msgid ""
":class:`types.CodeType` has a new parameter in the second position of the"
" constructor (*posonlyargcount*) to support positional-only arguments "
"defined in :pep:`570`. The first argument (*argcount*) now represents the"
" total number of positional arguments (including positional-only "
"arguments). The new ``replace()`` method of :class:`types.CodeType` can "
"be used to make the code future-proof."
msgstr ""

#: ../../whatsnew/3.8.rst:2008
msgid ""
"The parameter ``digestmod`` for :func:`hmac.new` no longer uses the MD5 "
"digest by default."
msgstr ""

#: ../../whatsnew/3.8.rst:2014
msgid ""
"The :c:type:`PyCompilerFlags` structure got a new *cf_feature_version* "
"field. It should be initialized to ``PY_MINOR_VERSION``. The field is "
"ignored by default, and is used if and only if ``PyCF_ONLY_AST`` flag is "
"set in *cf_flags*. (Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2020
msgid ""
"The :c:func:`PyEval_ReInitThreads` function has been removed from the C "
"API. It should not be called explicitly: use "
":c:func:`PyOS_AfterFork_Child` instead. (Contributed by Victor Stinner in"
" :issue:`36728`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2025
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android"
" and Cygwin. When Python is embedded, ``libpython`` must not be loaded "
"with ``RTLD_LOCAL``, but ``RTLD_GLOBAL`` instead. Previously, using "
"``RTLD_LOCAL``, it was already not possible to load C extensions which "
"were not linked to ``libpython``, like C extensions of the standard "
"library built by the ``*shared*`` section of ``Modules/Setup``. "
"(Contributed by Victor Stinner in :issue:`21536`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2033
msgid ""
"Use of ``#`` variants of formats in parsing or building value (e.g. "
":c:func:`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, "
":c:func:`PyObject_CallFunction`, etc.) without ``PY_SSIZE_T_CLEAN`` "
"defined raises ``DeprecationWarning`` now. It will be removed in 3.10 or "
"4.0.  Read :ref:`arg-parsing` for detail. (Contributed by Inada Naoki in "
":issue:`36381`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2039
msgid ""
"Instances of heap-allocated types (such as those created with "
":c:func:`PyType_FromSpec`) hold a reference to their type object. "
"Increasing the reference count of these type objects has been moved from "
":c:func:`PyType_GenericAlloc` to the more low-level functions, "
":c:func:`PyObject_Init` and :c:func:`PyObject_INIT`. This makes types "
"created through :c:func:`PyType_FromSpec` behave like other classes in "
"managed code."
msgstr ""

#: ../../whatsnew/3.8.rst:2047
msgid "Statically allocated types are not affected."
msgstr ""

#: ../../whatsnew/3.8.rst:2049
msgid ""
"For the vast majority of cases, there should be no side effect. However, "
"types that manually increase the reference count after allocating an "
"instance (perhaps to work around the bug) may now become immortal. To "
"avoid this, these classes need to call Py_DECREF on the type object "
"during instance deallocation."
msgstr ""

#: ../../whatsnew/3.8.rst:2055
msgid ""
"To correctly port these types into 3.8, please apply the following "
"changes:"
msgstr ""

#: ../../whatsnew/3.8.rst:2058
msgid ""
"Remove :c:macro:`Py_INCREF` on the type object after allocating an "
"instance - if any. This may happen after calling :c:func:`PyObject_New`, "
":c:func:`PyObject_NewVar`, :c:func:`PyObject_GC_New`, "
":c:func:`PyObject_GC_NewVar`, or any other custom allocator that uses "
":c:func:`PyObject_Init` or :c:func:`PyObject_INIT`."
msgstr ""

#: ../../whatsnew/3.8.rst:2065 ../../whatsnew/3.8.rst:2084
#: ../../whatsnew/3.8.rst:2103
msgid "Example:"
msgstr ""

#: ../../whatsnew/3.8.rst:2081
msgid ""
"Ensure that all custom ``tp_dealloc`` functions of heap-allocated types "
"decrease the type's reference count."
msgstr ""

#: ../../whatsnew/3.8.rst:2098
msgid "(Contributed by Eddie Elizondo in :issue:`35810`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2100
msgid ""
"The :c:macro:`Py_DEPRECATED()` macro has been implemented for MSVC. The "
"macro now must be placed before the symbol name."
msgstr ""

#: ../../whatsnew/3.8.rst:2109
msgid "(Contributed by Zackery Spytz in :issue:`33407`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2111
msgid ""
"The interpreter does not pretend to support binary compatibility of "
"extension types across feature releases, anymore.  A "
":c:type:`PyTypeObject` exported by a third-party extension module is "
"supposed to have all the slots expected in the current Python version, "
"including :c:member:`~PyTypeObject.tp_finalize` "
"(:const:`Py_TPFLAGS_HAVE_FINALIZE` is not checked anymore before reading "
":c:member:`~PyTypeObject.tp_finalize`)."
msgstr ""

#: ../../whatsnew/3.8.rst:2118
msgid "(Contributed by Antoine Pitrou in :issue:`32388`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2120
msgid ""
"The functions :c:func:`PyNode_AddChild` and :c:func:`PyParser_AddToken` "
"now accept two additional ``int`` arguments *end_lineno* and "
"*end_col_offset*."
msgstr ""

#: ../../whatsnew/3.8.rst:2123
msgid ""
"The :file:`libpython38.a` file to allow MinGW tools to link directly "
"against :file:`python38.dll` is no longer included in the regular Windows"
" distribution. If you require this file, it may be generated with the "
"``gendef`` and ``dlltool`` tools, which are part of the MinGW binutils "
"package:"
msgstr ""

#: ../../whatsnew/3.8.rst:2133
msgid ""
"The location of an installed :file:`pythonXY.dll` will depend on the "
"installation options and the version and language of Windows. See :ref"
":`using-on-windows` for more information. The resulting library should be"
" placed in the same directory as :file:`pythonXY.lib`, which is generally"
" the :file:`libs` directory under your Python installation."
msgstr ""

#: ../../whatsnew/3.8.rst:2139
msgid "(Contributed by Steve Dower in :issue:`37351`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2145
msgid ""
"The interpreter loop  has been simplified by moving the logic of "
"unrolling the stack of blocks into the compiler.  The compiler emits now "
"explicit instructions for adjusting the stack of values and calling the "
"cleaning-up code for :keyword:`break`, :keyword:`continue` and "
":keyword:`return`."
msgstr ""

#: ../../whatsnew/3.8.rst:2151
msgid ""
"Removed opcodes :opcode:`BREAK_LOOP`, :opcode:`CONTINUE_LOOP`, "
":opcode:`SETUP_LOOP` and :opcode:`SETUP_EXCEPT`.  Added new opcodes "
":opcode:`ROT_FOUR`, :opcode:`BEGIN_FINALLY`, :opcode:`CALL_FINALLY` and "
":opcode:`POP_FINALLY`.  Changed the behavior of :opcode:`END_FINALLY` and"
" :opcode:`WITH_CLEANUP_START`."
msgstr ""

#: ../../whatsnew/3.8.rst:2157
msgid ""
"(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in "
":issue:`17611`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2160
msgid ""
"Added new opcode :opcode:`END_ASYNC_FOR` for handling exceptions raised "
"when awaiting a next item in an :keyword:`async for` loop. (Contributed "
"by Serhiy Storchaka in :issue:`33041`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2164
msgid ""
"The :opcode:`MAP_ADD` now expects the value as the first element in the "
"stack and the key as the second element. This change was made so the key "
"is always evaluated before the value in dictionary comprehensions, as "
"proposed by :pep:`572`. (Contributed by J√∂rn Heissler in :issue:`35224`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2171
msgid "Demos and Tools"
msgstr ""

#: ../../whatsnew/3.8.rst:2173
msgid ""
"Added a benchmark script for timing various ways to access variables: "
"``Tools/scripts/var_access_benchmark.py``. (Contributed by Raymond "
"Hettinger in :issue:`35884`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2177
msgid "Here's a summary of performance improvements since Python 3.3:"
msgstr ""

#: ../../whatsnew/3.8.rst:2224
msgid ""
"The benchmarks were measured on an `Intel¬Æ Core‚Ñ¢ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-i7"
"-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ running the macOS "
"64-bit builds found at `python.org <https://www.python.org/downloads/mac-"
"osx/>`_. The benchmark script displays timings in nanoseconds."
msgstr ""

#: ../../whatsnew/3.8.rst:2233
msgid "Notable changes in Python 3.8.1"
msgstr ""

#: ../../whatsnew/3.8.rst:2243
msgid "Notable changes in Python 3.8.2"
msgstr ""

#: ../../whatsnew/3.8.rst:2245
msgid ""
"Fixed a regression with the ``ignore`` callback of "
":func:`shutil.copytree`. The argument types are now str and List[str] "
"again. (Contributed by Manuel Barkhau and Giampaolo Rodola in "
":issue:`39390`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2250
msgid "Notable changes in Python 3.8.3"
msgstr ""

#: ../../whatsnew/3.8.rst:2252
msgid ""
"The constant values of future flags in the :mod:`__future__` module are "
"updated in order to prevent collision with compiler flags. Previously "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` was clashing with ``CO_FUTURE_DIVISION``. "
"(Contributed by Batuhan Taskaya in :issue:`39562`)"
msgstr ""

#: ../../whatsnew/3.8.rst:2258
msgid "Notable changes in Python 3.8.8"
msgstr ""

#: ../../whatsnew/3.8.rst:2271
msgid "Notable changes in Python 3.8.9"
msgstr ""

#: ../../whatsnew/3.8.rst:2273
msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the "
"IPv4 address sent from the remote server when setting up a passive data "
"channel.  We reuse the ftp server IP address instead.  For unusual code "
"requiring the old behavior, set a ``trust_server_pasv_ipv4_address`` "
"attribute on your FTP instance to ``True``.  (See :issue:`43285`)"
msgstr ""

#: ../../whatsnew/3.8.rst:2280 ../../whatsnew/3.8.rst:2300
msgid "Notable changes in Python 3.8.10"
msgstr ""

#: ../../whatsnew/3.8.rst:2283
msgid "macOS 11.0 (Big Sur) and Apple Silicon Mac support"
msgstr ""

#: ../../whatsnew/3.8.rst:2285
msgid ""
"As of 3.8.10, Python now supports building and running on macOS 11 (Big "
"Sur) and on Apple Silicon Macs (based on the ``ARM64`` architecture). A "
"new universal build variant, ``universal2``, is now available to natively"
" support both ``ARM64`` and ``Intel 64`` in one set of executables. Note "
"that support for \"weaklinking\", building binaries targeted for newer "
"versions of macOS that will also run correctly on older versions by "
"testing at runtime for missing features, is not included in this backport"
" from Python 3.9; to support a range of macOS versions, continue to "
"target for and build on the oldest version in the range."
msgstr ""

#: ../../whatsnew/3.8.rst:2295
msgid ""
"(Originally contributed by Ronald Oussoren and Lawrence D'Anna in "
":issue:`41100`, with fixes by FX Coudert and Eli Rykoff, and backported "
"to 3.8 by Maxime B√©langer and Ned Deily)"
msgstr ""

#: ../../whatsnew/3.8.rst:2305
msgid ""
"The presence of newline or tab characters in parts of a URL allows for "
"some forms of attacks. Following the WHATWG specification that updates "
":rfc:`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters "
"are stripped from the URL by the parser in :mod:`urllib.parse` preventing"
" such attacks. The removal characters are controlled by a new module "
"level variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See "
":issue:`43882`)"
msgstr ""

#: ../../whatsnew/3.8.rst:2314
msgid "Notable changes in Python 3.8.12"
msgstr ""

#: ../../whatsnew/3.8.rst:2319
msgid ""
"Starting with Python 3.8.12 the :mod:`ipaddress` module no longer accepts"
" any leading zeros in IPv4 address strings. Leading zeros are ambiguous "
"and interpreted as octal notation by some libraries. For example the "
"legacy function :func:`socket.inet_aton` treats leading zeros as octal "
"notation. glibc implementation of modern :func:`~socket.inet_pton` does "
"not accept any leading zeros."
msgstr ""

#: ../../whatsnew/3.8.rst:2326
msgid ""
"(Originally contributed by Christian Heimes in :issue:`36384`, and "
"backported to 3.8 by Achraf Merzouki)"
msgstr ""

#: ../../whatsnew/changelog.rst:5
msgid "Changelog"
msgstr ""

#: ../../whatsnew/index.rst:5
msgid "What's New in Python"
msgstr ""

#: ../../whatsnew/index.rst:7
msgid ""
"The \"What's New in Python\" series of essays takes tours through the "
"most important changes between major Python versions.  They are a \"must "
"read\" for anyone wishing to stay up-to-date after a new release."
msgstr ""

#: ../../whatsnew/index.rst:32
msgid ""
"The \"Changelog\" is an HTML version of the `file built "
"<https://pypi.org/project/blurb>`_ from the contents of the "
":source:`Misc/NEWS.d` directory tree, which contains *all* nontrivial "
"changes to Python for the current version."
msgstr ""

